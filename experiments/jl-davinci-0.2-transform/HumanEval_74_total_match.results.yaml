language: jl
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1 = 0\n\
    \    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn2rnzevw.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpn2rnzevw.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2rnzevw.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2rnzevw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpn2rnzevw.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2rnzevw.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2rnzevw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpn2rnzevw.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2rnzevw.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2rnzevw.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6xlchi3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpk6xlchi3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqp0wi4jx.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpqp0wi4jx.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6xlchi3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpk6xlchi3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    total_lst1 = 0\n    total_lst2 = 0\n \
    \   for i in lst1\n        total_lst1 += length(i)\n    end\n    for i in lst2\n\
    \        total_lst2 += length(i)\n    end\n    if total_lst1 < total_lst2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6e_q5pwe.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp6e_q5pwe.jl:48\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6e_q5pwe.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6e_q5pwe.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2v76z2yi.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp2v76z2yi.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v76z2yi.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v76z2yi.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in 1:length(lst1)\n        total_chars_lst1\
    \ += length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_chars_lst2\
    \ += length(lst2[i])\n    end\n    if total_chars_lst1 < total_chars_lst2\n  \
    \      return lst1\n    elseif total_chars_lst1 > total_chars_lst2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpstkc07es.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpstkc07es.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstkc07es.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstkc07es.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpstkc07es.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstkc07es.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstkc07es.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ytplxvx.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp6ytplxvx.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1 = 0\n\
    \    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n        return\
    \ lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6dilewb0.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp6dilewb0.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp6dilewb0.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_chars_lst1 = 0\n    total_chars_lst2\
    \ = 0\n    for i in 1:length(lst1)\n        total_chars_lst1 += length(lst1[i])\n\
    \    end\n    for i in 1:length(lst2)\n        total_chars_lst2 += length(lst2[i])\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0 && length(lst2) !=\
    \ 0\n        return lst2\n    end\n    if length(lst1) != 0 && length(lst2) ==\
    \ 0\n        return lst1\n    end\n    if length(lst1) != 0 && length(lst2) !=\
    \ 0\n        if sum(length.(lst1)) < sum(length.(lst2))\n            return lst1\n\
    \        elseif sum(length.(lst1)) > sum(length.(lst2))\n            return lst2\n\
    \        else\n            return lst1\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpasig7apq.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpasig7apq.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpasig7apq.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasig7apq.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpasig7apq.jl:52\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpasig7apq.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasig7apq.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahey48kq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpahey48kq.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1 = 0\n\
    \    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n        return\
    \ lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6dilewb0.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp6dilewb0.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp6dilewb0.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in 1:length(lst1)\n        lst1_total +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        lst2_total +=\
    \ length(lst2[i])\n    end\n    if lst1_total < lst2_total\n        return lst1\n\
    \    elseif lst1_total > lst2_total\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8okjw_gf.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8okjw_gf.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8okjw_gf.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7swzwlad.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7swzwlad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8h8ac_bt.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8h8ac_bt.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8h8ac_bt.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eubxqn8.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp2eubxqn8.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2eubxqn8.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total1\
    \ = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt6tmzfe3.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpt6tmzfe3.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt6tmzfe3.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt6tmzfe3.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in 1:length(lst1)\n        lst1_total +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        lst2_total +=\
    \ length(lst2[i])\n    end\n    if lst1_total > lst2_total\n        return lst2\n\
    \    elseif lst1_total < lst2_total\n        return lst1\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi_sts455.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpi_sts455.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_sts455.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_sts455.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpi_sts455.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_sts455.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_sts455.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659799366
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ytplxvx.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp6ytplxvx.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    elseif total2 < total1\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo6x6perx.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpo6x6perx.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6x6perx.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6x6perx.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpo6x6perx.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6x6perx.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6x6perx.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6xlchi3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpk6xlchi3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eubxqn8.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp2eubxqn8.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2eubxqn8.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahey48kq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpahey48kq.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht0fm3fc.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpht0fm3fc.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht0fm3fc.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht0fm3fc.jl:47\ntest set: Test Failed at /tmp/tmpht0fm3fc.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht0fm3fc.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht0fm3fc.jl:47\ntest set: Test Failed at /tmp/tmpht0fm3fc.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht0fm3fc.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht0fm3fc.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in 1:length(lst1)\n        lst1_total +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        lst2_total +=\
    \ length(lst2[i])\n    end\n    if lst1_total < lst2_total\n        return lst1\n\
    \    elseif lst1_total > lst2_total\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8okjw_gf.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8okjw_gf.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8okjw_gf.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahey48kq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpahey48kq.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total == lst2_total\n        return lst1\n    end\n    if lst1_total <\
    \ lst2_total\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnt02b2ig.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpnt02b2ig.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt02b2ig.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt02b2ig.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpnt02b2ig.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt02b2ig.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt02b2ig.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659799366
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total1\
    \ = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt6tmzfe3.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpt6tmzfe3.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt6tmzfe3.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt6tmzfe3.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_uimb6gz.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp_uimb6gz.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_uimb6gz.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_uimb6gz.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test Failed at /tmp/tmp_uimb6gz.jl:51\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test Failed at /tmp/tmp_uimb6gz.jl:52\n\
    \  Expression"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqp0wi4jx.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpqp0wi4jx.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    lst1_total = 0\n    lst2_total = 0\n \
    \   for i in lst1\n        lst1_total += length(i)\n    end\n    for i in lst2\n\
    \        lst2_total += length(i)\n    end\n    if lst1_total == lst2_total\n \
    \       return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659799366
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total1\
    \ = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt6tmzfe3.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpt6tmzfe3.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt6tmzfe3.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt6tmzfe3.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total == lst2_total\n        return lst1\n    end\n    if lst1_total <\
    \ lst2_total\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnt02b2ig.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpnt02b2ig.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt02b2ig.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt02b2ig.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpnt02b2ig.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt02b2ig.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt02b2ig.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqp0wi4jx.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpqp0wi4jx.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    sum1\
    \ = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n \
    \   for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe8lbzo9r.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpe8lbzo9r.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe8lbzo9r.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe8lbzo9r.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    elseif total2 < total1\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo6x6perx.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpo6x6perx.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6x6perx.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6x6perx.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpo6x6perx.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6x6perx.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6x6perx.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = 0\n    total2 = 0\n   \
    \ for i in lst1\n        total1 += length(i)\n    end\n    for i in lst2\n   \
    \     total2 += length(i)\n    end\n    if total1 < total2\n        return lst1\n\
    \    elseif total1 > total2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659799366
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7swzwlad.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7swzwlad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1 = 0\n\
    \    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n        return\
    \ lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6dilewb0.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp6dilewb0.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp6dilewb0.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqp0wi4jx.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpqp0wi4jx.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in 1:length(lst1)\n        total_chars_lst1\
    \ += length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_chars_lst2\
    \ += length(lst2[i])\n    end\n    if total_chars_lst1 < total_chars_lst2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxdaiapvb.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpxdaiapvb.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\ntest set: Test Failed at /tmp/tmpxdaiapvb.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\ntest set: Test Failed at /tmp/tmpxdaiapvb.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqp0wi4jx.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpqp0wi4jx.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqp0wi4jx.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp0wi4jx.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp0wi4jx.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    lst1_total_chars\
    \ = 0\n    lst2_total_chars = 0\n    for i in lst1\n        lst1_total_chars +=\
    \ length(i)\n    end\n    for i in lst2\n        lst2_total_chars += length(i)\n\
    \    end\n    if lst1_total_chars < lst2_total_chars\n        return lst1\n  \
    \  elseif lst1_total_chars > lst2_total_chars\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659799366
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 > total_lst2\n        return lst2\n    elseif total_lst1 < total_lst2\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk_4kt_4y.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpk_4kt_4y.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_4kt_4y.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_4kt_4y.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpk_4kt_4y.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_4kt_4y.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_4kt_4y.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8h8ac_bt.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8h8ac_bt.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8h8ac_bt.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in 1:length(lst1)\n        total_lst1 +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_lst2 +=\
    \ length(lst2[i])\n    end\n    if total_lst1 < total_lst2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp544hxboe.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp544hxboe.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4eppen_1.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp4eppen_1.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4eppen_1.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4eppen_1.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppn_ofza5.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmppn_ofza5.jl:49\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppn_ofza5.jl:50\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7swzwlad.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7swzwlad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppn_ofza5.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmppn_ofza5.jl:49\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppn_ofza5.jl:50\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 > total_chars_lst2\n        return lst2\n  \
    \  else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquzx9rwl.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpquzx9rwl.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquzx9rwl.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquzx9rwl.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpquzx9rwl.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquzx9rwl.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquzx9rwl.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in 1:length(lst1)\n        total_lst1 +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_lst2 +=\
    \ length(lst2[i])\n    end\n    if total_lst1 < total_lst2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp544hxboe.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp544hxboe.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp77qaxrdz.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp77qaxrdz.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77qaxrdz.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77qaxrdz.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp77qaxrdz.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77qaxrdz.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77qaxrdz.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799369
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eubxqn8.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp2eubxqn8.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2eubxqn8.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659799367
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_uimb6gz.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp_uimb6gz.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_uimb6gz.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_uimb6gz.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test Failed at /tmp/tmp_uimb6gz.jl:51\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test Failed at /tmp/tmp_uimb6gz.jl:52\n\
    \  Expression"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahey48kq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpahey48kq.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4eppen_1.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp4eppen_1.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4eppen_1.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4eppen_1.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) > length(lst2)\n        return lst2\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcfdrov5u.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpcfdrov5u.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfdrov5u.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfdrov5u.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpcfdrov5u.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfdrov5u.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfdrov5u.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpcfdrov5u.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcfdrov5u.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcfdrov5u.jl:43\ntest set: Test Failed at /tmp/tmpcfdrov5u.jl:51\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcfdrov5u.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcfdrov5u.jl:43\ntest set: Test Failed at /tmp/tmpcfdrov5u.jl:52\n\
    \  Expression"
  timestamp: 1659799369
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ytplxvx.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp6ytplxvx.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in 1:length(lst1)\n        lst1_total +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        lst2_total +=\
    \ length(lst2[i])\n    end\n    if lst1_total < lst2_total\n        return lst1\n\
    \    elseif lst1_total > lst2_total\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8okjw_gf.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8okjw_gf.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8okjw_gf.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7swzwlad.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7swzwlad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7swzwlad.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7swzwlad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in 1:length(lst1)\n        total_chars_lst1\
    \ += length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_chars_lst2\
    \ += length(lst2[i])\n    end\n    if total_chars_lst1 < total_chars_lst2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxdaiapvb.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpxdaiapvb.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\ntest set: Test Failed at /tmp/tmpxdaiapvb.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\ntest set: Test Failed at /tmp/tmpxdaiapvb.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 == total2\n\
    \        return lst1\n    end\n    if total1 < total2\n        return lst1\n \
    \   end\n    return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa0pf2n4x.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpa0pf2n4x.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0pf2n4x.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0pf2n4x.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpa0pf2n4x.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0pf2n4x.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0pf2n4x.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799369
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in 1:length(lst1)\n        total_lst1 +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_lst2 +=\
    \ length(lst2[i])\n    end\n    if total_lst1 < total_lst2\n        return lst1\n\
    \    elseif total_lst1 > total_lst2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1c1b3f0u.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp1c1b3f0u.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c1b3f0u.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c1b3f0u.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp1c1b3f0u.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c1b3f0u.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c1b3f0u.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799369
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    elseif total2 < total1\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo6x6perx.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpo6x6perx.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6x6perx.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6x6perx.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpo6x6perx.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6x6perx.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6x6perx.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1\
    \ = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n \
    \   for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n  \
    \      return lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n  \
    \      return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwx_b8hel.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpwx_b8hel.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwx_b8hel.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwx_b8hel.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpwx_b8hel.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwx_b8hel.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwx_b8hel.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799369
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0 && length(lst2)\
    \ != 0\n        return lst2\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ != 0\n        if length(lst1) > length(lst2)\n            return lst2\n    \
    \    end\n        if length(lst1) < length(lst2)\n            return lst1\n  \
    \      end\n        if length(lst1) == length(lst2)\n            return lst1\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprypxj9lf.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmprypxj9lf.jl:47\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprypxj9lf.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprypxj9lf.jl:45\ntest set: Test\
    \ Failed at /tmp/tmprypxj9lf.jl:50\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprypxj9lf.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprypxj9lf.jl:45\ntest set: Test\
    \ Failed at /tmp/tmprypxj9lf.jl:51\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprypxj9lf.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprypxj9lf.jl:45\ntest set: Test Failed at /tmp/tmprypxj9lf.jl:53\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprypxj9lf.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprypxj9lf.jl:45\ntest set: Test Failed at /tmp/tmprypxj9lf.jl:54\n\
    \  Expression"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total == lst2_total\n        return lst1\n    end\n    if lst1_total <\
    \ lst2_total\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnt02b2ig.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpnt02b2ig.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt02b2ig.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt02b2ig.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpnt02b2ig.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt02b2ig.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt02b2ig.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8h8ac_bt.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8h8ac_bt.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8h8ac_bt.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    sum1\
    \ = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n \
    \   for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe8lbzo9r.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpe8lbzo9r.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe8lbzo9r.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe8lbzo9r.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in 1:length(lst1)\n        total_lst1 +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_lst2 +=\
    \ length(lst2[i])\n    end\n    if total_lst1 < total_lst2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp544hxboe.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp544hxboe.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6xlchi3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpk6xlchi3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7swzwlad.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7swzwlad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0 && length(lst2)\
    \ != 0\n        return lst2\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ != 0\n        if length(lst1) < length(lst2)\n            return lst1\n    \
    \    elseif length(lst1) > length(lst2)\n            return lst2\n        else\n\
    \            return lst1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprs__wtoq.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmprs__wtoq.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprs__wtoq.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprs__wtoq.jl:43\ntest set: Test\
    \ Failed at /tmp/tmprs__wtoq.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprs__wtoq.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprs__wtoq.jl:43\ntest set: Test\
    \ Failed at /tmp/tmprs__wtoq.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprs__wtoq.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprs__wtoq.jl:43\ntest set: Test Failed at /tmp/tmprs__wtoq.jl:51\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprs__wtoq.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprs__wtoq.jl:43\ntest set: Test Failed at /tmp/tmprs__wtoq.jl:52\n\
    \  Expression"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in 1:length(lst1)\n        total_lst1 +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_lst2 +=\
    \ length(lst2[i])\n    end\n    if total_lst1 < total_lst2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp544hxboe.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp544hxboe.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\ntest set: Test Failed at /tmp/tmp544hxboe.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp544hxboe.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp544hxboe.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahey48kq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpahey48kq.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpahey48kq.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahey48kq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahey48kq.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eubxqn8.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp2eubxqn8.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2eubxqn8.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc4mwbbno.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpc4mwbbno.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc4mwbbno.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc4mwbbno.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpc4mwbbno.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc4mwbbno.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc4mwbbno.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpc4mwbbno.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc4mwbbno.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc4mwbbno.jl:35\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ytplxvx.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp6ytplxvx.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp6ytplxvx.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ytplxvx.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ytplxvx.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcqis4b5q.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpcqis4b5q.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpcqis4b5q.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqis4b5q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqis4b5q.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in 1:length(lst1)\n        total_chars_lst1\
    \ += length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_chars_lst2\
    \ += length(lst2[i])\n    end\n    if total_chars_lst1 < total_chars_lst2\n  \
    \      return lst1\n    elseif total_chars_lst1 > total_chars_lst2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpstkc07es.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpstkc07es.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstkc07es.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstkc07es.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpstkc07es.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstkc07es.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstkc07es.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eubxqn8.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp2eubxqn8.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2eubxqn8.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659799366
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in 1:length(lst1)\n        total_chars_lst1\
    \ += length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_chars_lst2\
    \ += length(lst2[i])\n    end\n    if total_chars_lst1 < total_chars_lst2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxdaiapvb.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpxdaiapvb.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\ntest set: Test Failed at /tmp/tmpxdaiapvb.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\ntest set: Test Failed at /tmp/tmpxdaiapvb.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdaiapvb.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdaiapvb.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in 1:length(lst1)\n        total_chars_lst1\
    \ += length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        total_chars_lst2\
    \ += length(lst2[i])\n    end\n    if total_chars_lst1 < total_chars_lst2\n  \
    \      return lst1\n    elseif total_chars_lst1 > total_chars_lst2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphixvwsds.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmphixvwsds.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphixvwsds.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphixvwsds.jl:49\ntest set: Test\
    \ Failed at /tmp/tmphixvwsds.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphixvwsds.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphixvwsds.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eubxqn8.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp2eubxqn8.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2eubxqn8.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8h8ac_bt.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8h8ac_bt.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8h8ac_bt.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 > total_chars_lst2\n        return lst2\n  \
    \  else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquzx9rwl.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpquzx9rwl.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquzx9rwl.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquzx9rwl.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpquzx9rwl.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquzx9rwl.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquzx9rwl.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7swzwlad.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7swzwlad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7swzwlad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7swzwlad.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7swzwlad.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in 1:length(lst1)\n        lst1_total +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        lst2_total +=\
    \ length(lst2[i])\n    end\n    if lst1_total < lst2_total\n        return lst1\n\
    \    elseif lst1_total > lst2_total\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8okjw_gf.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8okjw_gf.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8okjw_gf.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8okjw_gf.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8okjw_gf.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2v76z2yi.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp2v76z2yi.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v76z2yi.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v76z2yi.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6xlchi3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpk6xlchi3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2eubxqn8.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp2eubxqn8.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp2eubxqn8.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2eubxqn8.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2eubxqn8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6xlchi3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpk6xlchi3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpk6xlchi3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6xlchi3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6xlchi3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_len\
    \ = 0\n    lst2_len = 0\n    for i in lst1\n        lst1_len += length(i)\n  \
    \  end\n    for i in lst2\n        lst2_len += length(i)\n    end\n    if lst1_len\
    \ == lst2_len\n        return lst1\n    end\n    if lst1_len < lst2_len\n    \
    \    return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwuw52d0f.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpwuw52d0f.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwuw52d0f.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwuw52d0f.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpwuw52d0f.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwuw52d0f.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwuw52d0f.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppn_ofza5.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmppn_ofza5.jl:49\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppn_ofza5.jl:50\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8h8ac_bt.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp8h8ac_bt.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp8h8ac_bt.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8h8ac_bt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8h8ac_bt.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in 1:length(lst1)\n        lst1_total +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        lst2_total +=\
    \ length(lst2[i])\n    end\n    if lst1_total < lst2_total\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgfi6fpaw.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpgfi6fpaw.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgfi6fpaw.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgfi6fpaw.jl:47\ntest set: Test Failed at /tmp/tmpgfi6fpaw.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgfi6fpaw.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgfi6fpaw.jl:47\ntest set: Test Failed at /tmp/tmpgfi6fpaw.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgfi6fpaw.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgfi6fpaw.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1\
    \ = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n \
    \   for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfmsxf81t.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpfmsxf81t.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfmsxf81t.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfmsxf81t.jl:47\ntest set: Test Failed at /tmp/tmpfmsxf81t.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfmsxf81t.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfmsxf81t.jl:47\ntest set: Test Failed at /tmp/tmpfmsxf81t.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfmsxf81t.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfmsxf81t.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total > lst2_total\n        return lst2\n    elseif lst1_total < lst2_total\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjl0ex3ag.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpjl0ex3ag.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl0ex3ag.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl0ex3ag.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpjl0ex3ag.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl0ex3ag.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl0ex3ag.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799370
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total1 =\
    \ 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp71n42a1x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp71n42a1x.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:55\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp71n42a1x.jl:56\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71n42a1x.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71n42a1x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q7v4pa3.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0q7v4pa3.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0q7v4pa3.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q7v4pa3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q7v4pa3.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp77qaxrdz.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp77qaxrdz.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77qaxrdz.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77qaxrdz.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp77qaxrdz.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77qaxrdz.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77qaxrdz.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799369
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kjusdzc.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp5kjusdzc.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp5kjusdzc.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kjusdzc.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kjusdzc.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_uimb6gz.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp_uimb6gz.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_uimb6gz.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_uimb6gz.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test Failed at /tmp/tmp_uimb6gz.jl:51\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_uimb6gz.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_uimb6gz.jl:43\ntest set: Test Failed at /tmp/tmp_uimb6gz.jl:52\n\
    \  Expression"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1 = 0\n\
    \    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n        return\
    \ lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6dilewb0.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp6dilewb0.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp6dilewb0.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6dilewb0.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6dilewb0.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppn_ofza5.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmppn_ofza5.jl:49\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppn_ofza5.jl:50\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn_ofza5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn_ofza5.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    total1\
    \ = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n    end\n\
    \    for i in lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt6tmzfe3.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpt6tmzfe3.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt6tmzfe3.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt6tmzfe3.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp424nyimf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp424nyimf.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:49\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp424nyimf.jl:51\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp424nyimf.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp424nyimf.jl:43\ntest set: Test\
    \ Faile"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8ff9tk.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpaz8ff9tk.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpaz8ff9tk.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaz8ff9tk.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaz8ff9tk.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht0fm3fc.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpht0fm3fc.jl:54\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht0fm3fc.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht0fm3fc.jl:47\ntest set: Test Failed at /tmp/tmpht0fm3fc.jl:55\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht0fm3fc.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht0fm3fc.jl:47\ntest set: Test Failed at /tmp/tmpht0fm3fc.jl:56\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht0fm3fc.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht0fm3fc.jl:47\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659799368
