name: HumanEval_11_string_xor
language: jl
prompt: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
  \ binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"\
  010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String, b::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
  111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\
  \t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
completions: ["    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n \
    \           c = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n\
    \    end\n    return c\nend", "    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs must be of equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend", "    c =\
    \ \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c *\
    \ \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend", "    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            c = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n\
    \    end\n    return c\nend", "    c = \"\"\n    for i in 1:length(a)\n      \
    \  if a[i] == b[i]\n            push!(c, \"0\")\n        else\n            push!(c,\
    \ \"1\")\n        end\n    end\n    return c\nend", "    if length(a) != length(b)\n\
    \        error(\"Input strings must be of equal length\")\n    end\n    result\
    \ = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            result\
    \ *= \"0\"\n        else\n            result *= \"1\"\n        end\n    end\n\
    \    return result\nend", "    c = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"\
    1\"\n        end\n    end\n    return c\nend", "    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c = c * \"0\"\n        else\n          \
    \  c = c * \"1\"\n        end\n    end\n    return c\nend", "    c = \"\"\n  \
    \  for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"0\"\n\
    \        else\n            c = c * \"1\"\n        end\n    end\n    return c\n\
    end", "    c = String[]\n    for i in 1:length(a)\n        if a[i] == b[i]\n \
    \           push!(c, \"0\")\n        else\n            push!(c, \"1\")\n     \
    \   end\n    end\n    return join(c)\nend", "    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c = c * \"0\"\n        else\n          \
    \  c = c * \"1\"\n        end\n    end\n    return c\nend", "    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    c = String[]\n    for i in 1:length(a)\n        if a[i] == b[i]\n \
    \           push!(c, \"0\")\n        else\n            push!(c, \"1\")\n     \
    \   end\n    end\n    return join(c)\nend", "    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c = c * \"0\"\n        else\n          \
    \  c = c * \"1\"\n        end\n    end\n    return c\nend", "    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend", "    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend", "    if length(a) != length(b)\n  \
    \      error(\"Inputs must be of equal length\")\n    end\n    c = \"\"\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"0\"\n     \
    \   else\n            c = c * \"1\"\n        end\n    end\n    return c\nend",
  "    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend", "    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length.\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend", "    if length(a)\
    \ != length(b)\n        error(\"Lengths of inputs must be equal\")\n    end\n\
    \    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n           \
    \ c = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend", "    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
