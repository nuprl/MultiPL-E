name: HumanEval_76_is_simple_power
language: jl
prompt: "\"\"\"Your task is to write a function that returns true if a number x is\
  \ a simple\n    power of n and false in other cases.\n    x is a simple power of\
  \ n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n   \
  \ >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
  \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n\
  \    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
  \ n::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
  \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
  \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
  \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
  \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
  end\n"
completions: ["    return x == n^(Int64(log(x)/log(n)))\nend", "    return x == n^(Int64(log(x)/log(n)))\n\
    end", "    if x == 1\n        return true\n    elseif x == n\n        return true\n\
    \    elseif x % n == 0\n        return is_simple_power(x/n, n)\n    else\n   \
    \     return false\n    end\nend", "    if x == 1\n        return true\n    elseif\
    \ x == n\n        return true\n    elseif x < n\n        return false\n    else\n\
    \        return is_simple_power(x/n, n)\n    end\nend", "    if x == 1\n     \
    \   return true\n    elseif x % n != 0\n        return false\n    else\n     \
    \   return is_simple_power(x/n, n)\n    end\nend", "    if x == n\n        return\
    \ true\n    elseif x % n != 0\n        return false\n    else\n        return\
    \ is_simple_power(x/n, n)\n    end\nend", "    return x == n^(floor(log(x)/log(n)))\n\
    end", "    return x == n^(round(log(x)/log(n)))\nend", "    return x == n^(Int64(log(x)/log(n)))\n\
    end", "    if x == 1\n        return true\n    elseif x == n\n        return true\n\
    \    elseif x % n == 0\n        return is_simple_power(x/n, n)\n    else\n   \
    \     return false\n    end\nend", "    return x == n^(round(log(x)/log(n)))\n\
    end", "    if x == 1\n        return true\n    elseif x == n\n        return true\n\
    \    elseif x % n == 0\n        return is_simple_power(x/n, n)\n    else\n   \
    \     return false\n    end\nend", "    if n == 1\n        return true\n    end\n\
    \    if x == 1\n        return true\n    end\n    if x == n\n        return true\n\
    \    end\n    if x < n\n        return false\n    end\n    if x % n != 0\n   \
    \     return false\n    end\n    return is_simple_power(x/n, n)\nend", "    if\
    \ x == 1\n        return true\n    elseif x == n\n        return true\n    elseif\
    \ x % n == 0\n        return is_simple_power(x/n, n)\n    else\n        return\
    \ false\n    end\nend", "    if x == 1\n        return true\n    elseif x == n\n\
    \        return true\n    elseif x % n == 0\n        return is_simple_power(x/n,\
    \ n)\n    else\n        return false\n    end\nend", "    if (x == 1)\n      \
    \  return true\n    elseif (x == n)\n        return true\n    elseif (x % n !=\
    \ 0)\n        return false\n    else\n        return is_simple_power(x/n, n)\n\
    \    end\nend", "    if x == n\n        return true\n    elseif x % n != 0\n \
    \       return false\n    else\n        return is_simple_power(x/n, n)\n    end\n\
    end", "    if x == n^(round(log(x)/log(n)))\n        return true\n    else\n \
    \       return false\n    end\nend", "    return x == n^(round(log(x)/log(n)))\n\
    end", "    return x == n^(Int64(log(x)/log(n)))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
