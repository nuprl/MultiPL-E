name: HumanEval_95_check_dict_case
language: jl
prompt: "\"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
  \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8 =>\
  \ \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"Name\"\
  \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n    >>>\
  \ check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    true\n \
  \   \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    lower_keys = true\n    upper_keys = true\n    for (key, value)\
    \ in dict\n        if !islower(key)\n            lower_keys = false\n        end\n\
    \        if !isupper(key)\n            upper_keys = false\n        end\n    end\n\
    \    return lower_keys || upper_keys\nend", "    lower_case = true\n    upper_case\
    \ = true\n    for (key, value) in dict\n        if islower(key[1])\n         \
    \   upper_case = false\n        elseif isupper(key[1])\n            lower_case\
    \ = false\n        else\n            return false\n        end\n    end\n    return\
    \ lower_case || upper_case\nend", "    lower_keys = true\n    upper_keys = true\n\
    \    for key in keys(dict)\n        if !islower(key)\n            lower_keys =\
    \ false\n        end\n        if !isupper(key)\n            upper_keys = false\n\
    \        end\n    end\n    return lower_keys || upper_keys\nend", "    lower_case\
    \ = true\n    upper_case = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end", "    # check if all keys are lower case\n    all_lower = true\n    for key\
    \ in keys(dict)\n        if !isascii(key) || !islower(key)\n            all_lower\
    \ = false\n            break\n        end\n    end\n    if all_lower\n       \
    \ return true\n    end\n    # check if all keys are upper case\n    all_upper\
    \ = true\n    for key in keys(dict)\n        if !isascii(key) || !isupper(key)\n\
    \            all_upper = false\n            break\n        end\n    end\n    if\
    \ all_upper\n        return true\n    end\n    return false\nend", "    if length(dict)\
    \ == 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n    \
    \    return true\n    elseif all(islower.(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend", "    # YOUR CODE HERE\n    return\
    \ true\nend", "    lower_keys = true\n    upper_keys = true\n    for key in keys(dict)\n\
    \        if !islower(key)\n            lower_keys = false\n        end\n     \
    \   if !isupper(key)\n            upper_keys = false\n        end\n    end\n \
    \   return lower_keys || upper_keys\nend", "    lower_case = true\n    upper_case\
    \ = true\n    for (key, value) in dict\n        if !islower(key)\n           \
    \ lower_case = false\n        end\n        if !isupper(key)\n            upper_case\
    \ = false\n        end\n    end\n    return lower_case || upper_case\nend", " \
    \   lower_keys = true\n    upper_keys = true\n    for key in keys(dict)\n    \
    \    if !islower(key)\n            lower_keys = false\n        end\n        if\
    \ !isupper(key)\n            upper_keys = false\n        end\n    end\n    return\
    \ lower_keys || upper_keys\nend", "    lower_keys = [key for key in keys(dict)\
    \ if key == lowercase(key)]\n    upper_keys = [key for key in keys(dict) if key\
    \ == uppercase(key)]\n    return length(dict) == length(lower_keys) || length(dict)\
    \ == length(upper_keys)\nend", "    # check if the dictionary is empty\n    if\
    \ isempty(dict)\n        return false\n    end\n    # check if all keys are lower\
    \ case\n    if all(isascii(x) && islower(x) for x in keys(dict))\n        return\
    \ true\n    # check if all keys are upper case\n    elseif all(isascii(x) && isupper(x)\
    \ for x in keys(dict))\n        return true\n    else\n        return false\n\
    \    end\nend", "    lower_keys = true\n    upper_keys = true\n    for key in\
    \ keys(dict)\n        if !islower(key)\n            lower_keys = false\n     \
    \   end\n        if !isupper(key)\n            upper_keys = false\n        end\n\
    \    end\n    return lower_keys || upper_keys\nend", "    lower_case_keys = true\n\
    \    upper_case_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case_keys = false\n        end\n        if !isupper(key)\n\
    \            upper_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ || upper_case_keys\nend", "    lower_case = true\n    upper_case = true\n  \
    \  for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend", "    lower_keys\
    \ = [key for key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key\
    \ for key in keys(dict) if key == uppercase(key)]\n    return length(lower_keys)\
    \ == length(dict) || length(upper_keys) == length(dict)\nend", "    # check if\
    \ the dictionary is empty\n    if length(dict) == 0\n        return false\n  \
    \  end\n    # check if all keys are in lower case\n    if all(lowercase.(collect(keys(dict))))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(collect(keys(dict))))\n\
    \        return true\n    else\n        return false\n    end\nend", "    lower_case_keys\
    \ = true\n    upper_case_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case_keys = false\n        end\n        if !isupper(key)\n\
    \            upper_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ || upper_case_keys\nend", "    lower_keys = true\n    upper_keys = true\n  \
    \  for key in keys(dict)\n        if !islower(key)\n            lower_keys = false\n\
    \        end\n        if !isupper(key)\n            upper_keys = false\n     \
    \   end\n    end\n    return lower_keys || upper_keys\nend", "    lower = true\n\
    \    upper = true\n    for key in keys(dict)\n        if !islower(key)\n     \
    \       lower = false\n        end\n        if !isupper(key)\n            upper\
    \ = false\n        end\n    end\n    return lower || upper\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
