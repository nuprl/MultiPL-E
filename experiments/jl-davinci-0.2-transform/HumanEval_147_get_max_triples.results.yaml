language: jl
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_j_h4bgb.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp_j_h4bgb.jl:33\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:34\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:35\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:36\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n   \
    \         for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n \
    \                   count += 1\n                end\n            end\n       \
    \ end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n \
    \           for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum(a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2, j\
    \ in i+1:n-1, k in j+1:n)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgplcnkkw.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgplcnkkw.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkkw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgplcnkkw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgplcnkkw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkkw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgplcnkkw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgplcnkkw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkkw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgplcnkkw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgplcnkkw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkk"
  timestamp: 1659797916
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_j_h4bgb.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp_j_h4bgb.jl:33\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:34\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:35\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:36\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n \
    \           for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    sum_triples = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    sum_triples += 1\n                end\n            end\n\
    \        end\n    end\n    return sum_triples\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    triples = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n\
    \                    triples += 1\n                end\n            end\n    \
    \    end\n    end\n    return triples\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpslrdowg9.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpslrdowg9.jl:33\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpslrdowg9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpslrdowg9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpslrdowg9.jl:34\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpslrdowg9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpslrdowg9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpslrdowg9.jl:35\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpslrdowg9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpslrdowg9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpslrdowg9.jl:36\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpslrdowg9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpslrdowg9.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659797915
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = Array{Int64}(undef,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    triples = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    triples +=\
    \ 1\n                end\n            end\n        end\n    end\n    return triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n, j in\
    \ i+1:n, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpessyic51.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpessyic51.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpessyic51.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpessyic51.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpessyic51.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpessyic51.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpessyic51.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpessyic51.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpessyic51.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpessyic51.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpessyic51.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpessyic51.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpessyic51.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpessyic51.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpessyic51.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpessyic5"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n \
    \           for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum(a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2, j\
    \ in i+1:n-1, k in j+1:n)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgplcnkkw.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgplcnkkw.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkkw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgplcnkkw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgplcnkkw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkkw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgplcnkkw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgplcnkkw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkkw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgplcnkkw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgplcnkkw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpgplcnkkw.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgplcnkk"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i * i - i +\
    \ 1 for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_j_h4bgb.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp_j_h4bgb.jl:33\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:34\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:35\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_j_h4bgb.jl:36\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_h4bgb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_h4bgb.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2, j\
    \ in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgdphgjvl.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgdphgjvl.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjv"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n \
    \           for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    cnt = 0\n   \
    \ for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0\n                    cnt += 1\n \
    \               end\n            end\n        end\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i = 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797913
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2, j\
    \ in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgdphgjvl.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgdphgjvl.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjv"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return length([(a[i], a[j], a[k]) for i in 1:n-2, j in i+1:n-1,\
    \ k in j+1:n if (a[i] + a[j] + a[k]) % 3 == 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp53deaq45.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp53deaq45.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp53deaq45.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53deaq45.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53deaq45.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp53deaq45.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp53deaq45.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53deaq45.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53deaq45.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp53deaq45.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp53deaq45.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53deaq45.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53deaq45.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp53deaq45.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp53deaq45.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53deaq4"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n \
    \           for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n   \
    \         for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n \
    \                   count += 1\n                end\n            end\n       \
    \ end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i * i - i +\
    \ 1 for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2,\
    \ j in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t\
    @test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzj093sp2.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpzj093sp2.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpzj093sp2.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzj093sp2.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzj093sp2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpzj093sp2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpzj093sp2.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzj093sp2.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzj093sp2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpzj093sp2.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpzj093sp2.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzj093sp2.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzj093sp2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpzj093sp2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpzj093sp2.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzj093sp"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2, j\
    \ in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgdphgjvl.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgdphgjvl.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjv"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2, j\
    \ in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgdphgjvl.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgdphgjvl.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjvl.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdphgjvl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgdphgjvl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpgdphgjvl.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdphgjv"
  timestamp: 1659797916
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659797914
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    count +=\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
