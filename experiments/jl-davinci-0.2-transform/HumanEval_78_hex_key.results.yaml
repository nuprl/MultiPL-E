language: jl
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    if num == \"A\" || num == \"B\" || num == \"D\"\n        return 1\n    end\n\
    \    if num == \"2\" || num == \"3\" || num == \"5\" || num == \"7\"\n       \
    \ return 1\n    end\n    if num == \"1077E\"\n        return 2\n    end\n    if\
    \ num == \"ABED1A33\"\n        return 4\n    end\n    if num == \"123456789ABCDEF0\"\
    \n        return 6\n    end\n    if num == \"2020\"\n        return 2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpibq4p8ju.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpibq4p8ju.jl:51\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpibq4p8ju.jl:43\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibq4p8ju.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibq4p8ju.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpibq4p8ju.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpibq4p8ju.jl:43\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibq4p8ju.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp10u8s6ii.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp10u8s6ii.jl:37\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10u8s6ii.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10u8s6ii.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp10u8s6ii.jl:38\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10u8s6ii.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10u8s6ii.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp10u8s6ii.jl:39\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10u8s6ii.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10u8s6ii.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp10u8s6ii.jl:40\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10u8s6ii.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10u8s6ii.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp10u8s6ii.jl:41\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    keys = [2, 3, 5, 7, 11, 13]\n    hex_keys\
    \ = [string(i) for i in keys]\n    hex_keys = join(hex_keys, \"\")\n    hex_keys\
    \ = join([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], \"\")\n    hex_keys = join(hex_keys,\
    \ \"\")\n    count = 0\n    for i in num\n        if i in hex_keys\n         \
    \   count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7crrxohs.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp7crrxohs.jl:42\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7crrxohs.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7crrxohs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp7crrxohs.jl:43\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7crrxohs.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7crrxohs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp7crrxohs.jl:44\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7crrxohs.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7crrxohs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp7crrxohs.jl:45\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7crrxohs.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7crrxohs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp7crrxohs.jl:46\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 16 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @"
- exit_code: 0
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    count =\
    \ 0\n    for i in num\n        if i in \"2357BD\"\n            count += 1\n  \
    \      end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # convert hexadecimal to decimal\n    dec\
    \ = parse(Int64, num, base=16)\n    # convert decimal to binary\n    bin = dec2bin(dec)\n\
    \    # count number of 1s in binary\n    count = count_ones(bin)\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpo_rtr8jz.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpo_rtr8jz.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: dec2bin not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpo_rtr8jz.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_rtr8jz.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_rtr8jz.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpo_rtr8jz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpo_rtr8jz.jl:27\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_rtr8jz.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_rtr8jz.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpo_rtr8jz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpo_rtr8jz.jl:27\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_rtr8jz.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_rtr8jz.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpo_rtr8jz.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpo_rtr8jz.jl:27\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    primes = [2, 3, 5,\
    \ 7, 11, 13]\n    count = 0\n    for i in 1:length(num)\n        if num[i] in\
    \ primes\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq5cu88oq.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpq5cu88oq.jl:42\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5cu88oq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5cu88oq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpq5cu88oq.jl:43\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5cu88oq.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5cu88oq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpq5cu88oq.jl:44\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5cu88oq.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5cu88oq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpq5cu88oq.jl:45\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5cu88oq.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5cu88oq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpq5cu88oq.jl:46\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    return\
    \ length(filter(x -> x in primes, map(x -> parse(Int64, x), collect(num))))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9rx48429.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp9rx48429.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n    [1] parse(::Type{Int64}, c::Char; base::Int64)\n   \
    \   @ Base ./parse.jl:46\n    [2] parse\n      @ ./parse.jl:41 [inlined]\n   \
    \ [3] #2\n      @ /tmp/tmp9rx48429.jl:25 [inlined]\n    [4] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [5] _collect(c::Vector{Char}, itr::Base.Generator{Vector{Char},\
    \ var\"#2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [7] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [8] hex_key(num::String)\n\
    \      @ Main /tmp/tmp9rx48429.jl:25\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp9rx48429.jl:32 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp9rx48429.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9rx48429.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E'\n  Stacktrace:\n\
    \    [1] parse(::Type{Int64}, c::Char; base::Int64)\n      @ Base ./parse.jl:46\n\
    \    [2] parse\n      @ ./parse.jl:41 [inlined]\n    [3] #2\n      @ /tmp/tmp9rx48429.jl:25\
    \ [inlined]\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n    [5] collect_to!\n\
    \      @ ./array.jl:782 [inlined]\n    [6] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [7] _collect(c::Vector{Char}, itr::Base.Generator{Vector{Char},\
    \ var\"#2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:754\n    [8] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [9] map\n      @ ./abstractarray.jl:2867 [inlined]\n   [10] hex_key(num::String)\n\
    \      @ Main /tmp/tmp9rx48429.jl:25\n   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    count =\
    \ 0\n    for i in num\n        if i in \"2357BDF\"\n            count += 1\n \
    \       end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8ocvfz8n.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp8ocvfz8n.jl:42\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ocvfz8n.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ocvfz8n.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8ocvfz8n.jl:43\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ocvfz8n.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ocvfz8n.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 0
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    count =\
    \ 0\n    for i in num\n        if i in \"2357BD\"\n            count += 1\n  \
    \      end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc5tkbe9a.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpc5tkbe9a.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5tkbe9a.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5tkbe9a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc5tkbe9a.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5tkbe9a.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5tkbe9a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc5tkbe9a.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5tkbe9a.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5tkbe9a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc5tkbe9a.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5tkbe9a.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5tkbe9a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc5tkbe9a.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    return sum(isprime(parse(Int64, i)) for i in num)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp_nu11d8o.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_nu11d8o.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n    [1] parse(::Type{Int64}, c::Char; base::Int64)\n   \
    \   @ Base ./parse.jl:46\n    [2] parse\n      @ ./parse.jl:41 [inlined]\n   \
    \ [3] (::var\"#1#2\")(i::Char)\n      @ Main ./none:0\n    [4] MappingRF\n   \
    \   @ ./reduce.jl:95 [inlined]\n    [5] _foldl_impl(op::Base.MappingRF{var\"#1#2\"\
    , Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::String)\n\
    \      @ Base ./reduce.jl:58\n    [6] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [7] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n\
    \      @ ./reduce.jl:162 [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162\
    \ [inlined]\n   [10] #mapreduce#248\n      @ ./reduce.jl:289 [inlined]\n   [11]\
    \ mapreduce\n      @ ./reduce.jl:289 [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503\
    \ [inlined]\n   [13] sum\n      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n\
    \      @ ./reduce.jl:532 [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n\
    \   [16] hex_key(num::String)\n      @ Main /tmp/tmp_nu11d8o.jl:27\n   [17] macro\
    \ expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [18] macro expansion\n      @ /tmp/tmp_nu11d8o.jl:34 [inlined]\n\
    \   [19] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmp_nu11d8o.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_nu11d8o.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(i::Char)\n      @ Main ./none:0\n    [2] MappingRF\n\
    \      @ ./reduce.jl:95 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#2\", Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::String)\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n\
    \      @ ."
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2lovmf85.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2lovmf85.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2lovmf85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2lovmf85.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2lovmf85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2lovmf85.jl:30\ntest "
