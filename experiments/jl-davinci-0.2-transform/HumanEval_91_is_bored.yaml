name: HumanEval_91_is_bored
language: jl
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The\
  \ sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["    return length(split(S, r\"[.?!]\")) - length(split(S, r\"[.?!]\
    \ I\"))\nend", "    words = split(S, \" \")\n    boredoms = 0\n    for word in\
    \ words\n        if word == \"I\"\n            boredoms += 1\n        end\n  \
    \  end\n    return boredoms\nend", "    s = split(S, \".\")\n    boredoms = 0\n\
    \    for i in s\n        if i[1] == 'I'\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend", "    return length(split(S, r\"\\bI\\b\"\
    )) - 1\nend", "    return length(split(S, r\"\\bI\\b\")) - 1\nend", "    # Split\
    \ the string by '.', '?' or '!'\n    sentences = split(S, r\"[.?!]\")\n    # Filter\
    \ the sentences that start with 'I'\n    boredoms = filter(s -> startswith(s,\
    \ \"I\"), sentences)\n    # Return the length of the filtered sentences\n    return\
    \ length(boredoms)\nend", "    # Split the string into sentences\n    sentences\
    \ = split(S, r\"[.?!]\")\n    # Filter out the sentences that start with \"I\"\
    \n    boredoms = filter(x -> startswith(x, \"I\"), sentences)\n    # Return the\
    \ number of boredoms\n    return length(boredoms)\nend", "    count = 0\n    for\
    \ i in split(S, \".\")\n        if i[1] == 'I'\n            count += 1\n     \
    \   end\n    end\n    return count\nend", "    count = 0\n    for i in split(S,\
    \ ['.', '?', '!'])\n        if i[1] == 'I'\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    # Split the string into sentences\n   \
    \ sentences = split(S, r\"[.?!]\")\n    # Count the number of sentences that start\
    \ with \"I\"\n    return sum(s->startswith(s, \"I\") ? 1 : 0, sentences)\nend",
  "    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    sentences = split(S, r\"[.?!]\")\n    boredoms = 0\n    for sentence\
    \ in sentences\n        if startswith(sentence, \"I\")\n            boredoms +=\
    \ 1\n        end\n    end\n    return boredoms\nend", "    return length(split(S,\
    \ r\"\\.|\\?|\\!\")) - 1\nend", "    # your code here\n    return 0\nend", " \
    \   sentences = split(S, ['.', '?', '!'])\n    boredoms = 0\n    for sentence\
    \ in sentences\n        if startswith(sentence, \"I\")\n            boredoms +=\
    \ 1\n        end\n    end\n    return boredoms\nend", "    count = 0\n    for\
    \ i in 1:length(S)\n        if S[i] == 'I'\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    return length(split(S, r\"\\s*[.?!]\\s*\"\
    )[1:end])\nend", "    # Split the string into sentences\n    sentences = split(S,\
    \ r\"[.?!]\")\n    # Count the number of sentences that start with \"I\"\n   \
    \ count = 0\n    for sentence in sentences\n        if startswith(sentence, \"\
    I\")\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    for i in split(S, \".\")\n        if i[1] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend", "    # Split the\
    \ string into sentences\n    sentences = split(S, r\"[.?!]\")\n    # Count the\
    \ number of sentences that start with \"I\"\n    return count(s -> startswith(s,\
    \ \"I\"), sentences)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
