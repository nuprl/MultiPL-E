language: jl
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2n3kneou.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp2n3kneou.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2n3kneou.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2n3kneou.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2n3kneou.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2n3kneou.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2n3kneou.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2n3kneou.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg1jouv1r.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpg1jouv1r.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg1jouv1r.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg1jouv1r.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpoitj53tm.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpoitj53tm.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoitj53tm.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoitj53tm.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpoitj53tm.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpoitj53tm.jl:35\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoitj53tm.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoitj53tm.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr9d4q2v2.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpr9d4q2v2.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14f07vp2.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp14f07vp2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14f07vp2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14f07vp2.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14f07vp2.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp14f07vp2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14f07vp2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14f07vp2.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa46q1bd0.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpa46q1bd0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa46q1bd0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa46q1bd0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwn5zsczo.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpwn5zsczo.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwn5zsczo.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwn5zsczo.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpwn5zsczo.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwn5zsczo.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpwn5zsczo.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwn5zsczo.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg1jouv1r.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpg1jouv1r.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg1jouv1r.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg1jouv1r.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg1jouv1r.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpg1jouv1r.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg1jouv1r.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg1jouv1r.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1jouv1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1jouv1r.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr9d4q2v2.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpr9d4q2v2.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa46q1bd0.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpa46q1bd0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa46q1bd0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa46q1bd0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr9d4q2v2.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpr9d4q2v2.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpoitj53tm.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpoitj53tm.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoitj53tm.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoitj53tm.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpoitj53tm.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpoitj53tm.jl:35\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoitj53tm.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoitj53tm.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr9d4q2v2.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpr9d4q2v2.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr9d4q2v2.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9d4q2v2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9d4q2v2.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14f07vp2.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp14f07vp2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14f07vp2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14f07vp2.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3kai62eu.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp3kai62eu.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3kai62eu.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3kai62eu.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa46q1bd0.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpa46q1bd0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa46q1bd0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa46q1bd0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzhd2seae.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpzhd2seae.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzhd2seae.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzhd2seae.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa46q1bd0.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpa46q1bd0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa46q1bd0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa46q1bd0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
