language: jl
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    # your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmphlc5u8fw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmphlc5u8fw.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmphlc5u8fw.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphlc5u8fw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphlc5u8fw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphlc5u8fw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmphlc5u8fw.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n "
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    # Your\
    \ code here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6v0q2o1d.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp6v0q2o1d.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6v0q2o1d.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6v0q2o1d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6v0q2o1d.jl:24\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6v0q2o1d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6v0q2o1d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6v0q2o1d.jl:25\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6v0q2o1d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6v0q2o1d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6v0q2o1d.jl:26\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6v0q2o1d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6v0q2o1d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6v0q2o1d.jl:29\n  Expression: ca"
- exit_code: 0
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = []\n    while\
    \ length(lst) > 0\n        push!(res, lst[1])\n        lst = lst[2:end]\n    \
    \    if length(lst) > 0\n            push!(res, lst[end])\n            lst = lst[1:end-1]\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qcf5twq.jl:1\nin expression starting at /tmp/tmp5qcf5twq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    min_val = minimum(lst)\n    max_val =\
    \ maximum(lst)\n    if min_val == max_val\n        return lst\n    end\n    min_index\
    \ = findfirst(lst, min_val)\n    max_index = findfirst(lst, max_val)\n    lst[min_index]\
    \ = max_val\n    lst[max_index] = min_val\n    return [lst[1]] * strange_sort_list(lst[2:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpjm7_u57i.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpjm7_u57i.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: no method\
    \ matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n  \
    \  findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpjm7_u57i.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm7_u57i.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm7_u57i.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpjm7_u57i.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching\
    \ findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpjm7_u57i.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm7_u57i.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm7_u57i.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpjm7_u57i.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  MethodError: no m"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_sorted = sort(lst_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed = reverse(lst_sorted_reversed_sorted)\n\
    \    return lst_sorted_reversed_sorted_reversed\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpefzee503.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpefzee503.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:35\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    sorted_lst = sort(lst)\n    res = Vector{Int64}(undef,\
    \ length(lst))\n    res[1] = sorted_lst[1]\n    res[2] = sorted_lst[end]\n   \
    \ for i in 3:length(lst)\n        if i % 2 == 0\n            res[i] = sorted_lst[i//2]\n\
    \        else\n            res[i] = sorted_lst[end-i//2+1]\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpl6ipz9z9.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpl6ipz9z9.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  ArgumentError: invalid\
    \ index: 7//2 of type Rational{Int64}\n  Stacktrace:\n    [1] to_index(i::Rational{Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpl6ipz9z9.jl:26\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl6ipz9z9.jl:36 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpl6ipz9z9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpl6ipz9z9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: invalid index:\
    \ 9//2 of type Rational{Int64}\n  Stacktrace:\n    [1] to_index(i::Rational{Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpl6ipz9z9.jl:26\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl6ipz9z9.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpl6ipz9z9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpl6ipz9z9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_padded = vcat(lst_sorted_reversed,\
    \ [0])\n    lst_sorted_padded = vcat(lst_sorted, [0])\n    lst_sorted_reversed_padded_shifted\
    \ = circshift(lst_sorted_reversed_padded, 1)\n    lst_sorted_padded_shifted =\
    \ circshift(lst_sorted_padded, 1)\n    lst_sorted_reversed_padded_shifted_masked\
    \ = lst_sorted_reversed_padded_shifted .* (lst_sorted_reversed_padded_shifted\
    \ .> 0)\n    lst_sorted_padded_shifted_masked = lst_sorted_padded_shifted .* (lst_sorted_padded_shifted\
    \ .> 0)\n    lst_sorted_reversed_padded_shifted_masked_masked = lst_sorted_reversed_padded_shifted_masked\
    \ .* (lst_sorted_reversed_padded_shifted_masked .> 0)\n    lst_sorted_padded_shifted_masked_masked\
    \ = lst_sorted_padded_shifted_masked .* (lst_sorted_padded_shifted_masked .> 0)\n\
    \    lst_sorted_reversed_padded_shifted_masked_masked_masked = lst_sorted_reversed_padded_shifted_masked_masked\
    \ .* (lst_sorted_reversed_padded_shifted_masked_masked .> 0)\n    lst_sorted_padded_shifted_masked_masked_masked\
    \ = lst_sorted_padded_shifted_masked_masked .\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"lst_sorted_padded_shifted_masked_masked\
    \ .\" at /tmp/tmp_xhqrxyx.jl:29\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_xhqrxyx.jl:29\n\
    in expression starting at /tmp/tmp_xhqrxyx.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return lst\n    end\n    if length(lst)\
    \ == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n    if length(lst) ==\
    \ 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n    end\n    if length(lst)\
    \ == 5\n        return [lst[1], lst[5], lst[2], lst[4], lst[3]]\n    end\n   \
    \ if length(lst) == 6\n        return [lst[1], lst[6], lst[2], lst[5], lst[3],\
    \ lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1], lst[7], lst[2],\
    \ lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst) == 8\n        return\
    \ [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]]\n    end\n\
    \    if length(lst) == 9\n        return [lst[1], lst[9], lst[2], lst[8], lst[3],\
    \ lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst) == 10\n       \
    \ return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4], lst[7], lst[5],\
    \ lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1], lst[11],\
    \ lst[2], lst[10], lst[3], lst[9], lst[4], lst[8], lst[5], lst[\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6q5s31n4.jl:1\nin expression starting at /tmp/tmp6q5s31n4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    result = Vector{Int64}(undef,\
    \ length(lst))\n    for i in 1:2:length(lst)\n        result[i] = lst[i]\n   \
    \ end\n    for i in 2:2:length(lst)\n        result[i] = lst[length(lst) - i +\
    \ 1]\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsr7dq8hr.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpsr7dq8hr.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr7dq8hr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr7dq8hr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsr7dq8hr.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr7dq8hr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr7dq8hr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsr7dq8hr.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr7dq8hr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr7dq8hr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsr7dq8hr.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsr7dq8hr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsr7dq8hr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsr7dq8hr.jl:39\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst = sort(lst)\n    lst_len = length(lst)\n\
    \    if lst_len % 2 == 0\n        lst_len = lst_len - 1\n    end\n    for i in\
    \ 1:2:lst_len\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    end\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzl_90x7b.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpzl_90x7b.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 1, 4, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzl_90x7b.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzl_90x7b.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpzl_90x7b.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n   \
    \  @ Main /tmp/tmpzl_90x7b.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzl_90x7b.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzl_90x7b.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzl_90x7b.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n   \
    \  @ Main /tmp/tmpzl_90x7b.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzl_90x7b.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzl_90x7b.jl:32\ntest set:\
    \ Test Failed at /tmp/tmpzl_90x7b.jl:36\n  Expression: candidate([5, 6, 7, 8,\
    \ 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 7, 6, 9, 8] == [1, 9, 5,\
    \ 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ ~/."
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    min_val = minimum(lst)\n    max_val = maximum(lst)\n    lst = deleteat!(lst,\
    \ findall(lst .== min_val))\n    lst = deleteat!(lst, findall(lst .== max_val))\n\
    \    return [min_val, max_val] .* strange_sort_list(lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpskh0v99r.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpskh0v99r.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 12] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskh0v99r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskh0v99r.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpskh0v99r.jl:36\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [210, 504] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskh0v99r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskh0v99r.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpskh0v99r.jl:37\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [6, 60] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskh0v99r.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskh0v99r.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpskh0v99r.jl:38\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [30, 504] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskh0v99r.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskh0v99r.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpskh0v99r.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n"
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    if length(lst) == 1\n        return lst\n  \
    \  end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n  \
    \  if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n   \
    \ if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n    end\n\
    \    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4], lst[3]]\n\
    \    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2], lst[5],\
    \ lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1], lst[7],\
    \ lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst) == 8\n\
    \        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]]\n\
    \    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2], lst[8],\
    \ lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst) == 10\n\
    \        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4], lst[7],\
    \ lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcf9__o5.jl:52\nin expression starting at\
    \ /tmp/tmpzcf9__o5.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_removed = pop!(lst_sorted_reversed)\n\
    \    lst_sorted_removed = pop!(lst_sorted)\n    lst_sorted_removed_reversed =\
    \ reverse(lst_sorted_removed)\n    lst_sorted_removed_reversed_removed = pop!(lst_sorted_removed_reversed)\n\
    \    lst_sorted_removed_removed = pop!(lst_sorted_removed)\n    return [lst_sorted_removed_removed,\
    \ lst_sorted_removed_reversed_removed, lst_sorted_removed_reversed, lst_sorted_reversed_removed,\
    \ lst_sorted_reversed]\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpscl56510.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpscl56510.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: no method\
    \ matching reverse(::Int64)\n  Closest candidates are:\n    reverse(!Matched::Tuple)\
    \ at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:485\n    reverse(!Matched::Pair{A,\
    \ B}) where {A, B} at ~/.conda/envs/polyglot/share/julia/base/pair.jl:48\n   \
    \ reverse(!Matched::Union{SubString{String}, String}) at ~/.conda/envs/polyglot/share/julia/base/strings/substring.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpscl56510.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpscl56510.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpscl56510.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpscl56510.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching\
    \ reverse(::Int64)\n  Closest candidates are:\n    reverse(!Matched::Tuple) at\
    \ ~/.conda/envs/polyglot/share/julia/base/tuple.jl:485\n    reverse(!Matched::Pair{A,\
    \ B}) where {A, B} at ~/.conda/envs/polyglot/share/julia/base/pair.jl:48\n   \
    \ reverse(!Matched::Union{SubString{String}, String}) at ~/.conda/envs/polyglot/share/julia/base/strings/substring.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpscl56510.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpscl56510.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpscl56510.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpscl56510.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]"
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst = sort(lst)\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    if length(lst) % 2 == 0\n        return\
    \ [lst[1], lst[end]]\n    else\n        return [lst[1], lst[end], lst[2]]\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv46z6dco.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpv46z6dco.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv46z6dco.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv46z6dco.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv46z6dco.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv46z6dco.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv46z6dco.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv46z6dco.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv46z6dco.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv46z6dco.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv46z6dco.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv46z6dco.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv46z6dco.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv46z6dco.jl:37\n  Expression: candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5]\n   Evaluated: [5, 5] == [5, 5, 5"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    sort!(lst)\n    new_lst = Vector{Int64}(undef,\
    \ length(lst))\n    for i in 1:2:length(lst)\n        new_lst[i] = lst[i]\n  \
    \  end\n    for i in 2:2:length(lst)\n        new_lst[i] = lst[end-i+1]\n    end\n\
    \    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpokkwdzol.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpokkwdzol.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokkwdzol.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokkwdzol.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpokkwdzol.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokkwdzol.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokkwdzol.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpokkwdzol.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokkwdzol.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokkwdzol.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpokkwdzol.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokkwdzol.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokkwdzol.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpokkwdzol.jl:39\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798582
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst = sort(lst)\n    res = zeros(Int64, length(lst))\n\
    \    res[1] = lst[1]\n    res[end] = lst[end]\n    for i in 2:length(lst) - 1\n\
    \        if i % 2 == 0\n            res[i] = lst[i]\n        else\n          \
    \  res[i] = lst[end - i + 1]\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd3uo0s66.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd3uo0s66.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3uo0s66.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3uo0s66.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd3uo0s66.jl:37\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3uo0s66.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3uo0s66.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd3uo0s66.jl:38\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3uo0s66.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3uo0s66.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd3uo0s66.jl:39\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 5, 7, 7, 5, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3uo0s66.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3uo0s66.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd3uo0s66.jl:42\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = Vector{Int64}(undef,\
    \ length(lst))\n    new_lst[1] = lst[1]\n    new_lst[end] = lst[end]\n    for\
    \ i in 2:2:length(lst)-1\n        new_lst[i] = lst[end-i+1]\n        new_lst[i+1]\
    \ = lst[i]\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3vekqioj.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3vekqioj.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vekqioj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vekqioj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3vekqioj.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 6, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vekqioj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vekqioj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3vekqioj.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 2, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vekqioj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vekqioj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3vekqioj.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 5, 6, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vekqioj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vekqioj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3vekqioj.jl:39\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return []\n    end\n    if length(lst) == 1\n        return lst\n   \
    \ end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n   \
    \ if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n    if\
    \ length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n    end\n\
    \    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4], lst[3]]\n\
    \    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2], lst[5],\
    \ lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1], lst[7],\
    \ lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst) == 8\n\
    \        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]]\n\
    \    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2], lst[8],\
    \ lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst) == 10\n\
    \        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4], lst[7],\
    \ lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8], l\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyw_y9hv.jl:50\nin expression starting at\
    \ /tmp/tmpmyw_y9hv.jl:50\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = Vector{Int64}(length(lst))\n\
    \    new_lst[1] = lst[1]\n    new_lst[2] = lst[end]\n    for i in 3:length(lst)\n\
    \        if i % 2 == 0\n            new_lst[i] = lst[i/2]\n        else\n    \
    \        new_lst[i] = lst[end - (i-1)/2]\n        end\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpey70bzc_.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpey70bzc_.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpey70bzc_.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey70bzc_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey70bzc_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpey70bzc_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpey70bzc_.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey70bzc_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey70bzc_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpey70bzc_.jl:38\n  Test threw exception\n  Expression:\
    \ can"
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return []\n    end\n    min_val = minimum(lst)\n    lst = deleteat!(lst,\
    \ findall(lst .== min_val))\n    max_val = maximum(lst)\n    lst = deleteat!(lst,\
    \ findall(lst .== max_val))\n    return [min_val, max_val] .* strange_sort_list(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpn_q4d91e.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpn_q4d91e.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 2\
    \ and 0\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 2 times)\n      @ Main /tmp/tmpn_q4d91e.jl:22\n    [8] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmpn_q4d91e.jl:29 [inlined]\n   [10] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpn_q4d91e.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpn_q4d91e.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: reducing over\
    \ an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #"
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qcf5twq.jl:1\nin expression starting at /tmp/tmp5qcf5twq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = []\n \
    \   for i in 1:2:length(lst)\n        push!(new_lst, lst[i])\n    end\n    for\
    \ i in length(lst):-2:1\n        push!(new_lst, lst[i])\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt2507iph.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpt2507iph.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 9, 7, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 5, 3, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:39\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) "
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_sorted = sort(lst_sorted_reversed)\n\
    \    lst_sorted_reversed_sorted_reversed = reverse(lst_sorted_reversed_sorted)\n\
    \    return lst_sorted_reversed_sorted_reversed\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpefzee503.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpefzee503.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefzee503.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefzee503.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpefzee503.jl:35\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    if length(lst) == 1\n        return lst\n  \
    \  end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n  \
    \  if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n   \
    \ if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n    end\n\
    \    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4], lst[3]]\n\
    \    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2], lst[5],\
    \ lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1], lst[7],\
    \ lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst) == 8\n\
    \        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]]\n\
    \    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2], lst[8],\
    \ lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst) == 10\n\
    \        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4], lst[7],\
    \ lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcf9__o5.jl:52\nin expression starting at\
    \ /tmp/tmpzcf9__o5.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    # your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmphlc5u8fw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmphlc5u8fw.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmphlc5u8fw.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphlc5u8fw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphlc5u8fw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphlc5u8fw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmphlc5u8fw.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n "
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_strange = []\n    for i in 1:2:length(lst)\n\
    \        push!(lst_strange, lst_sorted[i])\n        if i+1 <= length(lst)\n  \
    \          push!(lst_strange, lst_sorted_reversed[i+1])\n        end\n    end\n\
    \    return lst_strange\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpseepn351.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpseepn351.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpseepn351.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpseepn351.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpseepn351.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpseepn351.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpseepn351.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpseepn351.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpseepn351.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpseepn351.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpseepn351.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpseepn351.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpseepn351.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpseepn351.jl:40\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reverse\
    \ = sort(lst, rev=true)\n    lst_strange = []\n    for i in 1:2:length(lst)\n\
    \        push!(lst_strange, lst_sorted[i])\n        if i != length(lst)\n    \
    \        push!(lst_strange, lst_sorted_reverse[i+1])\n        end\n    end\n \
    \   return lst_strange\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaoo6tuu2.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpaoo6tuu2.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaoo6tuu2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaoo6tuu2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpaoo6tuu2.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaoo6tuu2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaoo6tuu2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpaoo6tuu2.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaoo6tuu2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaoo6tuu2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpaoo6tuu2.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaoo6tuu2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaoo6tuu2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpaoo6tuu2.jl:40\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst = sort(lst)\n    new_lst = []\n  \
    \  while length(lst) > 0\n        push!(new_lst, lst[1])\n        lst = lst[2:end]\n\
    \        if length(lst) > 0\n            push!(new_lst, lst[end])\n          \
    \  lst = lst[1:end-1]\n        end\n    end\n    return new_lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsjsffazq.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpsjsffazq.jl:57\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsjsffazq.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsjsffazq.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpsjsffazq.jl:61\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [0, -5, 2, -5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsjsffazq.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsjsffazq.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = sort(lst, rev=true)\n    lst_strange = []\n    for i in 1:length(lst)\n  \
    \      if i % 2 == 1\n            push!(lst_strange, lst_sorted[i])\n        else\n\
    \            push!(lst_strange, lst_sorted_reversed[i])\n        end\n    end\n\
    \    return lst_strange\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp67elpcbx.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp67elpcbx.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67elpcbx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67elpcbx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp67elpcbx.jl:36\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67elpcbx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67elpcbx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp67elpcbx.jl:37\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67elpcbx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67elpcbx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp67elpcbx.jl:38\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67elpcbx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67elpcbx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp67elpcbx.jl:41\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_removed = deleteat!(lst_sorted_reversed,\
    \ 1)\n    lst_sorted_removed = deleteat!(lst_sorted, 1)\n    lst_sorted_removed_reversed\
    \ = reverse(lst_sorted_removed)\n    lst_sorted_removed_reversed_removed = deleteat!(lst_sorted_removed_reversed,\
    \ 1)\n    lst_sorted_removed_removed = deleteat!(lst_sorted_removed, 1)\n    lst_sorted_removed_removed_reversed\
    \ = reverse(lst_sorted_removed_removed)\n    lst_sorted_removed_removed_reversed_removed\
    \ = deleteat!(lst_sorted_removed_removed_reversed, 1)\n    lst_sorted_removed_removed_removed\
    \ = deleteat!(lst_sorted_removed_removed, 1)\n    lst_sorted_removed_removed_removed_reversed\
    \ = reverse(lst_sorted_removed_removed_removed)\n    lst_sorted_removed_removed_removed_reversed_removed\
    \ = deleteat!(lst_sorted_removed_removed_removed_reversed, 1)\n    lst_sorted_removed_removed_removed_removed\
    \ = deleteat!(lst_sorted_removed_removed_removed, 1)\n    lst_sorted_removed_removed_removed_removed_reversed\
    \ = reverse(lst_sorted_removed_removed_removed_removed)\n    lst_sorted_removed_removed_removed_removed_reversed_removed\
    \ = deleteat!(lst\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa99na4gr.jl:33\nin expression starting at\
    \ /tmp/tmpa99na4gr.jl:33\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    n = length(lst)\n\
    \    res = zeros(Int64, n)\n    res[1] = lst[1]\n    res[2] = lst[end]\n    for\
    \ i in 3:n\n        if i % 2 == 0\n            res[i] = lst[i/2]\n        else\n\
    \            res[i] = lst[n - (i-1)/2]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpylm3zit7.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpylm3zit7.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  ArgumentError: invalid\
    \ index: 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n  \
    \    @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpylm3zit7.jl:27\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpylm3zit7.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpylm3zit7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpylm3zit7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: invalid index:\
    \ 4.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpylm3zit7.jl:27\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpylm3zit7.jl:38 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpylm3zit7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpylm3zit7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  ArgumentError: invalid index:\
    \ 4.0 of type Float64\n  Stack"
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = zeros(Int64,\
    \ length(lst))\n    res[1] = lst[1]\n    res[2] = lst[end]\n    for i in 3:length(lst)\n\
    \        if i % 2 == 0\n            res[i] = lst[i/2]\n        else\n        \
    \    res[i] = lst[end - (i-1)/2]\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmisa95fe.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpmisa95fe.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  ArgumentError: invalid\
    \ index: 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n  \
    \    @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpmisa95fe.jl:26\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmisa95fe.jl:36 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmisa95fe.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmisa95fe.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: invalid index:\
    \ 4.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpmisa95fe.jl:26\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmisa95fe.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmisa95fe.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmisa95fe.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  ArgumentError: invalid index:\
    \ 4.0 of type Float64\n  Stack"
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    sorted = sort(lst)\n    result = Vector{Int64}(undef,\
    \ length(lst))\n    i = 1\n    j = length(lst)\n    while i <= length(lst)\n \
    \       result[i] = sorted[i]\n        i += 1\n        if i <= length(lst)\n \
    \           result[i] = sorted[j]\n            j -= 1\n            i += 1\n  \
    \      end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9tenb692.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp9tenb692.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tenb692.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tenb692.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9tenb692.jl:39\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tenb692.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tenb692.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9tenb692.jl:40\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tenb692.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tenb692.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9tenb692.jl:41\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 8, 8, 7] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tenb692.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tenb692.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9tenb692.jl:44\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = sort(lst, rev=true)\n    lst_strange = []\n    for i in 1:2:length(lst)\n\
    \        push!(lst_strange, lst_sorted[i])\n        if i != length(lst)\n    \
    \        push!(lst_strange, lst_sorted_reversed[i+1])\n        end\n    end\n\
    \    return lst_strange\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqd91fx41.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpqd91fx41.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd91fx41.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd91fx41.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqd91fx41.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd91fx41.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd91fx41.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqd91fx41.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd91fx41.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd91fx41.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqd91fx41.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd91fx41.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd91fx41.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqd91fx41.jl:40\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    sorted = sort(lst)\n    result = []\n    while\
    \ !isempty(sorted)\n        push!(result, sorted[1])\n        push!(result, sorted[end])\n\
    \        sorted = sorted[2:end-1]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9ki3_vk2.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp9ki3_vk2.jl:33\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 8, 7, 7] == [5, 9,\
    \ 6, 8, 7]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ki3_vk2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ki3_vk2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9ki3_vk2.jl:34\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 4, 3, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ki3_vk2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ki3_vk2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9ki3_vk2.jl:40\n  Expression: candidate([111111]) == [111111]\n\
    \   Evaluated: [111111, 111111] == [111111]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ki3_vk2.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9ki3_vk2.jl:31\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659798582
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        if lst[1] > lst[2]\n            return\
    \ [lst[2], lst[1]]\n        else\n            return lst\n        end\n    end\n\
    \    if length(lst) == 3\n        if lst[1] > lst[2]\n            if lst[2] >\
    \ lst[3]\n                return [lst[3], lst[1], lst[2]]\n            else\n\
    \                return [lst[1], lst[3], lst[2]]\n            end\n        else\n\
    \            if lst[1] > lst[3]\n                return [lst[3], lst[2], lst[1]]\n\
    \            else\n                return [lst[2], lst[1], lst[3]]\n         \
    \   end\n        end\n    end\n    if length(lst) == 4\n        if lst[1] > lst[2]\n\
    \            if lst[2] > lst[3]\n                if lst[3] > lst[4]\n        \
    \            return [lst[4], lst[1], lst[3], lst[2]]\n                else\n \
    \                   return [lst[1], lst[4], lst[3], lst[2]]\n                end\n\
    \            else\n                if lst[2] > lst[4]\n                    return\
    \ [lst[4], lst[1], lst[2], lst[3]]\n                else\n                   \
    \ return [lst[1], lst[4], lst[2], lst[3]]\n                end\n            end\n\
    \        else\n            if lst[1] > lst[3]\n                if lst[3] > lst[4]\n\
    \                    return [lst[4], lst[2], lst[1], lst[3]]\n               \
    \ else\n                    return [lst[2], lst[4], lst[1], lst[3]]\n        \
    \        end\n            else\n                if lst[1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgugzsqt.jl:1\nin expression starting at /tmp/tmpwgugzsqt.jl:1\n"
  stdout: ''
  timestamp: 1659798582
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    min_val = minimum(lst)\n    max_val =\
    \ maximum(lst)\n    new_lst = [min_val]\n    for i in 1:length(lst)\n        if\
    \ lst[i] != min_val\n            push!(new_lst, lst[i])\n        end\n    end\n\
    \    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9fztjjfk.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp9fztjjfk.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fztjjfk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fztjjfk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9fztjjfk.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fztjjfk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fztjjfk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9fztjjfk.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fztjjfk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fztjjfk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9fztjjfk.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 5, 6, 7, 8, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fztjjfk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fztjjfk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9fztjjfk.jl:37\n  Expression: candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5]\n  "
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = zeros(Int64,\
    \ length(lst))\n    new_lst[1] = lst[1]\n    new_lst[end] = lst[end]\n    for\
    \ i in 2:length(lst)\xF72\n        new_lst[2i-1] = lst[end-i+1]\n        new_lst[2i]\
    \ = lst[i]\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpecnut57b.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpecnut57b.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 0, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecnut57b.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecnut57b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpecnut57b.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 0, 8, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecnut57b.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecnut57b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpecnut57b.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 0, 4, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecnut57b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecnut57b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpecnut57b.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 0, 8, 5, 7, 6] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecnut57b.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecnut57b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpecnut57b.jl:37\n  Expression: candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5]\n  "
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reverse\
    \ = lst_sorted[end:-1:1]\n    lst_sorted_reverse_2 = lst_sorted_reverse[2:end]\n\
    \    lst_sorted_2 = lst_sorted[2:end]\n    lst_final = [lst_sorted[1]]\n    for\
    \ i in 1:length(lst_sorted_2)\n        push!(lst_final, lst_sorted_reverse_2[i])\n\
    \        push!(lst_final, lst_sorted_2[i])\n    end\n    if length(lst_sorted_reverse)\
    \ % 2 == 1\n        push!(lst_final, lst_sorted_reverse[end])\n    end\n    return\
    \ lst_final\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphb8ipgiv.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmphb8ipgiv.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 2, 3, 1, 4] == [1, 4, 2,\
    \ 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphb8ipgiv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphb8ipgiv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphb8ipgiv.jl:38\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 6, 7, 7, 6, 8, 5, 9, 5] == [5, 9, 6, 8,\
    \ 7]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphb8ipgiv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphb8ipgiv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphb8ipgiv.jl:39\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 2, 3, 3, 2, 4, 1, 5, 1] == [1, 5, 2, 4,\
    \ 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphb8ipgiv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphb8ipgiv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphb8ipgiv.jl:40\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 5, 7, 6, 6, 7, 5, 8, 1, 9] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphb8ipgiv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphb8ipgiv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphb8ipgiv.jl:41\n  "
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_rev\
    \ = reverse(lst_sorted)\n    lst_sorted_rev_2 = lst_sorted_rev[2:end]\n    lst_sorted_2\
    \ = lst_sorted[2:end]\n    lst_sorted_2_rev = reverse(lst_sorted_2)\n    lst_sorted_2_rev_2\
    \ = lst_sorted_2_rev[2:end]\n    lst_sorted_2_rev_2_rev = reverse(lst_sorted_2_rev_2)\n\
    \    lst_sorted_2_rev_2_rev_2 = lst_sorted_2_rev_2_rev[2:end]\n    lst_sorted_2_rev_2_rev_2_rev\
    \ = reverse(lst_sorted_2_rev_2_rev_2)\n    lst_sorted_2_rev_2_rev_2_rev_2 = lst_sorted_2_rev_2_rev_2_rev[2:end]\n\
    \    lst_sorted_2_rev_2_rev_2_rev_2_rev = reverse(lst_sorted_2_rev_2_rev_2_rev_2)\n\
    \    lst_sorted_2_rev_2_rev_2_rev_2_rev_2 = lst_sorted_2_rev_2_rev_2_rev_2_rev[2:end]\n\
    \    lst_sorted_2_rev_2_rev_2_rev_2_rev_2_rev = reverse(lst_sorted_2_rev_2_rev_2_rev_2_rev_2)\n\
    \    lst_sorted_2_rev_2_rev_2_rev_2_rev_2_rev_2 = lst_sorted_2_rev_2_rev_2_rev_2_rev_2_rev[2:end]\n\
    \    lst_sorted_2\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa789wqbb.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa789wqbb.jl:1\n\
    in expression starting at /tmp/tmpa789wqbb.jl:1\n"
  stdout: ''
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    lst = lst[2:end]\n    while length(lst) > 0\n        res = [res; lst[end]]\n\
    \        lst = lst[1:end-1]\n        if length(lst) > 0\n            res = [res;\
    \ lst[1]]\n            lst = lst[2:end]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659798582
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    sort(lst, by=x->(x, -x))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6a4s9wga.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp6a4s9wga.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a4s9wga.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a4s9wga.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a4s9wga.jl:26\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a4s9wga.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a4s9wga.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a4s9wga.jl:27\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a4s9wga.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a4s9wga.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a4s9wga.jl:28\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 5, 6, 7, 8, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a4s9wga.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a4s9wga.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a4s9wga.jl:31\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798584
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qcf5twq.jl:1\nin expression starting at /tmp/tmp5qcf5twq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = [lst[1]]\n\
    \    lst = lst[2:end]\n    while length(lst) > 0\n        res = [res; lst[end]]\n\
    \        lst = lst[1:end-1]\n        if length(lst) > 0\n            res = [res;\
    \ lst[1]]\n            lst = lst[2:end]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1659798582
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_odd = lst_sorted_reversed[1:2:end]\n\
    \    lst_sorted_reversed_even = lst_sorted_reversed[2:2:end]\n    lst_sorted_reversed_odd_reversed\
    \ = reverse(lst_sorted_reversed_odd)\n    lst_sorted_reversed_even_reversed =\
    \ reverse(lst_sorted_reversed_even)\n    lst_sorted_reversed_odd_reversed_concat\
    \ = vcat(lst_sorted_reversed_odd_reversed, lst_sorted_reversed_even_reversed)\n\
    \    return lst_sorted_reversed_odd_reversed_concat\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzdm0los0.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpzdm0los0.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 4, 1, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzdm0los0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzdm0los0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzdm0los0.jl:33\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzdm0los0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzdm0los0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzdm0los0.jl:34\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzdm0los0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzdm0los0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzdm0los0.jl:35\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 7, 9, 1, 6, 8] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzdm0los0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzdm0los0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzdm0los0.jl:38\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798584
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_deleted = deleteat!(lst_sorted_reversed,\
    \ 1)\n    lst_sorted_deleted = deleteat!(lst_sorted, 1)\n    lst_sorted_deleted_reversed\
    \ = reverse(lst_sorted_deleted)\n    lst_sorted_deleted_reversed_deleted = deleteat!(lst_sorted_deleted_reversed,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted = deleteat!(lst_sorted_deleted_reversed_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted = deleteat!(lst_sorted_deleted_reversed_deleted_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted\
    \ = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted, 1)\n\
    \    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted_deleted\
    \ = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted_deleted_deleted\
    \ = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted_de\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacf93vwy.jl:30\nin expression starting at\
    \ /tmp/tmpacf93vwy.jl:30\n"
  stdout: ''
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = []\n \
    \   while length(lst) > 0\n        push!(new_lst, lst[1])\n        push!(new_lst,\
    \ lst[end])\n        lst = lst[2:end-1]\n    end\n    return new_lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp03h8_8bj.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp03h8_8bj.jl:33\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 8, 7, 7] == [5, 9,\
    \ 6, 8, 7]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03h8_8bj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03h8_8bj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp03h8_8bj.jl:34\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 4, 3, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03h8_8bj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03h8_8bj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp03h8_8bj.jl:40\n  Expression: candidate([111111]) == [111111]\n\
    \   Evaluated: [111111, 111111] == [111111]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp03h8_8bj.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp03h8_8bj.jl:31\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1659798584
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qcf5twq.jl:1\nin expression starting at /tmp/tmp5qcf5twq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    sort!(lst)\n    new_lst = []\n    for\
    \ i in 1:2:length(lst)\n        push!(new_lst, lst[i])\n    end\n    for i in\
    \ 2:2:length(lst)\n        push!(new_lst, lst[i])\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbqgosaj5.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpbqgosaj5.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgosaj5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgosaj5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbqgosaj5.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgosaj5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgosaj5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbqgosaj5.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgosaj5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgosaj5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbqgosaj5.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 5, 7, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbqgosaj5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbqgosaj5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbqgosaj5.jl:39\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1659798584
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if isempty(lst)\n\
    \        return lst\n    end\n    lst = sort(lst)\n    n = length(lst)\n    res\
    \ = zeros(Int64, n)\n    res[1] = lst[1]\n    res[2] = lst[end]\n    for i in\
    \ 3:n\n        if i % 2 == 0\n            res[i] = lst[i/2]\n        else\n  \
    \          res[i] = lst[n - (i - 1)/2]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpcxjtzofn.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpcxjtzofn.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  ArgumentError: invalid\
    \ index: 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n  \
    \    @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpcxjtzofn.jl:27\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpcxjtzofn.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpcxjtzofn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpcxjtzofn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: invalid index:\
    \ 4.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] strange_sort_list(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpcxjtzofn.jl:27\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpcxjtzofn.jl:38 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpcxjtzofn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpcxjtzofn.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  ArgumentError: invalid index:\
    \ 4.0 of type Float64\n  Stack"
  timestamp: 1659798585
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_deleted = deleteat!(lst_sorted_reversed,\
    \ 1)\n    lst_sorted_deleted = deleteat!(lst_sorted, 1)\n    lst_sorted_deleted_reversed\
    \ = reverse(lst_sorted_deleted)\n    lst_sorted_deleted_reversed_deleted = deleteat!(lst_sorted_deleted_reversed,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted = deleteat!(lst_sorted_deleted_reversed_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted = deleteat!(lst_sorted_deleted_reversed_deleted_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted\
    \ = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted, 1)\n\
    \    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted_deleted\
    \ = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted,\
    \ 1)\n    lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted_deleted_deleted\
    \ = deleteat!(lst_sorted_deleted_reversed_deleted_deleted_deleted_deleted_deleted_de\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacf93vwy.jl:30\nin expression starting at\
    \ /tmp/tmpacf93vwy.jl:30\n"
  stdout: ''
  timestamp: 1659798583
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [minimum(lst), maximum(lst)]\n\
    \    end\n    if length(lst) == 3\n        return [minimum(lst), maximum(lst),\
    \ lst[2]]\n    end\n    if length(lst) == 4\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[3]]\n    end\n    if length(lst) == 5\n        return [minimum(lst),\
    \ maximum(lst), lst[2], lst[4], lst[3]]\n    end\n    if length(lst) == 6\n  \
    \      return [minimum(lst), maximum(lst), lst[2], lst[4], lst[3], lst[5]]\n \
    \   end\n    if length(lst) == 7\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[3], lst[5]]\n    end\n    if length(lst) == 8\n\
    \        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[3], lst[5],\
    \ lst[7]]\n    end\n    if length(lst) == 9\n        return [minimum(lst), maximum(lst),\
    \ lst[2], lst[4], lst[6], lst[8], lst[3], lst[5], lst[7]]\n    end\n    if length(lst)\
    \ == 10\n        return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8],\
    \ lst[3], lst[5], lst[7], lst[9]]\n    end\n    if length(lst) == 11\n       \
    \ return [minimum(lst), maximum(lst), lst[2], lst[4], lst[6], lst[8], lst[10],\
    \ lst[3],\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhg_2o6j.jl:52\nin expression starting at\
    \ /tmp/tmpxhg_2o6j.jl:52\n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    lst_sorted_reversed_removed = pop!(lst_sorted_reversed)\n\
    \    lst_sorted_removed = pop!(lst_sorted)\n    return [lst_sorted_removed, lst_sorted_reversed_removed]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyc6ve1_u.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpyc6ve1_u.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyc6ve1_u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyc6ve1_u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyc6ve1_u.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyc6ve1_u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyc6ve1_u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyc6ve1_u.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyc6ve1_u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyc6ve1_u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyc6ve1_u.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 1] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyc6ve1_u.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyc6ve1_u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyc6ve1_u.jl:33\n  Expression: candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5]\n   Evaluated: [5, 5] == [5, 5, 5, 5]\nS"
  timestamp: 1659798584
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = []\n \
    \   for i in 1:2:length(lst)\n        push!(new_lst, lst[i])\n    end\n    for\
    \ i in length(lst):-2:1\n        push!(new_lst, lst[i])\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt2507iph.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpt2507iph.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 9, 7, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 5, 3, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:39\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) "
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    new_lst = []\n \
    \   for i in 1:2:length(lst)\n        push!(new_lst, lst[i])\n    end\n    for\
    \ i in length(lst):-2:1\n        push!(new_lst, lst[i])\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt2507iph.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpt2507iph.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 9, 7, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 5, 3, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2507iph.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2507iph.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt2507iph.jl:39\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) "
  timestamp: 1659798581
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    lst = sort(lst)\n    res = []\n    push!(res,\
    \ lst[1])\n    for i in 2:2:length(lst)\n        push!(res, lst[i])\n    end\n\
    \    for i in 1:2:length(lst)\n        push!(res, lst[i])\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjco74fya.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpjco74fya.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 4, 1, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjco74fya.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjco74fya.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpjco74fya.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 8, 5, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjco74fya.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjco74fya.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpjco74fya.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 4, 1, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjco74fya.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjco74fya.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpjco74fya.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 5, 7, 9, 1, 6, 8] == [1, 9, 5, 8, 6,\
    \ 7]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjco74fya.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjco74fya.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpjco74fya.jl:38\n  Expression: candidate([5, 5, 5, 5]) == [5,"
  timestamp: 1659798584
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return []\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8],\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccjv9lxf.jl:52\nin expression starting at\
    \ /tmp/tmpccjv9lxf.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    if length(lst) == 1\n        return lst\n\
    \    end\n    if length(lst) == 2\n        return [lst[1], lst[2]]\n    end\n\
    \    if length(lst) == 3\n        return [lst[1], lst[3], lst[2]]\n    end\n \
    \   if length(lst) == 4\n        return [lst[1], lst[4], lst[2], lst[3]]\n   \
    \ end\n    if length(lst) == 5\n        return [lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]]\n    end\n    if length(lst) == 6\n        return [lst[1], lst[6], lst[2],\
    \ lst[5], lst[3], lst[4]]\n    end\n    if length(lst) == 7\n        return [lst[1],\
    \ lst[7], lst[2], lst[6], lst[3], lst[5], lst[4]]\n    end\n    if length(lst)\
    \ == 8\n        return [lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4],\
    \ lst[5]]\n    end\n    if length(lst) == 9\n        return [lst[1], lst[9], lst[2],\
    \ lst[8], lst[3], lst[7], lst[4], lst[6], lst[5]]\n    end\n    if length(lst)\
    \ == 10\n        return [lst[1], lst[10], lst[2], lst[9], lst[3], lst[8], lst[4],\
    \ lst[7], lst[5], lst[6]]\n    end\n    if length(lst) == 11\n        return [lst[1],\
    \ lst[11], lst[2], lst[10], lst[3], lst[9], lst[4], lst[8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03s7ap03.jl:1\nin expression starting at /tmp/tmp03s7ap03.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0\n        return lst\n    end\n    sorted_lst = sort(lst)\n    new_lst =\
    \ []\n    for i in 1:2:length(sorted_lst)\n        push!(new_lst, sorted_lst[i])\n\
    \    end\n    for i in length(sorted_lst):-2:1\n        push!(new_lst, sorted_lst[i])\n\
    \    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_n6at6k2.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp_n6at6k2.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_n6at6k2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_n6at6k2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_n6at6k2.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 9, 7, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_n6at6k2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_n6at6k2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_n6at6k2.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 5, 3, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_n6at6k2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_n6at6k2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_n6at6k2.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_n6at6k2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_n6at6k2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_n6at6k2.jl:39\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) "
  timestamp: 1659798584
