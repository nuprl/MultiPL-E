name: HumanEval_145_order_by_points
language: jl
prompt: "\"\"\"\n    Write a function which sorts the given list of integers\n   \
  \ in ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
  \ 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
  \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
  \ 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6,\
  \ 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
completions: ["    if length(nums) == 0\n        return nums\n    end\n    sums =\
    \ [sum(digits(n)) for n in nums]\n    return sortperm(sums)[nums]\nend", "   \
    \ return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    if length(nums)\
    \ == 0\n        return []\n    end\n    sums = [sum(digits(x)) for x in nums]\n\
    \    return [nums[i] for i in sortperm(sums)]\nend", "    # sort by sum of digits\n\
    \    # if sum of digits is the same, sort by index\n    # sort by index is the\
    \ default\n    # sort by sum of digits is the first key\n    # sort by index is\
    \ the second key\n    # sort by index is the default\n    # sort by sum of digits\
    \ is the first key\n    # sort by index is the second key\n    # sort by index\
    \ is the default\n    # sort by sum of digits is the first key\n    # sort by\
    \ index is the second key\n    # sort by index is the default\n    # sort by sum\
    \ of digits is the first key\n    # sort by index is the second key\n    # sort\
    \ by index is the default\n    # sort by sum of digits is the first key\n    #\
    \ sort by index is the second key\n    # sort by index is the default\n    # sort\
    \ by sum of digits is the first key\n    # sort by index is the second key\n \
    \   # sort by index is the default\n    # sort by sum of digits is the first key\n\
    \    # sort by index is the second key\n    # sort by index is the default\n \
    \   # sort by sum of digits is the first key\n    # sort by index is the second\
    \ key\n    # sort by index is the default\n    # sort by sum of digits is the\
    \ first key\n    # sort by index is the second key\n    # sort by index is the\
    \ default\n    # sort by sum of digits is the first key\n    # sort by index is\
    \ the second key\n    # sort by index is the default\n    # sort by sum of digits\
    \ is the first key\n    # sort by index is the second key\n    # sort by index\
    \ is the default\n    # sort by sum of digits is the first key\n    # sort by\
    \ index is the second key\n    # sort by index is the default\n    # sort by sum\
    \ of digits is the first key\n    # sort by index is the second key\n    # sort\
    \ by index is the default\n    # sort by sum of digits is the first key\n    #\
    \ sort by index is the second key\n    # sort by index is the default\n    # sort\
    \ by sum of digits is the first key\n    # sort by index is the second key\n \
    \   # sort by index is the default\n    # sort by sum of digits is the first key\n\
    \    # sort", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if\
    \ length(nums) == 0\n        return nums\n    end\n    nums_with_sum = [sum(digits(nums[i]))\
    \ for i in 1:length(nums)]\n    return sortperm(nums_with_sum)[nums]\nend", " \
    \   return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums) ==\
    \ 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    return sortperm(sums)[nums]\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    sums\
    \ = [sum(digits(n)) for n in nums]\n    return sortperm(sums)[nums]\nend", " \
    \   # your code here\nend", "    if length(nums) == 0\n        return nums\n \
    \   end\n    nums_with_points = [(nums[i], sum(digits(nums[i]))) for i in 1:length(nums)]\n\
    \    sorted_nums_with_points = sort(nums_with_points, by = x -> x[2])\n    return\
    \ [x[1] for x in sorted_nums_with_points]\nend", "    if length(nums) == 0\n \
    \       return nums\n    end\n    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    # your code here\nend", "    if isempty(nums)\n        return []\n\
    \    end\n    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your\
    \ code here\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", " \
    \   if length(nums) == 0\n        return nums\n    end\n    # sort by sum of digits\n\
    \    sorted = sort(nums, by=x->sum(digits(x)))\n    # sort by index\n    return\
    \ sort(sorted, by=x->findfirst(nums, x))\nend", "    if length(nums) == 0\n  \
    \      return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return\
    \ nums[sortperm(sums)]\nend", "    # your code here\nend\n ", "    # sort by sum\
    \ of digits\n    # if sum of digits is equal, sort by index\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend", "    # your code here\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    # your code\
    \ here\n    return nums\nend", "    if length(nums) == 0\n        return nums\n\
    \    end\n    return sort(nums, by=x->(x, sum(digits(x))))\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    nums_with_sum = [(sum(digits(nums[i])),\
    \ i, nums[i]) for i in 1:length(nums)]\n    sorted_nums = sort(nums_with_sum,\
    \ by = x -> x[1])\n    return [sorted_nums[i][3] for i in 1:length(sorted_nums)]\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    return sort(nums,\
    \ by = x -> sum(digits(x)), rev = false)\nend", "    if length(nums) == 0\n  \
    \      return nums\n    end\n    nums_with_indices = [(nums[i], i) for i in 1:length(nums)]\n\
    \    nums_with_indices = sort(nums_with_indices, by = x -> sum(digits(x[1])))\n\
    \    return [x[1] for x in nums_with_indices]\nend", "    # sort by sum of digits\n\
    \    # if sum of digits is the same, sort by index\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits", " \
    \   # sort by sum of digits\n    # if sums are equal, sort by index\n    # if\
    \ sums are equal and indices are equal, sort by value\n    # if sums are equal,\
    \ indices are equal, and values are equal, do nothing\n    # sort by sum of digits\n\
    \    # if sums are equal, sort by index\n    # if sums are equal and indices are\
    \ equal, sort by value\n    # if sums are equal, indices are equal, and values\
    \ are equal, do nothing\n    # sort by sum of digits\n    # if sums are equal,\
    \ sort by index\n    # if sums are equal and indices are equal, sort by value\n\
    \    # if sums are equal, indices are equal, and values are equal, do nothing\n\
    \    # sort by sum of digits\n    # if sums are equal, sort by index\n    # if\
    \ sums are equal and indices are equal, sort by value\n    # if sums are equal,\
    \ indices are equal, and values are equal, do nothing\n    # sort by sum of digits\n\
    \    # if sums are equal, sort by index\n    # if sums are equal and indices are\
    \ equal, sort by value\n    # if sums are equal, indices are equal, and values\
    \ are equal, do nothing\n    # sort by sum of digits\n    # if sums are equal,\
    \ sort by index\n    # if sums are equal and indices are equal, sort by value\n\
    \    # if sums are equal, indices are equal, and values are equal, do nothing\n\
    \    # sort by sum of digits\n    # if sums are equal, sort by index\n    # if\
    \ sums are equal and indices are equal, sort by value\n    # if sums are equal,\
    \ indices are equal, and values are equal, do nothing\n    # sort by sum of digits\n\
    \    # if sums are equal, sort by index\n    # if sums are equal and indices are\
    \ equal, sort by value\n    # if sums are equal, indices are equal, and values\
    \ are equal, do nothing\n    # sort by sum of digits\n    # if sums are equal,\
    \ sort by index\n    # if sums are equal and indices are equal, sort by value\n\
    \    # if sums are equal, indices are equal, and values are equal, do nothing\n\
    \    # sort by sum of digits\n    # if sums are equal, sort by index\n    # if\
    \ sums are equal and indices are equal, sort by value\n", "    # your code here\n\
    end", "    if length(nums) == 0\n        return []\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return sortperm(sums)[nums]\nend", "    if isempty(nums)\n\
    \        return nums\n    end\n    nums_with_points = [(n, sum(digits(n))) for\
    \ n in nums]\n    sorted_nums_with_points = sort(nums_with_points, by=x -> x[2])\n\
    \    return [x[1] for x in sorted_nums_with_points]\nend", "    # your code here\n\
    end", "    if length(nums) == 0\n        return []\n    end\n    sums = []\n \
    \   for i in 1:length(nums)\n        sum = 0\n        for j in 1:length(string(nums[i]))\n\
    \            sum += parse(Int64, string(nums[i])[j])\n        end\n        push!(sums,\
    \ sum)\n    end\n    sorted_nums = []\n    for i in 1:length(nums)\n        min_index\
    \ = indmin(sums)\n        push!(sorted_nums, nums[min_index])\n        deleteat!(sums,\
    \ min_index)\n        deleteat!(nums, min_index)\n    end\n    return sorted_nums\n\
    end", "    # sort by sum of digits\n    sorted_nums = sort(nums, by=sum)\n   \
    \ # sort by index\n    sorted_nums = sort(sorted_nums, by=i->findfirst(nums, i))\n\
    \    return sorted_nums\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    if length(nums) == 0\n        return []\n    end\n    nums_with_points\
    \ = [(i, sum(digits(i))) for i in nums]\n    sorted_nums_with_points = sort(nums_with_points,\
    \ by=x->x[2])\n    return [i[1] for i in sorted_nums_with_points]\nend", "   \
    \ # your code here\nend", "    if length(nums) == 0\n        return nums\n   \
    \ end\n    sum_of_digits = [sum(digits(x)) for x in nums]\n    return sortperm(sum_of_digits)[nums]\n\
    end", "    # your code here\nend", "    if isempty(nums)\n        return []\n\
    \    end\n    # sort by sum of digits\n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n\
    \    # sort by index\n    return sort(sorted_nums, by=x->findfirst(nums, x))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    nums_sorted\
    \ = sort(nums, by=x->sum(digits(x)))\n    return nums_sorted\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    # sort by sum of digits\n    nums =\
    \ sort(nums, by=x->sum(digits(x)))\n    # sort by index in original list\n   \
    \ nums = sort(nums, by=x->findfirst(nums, x))\n    return nums\nend", "    # your\
    \ code here\nend", "    if length(nums) == 0\n        return nums\n    end\n \
    \   sums = [sum(digits(n)) for n in nums]\n    return sortperm(sums)[nums]\nend",
  "    if length(nums) == 0\n        return []\n    end\n    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return []\n    end\n    # sort\
    \ by the sum of digits\n    # if the sum is the same, sort by the index in the\
    \ original list\n    sorted_nums = sort(nums, by=x->(sum(digits(x)), findall(nums\
    \ .== x)[1]))\n    return sorted_nums\nend", "    if length(nums) == 0\n     \
    \   return []\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return\
    \ nums[sortperm(sums)]\nend", "    if length(nums) == 0\n        return []\n \
    \   end\n    sums = [sum(digits(abs(num))) for num in nums]\n    return [nums[i]\
    \ for i in sortperm(sums)]\nend", "    if length(nums) == 0\n        return []\n\
    \    end\n    sums = [sum(digits(n)) for n in nums]\n    sorted_indices = sortperm(sums)\n\
    \    return nums[sorted_indices]\nend", "    if length(nums) == 0\n        return\
    \ []\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ []\n    end\n    # sort by sum of digits\n    nums = sort(nums, by=x->sum(digits(x)))\n\
    \    # sort by index\n    nums = sort(nums, by=x->findfirst(nums, x))\n    return\
    \ nums\nend", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # sort by sum of digits, then by index\n    return sortperm(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = [sum(digits(x)) for x in nums]\n\
    \    return sort(nums, by=x->(sums[findall(nums .== x)[1]], findall(nums .== x)[1]))\n\
    end", "    return sort(nums, by = x -> (sum(digits(x)), x))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", " \
    \   return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code goes\
    \ here\n    return sort(nums, by = x -> sum(digits(x)))\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    sorted_indices = sortperm(sums)\n    return nums[sorted_indices]\nend", " \
    \   return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    inds = sortperm(sums)\n    return nums[inds]\nend", "  \
    \  if length(nums) == 0\n        return []\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return [x for (y,x) in sort(zip(sums, nums))]\nend", " \
    \   if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend", "    # your code here\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums)\
    \ == 0\n        return []\n    end\n    sums = [sum(digits(num)) for num in nums]\n\
    \    return [nums[i] for i in sortperm(sums)]\nend", "    # your code here\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    nums_sorted = sort(nums,\
    \ by = x -> sum(digits(x)))\n    return nums_sorted\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    # sort the list by the sum of the digits\n    #\
    \ if the sum of the digits is the same, sort by the index\n    # in the original\
    \ list\n    return sort(nums, by=x->(sum(digits(x)), findall(nums, x)[1]))\nend",
  "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ []\n    end\n    sums = []\n    for i in nums\n        sum = 0\n        while\
    \ i != 0\n            sum += i % 10\n            i = i \xF7 10\n        end\n\
    \        push!(sums, sum)\n    end\n    return sortperm(sums)\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    return sortperm(sums)[nums]\nend", "    if length(nums) == 0\n        return\
    \ []\n    end\n    nums_with_points = [(n, sum(digits(n))) for n in nums]\n  \
    \  sorted_nums_with_points = sort(nums_with_points, by=x -> x[2])\n    return\
    \ [n for (n, _) in sorted_nums_with_points]\nend", "    return sort(nums, by =\
    \ x -> sum(digits(x)))\nend", "    # your code here\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    sums\
    \ = zeros(Int64, length(nums))\n    for i in 1:length(nums)\n        sums[i] =\
    \ sum(digits(nums[i]))\n    end\n    return nums[sortperm(sums)]\nend", "    return\
    \ sort(nums, by = x -> sum(digits(x)))\nend", "    if length(nums) == 0\n    \
    \    return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return\
    \ nums[sortperm(sums)]\nend", "    if length(nums) == 0\n        return nums\n\
    \    end\n    if length(nums) == 1\n        return nums\n    end\n    # sort by\
    \ sum of digits\n    sums = [sum(digits(n)) for n in nums]\n    sorted_sums =\
    \ sort(sums)\n    # sort by index\n    indices = [findfirst(sums, s) for s in\
    \ sorted_sums]\n    sorted_nums = [nums[i] for i in indices]\n    return sorted_nums\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return nums[sortperm(sums)]\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    if length(nums) == 0\n        return nums\n    end\n\
    \    sums = [sum(digits(x)) for x in nums]\n    sorted_indices = sortperm(sums)\n\
    \    return nums[sorted_indices]\nend", "    # sort by sum of digits\n    # if\
    \ sum of digits is equal, sort by index\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    nums_with_points = [(nums[i], sum(digits(nums[i])))\
    \ for i in 1:length(nums)]\n    sorted_nums_with_points = sort(nums_with_points,\
    \ by = x -> x[2])\n    return [sorted_nums_with_points[i][1] for i in 1:length(sorted_nums_with_points)]\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    nums_with_sum\
    \ = [(nums[i], sum(digits(nums[i]))) for i in 1:length(nums)]\n    sorted_nums\
    \ = sort(nums_with_sum, by=x->x[2])\n    return [x[1] for x in sorted_nums]\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    # your code here\nend", "    # your code here\n    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # sort by sum of digits\n    sort(nums, by=x->sum(digits(x)))\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend", "    return sort(nums,\
    \ by = x -> (sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # sort by sum of digits\n    # if sum of digits is the same,\
    \ sort by index\n    # if index is the same, sort by value\n    # sort by index\
    \ is the default\n    return sort(nums, by = (x -> sum(digits(x)), x -> x))\n\
    end", "    # sort by sum of digits\n    # if sum of digits is the same, sort by\
    \ index\n    # if index is the same, sort by value\n    return sort(nums, by=x->(sum(digits(x)),\
    \ findfirst(nums, x), x))\nend", "    if length(nums) == 0\n        return nums\n\
    \    end\n    sums = [sum(digits(x)) for x in nums]\n    return nums[sortperm(sums)]\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    # sort by sum\
    \ of digits\n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n    # sort by\
    \ index\n    sorted_nums = sort(sorted_nums, by=x->findfirst(nums, x))\n    return\
    \ sorted_nums\nend", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # create a new vector of tuples, where each tuple is (index,\
    \ sum of digits)\n    # sort the vector by the sum of digits\n    # return the\
    \ sorted vector of indices\n    return sortperm(map(x -> (x[1], sum(digits(x[2]))),\
    \ enumerate(nums)))\nend", "    sum_digits = [sum(digits(n)) for n in nums]\n\
    \    return sortperm(sum_digits)\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n   \
    \     return []\n    end\n    sums = zeros(length(nums))\n    for i in 1:length(nums)\n\
    \        sums[i] = sum(digits(nums[i]))\n    end\n    return nums[sortperm(sums)]\n\
    end", "    # sort by sum of digits\n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n\
    \    # sort by index\n    sorted_nums = sort(sorted_nums, by=x->findfirst(nums,\
    \ x))\n    return sorted_nums\nend", "    if length(nums) == 0\n        return\
    \ []\n    end\n    sums = zeros(Int64, length(nums))\n    for i in 1:length(nums)\n\
    \        sums[i] = sum(digits(nums[i]))\n    end\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    # your code here\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = [sum(digits(abs(i))) for i in\
    \ nums]\n    inds = sortperm(sums)\n    return nums[inds]\nend", "    # your code\
    \ goes here\n    return nums\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    sums = [sum(digits(x)) for x in nums]\n    inds = sortperm(sums)\n\
    \    return nums[inds]\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    # sort by sum of digits\n    # if sum of digits is equal, sort by index\n\
    \    # if the index is equal, sort by value\n    # sort(nums, by=x->(sum(digits(x)),\
    \ findall(x->x==x, nums)[1], x))\n    sort(nums, by=x->(sum(digits(x)), findall(x->x==x,\
    \ nums)[1], x))\nend", "    if length(nums) == 0\n        return nums\n    end\n\
    \    sums = [sum(digits(x)) for x in nums]\n    return nums[sortperm(sums)]\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code\
    \ here\nend", "    if length(nums) == 0\n        return []\n    end\n    sums\
    \ = map(x -> sum(digits(x)), nums)\n    return sortperm(sums, 1)[1]\nend", " \
    \   return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums) ==\
    \ 0\n        return nums\n    end\n    nums_with_sum = [sum(digits(num)) for num\
    \ in nums]\n    sorted_indices = sortperm(nums_with_sum)\n    return nums[sorted_indices]\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(abs(x)))\
    \ for x in nums]\n    return sortperm(sums)\nend", "    if length(nums) == 0\n\
    \        return []\n    end\n    sort(nums, by=x->(x, sum(digits(x))))\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(abs(x)))\
    \ for x in nums]\n    return sortperm(sums)[nums]\nend", "    # your code here\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    nums_sorted\
    \ = sort(nums, by = x -> sum(digits(x)))\n    return nums_sorted\nend", "    #\
    \ your code here\nend", "    # your code here\n    return nums\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n   \
    \     return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    sorted_indices\
    \ = sortperm(sums)\n    return nums[sorted_indices]\nend", "    # create a dictionary\
    \ with key as the sum of digits and value as the index\n    # of the number in\
    \ the original list\n    sum_dict = Dict{Int64, Vector{Int64}}()\n    for (i,\
    \ num) in enumerate(nums)\n        sum_of_digits = sum(digits(num))\n        if\
    \ sum_of_digits in keys(sum_dict)\n            push!(sum_dict[sum_of_digits],\
    \ i)\n        else\n            sum_dict[sum_of_digits] = [i]\n        end\n \
    \   end\n    \n    # sort the dictionary by key\n    sorted_dict = sort(collect(sum_dict),\
    \ by=x->x[1])\n    \n    # create a new list with the sorted indices\n    sorted_indices\
    \ = []\n    for (key, value) in sorted_dict\n        push!(sorted_indices, value)\n\
    \    end\n    sorted_indices = collect(Iterators.flatten(sorted_indices))\n  \
    \  \n    # create a new list with the sorted numbers\n    sorted_nums = []\n \
    \   for i in sorted_indices\n        push!(sorted_nums, nums[i])\n    end\n  \
    \  \n    return sorted_nums\nend", "    # your code here\nend\n ", "    # your\
    \ code here\nend", "    if length(nums) == 0\n        return nums\n    end\n \
    \   # sort by sum of digits\n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n\
    \    # sort by index\n    sorted_nums = sort(sorted_nums, by=x->findfirst(nums,\
    \ x))\n    return sorted_nums\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    if length(nums) == 0\n        return []\n    end\n   \
    \ # sort by sum of digits\n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n\
    \    # sort by index\n    return sort(sorted_nums, by=x->findfirst(nums, x))\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    sorted = sortperm(sums)\n    return nums[sorted]\nend",
  "    # your code here\n    return nums\nend", "    if isempty(nums)\n        return\
    \ nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return [nums[i]\
    \ for i in sortperm(sums)]\nend", "    if length(nums) == 0\n        return nums\n\
    \    end\n    sums = zeros(Int64, length(nums))\n    for i in 1:length(nums)\n\
    \        sums[i] = sum(digits(nums[i]))\n    end\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    # your code here\n    return nums\nend",
  "    # sort by sum of digits\n    # if sum is the same, sort by index\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n   ", "    # your code here\nend", "    if length(nums) == 0\n  \
    \      return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return\
    \ nums[sortperm(sums)]\nend", "    # your code here\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    nums_with_points = [(nums[i], sum(digits(nums[i])), i) for\
    \ i in 1:length(nums)]\n    sorted_nums_with_points = sort(nums_with_points, by\
    \ = x -> (x[2], x[3]))\n    return [x[1] for x in sorted_nums_with_points]\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = zeros(Int64,\
    \ length(nums))\n    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n\
    \    end\n    return nums[sortperm(sums)]\nend", "    # your code here\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    sort!(sums)\n    return [nums[findfirst(sums, sum(digits(x)))]\
    \ for x in nums]\nend", "    # your code here\nend", "    # your code here\n \
    \   return nums\nend", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    \    return nums\nend", "    if length(nums) == 0\n        return nums\n    end\n\
    \    nums_with_sum = [sum(digits(num)) for num in nums]\n    nums_with_sum_and_index\
    \ = [(nums_with_sum[i], i) for i in 1:length(nums)]\n    sorted_nums_with_sum_and_index\
    \ = sort(nums_with_sum_and_index, by=x->x[1])\n    sorted_nums = [nums[sorted_nums_with_sum_and_index[i][2]]\
    \ for i in 1:length(nums)]\n    return sorted_nums\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return sortperm(sums)[nums]\n\
    end", "    # your code here\nend", "    # your code here\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by = x -> (sum(digits(x)), x))\nend", "  \
    \  if length(nums) == 0\n        return []\n    end\n    nums_with_points = [(nums[i],\
    \ sum(digits(nums[i]))) for i in 1:length(nums)]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by=x->x[2])\n    return [x[1] for x in sorted_nums_with_points]\n\
    end", "    # Sort by the sum of the digits\n    # If the sum of the digits is\
    \ the same, sort by the index\n    # in the original list\n    return sort(nums,\
    \ by=x->(sum(digits(x)), findall(nums, x)[1]))\nend", "    sum_of_digits = [sum(digits(num))\
    \ for num in nums]\n    return sortperm(sum_of_digits, 1)[1]\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    nums_with_points = [sum(digits(nums[i]))\
    \ for i in 1:length(nums)]\n    return nums[sortperm(nums_with_points)]\nend",
  "    # sort by sum of digits\n    # if there are several items with similar sum\
    \ of their digits,\n    # order them based on their index in original list\n \
    \   # return the sorted list\n    return sort(nums, by=x->(sum(digits(x)), findfirst(nums,\
    \ x)))\nend", "    if length(nums) == 0\n        return nums\n    end\n    sums\
    \ = zeros(Int64, length(nums))\n    for i in 1:length(nums)\n        sums[i] =\
    \ sum(digits(nums[i]))\n    end\n    return nums[sortperm(sums)]\nend", "    if\
    \ length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return sortperm(sums, 1)[nums]\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    nums_with_points = [sum(digits(n)) for n in nums]\n    return\
    \ nums[sortperm(nums_with_points)]\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    nums_with_sum = [(sum(digits(nums[i])), i, nums[i]) for i\
    \ in 1:length(nums)]\n    nums_with_sum = sort(nums_with_sum, by = x -> x[1])\n\
    \    return [nums_with_sum[i][3] for i in 1:length(nums)]\nend", "    # sort by\
    \ sum of digits\n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n    # sort\
    \ by index\n    sorted_nums = sort(sorted_nums, by=x->findfirst(nums, x))\n  \
    \  return sorted_nums\nend", "    # your code here\nend", "    # your code here\n\
    \    return nums\nend", "    # Your code here\n    return sort(nums, by = x ->\
    \ sum(digits(x)))\nend", "    if length(nums) == 0\n        return nums\n    end\n\
    \    nums_with_points = [(nums[i], sum(digits(nums[i]))) for i in 1:length(nums)]\n\
    \    sorted_nums_with_points = sort(nums_with_points, by = x -> x[2])\n    return\
    \ [x[1] for x in sorted_nums_with_points]\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # sort by sum of digits\n    # if sum of digits is equal, sort\
    \ by index in original list\n    # if empty list, return empty list\n    # if\
    \ only one element, return that element\n    # if only two elements, return sorted\
    \ elements\n    # if more than two elements, sort by sum of digits, then by index\
    \ in original list\n    # if all elements have same sum of digits, return original\
    \ list\n    # if all elements have different sum of digits, return sorted list\n\
    \    # if some elements have same sum of digits, return sorted list with equal\
    \ elements in original order\n    # if some elements have different sum of digits,\
    \ return sorted list with equal elements in original order\n    # if some elements\
    \ have same sum of digits, return sorted list with equal elements in original\
    \ order\n    # if some elements have different sum of digits, return sorted list\
    \ with equal elements in original order\n    # if some elements have same sum\
    \ of digits, return sorted list with equal elements in original order\n    # if\
    \ some elements have different sum of digits, return sorted list with equal elements\
    \ in original order\n    # if some elements have same sum of digits, return sorted\
    \ list with equal elements in original order\n    # if some elements have different\
    \ sum of digits, return sorted list with equal elements in original order\n  \
    \  # if some elements have same sum of digits, return sorted list with equal elements\
    \ in original order\n    # if some elements have different sum of digits, return\
    \ sorted list with equal elements in original order\n    # if some elements have\
    \ same sum of digits, return sorted list with equal elements in original order\n\
    \    # if some elements have different sum of digits, return sorted list with\
    \ equal elements in original order\n    # if some elements have same sum of digits,\
    \ return sorted list with equal elements in original order\n    # if some elements\
    \ have different sum of digits, return sorted list with equal elements in original\
    \ order\n    # if some elements have same sum of digits, return sorted list with\
    \ equal elements in original order\n    # if some elements have different sum\
    \ of digits, return sorted list with equal elements in original order\n    # if\
    \ some elements have same sum of digits, return sorted list with equal elements\
    \ in original order\n    # if some elements have different sum of digits, return\
    \ sorted list with equal elements in original order\n    # if some elements have\
    \ same sum of digits, return sorted list with equal elements in original order\n\
    \    # if some elements"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
