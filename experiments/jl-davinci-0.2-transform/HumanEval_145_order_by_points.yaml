name: HumanEval_145_order_by_points
language: jl
prompt: "\"\"\"\n    Write a function which sorts the given list of integers\n   \
  \ in ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
  \ 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
  \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
  \ 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6,\
  \ 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
completions: ["    if length(nums) == 0\n        return nums\n    end\n    sums =\
    \ [sum(digits(n)) for n in nums]\n    return sortperm(sums)[nums]\nend", "   \
    \ return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    if length(nums)\
    \ == 0\n        return []\n    end\n    sums = [sum(digits(x)) for x in nums]\n\
    \    return [nums[i] for i in sortperm(sums)]\nend", "    # sort by sum of digits\n\
    \    # if sum of digits is the same, sort by index\n    # sort by index is the\
    \ default\n    # sort by sum of digits is the first key\n    # sort by index is\
    \ the second key\n    # sort by index is the default\n    # sort by sum of digits\
    \ is the first key\n    # sort by index is the second key\n    # sort by index\
    \ is the default\n    # sort by sum of digits is the first key\n    # sort by\
    \ index is the second key\n    # sort by index is the default\n    # sort by sum\
    \ of digits is the first key\n    # sort by index is the second key\n    # sort\
    \ by index is the default\n    # sort by sum of digits is the first key\n    #\
    \ sort by index is the second key\n    # sort by index is the default\n    # sort\
    \ by sum of digits is the first key\n    # sort by index is the second key\n \
    \   # sort by index is the default\n    # sort by sum of digits is the first key\n\
    \    # sort by index is the second key\n    # sort by index is the default\n \
    \   # sort by sum of digits is the first key\n    # sort by index is the second\
    \ key\n    # sort by index is the default\n    # sort by sum of digits is the\
    \ first key\n    # sort by index is the second key\n    # sort by index is the\
    \ default\n    # sort by sum of digits is the first key\n    # sort by index is\
    \ the second key\n    # sort by index is the default\n    # sort by sum of digits\
    \ is the first key\n    # sort by index is the second key\n    # sort by index\
    \ is the default\n    # sort by sum of digits is the first key\n    # sort by\
    \ index is the second key\n    # sort by index is the default\n    # sort by sum\
    \ of digits is the first key\n    # sort by index is the second key\n    # sort\
    \ by index is the default\n    # sort by sum of digits is the first key\n    #\
    \ sort by index is the second key\n    # sort by index is the default\n    # sort\
    \ by sum of digits is the first key\n    # sort by index is the second key\n \
    \   # sort by index is the default\n    # sort by sum of digits is the first key\n\
    \    # sort", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if\
    \ length(nums) == 0\n        return nums\n    end\n    nums_with_sum = [sum(digits(nums[i]))\
    \ for i in 1:length(nums)]\n    return sortperm(nums_with_sum)[nums]\nend", " \
    \   return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums) ==\
    \ 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    return sortperm(sums)[nums]\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    sums\
    \ = [sum(digits(n)) for n in nums]\n    return sortperm(sums)[nums]\nend", " \
    \   # your code here\nend", "    if length(nums) == 0\n        return nums\n \
    \   end\n    nums_with_points = [(nums[i], sum(digits(nums[i]))) for i in 1:length(nums)]\n\
    \    sorted_nums_with_points = sort(nums_with_points, by = x -> x[2])\n    return\
    \ [x[1] for x in sorted_nums_with_points]\nend", "    if length(nums) == 0\n \
    \       return nums\n    end\n    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    # your code here\nend", "    if isempty(nums)\n        return []\n\
    \    end\n    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your\
    \ code here\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", " \
    \   if length(nums) == 0\n        return nums\n    end\n    # sort by sum of digits\n\
    \    sorted = sort(nums, by=x->sum(digits(x)))\n    # sort by index\n    return\
    \ sort(sorted, by=x->findfirst(nums, x))\nend", "    if length(nums) == 0\n  \
    \      return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return\
    \ nums[sortperm(sums)]\nend", "    # your code here\nend\n "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
