language: jl
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    date_split = split(date,\
    \ \"-\")\n    if length(date_split) != 3\n        return false\n    end\n    month\
    \ = parse(Int, date_split[1])\n    day = parse(Int, date_split[2])\n    year =\
    \ parse(Int, date_split[3])\n    if month < 1 || month > 12\n        return false\n\
    \    end\n    if month in [1,3,5,7,8,10,12]\n        if day < 1 || day > 31\n\
    \            return false\n        end\n    elseif month in [4,6,9,11]\n     \
    \   if day < 1 || day > 30\n            return false\n        end\n    else\n\
    \        if day < 1 || day > 29\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\
    \t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\")\
    \ == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if !occursin(r\"-\", date)\n        return\
    \ false\n    end\n    if !occursin(r\"/\", date)\n        return false\n    end\n\
    \    if !occursin(r\"\\d\", date)\n        return false\n    end\n    if !occursin(r\"\
    \\d\", date)\n        return false\n    end\n    if !occursin(r\"\\d\", date)\n\
    \        return false\n    end\n    if !occursin(r\"\\d\", date)\n        return\
    \ false\n    end\n    if !occursin(r\"\\d\", date)\n        return false\n   \
    \ end\n    if !occursin(r\"\\d\", date)\n        return false\n    end\n    if\
    \ !occursin(r\"\\d\", date)\n        return false\n    end\n    if !occursin(r\"\
    \\d\", date)\n        return false\n    end\n    if !occursin(r\"\\d\", date)\n\
    \        return false\n    end\n    if !occursin(r\"\\d\", date)\n        return\
    \ false\n    end\n    if !occursin(r\"\\d\", date)\n        return false\n   \
    \ end\n    if !occursin(r\"\\d\", date)\n        return false\n    end\n    if\
    \ !occursin(r\"\\d\", date)\n        return false\n    end\n    if !occursin(r\"\
    \\d\", date)\n        return false\n    end\n    if !occursin(r\"\\d\", date)\n\
    \        return false\n    end\n    if !occursin(r\"\\d\", date)\n        return\
    \ false\n    end\n    if !occursin(r\"\\d\", date)\n        return false\n   \
    \ end\n    if !occursin(r\"\\d\", date)\n        return false\n    end\n    if\
    \ !occursin(r\"\\d\", date)\n        return false\n    end\n    if !occursin(r\"\
    \\d\", date)\n        return false\n    end\n    if !occursin(r\"\\d\", date)\n\
    using Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2qw0mfs.jl:1\nin expression starting at /tmp/tmpb2qw0mfs.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    # check if the date is\
    \ empty\n    if date == \"\"\n        return false\n    end\n    \n    # split\
    \ the date into month, day and year\n    date_split = split(date, \"-\")\n   \
    \ \n    # check if the date is in the correct format\n    if length(date_split)\
    \ != 3\n        return false\n    end\n    \n    # check if the month is in the\
    \ correct range\n    if parse(Int, date_split[1]) < 1 || parse(Int, date_split[1])\
    \ > 12\n        return false\n    end\n    \n    # check if the day is in the\
    \ correct range\n    if parse(Int, date_split[1]) == 1 || parse(Int, date_split[1])\
    \ == 3 || parse(Int, date_split[1]) == 5 || parse(Int, date_split[1]) == 7 ||\
    \ parse(Int, date_split[1]) == 8 || parse(Int, date_split[1]) == 10 || parse(Int,\
    \ date_split[1]) == 12\n        if parse(Int, date_split[2]) < 1 || parse(Int,\
    \ date_split[2]) > 31\n            return false\n        end\n    elseif parse(Int,\
    \ date_split[1]) == 4 || parse(Int, date_split[1]) == 6 || parse(Int, date_split[1])\
    \ == 9 || parse(Int, date_split[1]) == 11\n        if parse(Int, date_split[2])\
    \ < 1 || parse(Int, date_split[2]) > 30\n            return false\n        end\n\
    \    elseif parse(Int, date_split[1]) == 2\n        if parse(Int, date_split[2])\
    \ < 1 || parse(Int, date_split[2]) > 29\n            return false\n        end\n\
    \    end\n    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"\
    15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    if !(date[1:2] in [\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"\
    07\",\"08\",\"09\",\"10\",\"11\",\"12\"])\n        return false\n    end\n   \
    \ if !(date[4:5] in [\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"\
    09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"\
    20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"\
    31\"])\n        return false\n    end\n    if !(date[7:10] in [\"2000\",\"2001\"\
    ,\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\"\
    ,\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"\
    ,\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\"\
    ,\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\"\
    ,\"2038\",\"2039\",\"2040\",\"2041\",\"2042\",\"2043\",\"2044\",\"2045\",\"2046\"\
    ,\"2047\",\"2048\",\"2049\",\"2050\",\"2051\",\"2052\",\"2053\",\"2054\",\"2055\"\
    ,\"2056\",\"2057\",\"2058\",\"2059\",\"2060\",\"2061\",\"2062\",\"2063\",\"2064\"\
    ,\"2065\",\"2066\",\"2067\",\"2068\",\"2069\",\"2070\",\"2071\",\"2072\",\"2073\"\
    ,\"2074\",\"2075\",\"2076\",\"2077\",\"2078\",\"2079\",\"2080\",\"2081\",\"2082\"\
    ,\"2083\",\"2084\",\"2085\",\"2086\",\"2087\",\"2088\",\"2089\",\"2090\",\"2091\"\
    ,\"2092\",\"2093\",\"2094\",\"2095\",\"2096\",\"2097\",\"2098\",\"2099\",\"2100\"\
    ])\n        return false\n    end\n    if date[1:2] in [\"01\",\"03\",\"05\",\"\
    07\",\"08\",\"10\",\"12\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\
    \t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\")\
    \ == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbliotfll.jl:49\nin expression starting at\
    \ /tmp/tmpbliotfll.jl:49\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if !(date[3] == '-' && date[6] == '-')\n        return false\n \
    \   end\n    month = parse(Int, date[1:2])\n    day = parse(Int, date[4:5])\n\
    \    year = parse(Int, date[7:10])\n    if month < 1 || month > 12\n        return\
    \ false\n    end\n    if month == 2\n        if day < 1 || day > 29\n        \
    \    return false\n        end\n    elseif month == 4 || month == 6 || month ==\
    \ 9 || month == 11\n        if day < 1 || day > 30\n            return false\n\
    \        end\n    else\n        if day < 1 || day > 31\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"\
    15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    if !(date[1:2] in [\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"\
    07\",\"08\",\"09\",\"10\",\"11\",\"12\"])\n        return false\n    end\n   \
    \ if !(date[4:5] in [\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"\
    09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"\
    20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"\
    31\"])\n        return false\n    end\n    if !(date[7:10] in [\"2000\",\"2001\"\
    ,\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\"\
    ,\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"\
    ,\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\"\
    ,\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\"\
    ,\"2038\",\"2039\",\"2040\",\"2041\",\"2042\",\"2043\",\"2044\",\"2045\",\"2046\"\
    ,\"2047\",\"2048\",\"2049\",\"2050\",\"2051\",\"2052\",\"2053\",\"2054\",\"2055\"\
    ,\"2056\",\"2057\",\"2058\",\"2059\",\"2060\",\"2061\",\"2062\",\"2063\",\"2064\"\
    ,\"2065\",\"2066\",\"2067\",\"2068\",\"2069\",\"2070\",\"2071\",\"2072\",\"2073\"\
    ,\"2074\",\"2075\",\"2076\",\"2077\",\"2078\",\"2079\",\"2080\",\"2081\",\"2082\"\
    ,\"2083\",\"2084\",\"2085\",\"2086\",\"2087\",\"2088\",\"2089\",\"2090\",\"2091\"\
    ,\"2092\",\"2093\",\"2094\",\"2095\",\"2096\",\"2097\",\"2098\",\"2099\",\"2100\"\
    ])\n        return false\n    end\n    if date[1:2] == \"02\"\n        if date[4:5]\
    \ == \"\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbazzx6q.jl:50\nin expression starting at\
    \ /tmp/tmpcbazzx6q.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    month = parse(Int, date[1:2])\n    day = parse(Int, date[4:5])\n\
    \    year = parse(Int, date[7:10])\n    if month < 1 || month > 12\n        return\
    \ false\n    end\n    if month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12\n        if day < 1 || day > 31\n\
    \            return false\n        end\n    end\n    if month == 4 || month ==\
    \ 6 || month == 9 || month == 11\n        if day < 1 || day > 30\n           \
    \ return false\n        end\n    end\n    if month == 2\n        if day < 1 ||\
    \ day > 29\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqin4jt_d.jl:59

    '
  stdout: "test set: Test Failed at /tmp/tmpqin4jt_d.jl:62\n  Expression: candidate(\"\
    03-11-2000\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:65\n  Expression: candidate(\"06-04-2020\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:66\n  Expression: candidate(\"01-01-2007\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:70\n  Expression: candidate(\"06-06-2005\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:72\n  Expression: candidate(\"04-12-2003\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdl"
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    # check if date is empty\n\
    \    if length(date) == 0\n        return false\n    end\n    \n    # check if\
    \ date is in the format: mm-dd-yyyy\n    if length(split(date, \"-\")) != 3\n\
    \        return false\n    end\n    \n    # check if the months are not less than\
    \ 1 or higher than 12\n    month = parse(Int, split(date, \"-\")[1])\n    if month\
    \ < 1 || month > 12\n        return false\n    end\n    \n    # check if the number\
    \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    day = parse(Int, split(date, \"-\")[2])\n    if month == 2\n \
    \       if day < 1 || day > 29\n            return false\n        end\n    elseif\
    \ month == 4 || month == 6 || month == 9 || month == 11\n        if day < 1 ||\
    \ day > 30\n            return false\n        end\n    else\n        if day <\
    \ 1 || day > 31\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    date_split = split(date, \"-\")\n    if length(date_split)\
    \ != 3\n        return false\n    end\n    day = parse(Int, date_split[2])\n \
    \   month = parse(Int, date_split[1])\n    year = parse(Int, date_split[3])\n\
    \    if month < 1 || month > 12\n        return false\n    end\n    if month ==\
    \ 2\n        if day < 1 || day > 29\n            return false\n        end\n \
    \   elseif month == 4 || month == 6 || month == 9 || month == 11\n        if day\
    \ < 1 || day > 30\n            return false\n        end\n    else\n        if\
    \ day < 1 || day > 31\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    if !(date[1:2] in [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\"\
    , \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"])\n        return false\n   \
    \ end\n    if !(date[4:5] in [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\",\
    \ \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\"])\n        return false\n    end\n  \
    \  if !(date[7:10] in [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\"\
    , \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\"\
    , \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"\
    , \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\"\
    , \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\"\
    , \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\"\
    , \"2070\", \"2071\", \"2072\", \"2073\nusing Test\n\n@testset begin\n\ncandidate\
    \ = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"\
    15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrc3zr4h.jl:46\nin expression starting at\
    \ /tmp/tmpsrc3zr4h.jl:46\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    # check if date is empty\n\
    \    if date == \"\"\n        return false\n    end\n    \n    # check if date\
    \ is in the format mm-dd-yyyy\n    if length(split(date, \"-\")) != 3\n      \
    \  return false\n    end\n    \n    # check if the months are not less than 1\
    \ or higher than 12\n    month = parse(Int, split(date, \"-\")[1])\n    if month\
    \ < 1 || month > 12\n        return false\n    end\n    \n    # check if the number\
    \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    day = parse(Int, split(date, \"-\")[2])\n    if month == 2\n \
    \       if day < 1 || day > 29\n            return false\n        end\n    elseif\
    \ month == 4 || month == 6 || month == 9 || month == 11\n        if day < 1 ||\
    \ day > 30\n            return false\n        end\n    else\n        if day <\
    \ 1 || day > 31\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    month = parse(Int, date[1:2])\n    day = parse(Int, date[4:5])\n\
    \    year = parse(Int, date[7:10])\n    if month < 1 || month > 12\n        return\
    \ false\n    end\n    if month == 2\n        if day < 1 || day > 29\n        \
    \    return false\n        end\n    elseif month == 4 || month == 6 || month ==\
    \ 9 || month == 11\n        if day < 1 || day > 30\n            return false\n\
    \        end\n    else\n        if day < 1 || day > 31\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"\
    15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplf71dxcw.jl:57

    '
  stdout: "test set: Test Failed at /tmp/tmplf71dxcw.jl:60\n  Expression: candidate(\"\
    03-11-2000\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf71dxcw.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf71dxcw.jl:59\ntest set: Test\
    \ Failed at /tmp/tmplf71dxcw.jl:63\n  Expression: candidate(\"06-04-2020\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf71dxcw.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf71dxcw.jl:59\ntest set: Test\
    \ Failed at /tmp/tmplf71dxcw.jl:64\n  Expression: candidate(\"01-01-2007\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf71dxcw.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf71dxcw.jl:59\ntest set: Test\
    \ Failed at /tmp/tmplf71dxcw.jl:68\n  Expression: candidate(\"06-06-2005\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf71dxcw.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf71dxcw.jl:59\ntest set: Test\
    \ Failed at /tmp/tmplf71dxcw.jl:70\n  Expression: candidate(\"04-12-2003\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdl"
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    if !(date[1:2] in [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\"\
    , \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"])\n        return false\n   \
    \ end\n    if !(date[4:5] in [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\",\
    \ \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\"])\n        return false\n    end\n  \
    \  if !(date[7:10] in [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\"\
    , \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\"\
    , \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"\
    , \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\"\
    , \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\"\
    , \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\"\
    , \"2070\", \"2071\", \"2072\", \"2073\nusing Test\n\n@testset begin\n\ncandidate\
    \ = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"\
    15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrc3zr4h.jl:46\nin expression starting at\
    \ /tmp/tmpsrc3zr4h.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    month = parse(Int, date[1:2])\n    day = parse(Int, date[4:5])\n\
    \    year = parse(Int, date[7:10])\n    if month < 1 || month > 12\n        return\
    \ false\n    end\n    if month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12\n        if day < 1 || day > 31\n\
    \            return false\n        end\n    end\n    if month == 4 || month ==\
    \ 6 || month == 9 || month == 11\n        if day < 1 || day > 30\n           \
    \ return false\n        end\n    end\n    if month == 2\n        if day < 1 ||\
    \ day > 29\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqin4jt_d.jl:59

    '
  stdout: "test set: Test Failed at /tmp/tmpqin4jt_d.jl:62\n  Expression: candidate(\"\
    03-11-2000\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:65\n  Expression: candidate(\"06-04-2020\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:66\n  Expression: candidate(\"01-01-2007\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:70\n  Expression: candidate(\"06-06-2005\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqin4jt_d.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqin4jt_d.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpqin4jt_d.jl:72\n  Expression: candidate(\"04-12-2003\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdl"
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if contains(date, \"/\")\n        return false\n\
    \    end\n    date_split = split(date, \"-\")\n    if length(date_split) != 3\n\
    \        return false\n    end\n    month = parse(Int, date_split[1])\n    day\
    \ = parse(Int, date_split[2])\n    year = parse(Int, date_split[3])\n    if month\
    \ < 1 || month > 12\n        return false\n    end\n    if month == 2\n      \
    \  if day < 1 || day > 29\n            return false\n        end\n    elseif month\
    \ == 4 || month == 6 || month == 9 || month == 11\n        if day < 1 || day >\
    \ 30\n            return false\n        end\n    else\n        if day < 1 || day\
    \ > 31\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if date == \"\"\n    \
    \    return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    if date[1:2] == \"00\" || date[4:5] == \"00\" || date[7:10] == \"\
    0000\"\n        return false\n    end\n    if parse(Int, date[1:2]) < 1 || parse(Int,\
    \ date[1:2]) > 12\n        return false\n    end\n    if parse(Int, date[1:2])\
    \ == 2\n        if parse(Int, date[4:5]) > 29\n            return false\n    \
    \    end\n    elseif parse(Int, date[1:2]) == 4 || parse(Int, date[1:2]) == 6\
    \ || parse(Int, date[1:2]) == 9 || parse(Int, date[1:2]) == 11\n        if parse(Int,\
    \ date[4:5]) > 30\n            return false\n        end\n    else\n        if\
    \ parse(Int, date[4:5]) > 31\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\
    \t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\")\
    \ == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ak9l0fh.jl:57

    '
  stdout: "test set: Test Failed at /tmp/tmp6ak9l0fh.jl:60\n  Expression: candidate(\"\
    03-11-2000\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ak9l0fh.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ak9l0fh.jl:59\ntest set: Test\
    \ Failed at /tmp/tmp6ak9l0fh.jl:63\n  Expression: candidate(\"06-04-2020\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ak9l0fh.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ak9l0fh.jl:59\ntest set: Test\
    \ Failed at /tmp/tmp6ak9l0fh.jl:64\n  Expression: candidate(\"01-01-2007\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ak9l0fh.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ak9l0fh.jl:59\ntest set: Test\
    \ Failed at /tmp/tmp6ak9l0fh.jl:68\n  Expression: candidate(\"06-06-2005\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ak9l0fh.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ak9l0fh.jl:59\ntest set: Test\
    \ Failed at /tmp/tmp6ak9l0fh.jl:70\n  Expression: candidate(\"04-12-2003\") ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdl"
- exit_code: 0
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    date_split = split(date, \"-\")\n    if length(date_split)\
    \ != 3\n        return false\n    end\n    month = parse(Int, date_split[1])\n\
    \    day = parse(Int, date_split[2])\n    year = parse(Int, date_split[3])\n \
    \   if month < 1 || month > 12\n        return false\n    end\n    if month ==\
    \ 2\n        if day < 1 || day > 29\n            return false\n        end\n \
    \   elseif month == 4 || month == 6 || month == 9 || month == 11\n        if day\
    \ < 1 || day > 30\n            return false\n        end\n    else\n        if\
    \ day < 1 || day > 31\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   16     16

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) == 0\n\
    \        return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if date[3] != \"-\" || date[6] != \"-\"\n        return false\n\
    \    end\n    if !(date[1:2] in \"01\" || date[1:2] in \"02\" || date[1:2] in\
    \ \"03\" || date[1:2] in \"04\" || date[1:2] in \"05\" || date[1:2] in \"06\"\
    \ || date[1:2] in \"07\" || date[1:2] in \"08\" || date[1:2] in \"09\" || date[1:2]\
    \ in \"10\" || date[1:2] in \"11\" || date[1:2] in \"12\")\n        return false\n\
    \    end\n    if !(date[4:5] in \"01\" || date[4:5] in \"02\" || date[4:5] in\
    \ \"03\" || date[4:5] in \"04\" || date[4:5] in \"05\" || date[4:5] in \"06\"\
    \ || date[4:5] in \"07\" || date[4:5] in \"08\" || date[4:5] in \"09\" || date[4:5]\
    \ in \"10\" || date[4:5] in \"11\" || date[4:5] in \"12\" || date[4:5] in \"13\"\
    \ || date[4:5] in \"14\" || date[4:5] in \"15\" || date[4:5] in \"16\" || date[4:5]\
    \ in \"17\" || date[4:5] in \"18\" || date[4:5] in \"19\" || date[4:5] in \"20\"\
    \ || date[4:5] in \"21\" || date[4:5] in \"22\" || date[4:5] in \"23\" || date[4:5]\
    \ in \"24\" || date[4:5] in \"25\" || date[4:5] in \"26\" || date[4:5] in \"27\"\
    \ || date[4:5] in \"28\"\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\
    \t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\")\
    \ == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"\
    06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"\
    03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"\
    21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"\
    04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"\
    2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"\
    04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3bq8kkt9.jl:38\nin expression starting at\
    \ /tmp/tmp3bq8kkt9.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if isempty(date)\n   \
    \     return false\n    end\n    if length(date) != 10\n        return false\n\
    \    end\n    if !(date[3] == '-' && date[6] == '-')\n        return false\n \
    \   end\n    day = parse(Int, date[1:2])\n    month = parse(Int, date[4:5])\n\
    \    year = parse(Int, date[7:10])\n    if month == 2\n        if day > 29\n \
    \           return false\n        end\n    elseif month == 4 || month == 6 ||\
    \ month == 9 || month == 11\n        if day > 30\n            return false\n \
    \       end\n    elseif month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12\n        if day > 31\n            return\
    \ false\n        end\n    else\n        return false\n    end\n    if month >\
    \ 12\n        return false\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\
    \t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\")\
    \ == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 15 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmecs65uw.jl:59

    '
  stdout: "test set: Test Failed at /tmp/tmpmecs65uw.jl:63\n  Expression: candidate(\"\
    15-01-2012\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmecs65uw.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmecs65uw.jl:61\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   15     1     16\n"
- exit_code: 1
  program: "\"\"\"You have to write a function which validates a given date string\
    \ and\n    returns True if the date is valid otherwise False.\n    The date is\
    \ valid if all of the following rules are satisfied:\n    1. The date string is\
    \ not empty.\n    2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    3. The months should not be less than\
    \ 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n\
    \    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\"\
    )\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"\
    06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n   \
    \ \"\"\"\nfunction valid_date(date::String)::Bool \n    if length(date) != 10\n\
    \        return false\n    end\n    if !(date[1] in '0123456789' && date[2] in\
    \ '0123456789' && date[4] in '0123456789' && date[5] in '0123456789' && date[7]\
    \ in '0123456789' && date[8] in '0123456789' && date[9] in '0123456789' && date[10]\
    \ in '0123456789')\n        return false\n    end\n    if date[3] != '-' || date[6]\
    \ != '-'\n        return false\n    end\n    month = parse(Int, date[1:2])\n \
    \   day = parse(Int, date[4:5])\n    year = parse(Int, date[7:10])\n    if month\
    \ < 1 || month > 12\n        return false\n    end\n    if month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\
    \        if day < 1 || day > 31\n            return false\n        end\n    elseif\
    \ month == 4 || month == 6 || month == 9 || month == 11\n        if day < 1 ||\
    \ day > 30\n            return false\n        end\n    else\n        if year %\
    \ 4 == 0\n            if day < 1 || day > 29\n                return false\n \
    \           end\n        else\n            if day < 1 || day > 28\n          \
    \      return false\n            end\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"\
    03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"\
    04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"\
    01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"\
    06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"\
    04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"\
    20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"\
    2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpct192ddw.jl:28\nin expression\
    \ starting at /tmp/tmpct192ddw.jl:28\n"
  stdout: ''
