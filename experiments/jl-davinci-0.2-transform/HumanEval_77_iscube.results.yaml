language: jl
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        return iscube(-a)\n\
    \    end\n    if a == 0\n        return true\n    end\n    if a == 1\n       \
    \ return true\n    end\n    if a == 2\n        return false\n    end\n    if a\
    \ == 3\n        return true\n    end\n    if a == 4\n        return false\n  \
    \  end\n    if a == 5\n        return false\n    end\n    if a == 6\n        return\
    \ false\n    end\n    if a == 7\n        return false\n    end\n    if a == 8\n\
    \        return true\n    end\n    if a == 9\n        return true\n    end\n \
    \   if a == 10\n        return false\n    end\n    if a == 11\n        return\
    \ false\n    end\n    if a == 12\n        return false\n    end\n    if a == 13\n\
    \        return false\n    end\n    if a == 14\n        return false\n    end\n\
    \    if a == 15\n        return false\n    end\n    if a == 16\n        return\
    \ true\n    end\n    if a == 17\n        return false\n    end\n    if a == 18\n\
    \        return false\n    end\n    if a == 19\n        return false\n    end\n\
    \    if a == 20\n        return false\n    end\n    if a == 21\n        return\
    \ false\n    end\n    if a == 22\n        return false\n    end\n    if a == 23\n\
    \        return false\n    end\n    if a == 24\n        return false\n    end\n\
    \    if a == 25\n        return true\n    end\n    if a == 26\n        return\
    \ false\n    end\n    if a == 27\n        return true\n    end\n    if a == 28\n\
    \        return false\n    end\n    if a == 29\n        return false\n    end\n\
    \    if a == 30\n        return false\n    end\n    if a == 31\n        return\
    \ false\n    end\n    if a == 32\n        return false\n    end\n    if a == 33\n\
    \        return false\n    end\n    if a == 34\n        return false\n    end\n\
    \    if a == 35\n        return false\n    end\n    if a == 36\n        return\
    \ false\n    end\n    if a == 37\n        return false\n    end\n\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpofq6g5cm.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpofq6g5cm.jl:1\n\
    in expression starting at /tmp/tmpofq6g5cm.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    b = round(Int64, cbrt(a))\n\
    \    return b^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i in 1:a\n        if i*i*i\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || a == 1 || a == -1\
    \ || (a > 0 && isinteger(cbrt(a)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || a == 1 || (a > 0\
    \ && a == round(Int64, a^(1/3))) || (a < 0 && a == round(Int64, -a^(1/3)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxr50i4pm.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpxr50i4pm.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpxr50i4pm.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxr50i4pm.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxr50i4pm.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpxr50i4pm.jl:30\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxr50i4pm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxr50i4pm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxr50i4pm.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxr50i4pm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxr50i4pm.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || a == 1 || a == -1\
    \ || (a > 0 && isinteger(cbrt(a))) || (a < 0 && isinteger(cbrt(-a)))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    b = floor(Int64, a^(1/3))\n\
    \    return b^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp85z57h2v.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp85z57h2v.jl:37\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp85z57h2v.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85z57h2v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp85z57h2v.jl:39\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp85z57h2v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp85z57h2v.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    b = round(Int64, a^(1/3))\n\
    \    if b^3 == a\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || a == 1 || a == -1\
    \ || (a > 0 && isinteger(cbrt(a)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || (a > 0 && (round(Int64,\
    \ a^(1/3))^3 == a))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuif3c56o.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpuif3c56o.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuif3c56o.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuif3c56o.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || a == 1 || a == -1\
    \ || (a > 0 && (a % (round(Int64, (a^(1/3)))^3) == 0))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0y8za149.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp0y8za149.jl:28\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0y8za149.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0y8za149.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    for i = 1:a\n        if i^3\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    i = 1\n    while i^3 <= a\n\
    \        if i^3 == a\n            return true\n        end\n        i += 1\n \
    \   end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        return iscube(-a)\n\
    \    end\n    if a == 0\n        return true\n    end\n    if a == 1\n       \
    \ return true\n    end\n    if a == 2\n        return false\n    end\n    if a\
    \ == 3\n        return true\n    end\n    if a == 4\n        return false\n  \
    \  end\n    if a == 5\n        return false\n    end\n    if a == 6\n        return\
    \ false\n    end\n    if a == 7\n        return false\n    end\n    if a == 8\n\
    \        return true\n    end\n    if a == 9\n        return true\n    end\n \
    \   if a == 10\n        return false\n    end\n    if a == 11\n        return\
    \ false\n    end\n    if a == 12\n        return false\n    end\n    if a == 13\n\
    \        return false\n    end\n    if a == 14\n        return false\n    end\n\
    \    if a == 15\n        return false\n    end\n    if a == 16\n        return\
    \ true\n    end\n    if a == 17\n        return false\n    end\n    if a == 18\n\
    \        return false\n    end\n    if a == 19\n        return false\n    end\n\
    \    if a == 20\n        return false\n    end\n    if a == 21\n        return\
    \ false\n    end\n    if a == 22\n        return false\n    end\n    if a == 23\n\
    \        return false\n    end\n    if a == 24\n        return false\n    end\n\
    \    if a == 25\n        return true\n    end\n    if a == 26\n        return\
    \ false\n    end\n    if a == 27\n        return true\n    end\n    if a == 28\n\
    \        return false\n    end\n    if a == 29\n        return false\n    end\n\
    \    if a == 30\n        return false\n    end\n    if a == 31\n        return\
    \ false\n    end\n    if a == 32\n        return false\n    end\n    if a == 33\n\
    \        return false\n    end\n    if a == 34\n        return false\n    end\n\
    \    if a == 35\n        return false\n    end\n    if a == 36\n        return\
    \ false\n    end\n    if a == 37\n        return false\n    end\n\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpofq6g5cm.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpofq6g5cm.jl:1\n\
    in expression starting at /tmp/tmpofq6g5cm.jl:1\n"
  stdout: ''
