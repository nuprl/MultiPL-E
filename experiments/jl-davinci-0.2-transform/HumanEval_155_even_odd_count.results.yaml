language: jl
name: HumanEval_155_even_odd_count
results:
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    if num < 0\n        num\
    \ = -num\n    end\n    while num > 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuqofw2z.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpiuqofw2z.jl:37\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuqofw2z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuqofw2z.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    if num < 0\n        num\
    \ = -num\n    end\n    while num > 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuqofw2z.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpiuqofw2z.jl:37\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuqofw2z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuqofw2z.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in num\n        if\
    \ i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return (even_count, odd_count)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kvribel.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp5kvribel.jl:27\n  Expression: candidate(-78)\
    \ == (1, 1)\n   Evaluated: (1, 0) == (1, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kvribel.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kvribel.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5kvribel.jl:28\n  Expression: candidate(3452) == (2, 2)\n\
    \   Evaluated: (1, 0) == (2, 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kvribel.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kvribel.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5kvribel.jl:29\n  Expression: candidate(346211) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kvribel.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kvribel.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5kvribel.jl:30\n  Expression: candidate(-345821) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kvribel.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kvribel.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5kvribel.jl:32\n  Expression: candidate(-45347) == (2, 3)\n\
    \   Evaluated: (0, 1) == (2, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    if num < 0\n        num\
    \ = -num\n    end\n    while num > 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuqofw2z.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpiuqofw2z.jl:37\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuqofw2z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuqofw2z.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in num:\n        if\
    \ i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return even_count, odd_count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6ngw8dv.jl:13\nin expression starting at\
    \ /tmp/tmpn6ngw8dv.jl:13\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for digit in digits(num)\n\
    \        if digit % 2 == 0\n            even_count += 1\n        else\n      \
    \      odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    while num != 0\n       \
    \ if num % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return (even_count,\
    \ odd_count)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgionj4ga.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpgionj4ga.jl:34\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgionj4ga.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgionj4ga.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    if num < 0\n        num\
    \ = -num\n    end\n    while num > 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuqofw2z.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpiuqofw2z.jl:37\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuqofw2z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuqofw2z.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in num\n        if\
    \ i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzij4uuv0.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpzij4uuv0.jl:27\n  Expression: candidate(-78)\
    \ == (1, 1)\n   Evaluated: (1, 0) == (1, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:28\n  Expression: candidate(3452) == (2, 2)\n\
    \   Evaluated: (1, 0) == (2, 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:29\n  Expression: candidate(346211) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:30\n  Expression: candidate(-345821) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:32\n  Expression: candidate(-45347) == (2, 3)\n\
    \   Evaluated: (0, 1) == (2, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in num\n        if\
    \ i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzij4uuv0.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpzij4uuv0.jl:27\n  Expression: candidate(-78)\
    \ == (1, 1)\n   Evaluated: (1, 0) == (1, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:28\n  Expression: candidate(3452) == (2, 2)\n\
    \   Evaluated: (1, 0) == (2, 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:29\n  Expression: candidate(346211) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:30\n  Expression: candidate(-345821) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:32\n  Expression: candidate(-45347) == (2, 3)\n\
    \   Evaluated: (0, 1) == (2, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    if num < 0\n        num\
    \ = -num\n    end\n    while num > 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuqofw2z.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpiuqofw2z.jl:37\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuqofw2z.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuqofw2z.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in num\n        if\
    \ i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzij4uuv0.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpzij4uuv0.jl:27\n  Expression: candidate(-78)\
    \ == (1, 1)\n   Evaluated: (1, 0) == (1, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:28\n  Expression: candidate(3452) == (2, 2)\n\
    \   Evaluated: (1, 0) == (2, 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:29\n  Expression: candidate(346211) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:30\n  Expression: candidate(-345821) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzij4uuv0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzij4uuv0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzij4uuv0.jl:32\n  Expression: candidate(-45347) == (2, 3)\n\
    \   Evaluated: (0, 1) == (2, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for digit in digits(num)\n\
    \        if digit % 2 == 0\n            even_count += 1\n        else\n      \
    \      odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
