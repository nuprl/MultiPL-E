language: jl
name: HumanEval_127_intersection
results:
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk399knrw.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpk399knrw.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpk399knrw.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk399knrw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk399knrw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk399knrw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk399knrw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk399knrw.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk399knrw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk399knrw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk399knrw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk399knrw.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk399knrw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk399knrw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6mhuggnc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp6mhuggnc.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if start == finish\n        return\
    \ \"YES\"\n    end\n    for i in 2:finish-1\n        if start % i == 0\n     \
    \       return \"NO\"\n        end\n    end\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqwcj_48k.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpqwcj_48k.jl:44\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwcj_48k.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwcj_48k.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqwcj_48k.jl:45\n  Expression: candidate((-1, 1), (0, 4)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwcj_48k.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwcj_48k.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqwcj_48k.jl:48\n  Expression: candidate((-11, 2), (-1, -1))\
    \ == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwcj_48k.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwcj_48k.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqwcj_48k.jl:50\n  Expression: candidate((1, 2), (1, 2)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwcj_48k.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwcj_48k.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpqwcj_48k.jl:51\n  Expression: candidate((-2, -2), (-3, -2))\
    \ == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1eo4x3cq.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp1eo4x3cq.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6mhuggnc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp6mhuggnc.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6mhuggnc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp6mhuggnc.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1eo4x3cq.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp1eo4x3cq.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1eo4x3cq.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp1eo4x3cq.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1eo4x3cq.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp1eo4x3cq.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start <= stop\n\
    \        return isprime(stop - start + 1) ? \"YES\" : \"NO\"\n    else\n     \
    \   return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_cyafncp.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp_cyafncp.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp_cyafncp.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_cyafncp.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_cyafncp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_cyafncp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp_cyafncp.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_cyafncp.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_cyafncp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_cyafncp.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp_cyafncp.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_cyafncp.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_cyafncp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_cyafncp.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6mhuggnc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp6mhuggnc.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6mhuggnc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp6mhuggnc.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6mhuggnc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp6mhuggnc.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6mhuggnc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6mhuggnc.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mhuggnc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6mhuggnc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpaqsp57kk.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpaqsp57kk.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpaqsp57kk.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqsp57kk.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsp57kk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaqsp57kk.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaqsp57kk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaqsp57kk.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsp57kk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaqsp57kk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaqsp57kk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaqsp57kk.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsp57kk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaqsp57kk.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start <=\
    \ finish\n        return isprime(finish - start + 1) ? \"YES\" : \"NO\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpq5m4zzb2.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpq5m4zzb2.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpq5m4zzb2.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5m4zzb2.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5m4zzb2.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpq5m4zzb2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpq5m4zzb2.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpq5m4zzb2.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5m4zzb2.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpq5m4zzb2.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpq5m4zzb2.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpq5m4zzb2.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5m4zzb2.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpq5m4zzb2.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk399knrw.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpk399knrw.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpk399knrw.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk399knrw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk399knrw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk399knrw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk399knrw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk399knrw.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk399knrw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk399knrw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk399knrw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk399knrw.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk399knrw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk399knrw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start1, end1 = interval1\n\
    \    start2, end2 = interval2\n    if start1 > end1 || start2 > end2\n       \
    \ return \"NO\"\n    end\n    if start1 > start2\n        start1, start2 = start2,\
    \ start1\n    end\n    if end1 < end2\n        end1, end2 = end2, end1\n    end\n\
    \    if start2 > end1\n        return \"NO\"\n    end\n    if start2 <= end1\n\
    \        return isprime(end1 - start2 + 1) ? \"YES\" : \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmoqposdh.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpmoqposdh.jl:47\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpmoqposdh.jl:39\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmoqposdh.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmoqposdh.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpmoqposdh.jl:48\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmoqposdh.jl:39\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmoqposdh.jl:48 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmoqposdh.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpmoqposdh.jl:49\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmoqposdh.jl:39\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmoqposdh.jl:49 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmoqposdh.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpmoqposdh.jl:50\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpaqsp57kk.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpaqsp57kk.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpaqsp57kk.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqsp57kk.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsp57kk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaqsp57kk.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaqsp57kk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaqsp57kk.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsp57kk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaqsp57kk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaqsp57kk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaqsp57kk.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsp57kk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaqsp57kk.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1eo4x3cq.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp1eo4x3cq.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1eo4x3cq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1eo4x3cq.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eo4x3cq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1eo4x3cq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
- exit_code: 1
  program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if start == finish\n        return\
    \ \"YES\"\n    end\n    for i in 2:finish-1\n        if (finish - start) % i ==\
    \ 0\n            return \"NO\"\n        end\n    end\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp109b5jca.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp109b5jca.jl:44\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp109b5jca.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp109b5jca.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp109b5jca.jl:45\n  Expression: candidate((-1, 1), (0, 4)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp109b5jca.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp109b5jca.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp109b5jca.jl:48\n  Expression: candidate((-11, 2), (-1, -1))\
    \ == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp109b5jca.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp109b5jca.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp109b5jca.jl:50\n  Expression: candidate((1, 2), (1, 2)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp109b5jca.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp109b5jca.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp109b5jca.jl:51\n  Expression: candidate((-2, -2), (-3, -2))\
    \ == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7"
