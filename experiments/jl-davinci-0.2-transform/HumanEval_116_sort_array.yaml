name: HumanEval_116_sort_array
language: jl
prompt: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4,\
  \ 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>>\
  \ sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
  \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
  \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
  \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5])\
  \ == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
  \ 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
completions: ["    # your code here\n    return sort(arr, by=x->(count_ones(x), x))\n\
    end", "    # sort by number of ones in binary representation\n    # then sort\
    \ by decimal value\n    sort(arr, by=x->(count_ones(x), x))\nend", "    # sort\
    \ by number of ones in binary representation\n    # if same number of ones, sort\
    \ by decimal value\n    sorted_arr = sort(arr, by = x -> (count_ones(x), x))\n\
    \    return sorted_arr\nend", "    # sort by number of ones in binary representation\n\
    \    # then by decimal value\n    return sort(arr, by = (x -> (count_ones(x),\
    \ x)))\nend", "    # sort by number of ones in binary representation\n    # if\
    \ same number of ones, sort by decimal value\n    # sort in ascending order\n\
    \    # return sorted array\n    return sort(arr, by=x->(count_ones(x), x))\nend",
  "    # your code here\n    return sort(arr, by=x->(count_ones(x), x))\nend", " \
    \   # Your code here\n    return sort(arr, by = x -> (count_ones(x), x))\nend",
  "    # your code here\n    return sort(arr, by=x->(count_ones(x), x))\nend", " \
    \   # sort by number of ones in binary representation\n    # then sort by decimal\
    \ value\n    return sort(arr, by=[count_ones, identity])\nend", "    # sort by\
    \ number of 1s in binary representation\n    # if number of 1s is the same, sort\
    \ by decimal value\n    # sort in ascending order\n    # return sorted array\n\
    \    return sort(arr, by = x -> (count_ones(x), x))\nend", "    # sort by number\
    \ of ones in binary representation\n    # if equal, sort by decimal value\n  \
    \  return sort(arr, by=x->(count_ones(x), x))\nend", "    # your code here\nend",
  "    arr_sorted = sort(arr, by=x->(count_ones(x), x))\n    return arr_sorted\nend",
  "    # your code here\n    return sort(arr, by=x->(count_ones(x), x))\nend", " \
    \   # sort by number of ones in binary representation\n    # and then by decimal\
    \ value\n    sort(arr, by=x->(count_ones(x), x))\nend", "    return sort(arr,\
    \ by=x->(count_ones(x), x))\nend", "    return sort(arr, by=x->(count_ones(x),\
    \ x))\nend", "    # your code here\nend", "    # Your code here\nend", "    #\
    \ Your code here\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
