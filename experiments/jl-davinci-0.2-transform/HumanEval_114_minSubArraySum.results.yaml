language: jl
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    current_sum = nums[1]\n    for i in 2:length(nums)\n        current_sum =\
    \ min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\
    \    end\n    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n  \
    \  curr_sum = 0\n    for num in nums\n        curr_sum += num\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n  \
    \  curr_sum = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n  \
    \      if curr_sum < min_sum\n            min_sum = curr_sum\n        end\n  \
    \      if curr_sum > 0\n            curr_sum = 0\n        end\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n  \
    \  curr_sum = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n  \
    \      if curr_sum < min_sum\n            min_sum = curr_sum\n        end\n  \
    \      if curr_sum > 0\n            curr_sum = 0\n        end\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = 0\n    for num in nums\n        curr_sum += num\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Initialize the minimum\
    \ sum to the first element\n    min_sum = nums[1]\n    # Initialize the current\
    \ sum to the first element\n    curr_sum = nums[1]\n    # Iterate through the\
    \ rest of the array\n    for i in 2:length(nums)\n        # Update the current\
    \ sum\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        # Update the\
    \ minimum sum\n        min_sum = min(min_sum, curr_sum)\n    end\n    # Return\
    \ the minimum sum\n    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9t30qqbb.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp9t30qqbb.jl:30\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9t30qqbb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9t30qqbb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9t30qqbb.jl:31\n  Expression: candidate([-1, -2, -3]) == -6\n\
    \   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9t30qqbb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9t30qqbb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9t30qqbb.jl:32\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -8 == -14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9t30qqbb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9t30qqbb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9t30qqbb.jl:35\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9t30qqbb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9t30qqbb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9t30qqbb.jl:36\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdli"
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    current_sum = nums[1]\n    for i in 2:length(nums)\n        current_sum =\
    \ min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\
    \    end\n    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = 0\n    for num in nums\n        curr_sum += num\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n  \
    \  current_sum = 0\n    for num in nums\n        current_sum += num\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n  \
    \  curr_sum = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n  \
    \      if curr_sum < min_sum\n            min_sum = curr_sum\n        end\n  \
    \      if curr_sum > 0\n            curr_sum = 0\n        end\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n\
    \    curr_sum = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i],\
    \ curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
