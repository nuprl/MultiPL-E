language: jl
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx3zoc8kk.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpx3zoc8kk.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx3zoc8kk.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpx3zoc8kk.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # Convert string to lowercase\n\
    \    string = lowercase(string)\n    # Initialize a set to store distinct characters\n\
    \    distinct_characters = Set{Char}()\n    # Loop through each character in the\
    \ string\n    for character in string\n        # Add the character to the set\n\
    \        push!(distinct_characters, character)\n    end\n    # Return the size\
    \ of the set\n    return length(distinct_characters)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbc_fhm_z.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpbc_fhm_z.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpbc_fhm_z.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc_fhm_z.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc_fhm_z.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbc_fhm_z.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpbc_fhm_z.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc_fhm_z.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # TODO: implement this\
    \ function\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4r8g8h3m.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp4r8g8h3m.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4r8g8h3m.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4r8g8h3m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp4r8g8h3m.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4r8g8h3m.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4r8g8h3m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp4r8g8h3m.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4r8g8h3m.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4r8g8h3m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp4r8g8h3m.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4r8g8h3m.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4r8g8h3m.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        distinct_characters = distinct_characters\
    \ \u222A Set{Char}([character])\n    end\n    return length(distinct_characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpehbgpd9s.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpehbgpd9s.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehbgpd9s.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehbgpd9s.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpehbgpd9s.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehbgpd9s.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehbgpd9s.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpehbgpd9s.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehbgpd9s.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehbgpd9s.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2u9zljic.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp2u9zljic.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp2u9zljic.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u9zljic.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u9zljic.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2u9zljic.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp2u9zljic.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u9zljic.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u9zljic.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2u9zljic.jl:17\n  Test th"
  timestamp: 1659805591
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx3zoc8kk.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpx3zoc8kk.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2u9zljic.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp2u9zljic.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp2u9zljic.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u9zljic.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u9zljic.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2u9zljic.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp2u9zljic.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u9zljic.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u9zljic.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2u9zljic.jl:17\n  Test th"
  timestamp: 1659805591
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for character in string\n        push!(characters, character)\n    end\n\
    \    return length(characters)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt220cw30.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpt220cw30.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\ntest set: Test Failed at /tmp/tmpt220cw30.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt220cw30.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set()\n    for character in string\n        push!(distinct_characters, character)\n\
    \    end\n    return length(distinct_characters)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdcl61ila.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpdcl61ila.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdcl61ila.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdcl61ila.jl:18\ntest set: Test Failed at /tmp/tmpdcl61ila.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdcl61ila.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcl61ila.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdcl61ila.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdcl61ila.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcl61ila.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbc_fhm_z.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpbc_fhm_z.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpbc_fhm_z.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc_fhm_z.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc_fhm_z.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbc_fhm_z.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpbc_fhm_z.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc_fhm_z.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_chars = Set{Char}()\n\
    \    for char in string\n        push!(distinct_chars, char)\n    end\n    return\
    \ length(distinct_chars)\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp51dqudgk.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp51dqudgk.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp51dqudgk.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp51dqudgk.jl:18\ntest set: Test Failed at /tmp/tmp51dqudgk.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp51dqudgk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp51dqudgk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp51dqudgk.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp51dqudgk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp51dqudgk.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for c in string\n        push!(characters, c)\n    end\n    return length(characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps0n5dqcx.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmps0n5dqcx.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test Failed at /tmp/tmps0n5dqcx.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps0n5dqcx.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for character in string\n        push!(characters, character)\n    end\n\
    \    return length(characters)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt220cw30.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpt220cw30.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\ntest set: Test Failed at /tmp/tmpt220cw30.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt220cw30.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # Create a set of characters\
    \ in the string\n    characters = Set{Char}(string)\n    # Return the length of\
    \ the set\n    return length(characters)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpni_q8r91.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpni_q8r91.jl:20\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpni_q8r91.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpni_q8r91.jl:17\ntest set: Test Failed at /tmp/tmpni_q8r91.jl:21\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_q8r91.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_q8r91.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpni_q8r91.jl:22\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_q8r91.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_q8r91.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_chars = Set{Char}()\n\
    \    for char in string\n        push!(distinct_chars, char)\n    end\n    return\
    \ length(distinct_chars)\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp51dqudgk.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp51dqudgk.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp51dqudgk.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp51dqudgk.jl:18\ntest set: Test Failed at /tmp/tmp51dqudgk.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp51dqudgk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp51dqudgk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp51dqudgk.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp51dqudgk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp51dqudgk.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for c in string\n        push!(characters, c)\n    end\n    return length(characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps0n5dqcx.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmps0n5dqcx.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test Failed at /tmp/tmps0n5dqcx.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps0n5dqcx.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # convert string to lowercase\n\
    \    string = lowercase(string)\n    # initialize a set to store distinct characters\n\
    \    distinct_characters = Set{Char}()\n    # loop through each character in the\
    \ string\n    for character in string\n        # add character to the set\n  \
    \      push!(distinct_characters, character)\n    end\n    # return the length\
    \ of the set\n    return length(distinct_characters)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659805588
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # Convert string to lowercase\n\
    \    string = lowercase(string)\n    # Create a set of characters\n    characters\
    \ = Set{Char}()\n    # Loop through each character in the string\n    for c in\
    \ string\n        # Add character to the set\n        push!(characters, c)\n \
    \   end\n    # Return the number of characters in the set\n    return length(characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659805588
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_chars = Set{Char}()\n\
    \    for c in string\n        push!(distinct_chars, c)\n    end\n    return length(distinct_chars)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3qitdo0j.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp3qitdo0j.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3qitdo0j.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3qitdo0j.jl:18\ntest set: Test Failed at /tmp/tmp3qitdo0j.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qitdo0j.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qitdo0j.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3qitdo0j.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qitdo0j.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qitdo0j.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx3zoc8kk.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpx3zoc8kk.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for c in string\n        push!(characters, c)\n    end\n    return length(characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps0n5dqcx.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmps0n5dqcx.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test Failed at /tmp/tmps0n5dqcx.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps0n5dqcx.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # convert string to lower\
    \ case\n    string = lowercase(string)\n    # convert string to array of characters\n\
    \    characters = collect(string)\n    # remove duplicates\n    characters = unique(characters)\n\
    \    # return the length of the array\n    return length(characters)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659805588
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # TODO: write your code\
    \ here\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpir6yo2p6.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpir6yo2p6.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpir6yo2p6.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpir6yo2p6.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpir6yo2p6.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for c in string\n        push!(characters, c)\n    end\n    return length(characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps0n5dqcx.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmps0n5dqcx.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test Failed at /tmp/tmps0n5dqcx.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps0n5dqcx.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps0n5dqcx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps0n5dqcx.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx3zoc8kk.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpx3zoc8kk.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for c in string\n        distinct_characters = distinct_characters\
    \ \u222A Set(c)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgzutips1.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpgzutips1.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgzutips1.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgzutips1.jl:18\ntest set: Test Failed at /tmp/tmpgzutips1.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgzutips1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzutips1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpgzutips1.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgzutips1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzutips1.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # TODO: Write your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5thav8uo.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp5thav8uo.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp5thav8uo.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5thav8uo.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5thav8uo.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5thav8uo.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp5thav8uo.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5thav8uo.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5thav8uo.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5thav8uo.jl:17\n  Test th"
  timestamp: 1659805591
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2u9zljic.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp2u9zljic.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp2u9zljic.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u9zljic.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u9zljic.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2u9zljic.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmp2u9zljic.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u9zljic.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u9zljic.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2u9zljic.jl:17\n  Test th"
  timestamp: 1659805591
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    char_set = Set{Char}()\n\
    \    for char in string\n        push!(char_set, char)\n    end\n    return length(char_set)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7rcn92y_.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp7rcn92y_.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7rcn92y_.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7rcn92y_.jl:18\ntest set: Test Failed at /tmp/tmp7rcn92y_.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rcn92y_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rcn92y_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7rcn92y_.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rcn92y_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rcn92y_.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # TODO: write your code\
    \ here\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpir6yo2p6.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpir6yo2p6.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpir6yo2p6.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpir6yo2p6.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpir6yo2p6.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir6yo2p6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir6yo2p6.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    unique_characters = Set{Char}()\n\
    \    for character in string\n        push!(unique_characters, character)\n  \
    \  end\n    return length(unique_characters)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv8p6_3rh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpv8p6_3rh.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv8p6_3rh.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpv8p6_3rh.jl:18\ntest set: Test Failed at /tmp/tmpv8p6_3rh.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8p6_3rh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8p6_3rh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpv8p6_3rh.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8p6_3rh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8p6_3rh.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805590
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_chars = Set{Char}()\n\
    \    for c in string\n        push!(distinct_chars, c)\n    end\n    return length(distinct_chars)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3qitdo0j.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp3qitdo0j.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3qitdo0j.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3qitdo0j.jl:18\ntest set: Test Failed at /tmp/tmp3qitdo0j.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qitdo0j.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qitdo0j.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3qitdo0j.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qitdo0j.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qitdo0j.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx3zoc8kk.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpx3zoc8kk.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:18\n  Expression: candidate(\"abcdecadeCADE\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:19\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpx3zoc8kk.jl:20\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3zoc8kk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3zoc8kk.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgm8znvl0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm8znvl0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgm8znvl0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm8znvl0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"abcde\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] count_distinct_characters(string::String)\n  \
    \   @ Main /tmp/tmpgm8znvl0.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgm8znvl0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for character in string\n        push!(characters, character)\n    end\n\
    \    return length(characters)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt220cw30.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpt220cw30.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\ntest set: Test Failed at /tmp/tmpt220cw30.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt220cw30.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt220cw30.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt220cw30.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659805589
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # convert string to lowercase\n\
    \    string = lowercase(string)\n    # convert string to a set\n    set = Set(string)\n\
    \    # return the length of the set\n    return length(set)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659805588
- exit_code: 1
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fcwzfgo.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0fcwzfgo.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:22\n  Expression: candidate(\"aaaaAAAAaaaa\")\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0fcwzfgo.jl:23\n  Expression: candidate(\"Jerry jERRY JeRRRY\"\
    ) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fcwzfgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fcwzfgo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
