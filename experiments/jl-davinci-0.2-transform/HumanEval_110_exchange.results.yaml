language: jl
name: HumanEval_110_exchange
results:
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdc3usbg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpwdc3usbg.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwdc3usbg.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwdc3usbg.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x -> x % 2 == 0, lst1)\n        return\
    \ \"YES\"\n    elseif all(x -> x % 2 == 0, lst2)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2x33bzd5.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp2x33bzd5.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2x33bzd5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2x33bzd5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2x33bzd5.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2x33bzd5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2x33bzd5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfyzusjr8.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpfyzusjr8.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpfyzusjr8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyzusjr8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyzusjr8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpfyzusjr8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpfyzusjr8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyzusjr8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppoy7io_p.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmppoy7io_p.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoy7io_p.jl:26\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoy7io_p.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoy7io_p.jl:30\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuydngujn.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpuydngujn.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuydngujn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuydngujn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuydngujn.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuydngujn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuydngujn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuydngujn.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuydngujn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuydngujn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdc3usbg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpwdc3usbg.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwdc3usbg.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwdc3usbg.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp23ytvm_o.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp23ytvm_o.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23ytvm_o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23ytvm_o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp23ytvm_o.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23ytvm_o.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23ytvm_o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp23ytvm_o.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23ytvm_o.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23ytvm_o.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsbk0yjpg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpsbk0yjpg.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:26\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:30\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppoy7io_p.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmppoy7io_p.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoy7io_p.jl:26\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoy7io_p.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppoy7io_p.jl:30\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoy7io_p.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoy7io_p.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in lst1\n        if i % 2 != 0\n  \
    \          for j in lst2\n                if j % 2 == 0\n                    return\
    \ \"YES\"\n                end\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplxz9j9iq.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmplxz9j9iq.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxz9j9iq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxz9j9iq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplxz9j9iq.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxz9j9iq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxz9j9iq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplxz9j9iq.jl:38\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplxz9j9iq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplxz9j9iq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsbk0yjpg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpsbk0yjpg.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:26\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:30\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdc3usbg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpwdc3usbg.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwdc3usbg.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwdc3usbg.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdc3usbg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdc3usbg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) != length(lst2)\n       \
    \ return \"NO\"\n    end\n    for i in 1:length(lst1)\n        if lst1[i] % 2\
    \ != 0\n            for j in 1:length(lst2)\n                if lst2[j] % 2 ==\
    \ 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n               \
    \     break\n                end\n            end\n        end\n    end\n    if\
    \ all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(isodd, lst1)\n        return \"NO\"\
    \n    end\n    for i in 1:length(lst1)\n        if isodd(lst1[i])\n          \
    \  for j in 1:length(lst2)\n                if iseven(lst2[j])\n             \
    \       lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n     \
    \           end\n            end\n        end\n    end\n    if all(iseven, lst1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpel07fuom.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpel07fuom.jl:43\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel07fuom.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpel07fuom.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2v_tqtky.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp2v_tqtky.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_tqtky.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_tqtky.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2v_tqtky.jl:26\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_tqtky.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_tqtky.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2v_tqtky.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_tqtky.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_tqtky.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2v_tqtky.jl:30\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_tqtky.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_tqtky.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuydngujn.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpuydngujn.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuydngujn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuydngujn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuydngujn.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuydngujn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuydngujn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuydngujn.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuydngujn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuydngujn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp23ytvm_o.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp23ytvm_o.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23ytvm_o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23ytvm_o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp23ytvm_o.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23ytvm_o.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23ytvm_o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp23ytvm_o.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23ytvm_o.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23ytvm_o.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfyzusjr8.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpfyzusjr8.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpfyzusjr8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyzusjr8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyzusjr8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpfyzusjr8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpfyzusjr8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyzusjr8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsbk0yjpg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpsbk0yjpg.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:26\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsbk0yjpg.jl:30\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbk0yjpg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbk0yjpg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n  \
    \  \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is\
    \ assumed that the input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjq4wvcvz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpjq4wvcvz.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjq4wvcvz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjq4wvcvz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjq4wvcvz.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjq4wvcvz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjq4wvcvz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
