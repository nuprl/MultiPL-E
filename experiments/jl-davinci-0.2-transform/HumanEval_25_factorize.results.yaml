language: jl
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return []\n    end\n    for i in 2:n\n        if n % i == 0\n       \
    \     return [i] * factorize(n / i)\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6kji3ly2.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp6kji3ly2.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmp6kji3ly2.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6kji3ly2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kji3ly2.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kji3ly2.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp6kji3ly2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmp6kji3ly2.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6kji3ly2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kji3ly2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kji3ly2.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp6kji3ly2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmp6kji3ly2.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6kji3ly2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kji3ly2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kji3ly2.jl:25\ntest set:\
    \ Error During Test at /tmp"
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i in 2:n\n            if n % i == 0\n     \
    \           push!(factors, i)\n                n = n / i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i = 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
