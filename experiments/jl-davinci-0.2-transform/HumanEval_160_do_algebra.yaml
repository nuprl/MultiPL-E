name: HumanEval_160_do_algebra
language: jl
prompt: "\"\"\"\n    Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n    the second list is a list of integers. Use the two\
  \ given lists to build the algebric \n    expression and return the evaluation of\
  \ this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n \
  \   Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n\
  \    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array\
  \ = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n \
  \       The length of operator list is equal to the length of operand list minus\
  \ one.\n        Operand is a list of of non-negative integers.\n        Operator\
  \ list has at least one operator, and operand list has at least two operands.\n\n\
  \    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
  **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
  ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
completions: ["    # Your code here\nend", "    # your code here\n    return 0\nend",
  "    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # Your code here\n    return 0\nend", "    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend", "    result = operand[1]\n    for\
    \ i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = floor(Int64, result/operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result = result^operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n \
    \       elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n   \
    \     end\n    end\n    return result\nend", "    # your code here\n    return\
    \ 0\nend", "    # your code here\n    return 0\nend", "    # Your code here\n\
    \    return 0\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend", "    # Your code here\n    return 0\nend",
  "    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # Your code here\n    return 0\nend", "    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = floor(Int64, result\
    \ / operand[i+1])\n        elseif operator[i] == \"**\"\n            result =\
    \ result ^ operand[i+1]\n        end\n    end\n    return result\nend", "    result\
    \ = operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"\
    +\"\n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n\
    \            result -= operand[i+1]\n        elseif operator[i] == \"*\"\n   \
    \         result *= operand[i+1]\n        elseif operator[i] == \"//\"\n     \
    \       result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n        end\n\
    \    end\n    return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
