language: jl
name: HumanEval_100_make_a_pile
results:
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # Initialize the vector\
    \ with the first level\n    pile = [n]\n    # Loop until the last level has only\
    \ one stone\n    while pile[end] != 1\n        # If the last level has an odd\
    \ number of stones, the next level will\n        # have the next odd number of\
    \ stones\n        if isodd(pile[end])\n            push!(pile, pile[end] + 2)\n\
    \        # If the last level has an even number of stones, the next level will\n\
    \        # have the next even number of stones\n        else\n            push!(pile,\
    \ pile[end] + 1)\n        end\n    end\n    return pile\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp8zrgv6pl.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp8zrgv6pl.jl:22\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp8zrgv6pl.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8zrgv6pl.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8zrgv6pl.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp8zrgv6pl.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp8zrgv6pl.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8zrgv6pl.jl:23 [inlined]\n\
    \   [4] macro expansion\n"
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n+1)\n\
    \        else\n            return [n] .+ make_a_pile(n-1)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = Vector{Int64}(undef,\
    \ n)\n    stones[1] = n\n    for i in 2:n\n        stones[i] = stones[i-1] + 2*(i%2)\
    \ - 1\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk4bxklsp.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpk4bxklsp.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:29\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 4, 5, 4, 5] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: "
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ levels[end] != 1\n        if levels[end] % 2 == 0\n            push!(levels,\
    \ levels[end] - 1)\n        else\n            push!(levels, levels[end] - 2)\n\
    \        end\n    end\n    return levels\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3tvb5kll.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp3tvb5kll.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = Int64[]\n \
    \   for i in 1:n\n        if i == 1\n            push!(result, n)\n        elseif\
    \ i % 2 == 0\n            push!(result, result[end] + 2)\n        else\n     \
    \       push!(result, result[end] + 1)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuyuzebf6.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpuyuzebf6.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 5, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuyuzebf6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuyuzebf6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyuzebf6.jl:33\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 6, 7, 9] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuyuzebf6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuyuzebf6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyuzebf6.jl:34\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 7, 8, 10, 11] == [5, 7, 9, 11, 13]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuyuzebf6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuyuzebf6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyuzebf6.jl:35\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 8, 9, 11, 12, 14] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuyuzebf6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuyuzebf6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyuzebf6.jl:36\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evalua"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n-1)\n\
    \        else\n            return [n] .+ make_a_pile(n-2)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5dlcn0u.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpj5dlcn0u.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [4] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [8] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [9] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [15] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [24] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    S"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .* make_a_pile(n/2)\n\
    \        else\n            return [n] .* make_a_pile(n*3+1)\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0pzhlj9z.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp0pzhlj9z.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp0pzhlj9z.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0pzhlj9z.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0pzhlj9z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp0pzhlj9z.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp0pzhlj9z.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pzhlj9z.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pzhlj9z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp0pzhlj9z.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp0pzhlj9z.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0pzhlj9z.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shar"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n > 1\n        n = n % 2 == 0 ? n - 1 : n + 1\n        push!(result, n)\n  \
    \  end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    n_stones = [n]\n   \
    \ while n_stones[end] > 1\n        if n_stones[end] % 2 == 0\n            n_stones\
    \ = [n_stones; n_stones[end] - 1]\n        else\n            n_stones = [n_stones;\
    \ n_stones[end] - 2]\n        end\n    end\n    return n_stones\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpohg_73ho.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpohg_73ho.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohg_73ho.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohg_73ho.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpohg_73ho.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohg_73ho.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohg_73ho.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpohg_73ho.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohg_73ho.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohg_73ho.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpohg_73ho.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohg_73ho.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohg_73ho.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpohg_73ho.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n+1)\n\
    \        else\n            return [n] .+ make_a_pile(n-1)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    elseif n % 2 == 0\n        return [n; make_a_pile(n+1)]\n    else\n\
    \        return [n; make_a_pile(n+2)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ levels[end] != 1\n        if levels[end] % 2 == 0\n            push!(levels,\
    \ levels[end] - 1)\n        else\n            push!(levels, levels[end] - 2)\n\
    \        end\n    end\n    return levels\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3tvb5kll.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp3tvb5kll.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] != 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppxymkj09.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppxymkj09.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return vcat(make_a_pile(n-1),\
    \ [n+1])\n        else\n            return vcat(make_a_pile(n-1), [n+2])\n   \
    \     end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaclk9a3a.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpaclk9a3a.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [1, 3, 5] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaclk9a3a.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaclk9a3a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaclk9a3a.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [1, 3, 5, 5] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaclk9a3a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaclk9a3a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaclk9a3a.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [1, 3, 5, 5, 7] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaclk9a3a.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaclk9a3a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaclk9a3a.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [1, 3, 5, 5, 7, 7] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaclk9a3a.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaclk9a3a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaclk9a3a.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: "
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2, 3]\n    end\n    if n % 2 == 0\n        return [n, n+2, n+4]\n\
    \    else\n        return [n, n+1, n+3]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_2kyno66.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp_2kyno66.jl:35\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2kyno66.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2kyno66.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_2kyno66.jl:36\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 6, 8] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2kyno66.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2kyno66.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_2kyno66.jl:37\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 6, 8] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2kyno66.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2kyno66.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_2kyno66.jl:38\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 8, 10] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2kyno66.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2kyno66.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_2kyno66.jl:39\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 10, 12] == [8"
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n+1)\n\
    \        else\n            return [n] .+ make_a_pile(n-1)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        return [n] .* make_a_pile(n - 1)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo4o9_xdn.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpo4o9_xdn.jl:26\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [6] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4o9_xdn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4o9_xdn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4o9_xdn.jl:27\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [24] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo4o9_xdn.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4o9_xdn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4o9_xdn.jl:28\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [120] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4o9_xdn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4o9_xdn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4o9_xdn.jl:29\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [720] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4o9_xdn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4o9_xdn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4o9_xdn.jl:30\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [40320] == [8, 10, 12, 14, 16, 18, 20"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .* make_a_pile(n/2)\n\
    \        else\n            return [n] .* make_a_pile(n*3+1)\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0pzhlj9z.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp0pzhlj9z.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp0pzhlj9z.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0pzhlj9z.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0pzhlj9z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp0pzhlj9z.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp0pzhlj9z.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pzhlj9z.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pzhlj9z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp0pzhlj9z.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmp0pzhlj9z.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmp0pzhlj9z.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0pzhlj9z.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shar"
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef,\
    \ n)\n    result[1] = n\n    for i in 2:n\n        result[i] = result[i-1] + 2*(i%2)\
    \ - 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprsc4i8cf.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmprsc4i8cf.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprsc4i8cf.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test Failed at /tmp/tmprsc4i8cf.jl:29\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 4, 5, 4, 5]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprsc4i8cf.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprsc4i8cf.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 8, 7, 8, 7, 8, 7] == [8, 10, 12, "
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        error(\"\
    n must be a positive integer\")\n    end\n    stones = [n]\n    while stones[end]\
    \ > 1\n        if stones[end] % 2 == 0\n            push!(stones, stones[end]\
    \ - 1)\n        else\n            push!(stones, stones[end] - 2)\n        end\n\
    \    end\n    return stones\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4,\
    \ 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnogjg7q3.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpnogjg7q3.jl:33\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnogjg7q3.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnogjg7q3.jl:32\ntest set: Test Failed at /tmp/tmpnogjg7q3.jl:34\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [4, 3, 1] == [4, 6,\
    \ 8, 10]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnogjg7q3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnogjg7q3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnogjg7q3.jl:35\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnogjg7q3.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnogjg7q3.jl:32\ntest set: Test Failed at /tmp/tmpnogjg7q3.jl:36\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6, 5, 3,\
    \ 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnogjg7q3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnogjg7q3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnogjg7q3.jl:37\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] == [8, 10, 12, 14, 16, 18,\
    \ 20, 22]\nStacktr"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        n = n % 2 == 0 ? n - 1 : n + 1\n        push!(levels, n)\n  \
    \  end\n    return levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = Vector{Int64}(undef,\
    \ n)\n    levels[1] = n\n    for i in 2:n\n        levels[i] = levels[i-1] + 2*(i%2)\
    \ - 1\n    end\n    return levels\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9kp0vlu8.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp9kp0vlu8.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9kp0vlu8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9kp0vlu8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9kp0vlu8.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9kp0vlu8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9kp0vlu8.jl:26\ntest set: Test Failed at /tmp/tmp9kp0vlu8.jl:29\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 4, 5, 4, 5]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9kp0vlu8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9kp0vlu8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9kp0vlu8.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9kp0vlu8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9kp0vlu8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9kp0vlu8.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 8, 7, 8, 7, 8, 7] == [8, 10, 12, "
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return vcat(make_a_pile(n-1), [n+1])\n\
    \    else\n        return vcat(make_a_pile(n-1), [n+2])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwv58qe01.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwv58qe01.jl:29\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [1, 3, 5] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:30\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [1, 3, 5, 5] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test Failed at /tmp/tmpwv58qe01.jl:31\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [1, 3, 5, 5, 7]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:32\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [1, 3, 5, 5, 7, 7] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:33\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [1, 3, 5, 5, 7, 7, 9, 9] == [8, 10, 12, "
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return vcat(make_a_pile(n-1), [n+1])\n\
    \    else\n        return vcat(make_a_pile(n-1), [n+2])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwv58qe01.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwv58qe01.jl:29\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [1, 3, 5] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:30\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [1, 3, 5, 5] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test Failed at /tmp/tmpwv58qe01.jl:31\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [1, 3, 5, 5, 7]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:32\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [1, 3, 5, 5, 7, 7] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:33\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [1, 3, 5, 5, 7, 7, 9, 9] == [8, 10, 12, "
  timestamp: 1659793539
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        n = (n % 2 == 0) ? n - 1 : n + 1\n        push!(levels, n)\n\
    \    end\n    return levels\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4,\
    \ 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* vcat(make_a_pile(n -\
    \ 1), [n + 2])\n    else\n        return [n] .* vcat(make_a_pile(n - 1), [n +\
    \ 1])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48gnt4an.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp48gnt4an.jl:29\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [6, 24, 12] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp48gnt4an.jl:30\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [24, 96, 48, 24] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test Failed at /tmp/tmp48gnt4an.jl:31\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [120, 480, 240,\
    \ 120, 30] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp48gnt4an.jl:32\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [720, 2880, 1440, 720, 180, 48] == [6, 8, 10, 12, 14,\
    \ 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp48gnt4an.jl:33\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [40320, 1612"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        error(\"\
    n must be positive\")\n    end\n    if n == 1\n        return [1]\n    end\n \
    \   if n % 2 == 0\n        return [n, n+2, n+4]\n    else\n        return [n,\
    \ n+1, n+3]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiusgtyta.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpiusgtyta.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiusgtyta.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiusgtyta.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiusgtyta.jl:33\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 6, 8] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiusgtyta.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiusgtyta.jl:31\ntest set: Test Failed at /tmp/tmpiusgtyta.jl:34\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 6, 8] == [5,\
    \ 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiusgtyta.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiusgtyta.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiusgtyta.jl:35\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 8, 10] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiusgtyta.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiusgtyta.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiusgtyta.jl:36\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 10, 12] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStacktrace"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* vcat(make_a_pile(n -\
    \ 1), [n + 2])\n    else\n        return [n] .* vcat(make_a_pile(n - 1), [n +\
    \ 1])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48gnt4an.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp48gnt4an.jl:29\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [6, 24, 12] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp48gnt4an.jl:30\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [24, 96, 48, 24] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test Failed at /tmp/tmp48gnt4an.jl:31\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [120, 480, 240,\
    \ 120, 30] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp48gnt4an.jl:32\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [720, 2880, 1440, 720, 180, 48] == [6, 8, 10, 12, 14,\
    \ 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48gnt4an.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48gnt4an.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp48gnt4an.jl:33\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [40320, 1612"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2, 4]\n    end\n    if n == 3\n        return [3, 5, 7]\n    end\n\
    \    if n == 4\n        return [4, 6, 8, 10]\n    end\n    if n == 5\n       \
    \ return [5, 7, 9, 11, 13]\n    end\n    if n == 6\n        return [6, 8, 10,\
    \ 12, 14, 16]\n    end\n    if n == 7\n        return [7, 9, 11, 13, 15, 17, 19]\n\
    \    end\n    if n == 8\n        return [8, 10, 12, 14, 16, 18, 20, 22]\n    end\n\
    \    if n == 9\n        return [9, 11, 13, 15, 17, 19, 21, 23, 25]\n    end\n\
    \    if n == 10\n        return [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n   \
    \ end\n    if n == 11\n        return [11, 13, 15, 17, 19, 21, 23, 25, 27, 29,\
    \ 31]\n    end\n    if n == 12\n        return [12, 14, 16, 18, 20, 22, 24, 26,\
    \ 28, 30, 32, 34]\n    end\n    if n == 13\n        return [13, 15, 17, 19, 21,\
    \ 23, 25, 27, 29, 31, 33, 35, 37]\n    end\n    if n == 14\n        return [14,\
    \ 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n    end\n    if n == 15\n\
    \        return [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]\n\
    \    end\n    if n == 16\n        return [16, 18, 20, 22, 24, 26, 28, 30, 32,\
    \ 34, 36, 38, 40, 42, 44, 46]\n    end\n    if n == 17\n        return [17, 19,\
    \ 21, 23, 25\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemgclj27.jl:68\nin expression starting at\
    \ /tmp/tmpemgclj27.jl:68\n"
  stdout: ''
  timestamp: 1659793538
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n % 2 == 0\n\
    \        return [n] .+ (2:2:n-1)\n    else\n        return [n] .+ (1:2:n-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpprl05pl0.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpprl05pl0.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [4] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpprl05pl0.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpprl05pl0.jl:31\ntest set: Test Failed at /tmp/tmpprl05pl0.jl:33\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [6] == [4, 6, 8, 10]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprl05pl0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprl05pl0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpprl05pl0.jl:34\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [6, 8] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpprl05pl0.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpprl05pl0.jl:31\ntest set: Test Failed at /tmp/tmpprl05pl0.jl:35\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [8, 10] ==\
    \ [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprl05pl0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprl05pl0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpprl05pl0.jl:36\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [10, 12, 14] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStacktrace:\n [1] macro expa"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[1]::Int64]\n\
    \    else\n        return [n] .+ [make_a_pile(n-1)[1]::Int64]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n/2)]\n\
    \    else\n        return [n] .+ [make_a_pile(n*3+1)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpro5icov8.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpro5icov8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpro5icov8.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpro5icov8.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpro5icov8.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpro5icov8.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpro5icov8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpro5icov8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpro5icov8.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpro5icov8.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpro5icov8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpro5icov8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpro5icov8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpro5icov8.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpro5icov8.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpro5icov8.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpro5icov8.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659793540
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n; make_a_pile(n+1)]\n    else\n\
    \        return [n; make_a_pile(n+2)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793543
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = Vector{Int64}(undef,\
    \ n)\n    stones[1] = n\n    for i in 2:n\n        stones[i] = stones[i-1] + (stones[i-1]\
    \ % 2 == 0 ? 2 : 1)\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14sj06ij.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp14sj06ij.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14sj06ij.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14sj06ij.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp14sj06ij.jl:29\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 6, 8, 10, 12] == [5, 7, 9, 11, 13]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14sj06ij.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14sj06ij.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n; make_a_pile(n + 1)]\n  \
    \  else\n        return [n; make_a_pile(n + 2)]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793543
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* make_a_pile(n-1)\n  \
    \  else\n        return [n] .* make_a_pile(n-2)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13a0moiy.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp13a0moiy.jl:29\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13a0moiy.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13a0moiy.jl:28\ntest set: Test Failed at /tmp/tmp13a0moiy.jl:30\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [12] == [4, 6, 8,\
    \ 10]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp13a0moiy.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp13a0moiy.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp13a0moiy.jl:31\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [15] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13a0moiy.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13a0moiy.jl:28\ntest set: Test Failed at /tmp/tmp13a0moiy.jl:32\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [90] == [6,\
    \ 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp13a0moiy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp13a0moiy.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp13a0moiy.jl:33\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [840] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    Stacktrace:\n [1] macro expansion\n   @ "
  timestamp: 1659793539
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[1]]\n\
    \    else\n        return [n] .+ [make_a_pile(n-1)[1]]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef,\
    \ n)\n    result[1] = n\n    for i in 2:n\n        result[i] = result[i-1] + (result[i-1]\
    \ % 2 == 0 ? 2 : 1)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmpjbn1zr.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpmpjbn1zr.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmpjbn1zr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmpjbn1zr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmpjbn1zr.jl:29\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 6, 8, 10, 12] == [5, 7, 9, 11, 13]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmpjbn1zr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmpjbn1zr.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659793539
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        n = n % 2 == 0 ? n - 1 : n + 1\n        push!(stones, n)\n  \
    \  end\n    return stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n % 2 == 0\n\
    \        return [n] .+ [2:2:n]\n    else\n        return [n] .+ [1:2:n]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpa675ul06.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpa675ul06.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmpa675ul06.jl:24\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa675ul06.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa675ul06.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpa675ul06.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(result, n)\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwffert87.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpwffert87.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwffert87.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test Failed at /tmp/tmpwffert87.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return vcat(make_a_pile(n-1), [n+1])\n\
    \    else\n        return vcat(make_a_pile(n-1), [n+2])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwv58qe01.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwv58qe01.jl:29\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [1, 3, 5] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:30\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [1, 3, 5, 5] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test Failed at /tmp/tmpwv58qe01.jl:31\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [1, 3, 5, 5, 7]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:32\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [1, 3, 5, 5, 7, 7] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwv58qe01.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwv58qe01.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwv58qe01.jl:33\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [1, 3, 5, 5, 7, 7, 9, 9] == [8, 10, 12, "
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* make_a_pile(n/2)\n  \
    \  else\n        return [n] .* make_a_pile(n*3+1)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpp9lz2v0i.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpp9lz2v0i.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpp9lz2v0i.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp9lz2v0i.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp9lz2v0i.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9lz2v0i.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpp9lz2v0i.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp9lz2v0i.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp9lz2v0i.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9lz2v0i.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpp9lz2v0i.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp9lz2v0i.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[end]]\n\
    \    else\n        return [n] .+ [make_a_pile(n-1)[end]]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    pile = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(pile, n)\n    end\n    return\
    \ pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5eakgqx4.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp5eakgqx4.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5eakgqx4.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test Failed at /tmp/tmp5eakgqx4.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5eakgqx4.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5eakgqx4.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = Int64[]\n \
    \   for i in 1:n\n        if i == 1\n            push!(levels, n)\n        elseif\
    \ levels[i-1] % 2 == 0\n            push!(levels, levels[i-1] + 2)\n        else\n\
    \            push!(levels, levels[i-1] + 1)\n        end\n    end\n    return\
    \ levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8lo8tbfz.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp8lo8tbfz.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lo8tbfz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lo8tbfz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8lo8tbfz.jl:34\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 6, 8, 10, 12] == [5, 7, 9, 11, 13]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lo8tbfz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lo8tbfz.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659793541
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ make_a_pile(n+1)\n  \
    \  else\n        return [n] .+ make_a_pile(n-1)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2, 4]\n    end\n    if n == 3\n        return [3, 5, 7]\n    end\n\
    \    if n == 4\n        return [4, 6, 8, 10]\n    end\n    if n == 5\n       \
    \ return [5, 7, 9, 11, 13]\n    end\n    if n == 6\n        return [6, 8, 10,\
    \ 12, 14, 16]\n    end\n    if n == 7\n        return [7, 9, 11, 13, 15, 17, 19]\n\
    \    end\n    if n == 8\n        return [8, 10, 12, 14, 16, 18, 20, 22]\n    end\n\
    \    if n == 9\n        return [9, 11, 13, 15, 17, 19, 21, 23, 25]\n    end\n\
    \    if n == 10\n        return [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n   \
    \ end\n    if n == 11\n        return [11, 13, 15, 17, 19, 21, 23, 25, 27, 29,\
    \ 31]\n    end\n    if n == 12\n        return [12, 14, 16, 18, 20, 22, 24, 26,\
    \ 28, 30, 32, 34]\n    end\n    if n == 13\n        return [13, 15, 17, 19, 21,\
    \ 23, 25, 27, 29, 31, 33, 35, 37]\n    end\n    if n == 14\n        return [14,\
    \ 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n    end\n    if n == 15\n\
    \        return [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]\n\
    \    end\n    if n == 16\n        return [16, 18, 20, 22, 24, 26, 28, 30, 32,\
    \ 34, 36, 38, 40, 42, 44, 46]\n    end\n    if n == 17\n        return [17, 19,\
    \ 21, 23, 25\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemgclj27.jl:68\nin expression starting at\
    \ /tmp/tmpemgclj27.jl:68\n"
  stdout: ''
  timestamp: 1659793538
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2, 4]\n    end\n    if n == 3\n        return [3, 5, 7]\n    end\n\
    \    if n == 4\n        return [4, 6, 8, 10]\n    end\n    if n == 5\n       \
    \ return [5, 7, 9, 11, 13]\n    end\n    if n == 6\n        return [6, 8, 10,\
    \ 12, 14, 16]\n    end\n    if n == 7\n        return [7, 9, 11, 13, 15, 17, 19]\n\
    \    end\n    if n == 8\n        return [8, 10, 12, 14, 16, 18, 20, 22]\n    end\n\
    \    if n == 9\n        return [9, 11, 13, 15, 17, 19, 21, 23, 25]\n    end\n\
    \    if n == 10\n        return [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n   \
    \ end\n    if n == 11\n        return [11, 13, 15, 17, 19, 21, 23, 25, 27, 29,\
    \ 31]\n    end\n    if n == 12\n        return [12, 14, 16, 18, 20, 22, 24, 26,\
    \ 28, 30, 32, 34]\n    end\n    if n == 13\n        return [13, 15, 17, 19, 21,\
    \ 23, 25, 27, 29, 31, 33, 35, 37]\n    end\n    if n == 14\n        return [14,\
    \ 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n    end\n    if n == 15\n\
    \        return [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]\n\
    \    end\n    if n == 16\n        return [16, 18, 20, 22, 24, 26, 28, 30, 32,\
    \ 34, 36, 38, 40, 42, 44, 46]\n    end\n    if n == 17\n        return [17, 19,\
    \ 21, 23, 25\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemgclj27.jl:68\nin expression starting at\
    \ /tmp/tmpemgclj27.jl:68\n"
  stdout: ''
  timestamp: 1659793538
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    elseif n % 2 == 0\n        return [n; make_a_pile(n+1)]\n    else\n\
    \        return [n; make_a_pile(n+2)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    elseif n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n    else\n\
    \        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793544
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        stones = [stones; stones[end] + (stones[end] % 2 ==\
    \ 0 ? 2 : 1)]\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793544
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .* vcat(make_a_pile(n+1),\
    \ make_a_pile(n-1))\n        else\n            return [n] .* vcat(make_a_pile(n-1),\
    \ make_a_pile(n+1))\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n/2\n        else\n          \
    \  n = (n+1)/2\n        end\n        push!(levels, n)\n    end\n    return levels\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi5gc58kt.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpi5gc58kt.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5gc58kt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5gc58kt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpi5gc58kt.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi5gc58kt.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi5gc58kt.jl:30\ntest set: Test Failed at /tmp/tmpi5gc58kt.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5gc58kt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5gc58kt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpi5gc58kt.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5gc58kt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5gc58kt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpi5gc58kt.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(result, n)\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwffert87.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpwffert87.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwffert87.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test Failed at /tmp/tmpwffert87.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    \"\"\"\n    Given a\
    \ positive integer n, you have to make a pile of n levels of stones.\n    The\
    \ first level has n stones.\n    The number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    Return the number of stones in each level in a list, where element\
    \ at index\n    i represents the number of stones in the level (i+1).\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jbi2f0g.jl:1\nin expression starting at /tmp/tmp_jbi2f0g.jl:1\n"
  stdout: ''
  timestamp: 1659793540
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n+1)\n\
    \        else\n            return [n] .+ make_a_pile(n-1)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n+1)\n\
    \        else\n            return [n] .+ make_a_pile(n-1)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n/2\n        else\n          \
    \  n = (n-1)/2\n        end\n        push!(result, n)\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpetmn38cq.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpetmn38cq.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpetmn38cq.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpetmn38cq.jl:30\ntest set: Test Failed at /tmp/tmpetmn38cq.jl:32\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [4, 2, 1] == [4, 6,\
    \ 8, 10]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetmn38cq.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetmn38cq.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpetmn38cq.jl:33\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 2, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpetmn38cq.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpetmn38cq.jl:30\ntest set: Test Failed at /tmp/tmpetmn38cq.jl:34\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6, 3, 1]\
    \ == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetmn38cq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetmn38cq.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpetmn38cq.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStacktrace:\n "
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] != 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppxymkj09.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppxymkj09.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\n \
    \   return [n]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpehkhpg94.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpehkhpg94.jl:23\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test Failed at /tmp/tmpehkhpg94.jl:24\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [4] == [4, 6, 8, 10]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpehkhpg94.jl:25\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test Failed at /tmp/tmpehkhpg94.jl:26\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6] == [6,\
    \ 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpehkhpg94.jl:27\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.co"
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] != 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppxymkj09.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppxymkj09.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n+1)\n\
    \        else\n            return [n] .+ make_a_pile(n-1)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n-1)\n\
    \        else\n            return [n] .+ make_a_pile(n-2)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5dlcn0u.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpj5dlcn0u.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [4] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [8] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [9] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [15] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5dlcn0u.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5dlcn0u.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj5dlcn0u.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [24] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    S"
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ [make_a_pile(n+1)]\n\
    \        else\n            return [n] .+ [make_a_pile(n+2)]\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793546
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        error(\"\
    n must be a positive integer\")\n    end\n    if n == 1\n        return [1]\n\
    \    end\n    if n % 2 == 0\n        return [n; make_a_pile(n+1)]\n    else\n\
    \        return [n; make_a_pile(n+2)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793547
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .+ make_a_pile(n+1)\n\
    \        else\n            return [n] .+ make_a_pile(n-1)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    return [n] .+ (2:2:2*n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpemyp4tpo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpemyp4tpo.jl:25\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [5, 7, 9] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemyp4tpo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemyp4tpo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpemyp4tpo.jl:26\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [6, 8, 10, 12] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpemyp4tpo.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpemyp4tpo.jl:24\ntest set: Test Failed at /tmp/tmpemyp4tpo.jl:27\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [7, 9, 11, 13,\
    \ 15] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemyp4tpo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemyp4tpo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpemyp4tpo.jl:28\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [8, 10, 12, 14, 16, 18] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemyp4tpo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemyp4tpo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpemyp4tpo.jl:29\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [10, 12, 14, 16, 18, 20, 22, 2"
  timestamp: 1659793543
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    elseif n % 2 == 0\n        return [n; make_a_pile(n+1)]\n    else\n\
    \        return [n; make_a_pile(n+2)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        return [n] .+ [2:2:n-1; 3:2:n-1]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpodosbsum.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpodosbsum.jl:26\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [5] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpodosbsum.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpodosbsum.jl:25\ntest set: Test Failed at /tmp/tmpodosbsum.jl:27\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [6, 7] == [4, 6, 8,\
    \ 10]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpodosbsum.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodosbsum.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpodosbsum.jl:28\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [7, 9, 8] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpodosbsum.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpodosbsum.jl:25\ntest set: Test Failed at /tmp/tmpodosbsum.jl:29\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [8, 10, 9,\
    \ 11] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpodosbsum.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodosbsum.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpodosbsum.jl:30\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [10, 12, 14, 11, 13, 15] == [8, 10, 12, 14,\
    \ 16, 18, 20, 22]\nSt"
  timestamp: 1659793543
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n > 1\n        n = n % 2 == 0 ? n - 1 : n + 1\n        push!(result, n)\n  \
    \  end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\n \
    \   return [n]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpehkhpg94.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpehkhpg94.jl:23\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test Failed at /tmp/tmpehkhpg94.jl:24\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [4] == [4, 6, 8, 10]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpehkhpg94.jl:25\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test Failed at /tmp/tmpehkhpg94.jl:26\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6] == [6,\
    \ 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehkhpg94.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehkhpg94.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpehkhpg94.jl:27\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.co"
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    else\n        if n % 2 == 0\n            return [n] .* vcat(make_a_pile(n-1),\
    \ [n+2])\n        else\n            return [n] .* vcat(make_a_pile(n-1), [n+1])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpijo85fe_.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpijo85fe_.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [6, 24, 12] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijo85fe_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijo85fe_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpijo85fe_.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [24, 96, 48, 24] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpijo85fe_.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpijo85fe_.jl:29\ntest set: Test Failed at /tmp/tmpijo85fe_.jl:32\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [120, 480, 240,\
    \ 120, 30] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijo85fe_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijo85fe_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpijo85fe_.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [720, 2880, 1440, 720, 180, 48] == [6, 8, 10, 12, 14,\
    \ 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijo85fe_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijo85fe_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpijo85fe_.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [40320, 1612"
  timestamp: 1659793543
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz3k08yc7.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpz3k08yc7.jl:22\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz3k08yc7.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3k08yc7.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3k08yc7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz3k08yc7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz3k08yc7.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3k08yc7.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2, 3]\n    end\n    if n == 3\n        return [3, 5, 7]\n    end\n\
    \    if n % 2 == 0\n        return vcat(make_a_pile(n-1), n+1)\n    else\n   \
    \     return vcat(make_a_pile(n-1), n+2)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo9sqpl1x.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpo9sqpl1x.jl:39\n  Expression: candidate(4)\
    \ == [4, 6, 8, 10]\n   Evaluated: [3, 5, 7, 5] == [4, 6, 8, 10]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9sqpl1x.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9sqpl1x.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpo9sqpl1x.jl:40\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [3, 5, 7, 5, 7] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9sqpl1x.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9sqpl1x.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpo9sqpl1x.jl:41\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [3, 5, 7, 5, 7, 7] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9sqpl1x.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9sqpl1x.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpo9sqpl1x.jl:42\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [3, 5, 7, 5, 7, 7, 9, 9] == [8, 10, 12, 14,\
    \ 16, 18, 20, 22]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9sqpl1x.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9sqpl1x.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n != 1\n        n = n % 2 == 0 ? n/2 : 3n + 1\n        push!(levels, n)\n  \
    \  end\n    return levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa1zxucvo.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpa1zxucvo.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 10, 5, 16, 8, 4, 2, 1] == [3, 5, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1zxucvo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1zxucvo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa1zxucvo.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa1zxucvo.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa1zxucvo.jl:26\ntest set: Test Failed at /tmp/tmpa1zxucvo.jl:29\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 16, 8, 4,\
    \ 2, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1zxucvo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1zxucvo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa1zxucvo.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 10, 5, 16, 8, 4, 2, 1] == [6, 8, 10, 12, 14, 16]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1zxucvo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1zxucvo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa1zxucvo.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1"
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n % 2 == 0\n\
    \        return [n] .* make_a_pile(n/2)\n    else\n        return [n] .* make_a_pile(n*3+1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmplib989zf.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmplib989zf.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmplib989zf.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmplib989zf.jl:22\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmplib989zf.jl:24\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplib989zf.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplib989zf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmplib989zf.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmplib989zf.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmplib989zf.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplib989zf.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplib989zf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmplib989zf.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmplib989zf.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmplib989zf.jl:22\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmplib989zf.jl:24\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplib989zf.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659793545
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    v = Vector{Int64}(undef,\
    \ n)\n    v[1] = n\n    for i in 2:n\n        v[i] = v[i-1] + 2*(i%2) - 1\n  \
    \  end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6504nt7u.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp6504nt7u.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6504nt7u.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6504nt7u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6504nt7u.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6504nt7u.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6504nt7u.jl:26\ntest set: Test Failed at /tmp/tmp6504nt7u.jl:29\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 4, 5, 4, 5]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6504nt7u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6504nt7u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6504nt7u.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6504nt7u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6504nt7u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6504nt7u.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 8, 7, 8, 7, 8, 7] == [8, 10, 12, "
  timestamp: 1659793544
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ make_a_pile(n/2)\n  \
    \  else\n        return [n] .+ make_a_pile(n*3+1)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvs9fctpt.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpvs9fctpt.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpvs9fctpt.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvs9fctpt.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvs9fctpt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvs9fctpt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpvs9fctpt.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvs9fctpt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvs9fctpt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvs9fctpt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpvs9fctpt.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvs9fctpt.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659793545
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # your code here\n \
    \   return [n]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkm525z9z.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpkm525z9z.jl:23\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test Failed at /tmp/tmpkm525z9z.jl:24\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [4] == [4, 6, 8, 10]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkm525z9z.jl:25\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test Failed at /tmp/tmpkm525z9z.jl:26\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6] == [6,\
    \ 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkm525z9z.jl:27\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.co"
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = Int64[]\n \
    \   for i in 1:n\n        if i == 1\n            push!(levels, n)\n        elseif\
    \ i % 2 == 0\n            push!(levels, levels[end] + 2)\n        else\n     \
    \       push!(levels, levels[end] + 1)\n        end\n    end\n    return levels\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmj9yn1sh.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpmj9yn1sh.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 5, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj9yn1sh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj9yn1sh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmj9yn1sh.jl:33\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 6, 7, 9] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmj9yn1sh.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmj9yn1sh.jl:31\ntest set: Test Failed at /tmp/tmpmj9yn1sh.jl:34\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 7, 8, 10,\
    \ 11] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj9yn1sh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj9yn1sh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmj9yn1sh.jl:35\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 8, 9, 11, 12, 14] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj9yn1sh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj9yn1sh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmj9yn1sh.jl:36\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 10, 11, 13, 14, 16, 17, 19] == "
  timestamp: 1659793544
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* vcat(make_a_pile(n/2),\
    \ make_a_pile(n/2))\n    else\n        return [n] .* vcat(make_a_pile((n-1)/2),\
    \ make_a_pile((n+1)/2))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpuin3d0_f.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpuin3d0_f.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpuin3d0_f.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpuin3d0_f.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuin3d0_f.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuin3d0_f.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuin3d0_f.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpuin3d0_f.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpuin3d0_f.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuin3d0_f.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuin3d0_f.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuin3d0_f.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpuin3d0_f.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpuin3d0_f.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuin3d0_f.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuin3d0_f.jl:28\ntest set:\
    \ Error During Tes"
  timestamp: 1659793545
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n + 2)[i]\
    \ for i in 1:length(make_a_pile(n + 2))]\n    else\n        return [n] .+ [make_a_pile(n\
    \ + 1)[i] for i in 1:length(make_a_pile(n + 1))]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793548
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)...];\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)...];\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793548
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[1]]\n\
    \    else\n        return [n] .+ [make_a_pile(n-1)[1]]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    vec = [n]\n    while\
    \ n != 1\n        if n % 2 == 0\n            n = n / 2\n        else\n       \
    \     n = (n + 1) / 2\n        end\n        push!(vec, n)\n    end\n    return\
    \ vec\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl2gdm5sg.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpl2gdm5sg.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl2gdm5sg.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl2gdm5sg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpl2gdm5sg.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl2gdm5sg.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpl2gdm5sg.jl:30\ntest set: Test Failed at /tmp/tmpl2gdm5sg.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl2gdm5sg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl2gdm5sg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpl2gdm5sg.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl2gdm5sg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl2gdm5sg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpl2gdm5sg.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793545
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] != 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppxymkj09.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppxymkj09.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(levels, n)\n    end\n    return\
    \ levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcja_mvel.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpcja_mvel.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test Failed at /tmp/tmpcja_mvel.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793545
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(levels, n)\n    end\n    return\
    \ levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcja_mvel.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpcja_mvel.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test Failed at /tmp/tmpcja_mvel.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793545
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = Vector{Int64}(undef,\
    \ n)\n    stones[1] = n\n    for i in 2:n\n        if stones[i-1] % 2 == 0\n \
    \           stones[i] = stones[i-1] + 1\n        else\n            stones[i] =\
    \ stones[i-1] + 2\n        end\n    end\n    return stones\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqyc3n2aa.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpqyc3n2aa.jl:32\n  Expression: candidate(4)\
    \ == [4, 6, 8, 10]\n   Evaluated: [4, 5, 7, 9] == [4, 6, 8, 10]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyc3n2aa.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyc3n2aa.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqyc3n2aa.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 7, 9, 11, 13, 15] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyc3n2aa.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyc3n2aa.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqyc3n2aa.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 9, 11, 13, 15, 17, 19, 21] == [8, 10,\
    \ 12, 14, 16, 18, 20, 22]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyc3n2aa.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyc3n2aa.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659793545
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2, 3]\n    end\n    if n == 3\n        return [3, 5, 7]\n    end\n\
    \    if n == 4\n        return [4, 6, 8, 10]\n    end\n    if n == 5\n       \
    \ return [5, 7, 9, 11, 13]\n    end\n    if n == 6\n        return [6, 8, 10,\
    \ 12, 14, 16]\n    end\n    if n == 7\n        return [7, 9, 11, 13, 15, 17, 19]\n\
    \    end\n    if n == 8\n        return [8, 10, 12, 14, 16, 18, 20, 22]\n    end\n\
    \    if n == 9\n        return [9, 11, 13, 15, 17, 19, 21, 23, 25]\n    end\n\
    \    if n == 10\n        return [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n   \
    \ end\n    if n == 11\n        return [11, 13, 15, 17, 19, 21, 23, 25, 27, 29,\
    \ 31]\n    end\n    if n == 12\n        return [12, 14, 16, 18, 20, 22, 24, 26,\
    \ 28, 30, 32, 34]\n    end\n    if n == 13\n        return [13, 15, 17, 19, 21,\
    \ 23, 25, 27, 29, 31, 33, 35, 37]\n    end\n    if n == 14\n        return [14,\
    \ 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n    end\n    if n == 15\n\
    \        return [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]\n\
    \    end\n    if n == 16\n        return [16, 18, 20, 22, 24, 26, 28, 30, 32,\
    \ 34, 36, 38, 40, 42, 44, 46]\n    end\n    if n == 17\n        return [17, 19,\
    \ 21, 23, 25\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qofqtaq.jl:68\nin expression starting at\
    \ /tmp/tmp2qofqtaq.jl:68\n"
  stdout: ''
  timestamp: 1659793544
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[i]\
    \ for i in 1:length(make_a_pile(n+1))]\n    else\n        return [n] .+ [make_a_pile(n+2)[i]\
    \ for i in 1:length(make_a_pile(n+2))]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793549
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(result, n)\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwffert87.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpwffert87.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwffert87.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test Failed at /tmp/tmpwffert87.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz3k08yc7.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpz3k08yc7.jl:22\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz3k08yc7.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3k08yc7.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3k08yc7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz3k08yc7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz3k08yc7.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3k08yc7.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659793544
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[1]]\n\
    \    else\n        return [n] .+ [make_a_pile(n-1)[1]]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef,\
    \ n)\n    result[1] = n\n    for i in 2:n\n        result[i] = result[i-1] + 2*(i%2)\
    \ - 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprsc4i8cf.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmprsc4i8cf.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprsc4i8cf.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test Failed at /tmp/tmprsc4i8cf.jl:29\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 4, 5, 4, 5]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprsc4i8cf.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsc4i8cf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsc4i8cf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprsc4i8cf.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 8, 7, 8, 7, 8, 7] == [8, 10, 12, "
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* make_a_pile(n/2)\n  \
    \  else\n        return [n] .* make_a_pile(n*3 + 1)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz5stup0r.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpz5stup0r.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpz5stup0r.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz5stup0r.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz5stup0r.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz5stup0r.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz5stup0r.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpz5stup0r.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpz5stup0r.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz5stup0r.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz5stup0r.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz5stup0r.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpz5stup0r.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpz5stup0r.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz5stup0r.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpz5stup0r.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz5stup0r.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659793547
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef,\
    \ n)\n    result[1] = n\n    for i in 2:n\n        if n % 2 == 0\n           \
    \ result[i] = result[i-1] + 2\n        else\n            result[i] = result[i-1]\
    \ + 1\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmwkrk7lm.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpmwkrk7lm.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 5] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwkrk7lm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwkrk7lm.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpmwkrk7lm.jl:33\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwkrk7lm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwkrk7lm.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659793546
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* make_a_pile(n/2)\n  \
    \  else\n        return [n] .* make_a_pile(n*3+1)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpp9lz2v0i.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpp9lz2v0i.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpp9lz2v0i.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp9lz2v0i.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp9lz2v0i.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9lz2v0i.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpp9lz2v0i.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp9lz2v0i.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp9lz2v0i.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9lz2v0i.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpp9lz2v0i.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpp9lz2v0i.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp9lz2v0i.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        error(\"\
    n must be a positive integer\")\n    end\n    if n == 1\n        return [1]\n\
    \    end\n    if n % 2 == 0\n        return [n, n+2, n+4]\n    else\n        return\
    \ [n, n+1, n+3]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9vxvh6ay.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp9vxvh6ay.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9vxvh6ay.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9vxvh6ay.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9vxvh6ay.jl:33\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 6, 8] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9vxvh6ay.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9vxvh6ay.jl:31\ntest set: Test Failed at /tmp/tmp9vxvh6ay.jl:34\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 6, 8] == [5,\
    \ 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9vxvh6ay.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9vxvh6ay.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9vxvh6ay.jl:35\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 8, 10] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9vxvh6ay.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9vxvh6ay.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9vxvh6ay.jl:36\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 10, 12] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStacktrace"
  timestamp: 1659793546
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n-1]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6zivilsl.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp6zivilsl.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp6zivilsl.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp6zivilsl.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp6zivilsl.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6zivilsl.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793548
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    v = Vector{Int64}(undef,\
    \ n)\n    v[1] = n\n    for i in 2:n\n        if v[i-1] % 2 == 0\n           \
    \ v[i] = v[i-1] + 2\n        else\n            v[i] = v[i-1] + 1\n        end\n\
    \    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2css0l55.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2css0l55.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2css0l55.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2css0l55.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2css0l55.jl:33\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 6, 8, 10, 12] == [5, 7, 9, 11, 13]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2css0l55.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2css0l55.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659793546
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # your code here\n \
    \   return [n]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkm525z9z.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpkm525z9z.jl:23\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test Failed at /tmp/tmpkm525z9z.jl:24\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [4] == [4, 6, 8, 10]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkm525z9z.jl:25\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test Failed at /tmp/tmpkm525z9z.jl:26\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6] == [6,\
    \ 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm525z9z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm525z9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkm525z9z.jl:27\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.co"
  timestamp: 1659793544
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[1]]\n\
    \    else\n        return [n] .+ [make_a_pile(n-1)[1]]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpsu9kfzwi.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpsu9kfzwi.jl:22\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpsu9kfzwi.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsu9kfzwi.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsu9kfzwi.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpsu9kfzwi.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpsu9kfzwi.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsu9kfzwi.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659793547
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[1:end-1]...]\n\
    \    else\n        return [n] .+ [make_a_pile(n+1)[1:end-1]...]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793550
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    pile = Vector{Int64}(undef,\
    \ n)\n    pile[1] = n\n    for i in 2:n\n        pile[i] = pile[i-1] + 2*(i%2)\
    \ - 1\n    end\n    return pile\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdb01qlq5.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpdb01qlq5.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdb01qlq5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdb01qlq5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdb01qlq5.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdb01qlq5.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdb01qlq5.jl:26\ntest set: Test Failed at /tmp/tmpdb01qlq5.jl:29\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 4, 5, 4, 5]\
    \ == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdb01qlq5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdb01qlq5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdb01qlq5.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdb01qlq5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdb01qlq5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdb01qlq5.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 8, 7, 8, 7, 8, 7] == [8, 10, 12, "
  timestamp: 1659793547
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* vcat(make_a_pile(n/2),\
    \ make_a_pile(n/2 + 1))\n    else\n        return [n] .* vcat(make_a_pile((n-1)/2),\
    \ make_a_pile((n-1)/2 + 1))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwgiw2tb8.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpwgiw2tb8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpwgiw2tb8.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpwgiw2tb8.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgiw2tb8.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgiw2tb8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpwgiw2tb8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpwgiw2tb8.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpwgiw2tb8.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgiw2tb8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgiw2tb8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpwgiw2tb8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpwgiw2tb8.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpwgiw2tb8.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgiw2tb8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgiw2tb8.jl:28\ntest set:\
    \ Error During Tes"
  timestamp: 1659793547
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)[i]\
    \ for i in 1:length(make_a_pile(n+1))]\n    else\n        return [n] .+ [make_a_pile(n+2)[i]\
    \ for i in 1:length(make_a_pile(n+2))]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793549
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .* vcat(1, make_a_pile(n+1))\n\
    \    else\n        return [n] .* vcat(1, make_a_pile(n-1))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) ==\
    \ [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
    \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793550
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2, 4]\n    end\n    if n % 2 == 0\n        return [n, n+2, n+4]\n\
    \    else\n        return [n, n+2, n+4]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuc8qq2h3.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpuc8qq2h3.jl:36\n  Expression: candidate(4)\
    \ == [4, 6, 8, 10]\n   Evaluated: [4, 6, 8] == [4, 6, 8, 10]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc8qq2h3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc8qq2h3.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuc8qq2h3.jl:37\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 7, 9] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuc8qq2h3.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuc8qq2h3.jl:34\ntest set: Test Failed at /tmp/tmpuc8qq2h3.jl:38\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6, 8, 10]\
    \ == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc8qq2h3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc8qq2h3.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuc8qq2h3.jl:39\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 10, 12] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc8qq2h3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc8qq2h3.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659793546
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        n = n % 2 == 0 ? n - 1 : n + 1\n        push!(levels, n)\n  \
    \  end\n    return levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # your code here\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5i4d2vzw.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp5i4d2vzw.jl:23\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp5i4d2vzw.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5i4d2vzw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5i4d2vzw.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp5i4d2vzw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmp5i4d2vzw.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5i4d2vzw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659793548
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ levels[end] != 1\n        if levels[end] % 2 == 0\n            push!(levels,\
    \ levels[end] - 1)\n        else\n            push!(levels, levels[end] - 2)\n\
    \        end\n    end\n    return levels\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3tvb5kll.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp3tvb5kll.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tvb5kll.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tvb5kll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tvb5kll.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n % 2 == 0\n\
    \        return [n] .+ [2:2:n]\n    else\n        return [n] .+ [1:2:n]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpa675ul06.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpa675ul06.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmpa675ul06.jl:24\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa675ul06.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa675ul06.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpa675ul06.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    pile = [n]\n    while\
    \ n != 1\n        if n % 2 == 0\n            n = n / 2\n        else\n       \
    \     n = (n + 1) / 2\n        end\n        push!(pile, n)\n    end\n    return\
    \ pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphvfbgbjl.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmphvfbgbjl.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphvfbgbjl.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test Failed at /tmp/tmphvfbgbjl.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphvfbgbjl.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphvfbgbjl.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793547
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    pile = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(pile, n)\n    end\n    return\
    \ pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5eakgqx4.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp5eakgqx4.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5eakgqx4.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test Failed at /tmp/tmp5eakgqx4.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5eakgqx4.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5eakgqx4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5eakgqx4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5eakgqx4.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] != 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppxymkj09.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppxymkj09.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxymkj09.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxymkj09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppxymkj09.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        n = n % 2 == 0 ? n - 1 : n + 1\n        push!(stones, n)\n  \
    \  end\n    return stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = Vector{Int64}(undef,\
    \ n)\n    stones[1] = n\n    for i in 2:n\n        stones[i] = stones[i-1] + 2*(i%2)\
    \ - 1\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk4bxklsp.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpk4bxklsp.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:29\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 4, 5, 4, 5] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: "
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n; make_a_pile(n+1)]\n    else\n\
    \        return [n; make_a_pile(n+2)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793543
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = zeros(Int64,\
    \ n)\n    for i in 1:n\n        if i == 1\n            stones[i] = n\n       \
    \ elseif i % 2 == 0\n            stones[i] = stones[i-1] + 2\n        else\n \
    \           stones[i] = stones[i-1] + 1\n        end\n    end\n    return stones\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0kbd2am7.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp0kbd2am7.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 5, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kbd2am7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kbd2am7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0kbd2am7.jl:33\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 6, 7, 9] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0kbd2am7.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0kbd2am7.jl:31\ntest set: Test Failed at /tmp/tmp0kbd2am7.jl:34\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 7, 8, 10,\
    \ 11] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kbd2am7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kbd2am7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0kbd2am7.jl:35\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 8, 9, 11, 12, 14] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kbd2am7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kbd2am7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0kbd2am7.jl:36\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 10, 11, 13, 14, 16, 17, 19] == "
  timestamp: 1659793547
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n % 2 == 0\n\
    \        return [n] .+ make_a_pile(n - 1)\n    else\n        return [n] .+ make_a_pile(n\
    \ - 2)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0y2zfvdl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp0y2zfvdl.jl:32\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [4] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0y2zfvdl.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0y2zfvdl.jl:31\ntest set: Test Failed at /tmp/tmp0y2zfvdl.jl:33\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [8] == [4, 6, 8, 10]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0y2zfvdl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0y2zfvdl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0y2zfvdl.jl:34\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [9] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0y2zfvdl.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0y2zfvdl.jl:31\ntest set: Test Failed at /tmp/tmp0y2zfvdl.jl:35\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [15] == [6,\
    \ 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0y2zfvdl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0y2zfvdl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0y2zfvdl.jl:36\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [24] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/."
  timestamp: 1659793547
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(result, n)\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwffert87.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpwffert87.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwffert87.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test Failed at /tmp/tmpwffert87.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwffert87.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwffert87.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwffert87.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793541
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793542
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    result = [n]\n    while\
    \ n != 1\n        if n % 2 == 0\n            n = n / 2\n        else\n       \
    \     n = (n + 1) / 2\n        end\n        push!(result, n)\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwyvp7uk4.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpwyvp7uk4.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyvp7uk4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyvp7uk4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwyvp7uk4.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwyvp7uk4.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwyvp7uk4.jl:30\ntest set: Test Failed at /tmp/tmpwyvp7uk4.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyvp7uk4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyvp7uk4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwyvp7uk4.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyvp7uk4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyvp7uk4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwyvp7uk4.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793547
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ make_a_pile(n/2)\n  \
    \  else\n        return [n] .+ make_a_pile(n*3+1)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvs9fctpt.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpvs9fctpt.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpvs9fctpt.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvs9fctpt.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvs9fctpt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvs9fctpt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpvs9fctpt.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvs9fctpt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvs9fctpt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvs9fctpt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(5) == [5, 7, 9, 11, 13]\n  MethodError: no method matching make_a_pile(::Float64)\n\
    \  Closest candidates are:\n    make_a_pile(!Matched::Int64) at /tmp/tmpvs9fctpt.jl:14\n\
    \  Stacktrace:\n   [1] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:19\n\
    \   [2] make_a_pile(n::Int64)\n     @ Main /tmp/tmpvs9fctpt.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvs9fctpt.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659793545
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # Initialize the vector\
    \ with the first level\n    pile = [n]\n    # Loop until the last level has only\
    \ one stone\n    while pile[end] != 1\n        # If the last level has an odd\
    \ number of stones, the next level has\n        # the next odd number of stones.\n\
    \        if isodd(pile[end])\n            push!(pile, pile[end] + 2)\n       \
    \ # If the last level has an even number of stones, the next level has\n     \
    \   # the next even number of stones.\n        else\n            push!(pile, pile[end]\
    \ + 1)\n        end\n    end\n    return pile\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793550
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\n \
    \   return []\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppvalot8h.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmppvalot8h.jl:23\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: Int64[] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppvalot8h.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppvalot8h.jl:22\ntest set: Test Failed at /tmp/tmppvalot8h.jl:24\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: Int64[] == [4, 6,\
    \ 8, 10]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppvalot8h.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppvalot8h.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppvalot8h.jl:25\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: Int64[] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppvalot8h.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppvalot8h.jl:22\ntest set: Test Failed at /tmp/tmppvalot8h.jl:26\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: Int64[] ==\
    \ [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppvalot8h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppvalot8h.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppvalot8h.jl:27\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: Int64[] == [8, 10, 12, 14, 16, 18, 20, 22]\n\
    Stacktrace:\n [1] macro "
  timestamp: 1659793547
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [make_a_pile(n+1)...]\n\
    \    else\n        return [n] .+ [make_a_pile(n+2)...]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\
    \t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11,\
    \ 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793551
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    pile = [n]\n    while\
    \ n != 1\n        if n % 2 == 0\n            n = n / 2\n        else\n       \
    \     n = (n + 1) / 2\n        end\n        push!(pile, n)\n    end\n    return\
    \ pile\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphvfbgbjl.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmphvfbgbjl.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphvfbgbjl.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test Failed at /tmp/tmphvfbgbjl.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphvfbgbjl.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphvfbgbjl.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphvfbgbjl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphvfbgbjl.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793547
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(levels, n)\n    end\n    return\
    \ levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcja_mvel.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpcja_mvel.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test Failed at /tmp/tmpcja_mvel.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793545
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ levels[end] > 1\n        if levels[end] % 2 == 0\n            push!(levels,\
    \ levels[end] - 1)\n        else\n            push!(levels, levels[end] - 2)\n\
    \        end\n    end\n    return levels\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafp3rury.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpafp3rury.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpafp3rury.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpafp3rury.jl:29\ntest set: Test Failed at /tmp/tmpafp3rury.jl:31\n\
    \  Expression: candidate(4) == [4, 6, 8, 10]\n   Evaluated: [4, 3, 1] == [4, 6,\
    \ 8, 10]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafp3rury.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafp3rury.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpafp3rury.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpafp3rury.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpafp3rury.jl:29\ntest set: Test Failed at /tmp/tmpafp3rury.jl:33\n\
    \  Expression: candidate(6) == [6, 8, 10, 12, 14, 16]\n   Evaluated: [6, 5, 3,\
    \ 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafp3rury.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafp3rury.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpafp3rury.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] == [8, 10, 12, 14, 16, 18,\
    \ 20, 22]\nStacktr"
  timestamp: 1659793548
- exit_code: -1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n < 1\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n % 2 == 0\n\
    \        return [n] .* vcat(make_a_pile(n-1), make_a_pile(n+1))\n    else\n  \
    \      return [n] .* vcat(make_a_pile(n-1), make_a_pile(n-1))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659793551
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(stones, n)\n    end\n    return\
    \ stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc6_eexlu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc6_eexlu.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test Failed at /tmp/tmpc6_eexlu.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc6_eexlu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc6_eexlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpc6_eexlu.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2n]\n    else\n\
    \        return [n] .+ [1:2:2n]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_75bullg.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_75bullg.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmp_75bullg.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_75bullg.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_75bullg.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_75bullg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = Vector{Int64}(undef,\
    \ n)\n    stones[1] = n\n    for i in 2:n\n        stones[i] = stones[i-1] + (stones[i-1]\
    \ % 2 == 0 ? 2 : 1)\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14sj06ij.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp14sj06ij.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 4, 6] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14sj06ij.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14sj06ij.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp14sj06ij.jl:29\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 6, 8, 10, 12] == [5, 7, 9, 11, 13]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14sj06ij.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14sj06ij.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659793539
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = Vector{Int64}(undef,\
    \ n)\n    stones[1] = n\n    for i in 2:n\n        stones[i] = stones[i-1] + 2*(i%2)\
    \ - 1\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) ==\
    \ [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk4bxklsp.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpk4bxklsp.jl:27\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 3] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:28\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 4, 3] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:29\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 4, 5, 4, 5] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:30\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 6, 5, 6, 5] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4bxklsp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4bxklsp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk4bxklsp.jl:31\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: "
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    # Initialize the vector\
    \ of stones\n    stones = zeros(Int64, n)\n    stones[1] = n\n    # Loop over\
    \ the levels\n    for i in 2:n\n        # If the number of stones in the previous\
    \ level is odd\n        if stones[i-1] % 2 == 1\n            # The number of stones\
    \ in the current level is the next odd number\n            stones[i] = stones[i-1]\
    \ + 2\n        # If the number of stones in the previous level is even\n     \
    \   else\n            # The number of stones in the current level is the next\
    \ even number\n            stones[i] = stones[i-1] + 1\n        end\n    end\n\
    \    return stones\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\
    \t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t\
    @test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12,\
    \ 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbh_z6c_p.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpbh_z6c_p.jl:38\n  Expression: candidate(4)\
    \ == [4, 6, 8, 10]\n   Evaluated: [4, 5, 7, 9] == [4, 6, 8, 10]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbh_z6c_p.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbh_z6c_p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbh_z6c_p.jl:40\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 7, 9, 11, 13, 15] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbh_z6c_p.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbh_z6c_p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbh_z6c_p.jl:41\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 9, 11, 13, 15, 17, 19, 21] == [8, 10,\
    \ 12, 14, 16, 18, 20, 22]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbh_z6c_p.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbh_z6c_p.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659793548
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    stones = [n]\n    while\
    \ stones[end] > 1\n        if stones[end] % 2 == 0\n            push!(stones,\
    \ stones[end] - 1)\n        else\n            push!(stones, stones[end] - 2)\n\
    \        end\n    end\n    return stones\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuijiod4e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuijiod4e.jl:30\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 1] == [3, 5, 7]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:31\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 3, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:32\n  Expression: candidate(5) == [5, 7, 9, 11,\
    \ 13]\n   Evaluated: [5, 3, 1] == [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:33\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 5, 3, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuijiod4e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuijiod4e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpuijiod4e.jl:34\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 7, 5, 3, 1] =="
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 1\n        return\
    \ [1]\n    end\n    if n % 2 == 0\n        return [n] .+ [2:2:2*n]\n    else\n\
    \        return [n] .+ [1:2:2*n]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4)\
    \ == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6)\
    \ == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18,\
    \ 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprat_6qr3.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmprat_6qr3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3) == [3, 5, 7]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] make_a_pile(n::Int64)\n      @ Main /tmp/tmprat_6qr3.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprat_6qr3.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprat_6qr3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprat_6qr3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [4, 6, 8, 10]\n  MethodError: no method matching +(::Int64,\
    \ ::StepRange{Int64, Int64})\n  For element-wise addition, use broadcasting with\
    \ dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigI"
  timestamp: 1659793541
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\
    \"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    levels = [n]\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n        \
    \    n = (n + 1) / 2\n        end\n        push!(levels, n)\n    end\n    return\
    \ levels\nend\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
    \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5)\
    \ == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
    \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcja_mvel.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpcja_mvel.jl:31\n  Expression: candidate(3)\
    \ == [3, 5, 7]\n   Evaluated: [3, 2, 1] == [3, 5, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:32\n  Expression: candidate(4) == [4, 6, 8, 10]\n\
    \   Evaluated: [4, 2, 1] == [4, 6, 8, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test Failed at /tmp/tmpcja_mvel.jl:33\n\
    \  Expression: candidate(5) == [5, 7, 9, 11, 13]\n   Evaluated: [5, 3, 2, 1] ==\
    \ [5, 7, 9, 11, 13]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:34\n  Expression: candidate(6) == [6, 8, 10, 12,\
    \ 14, 16]\n   Evaluated: [6, 3, 2, 1] == [6, 8, 10, 12, 14, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcja_mvel.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcja_mvel.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcja_mvel.jl:35\n  Expression: candidate(8) == [8, 10, 12,\
    \ 14, 16, 18, 20, 22]\n   Evaluated: [8, 4, 2, 1] == [8, 10, 12, 14, 16, 18, 20,\
    \ 22]\nStac"
  timestamp: 1659793545
