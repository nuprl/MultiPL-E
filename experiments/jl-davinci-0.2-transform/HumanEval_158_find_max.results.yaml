language: jl
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        if\
    \ length(unique(word)) > max_count\n            max_count = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp641c1id.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpp641c1id.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp641c1id.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp641c1id.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpp641c1id.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp641c1id.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp641c1id.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words\n   \
    \     unique_chars = length(unique(word))\n        if unique_chars > max_unique_chars\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \      end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps3jxqz_y.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmps3jxqz_y.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps3jxqz_y.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words\n   \
    \     unique_chars = length(unique(word))\n        if unique_chars > max_unique_chars\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \      end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps3jxqz_y.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmps3jxqz_y.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps3jxqz_y.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_unique_char = 0\n    for word in words\n    \
    \    unique_char = length(unique(word))\n        if unique_char > max_unique_char\n\
    \            max_unique_char = unique_char\n            max_word = word\n    \
    \    end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7f4bpgnl.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp7f4bpgnl.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7f4bpgnl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f4bpgnl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7f4bpgnl.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7f4bpgnl.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f4bpgnl.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words\n   \
    \     unique_chars = length(unique(word))\n        if unique_chars > max_unique_chars\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \      end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps3jxqz_y.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmps3jxqz_y.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps3jxqz_y.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_word_len = 0\n    for word in words\n       \
    \ if length(unique(word)) > max_word_len\n            max_word = word\n      \
    \      max_word_len = length(unique(word))\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9_r6u3fn.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp9_r6u3fn.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_r6u3fn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_r6u3fn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9_r6u3fn.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_r6u3fn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_r6u3fn.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv5a9xhuz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpv5a9xhuz.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv5a9xhuz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv5a9xhuz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpv5a9xhuz.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv5a9xhuz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv5a9xhuz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv5a9xhuz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpv5a9xhuz.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv5a9xhuz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv5a9xhuz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpv5a9xhuz.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv5a9xhuz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv5a9xhuz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique = 0\n    max_word = \"\"\n    for word in words\n        unique\
    \ = length(unique(word))\n        if unique > max_unique\n            max_unique\
    \ = unique\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpkftqyz7m.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpkftqyz7m.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpkftqyz7m.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkftqyz7m.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkftqyz7m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkftqyz7m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpkftqyz7m.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkftqyz7m.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkftqyz7m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkftqyz7m.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpkftqyz7m.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkftqyz7m.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkftqyz7m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkftqyz7m.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words\n   \
    \     unique_chars = length(unique(word))\n        if unique_chars > max_unique_chars\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \      end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps3jxqz_y.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmps3jxqz_y.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps3jxqz_y.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3jxqz_y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3jxqz_y.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpouqhlwf8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpouqhlwf8.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpouqhlwf8.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpouqhlwf8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpouqhlwf8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique_chars = 0\n    max_unique_word = \"\"\n    for word in words\n\
    \        unique_chars = length(unique(word))\n        if unique_chars > max_unique_chars\n\
    \            max_unique_chars = unique_chars\n            max_unique_word = word\n\
    \        end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx1qelgw_.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpx1qelgw_.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx1qelgw_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx1qelgw_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpx1qelgw_.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx1qelgw_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx1qelgw_.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
