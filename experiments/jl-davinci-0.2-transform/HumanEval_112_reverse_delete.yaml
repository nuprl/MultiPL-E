name: HumanEval_112_reverse_delete
language: jl
prompt: "\"\"\"Task\n    We are given two strings s and c, you have to deleted all\
  \ the characters in s that are equal to any character in c\n    then check if the\
  \ result string is palindrome.\n    A string is called palindrome if it reads the\
  \ same backward as forward.\n    You should return a tuple containing the result\
  \ string and True/False for the check.\n    Example\n    >>> reverse_delete(\"abcde\"\
  , \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n   \
  \ (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    (\"cdedc\"\
  , true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
  \ Bool} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
  abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"\
  acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\
  \t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
  , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
  , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
  @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
  , \"mia\") == (\"\", true))\nend\n"
completions: ["    s = delete!(s, c)\n    return s, ispalindrome(s)\nend", "    s\
    \ = replace(s, r\"[$c]\", \"\")\n    return s, ispalindrome(s)\nend", "    s =\
    \ filter(x -> !(x in c), s)\n    return s, s == reverse(s)\nend", "    s = filter(x\
    \ -> !(x in c), s)\n    return s, s == reverse(s)\nend", "    s = replace(s, c,\
    \ \"\")\n    return (s, s == reverse(s))\nend", "    s = replace(s, r\"[$c]\"\
    , \"\")\n    return s, ispalindrome(s)\nend", "    s = replace(s, r\"[\" * c *\
    \ \"]\", \"\")\n    return s, s == reverse(s)\nend", "    s = replace(s, c, \"\
    \")\n    return s, ispalindrome(s)\nend", "    s = replace(s, r\"[$c]\", \"\"\
    )\n    return s, isequal(s, reverse(s))\nend", "    # your code here\n    return\
    \ s, false\nend", "    s = replace(s, r\"[$c]\", \"\")\n    return s, s == reverse(s)\n\
    end", "    s_new = String[]\n    for i in s\n        if !(i in c)\n          \
    \  push!(s_new, i)\n        end\n    end\n    s_new = join(s_new)\n    return\
    \ (s_new, s_new == reverse(s_new))\nend", "    s = replace(s, r\"[$c]\", \"\"\
    )\n    return s, ispalindrome(s)\nend", "    s = replace(s, r\"[\"*c*\"]\", \"\
    \")\n    return s, s == reverse(s)\nend", "    s = filter(x -> !(x in c), s)\n\
    \    return (s, s == reverse(s))\nend", "    s = filter(x -> !(x in c), s)\n \
    \   return s, s == reverse(s)\nend", "    s = replace(s, c, \"\")\n    return\
    \ s, ispalindrome(s)\nend", "    s = replace(s, c, \"\")\n    return (s, s ==\
    \ reverse(s))\nend", "    s = replace(s, c, \"\")\n    return s, ispalindrome(s)\n\
    end", "    s = replace(s, r\"[$c]\", \"\")\n    return s, s == reverse(s)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
