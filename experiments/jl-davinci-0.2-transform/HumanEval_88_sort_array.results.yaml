language: jl
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if sum(array[1], array[end]) % 2 ==\
    \ 0\n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1nasepff.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp1nasepff.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  MethodError:\
    \ objects of type Int64 are not callable\n  Maybe you forgot to use an operator\
    \ such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] sum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:503\n \
    \  [4] sum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:503\n   [5] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmp1nasepff.jl:26\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp1nasepff.jl:39 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp1nasepff.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp1nasepff.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] sum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:503\n \
    \  [4] sum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:503\n   [5] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmp1nasepff.jl:26\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp1nasepff.jl:40 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-"
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return []\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
