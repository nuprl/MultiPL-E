name: HumanEval_56_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
  <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif length(brackets) == 1\n        return false\n    elseif brackets[1]\
    \ == '<'\n        if brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    if length(brackets) == 0\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[end]\
    \ == '<'\n        return false\n    elseif brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[1:end-1])\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend", "    n = length(brackets)\n    if n == 0\n        return true\n\
    \    end\n    if n % 2 != 0\n        return false\n    end\n    if brackets[1]\
    \ == \">\"\n        return false\n    end\n    if brackets[n] == \"<\"\n     \
    \   return false\n    end\n    for i in 1:n-1\n        if brackets[i] == \"<\"\
    \ && brackets[i+1] == \"<\"\n            return false\n        end\n        if\
    \ brackets[i] == \">\" && brackets[i+1] == \">\"\n            return false\n \
    \       end\n    end\n    return true\nend", "    if length(brackets) == 0\n \
    \       return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif length(brackets) == 1\n        return false\n\
    \    elseif brackets[1] == '<' && brackets[end] == '>'\n        return correct_bracketing(brackets[2:end-1])\n\
    \    else\n        return false\n    end\nend", "    open_brackets = 0\n    for\
    \ b in brackets\n        if b == '<'\n            open_brackets += 1\n       \
    \ elseif b == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    bracket_stack = []\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            push!(bracket_stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(bracket_stack)\n                return false\n\
    \            else\n                pop!(bracket_stack)\n            end\n    \
    \    end\n    end\n    return isempty(bracket_stack)\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end", "    open_brackets = 0\n    for b in brackets\n        if b == '<'\n   \
    \         open_brackets += 1\n        elseif b == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
