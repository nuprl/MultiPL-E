language: jl
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoyx3fe.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoyx3fe.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoyx3fe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoyx3fe.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk9gurboh.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpk9gurboh.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9gurboh.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9gurboh.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpubru9kcj.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpubru9kcj.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpubru9kcj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubru9kcj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    i = 1\n\
    \    j = 2\n    min_diff = abs(numbers[i] - numbers[j])\n    min_i = i\n    min_j\
    \ = j\n    while j < length(numbers)\n        diff = abs(numbers[i] - numbers[j])\n\
    \        if diff < min_diff\n            min_diff = diff\n            min_i =\
    \ i\n            min_j = j\n        end\n        i += 1\n        j += 1\n    end\n\
    \    return (numbers[min_i], numbers[min_j])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa6l82y3b.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpa6l82y3b.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa6l82y3b.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa6l82y3b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa6l82y3b.jl:35\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa6l82y3b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa6l82y3b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa6l82y3b.jl:36\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa6l82y3b.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa6l82y3b.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        throw(ArgumentError(\"The length of the list should be\
    \ at least 2.\"))\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair\
    \ = (numbers[1], numbers[2])\n    for i in 1:n-1\n        for j in i+1:n\n   \
    \         if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5nfukvw7.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp5nfukvw7.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5nfukvw7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5nfukvw7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk9gurboh.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpk9gurboh.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9gurboh.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9gurboh.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoyx3fe.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoyx3fe.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoyx3fe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoyx3fe.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n \
    \   #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0,\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm79no0kl.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm79no0kl.jl:1\n\
    in expression starting at /tmp/tmpm79no0kl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    diff = abs(numbers[1]\
    \ - numbers[2])\n    a = numbers[1]\n    b = numbers[2]\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < diff\n\
    \                diff = abs(numbers[i] - numbers[j])\n                a = numbers[i]\n\
    \                b = numbers[j]\n            end\n        end\n    end\n    return\
    \ a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp74wb79lf.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp74wb79lf.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp74wb79lf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp74wb79lf.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpem7r0xzc.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpem7r0xzc.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpem7r0xzc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpem7r0xzc.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcwcwsv6m.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpcwcwsv6m.jl:16\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Tuple{Float64,\
    \ Float64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpcwcwsv6m.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcwcwsv6m.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcwcwsv6m.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpcwcwsv6m.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Float64, Float64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpcwcwsv6m.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpubru9kcj.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpubru9kcj.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpubru9kcj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubru9kcj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the minimum difference to the maximum possible difference\n\
    \    min_diff = maximum(numbers) - minimum(numbers)\n    # Initialize the closest\
    \ pair to the first two elements\n    closest_pair = (numbers[1], numbers[2])\n\
    \    # Loop over all pairs of numbers\n    for i in 1:length(numbers)\n      \
    \  for j in i+1:length(numbers)\n            # Check if the difference between\
    \ the pair is smaller than the current minimum\n            if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                # If so, update the minimum difference\
    \ and closest pair\n                min_diff = abs(numbers[i] - numbers[j])\n\
    \                closest_pair = (numbers[i], numbers[j])\n            end\n  \
    \      end\n    end\n    # Return the closest pair\n    return closest_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbx4tfe5t.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpbx4tfe5t.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbx4tfe5t.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbx4tfe5t.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjsoyx3fe.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpjsoyx3fe.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjsoyx3fe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjsoyx3fe.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n == 2\n        return (numbers[1], numbers[2])\n    end\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpio4qek27.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpio4qek27.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpio4qek27.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio4qek27.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest_elements = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in 1:length(numbers)\n            if i != j\n                if\
    \ abs(numbers[i] - numbers[j]) < diff\n                    diff = abs(numbers[i]\
    \ - numbers[j])\n                    closest_elements = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return closest_elements\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph5e2xth1.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmph5e2xth1.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5e2xth1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5e2xth1.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n \
    \   #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0,\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm79no0kl.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm79no0kl.jl:1\n\
    in expression starting at /tmp/tmpm79no0kl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The list of numbers must\
    \ be at least two numbers long.\")\n    end\n    # Initialize the minimum difference\
    \ to be the difference between the first two numbers\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    # Initialize the minimum difference pair to be the first\
    \ two numbers\n    min_diff_pair = (numbers[1], numbers[2])\n    # Loop over all\
    \ pairs of numbers\n    for i = 1:length(numbers)\n        for j = i+1:length(numbers)\n\
    \            # If the difference between the two numbers is less than the current\
    \ minimum difference\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                # Update the minimum difference\n                min_diff = abs(numbers[i]\
    \ - numbers[j])\n                # Update the minimum difference pair\n      \
    \          min_diff_pair = (numbers[i], numbers[j])\n            end\n       \
    \ end\n    end\n    # Return the minimum difference pair\n    return min_diff_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1fdecai3.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp1fdecai3.jl:37\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fdecai3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fdecai3.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpubru9kcj.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpubru9kcj.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpubru9kcj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubru9kcj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk9gurboh.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpk9gurboh.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9gurboh.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9gurboh.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
