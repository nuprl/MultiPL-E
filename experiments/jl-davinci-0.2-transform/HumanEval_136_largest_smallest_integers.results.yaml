language: jl
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       elseif i > 0 && (b == nothing || i < b)\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       elseif i > 0 && (b == nothing || i < b)\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i > 0\n            if b == nothing\n                b = i\n          \
    \  elseif i < b\n                b = i\n            end\n        elseif i < 0\n\
    \            if a == nothing\n                a = i\n            elseif i > a\n\
    \                a = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
