language: jl
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '('\n            count += 1\n        elseif i\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == \")\"\n  \
    \      return false\n    end\n    if n == 1\n        return false\n    end\n \
    \   if brackets[n] == \"(\"\n        return false\n    end\n    if n == 2\n  \
    \      return true\n    end\n    if brackets[1] == \"(\" && brackets[n] == \"\
    )\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7yvu5l8y.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp7yvu5l8y.jl:41\n  Expression: candidate(\"\
    (()())\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7yvu5l8y.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7yvu5l8y.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp7yvu5l8y.jl:42\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7yvu5l8y.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7yvu5l8y.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp7yvu5l8y.jl:43\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7yvu5l8y.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7yvu5l8y.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '('\n            count += 1\n        elseif i\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '('\n            count += 1\n        elseif i\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open = 0\n \
    \   for c in brackets\n        if c == '('\n            num_open += 1\n      \
    \  elseif c == ')'\n            num_open -= 1\n        end\n        if num_open\
    \ < 0\n            return false\n        end\n    end\n    return num_open ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for c\
    \ in brackets\n        if c == '('\n            n += 1\n        elseif c == ')'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '('\n            push!(stack, i)\n      \
    \  elseif i == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if isempty(stack)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd9q5ghdq.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpd9q5ghdq.jl:22\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\ntest set: Test Failed at /tmp/tmpd9q5ghdq.jl:23\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd9q5ghdq.jl:24\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\ntest set: Test Failed at /tmp/tmpd9q5ghdq.jl:25\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659794834
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            bracket_count\
    \ += 1\n        elseif bracket == ')'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == \")\"\n  \
    \      return false\n    end\n    if brackets[n] == \"(\"\n        return false\n\
    \    end\n    if n == 1\n        return false\n    end\n    if n == 2\n      \
    \  return true\n    end\n    return correct_bracketing(brackets[2:n-1])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgpzk8sr6.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpgpzk8sr6.jl:42\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgpzk8sr6.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgpzk8sr6.jl:36\ntest set: Test Failed at /tmp/tmpgpzk8sr6.jl:44\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpzk8sr6.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpzk8sr6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgpzk8sr6.jl:47\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgpzk8sr6.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgpzk8sr6.jl:36\ntest set: Test Failed at /tmp/tmpgpzk8sr6.jl:48\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpzk8sr6.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpzk8sr6.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659794834
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == \")\"\n  \
    \      return false\n    end\n    if n == 1\n        return false\n    end\n \
    \   if brackets[n] == \"(\"\n        return false\n    end\n    if n == 2\n  \
    \      return true\n    end\n    if brackets[2] == \")\"\n        return false\n\
    \    end\n    if brackets[n-1] == \"(\"\n        return false\n    end\n    return\
    \ correct_bracketing(brackets[2:n-1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7j82t2o5.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp7j82t2o5.jl:48\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7j82t2o5.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7j82t2o5.jl:42\ntest set: Test Failed at /tmp/tmp7j82t2o5.jl:50\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7j82t2o5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7j82t2o5.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7j82t2o5.jl:53\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7j82t2o5.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7j82t2o5.jl:42\ntest set: Test Failed at /tmp/tmp7j82t2o5.jl:54\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7j82t2o5.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7j82t2o5.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659794834
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ b in brackets\n        if b == '('\n            count += 1\n        elseif b\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd9q5ghdq.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpd9q5ghdq.jl:22\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\ntest set: Test Failed at /tmp/tmpd9q5ghdq.jl:23\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd9q5ghdq.jl:24\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\ntest set: Test Failed at /tmp/tmpd9q5ghdq.jl:25\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9q5ghdq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9q5ghdq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659794834
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    (\"\n        return false\n    end\n    if brackets == \"()\"\n        return\
    \ true\n    end\n    if brackets == \"(()())\"\n        return true\n    end\n\
    \    if brackets == \")(()\"\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp66enmuay.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp66enmuay.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"()()(()())()\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp66enmuay.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66enmuay.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66enmuay.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp66enmuay.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"()()((()()())())(()()(()))\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp66enmuay.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66enmuay.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66enmuay.jl:31\ntest set:\
    \ Error During Test at /tm"
  timestamp: 1659794836
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for c in brackets\n        if c == '('\n            push!(stack, c)\n      \
    \  elseif c == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '('\n            open_count += 1\n   \
    \     elseif c == ')'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '('\n            count += 1\n        elseif i\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '('\n            open_count += 1\n   \
    \     elseif c == ')'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_bracket_count\
    \ += 1\n        elseif c == ')'\n            open_bracket_count -= 1\n       \
    \ end\n        if open_bracket_count < 0\n            return false\n        end\n\
    \    end\n    return open_bracket_count == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '('\n            count += 1\n        elseif i\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    (\"\n        return false\n    end\n    if brackets == \"()\"\n        return\
    \ true\n    end\n    if brackets == \"(()())\"\n        return true\n    end\n\
    \    if brackets == \")(()\"\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp66enmuay.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp66enmuay.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"()()(()())()\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp66enmuay.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66enmuay.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66enmuay.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp66enmuay.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"()()((()()())())(()()(()))\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp66enmuay.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66enmuay.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66enmuay.jl:31\ntest set:\
    \ Error During Test at /tm"
  timestamp: 1659794836
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '('\n            count += 1\n        elseif i\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == ')'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7gjm08gh.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp7gjm08gh.jl:27\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test Failed at /tmp/tmp7gjm08gh.jl:28\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7gjm08gh.jl:29\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test Failed at /tmp/tmp7gjm08gh.jl:30\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7gjm08gh.jl:33\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659794834
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '('\n            open_count += 1\n   \
    \     elseif c == ')'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == ')'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7gjm08gh.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp7gjm08gh.jl:27\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test Failed at /tmp/tmp7gjm08gh.jl:28\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7gjm08gh.jl:29\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test Failed at /tmp/tmp7gjm08gh.jl:30\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7gjm08gh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7gjm08gh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7gjm08gh.jl:33\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659794834
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '('\n            n += 1\n        elseif i == ')'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqspy0c3o.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpqspy0c3o.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqspy0c3o.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqspy0c3o.jl:31\ntest set: Test Failed at /tmp/tmpqspy0c3o.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqspy0c3o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqspy0c3o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqspy0c3o.jl:38\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqspy0c3o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqspy0c3o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqspy0c3o.jl:39\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqspy0c3o.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqspy0c3o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqspy0c3o.jl:40\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659794834
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            bracket_count\
    \ += 1\n        elseif bracket == ')'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    if bracket_count == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
