language: jl
name: HumanEval_125_split_words
results:
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmgwpyw7r.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxji5frov.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpxji5frov.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpxji5frov.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxji5frov.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxji5frov.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxji5frov.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpxji5frov.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxji5frov.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxji5frov.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxji5frov.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpzk97mmlr.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpzk97mmlr.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzk97mmlr.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzk97mmlr.jl:26\ntest set: Error During Test at
    /tmp/tmpzk97mmlr.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpzk97mmlr.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzk97mmlr.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzk97mmlr.jl:26\ntest set: Error During Test at
    /tmp/tmpzk97mmlr.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpts_of4fw.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpts_of4fw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpts_of4fw.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpts_of4fw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpts_of4fw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpts_of4fw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpts_of4fw.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpts_of4fw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpts_of4fw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpts_of4fw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n  "
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp8r4zhmas.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp8r4zhmas.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8r4zhmas.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8r4zhmas.jl:26\ntest set: Error During Test at
    /tmp/tmp8r4zhmas.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp8r4zhmas.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8r4zhmas.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8r4zhmas.jl:26\ntest set: Error During Test at
    /tmp/tmp8r4zhmas.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.(collect(txt)\
    \ .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpz5k7lf6c.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpz5k7lf6c.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpz5k7lf6c.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpz5k7lf6c.jl:26\ntest set: Error During Test at
    /tmp/tmpz5k7lf6c.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpz5k7lf6c.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpz5k7lf6c.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpz5k7lf6c.jl:26\ntest set: Error During Test at
    /tmp/tmpz5k7lf6c.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(x)\
    \ - ord('a')) for x in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpe2cc2pec.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpe2cc2pec.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpe2cc2pec.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpe2cc2pec.jl:26\ntest set: Error During Test at
    /tmp/tmpe2cc2pec.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpe2cc2pec.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpe2cc2pec.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpe2cc2pec.jl:26\ntest set: Error During Test at
    /tmp/tmpe2cc2pec.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpfk5_sfrk.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpfk5_sfrk.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpfk5_sfrk.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpfk5_sfrk.jl:26\ntest set: Error During Test at
    /tmp/tmpfk5_sfrk.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpfk5_sfrk.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpfk5_sfrk.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpfk5_sfrk.jl:26\ntest set: Error During Test at
    /tmp/tmpfk5_sfrk.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(ord(c) % 2\
    \ == 0 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp0s0cfxf3.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp0s0cfxf3.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp0s0cfxf3.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp0s0cfxf3.jl:26\ntest set: Error During Test at
    /tmp/tmp0s0cfxf3.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp0s0cfxf3.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp0s0cfxf3.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp0s0cfxf3.jl:26\ntest set: Error During Test at
    /tmp/tmp0s0cfxf3.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(x) for x in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpw3s4hdp6.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpw3s4hdp6.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpw3s4hdp6.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpw3s4hdp6.jl:26\ntest set: Error During Test at
    /tmp/tmpw3s4hdp6.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpw3s4hdp6.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpw3s4hdp6.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpw3s4hdp6.jl:26\ntest set: Error During Test at
    /tmp/tmpw3s4hdp6.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmgwpyw7r.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmgwpyw7r.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count_odd_letters(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp_iws7fmd.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp_iws7fmd.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_iws7fmd.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_iws7fmd.jl:26\ntest set: Error During Test at
    /tmp/tmp_iws7fmd.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp_iws7fmd.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_iws7fmd.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_iws7fmd.jl:26\ntest set: Error During Test at
    /tmp/tmp_iws7fmd.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    if length(txt)\
    \ == 1\n        return 1\n    end\n    if length(txt) == 2\n        return 2\n\
    \    end\n    if length(txt) == 3\n        return 3\n    end\n    if length(txt)\
    \ == 4\n        return 4\n    end\n    if length(txt) == 5\n        return 5\n\
    \    end\n    if length(txt) == 6\n        return 6\n    end\n    if length(txt)\
    \ == 7\n        return 7\n    end\n    if length(txt) == 8\n        return 8\n\
    \    end\n    if length(txt) == 9\n        return 9\n    end\n    if length(txt)\
    \ == 10\n        return 10\n    end\n    if length(txt) == 11\n        return\
    \ 11\n    end\n    if length(txt) == 12\n        return 12\n    end\n    if length(txt)\
    \ == 13\n        return 13\n    end\n    if length(txt) == 14\n        return\
    \ 14\n    end\n    if length(txt) == 15\n        return 15\n    end\n    if length(txt)\
    \ == 16\n        return 16\n    end\n    if length(txt) == 17\n        return\
    \ 17\n    end\n    if length(txt) == 18\n        return 18\n    end\n    if length(txt)\
    \ == 19\n        return 19\n    end\n    if length(txt) == 20\n        return\
    \ 20\n    end\n    if length(txt) == 21\n        return 21\n    end\n    if length(txt)\
    \ == 22\n        return 22\n    end\n    if length(txt) == 23\n        return\
    \ 23\n    end\n    if length(txt) == 24\n        return 24\n    end\n    if length(txt)\
    \ == 25\n        return 25\n    end\n    if length(txt) == 26\n        return\
    \ 26\n    end\n    if length(txt) == 27\n        return 27\n    end\n    if length(txt)\
    \ == 28\n        return 28\n    end\n    if length(txt) == 29\n        return\
    \ 29\n    end\n    if length(txt) == 30\n        return 30\n    end\n    if length(txt)\
    \ == 31\n        return 31\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9dagnapo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9dagnapo.jl:1\n\
    in expression starting at /tmp/tmp9dagnapo.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqdpiem7e.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpqdpiem7e.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpqdpiem7e.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpqdpiem7e.jl:26\ntest set: Error During Test at
    /tmp/tmpqdpiem7e.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpqdpiem7e.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpqdpiem7e.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpqdpiem7e.jl:26\ntest set: Error During Test at
    /tmp/tmpqdpiem7e.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    if length(txt)\
    \ == 1\n        return 1\n    end\n    if length(txt) == 2\n        return 2\n\
    \    end\n    if length(txt) == 3\n        return 3\n    end\n    if length(txt)\
    \ == 4\n        return 4\n    end\n    if length(txt) == 5\n        return 5\n\
    \    end\n    if length(txt) == 6\n        return 6\n    end\n    if length(txt)\
    \ == 7\n        return 7\n    end\n    if length(txt) == 8\n        return 8\n\
    \    end\n    if length(txt) == 9\n        return 9\n    end\n    if length(txt)\
    \ == 10\n        return 10\n    end\n    if length(txt) == 11\n        return\
    \ 11\n    end\n    if length(txt) == 12\n        return 12\n    end\n    if length(txt)\
    \ == 13\n        return 13\n    end\n    if length(txt) == 14\n        return\
    \ 14\n    end\n    if length(txt) == 15\n        return 15\n    end\n    if length(txt)\
    \ == 16\n        return 16\n    end\n    if length(txt) == 17\n        return\
    \ 17\n    end\n    if length(txt) == 18\n        return 18\n    end\n    if length(txt)\
    \ == 19\n        return 19\n    end\n    if length(txt) == 20\n        return\
    \ 20\n    end\n    if length(txt) == 21\n        return 21\n    end\n    if length(txt)\
    \ == 22\n        return 22\n    end\n    if length(txt) == 23\n        return\
    \ 23\n    end\n    if length(txt) == 24\n        return 24\n    end\n    if length(txt)\
    \ == 25\n        return 25\n    end\n    if length(txt) == 26\n        return\
    \ 26\n    end\n    if length(txt) == 27\n        return 27\n    end\n    if length(txt)\
    \ == 28\n        return 28\n    end\n    if length(txt) == 29\n        return\
    \ 29\n    end\n    if length(txt) == 30\n        return 30\n    end\n    if length(txt)\
    \ == 31\n        return 31\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9dagnapo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9dagnapo.jl:1\n\
    in expression starting at /tmp/tmp9dagnapo.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmgwpyw7r.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpmgwpyw7r.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmgwpyw7r.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmgwpyw7r.jl:26\ntest set: Error During Test at
    /tmp/tmpmgwpyw7r.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxji5frov.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpxji5frov.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpxji5frov.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxji5frov.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxji5frov.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxji5frov.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpxji5frov.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxji5frov.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxji5frov.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxji5frov.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpzk97mmlr.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpzk97mmlr.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzk97mmlr.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzk97mmlr.jl:26\ntest set: Error During Test at
    /tmp/tmpzk97mmlr.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpzk97mmlr.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzk97mmlr.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzk97mmlr.jl:26\ntest set: Error During Test at
    /tmp/tmpzk97mmlr.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpceyrmusb.jl:27\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpceyrmusb.jl:15\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpceyrmusb.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpceyrmusb.jl:26\ntest set: Error During Test at
    /tmp/tmpceyrmusb.jl:28\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpceyrmusb.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpceyrmusb.jl:28 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpceyrmusb.jl:26\ntest set: Error During Test at
    /tmp/tmpceyrmusb.jl:29\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
