language: jl
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Initialize the index of the largest\
    \ element\n    # which is not greater than the previous element\n    largest_index\
    \ = -1\n    # Initialize the index of the previous element\n    previous_index\
    \ = -1\n    # Iterate over the array\n    for i in 1:length(arr)\n        # If\
    \ the current element is less than or equal to the previous element\n        if\
    \ arr[i] <= arr[previous_index]\n            # Update the largest index\n    \
    \        largest_index = i\n        end\n        # Update the previous index\n\
    \        previous_index = i\n    end\n    # Return the largest index\n    return\
    \ largest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc40i1goo.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpc40i1goo.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [-1]\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc40i1goo.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc40i1goo.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc40i1goo.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpc40i1goo.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [-1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpc40i1goo.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc40i1goo.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc40i1goo.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpc40i1goo.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [-1]\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpc40i1goo.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc40i1goo.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc40i1goo.jl:35\ntest set:\
    \ Error Du"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    if length(arr) == 1\n        return\
    \ -1\n    end\n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n \
    \           return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ch3vjm.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpy7ch3vjm.jl:31\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7ch3vjm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7ch3vjm.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp8dzrve0c.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp8dzrve0c.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp8dzrve0c.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dzrve0c.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dzrve0c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8dzrve0c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp8dzrve0c.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dzrve0c.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n\n\
    \        if i == 1\n            continue\n        end\n        if arr[i] < arr[i-1]\n\
    \            return i-1\n        end\n    end\n    return -1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfhzfqd0i.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpfhzfqd0i.jl:32\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhzfqd0i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhzfqd0i.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] < arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgcq5ogha.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpgcq5ogha.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:26\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 1 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:27\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:28\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    if n == 1\n\
    \        return -1\n    end\n    for i in 1:n-1\n        if arr[i] >= arr[i+1]\n\
    \            return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8d0c2v6y.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp8d0c2v6y.jl:32\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8d0c2v6y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8d0c2v6y.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # TODO: Implement me!\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpangce779.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpangce779.jl:21\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpangce779.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpangce779.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpangce779.jl:23\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: -1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpangce779.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpangce779.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpangce779.jl:24\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: -1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpangce779.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpangce779.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 0
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i = length(arr):-1:2\n    \
    \    if arr[i] < arr[i-1]\n            return i-1\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659792528
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    max_index = -1\n    max_value =\
    \ 0\n    for i in 1:length(arr)\n        if arr[i] >= max_value\n            max_value\
    \ = arr[i]\n            max_index = i\n        end\n    end\n    return max_index\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4r1yftvh.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp4r1yftvh.jl:28\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4r1yftvh.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4r1yftvh.jl:27\ntest set: Test Failed at /tmp/tmp4r1yftvh.jl:29\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 4 == -1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4r1yftvh.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4r1yftvh.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4r1yftvh.jl:30\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 9 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4r1yftvh.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4r1yftvh.jl:27\ntest set: Test Failed at /tmp/tmp4r1yftvh.jl:31\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4r1yftvh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4r1yftvh.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] < arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgcq5ogha.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpgcq5ogha.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:26\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 1 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:27\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:28\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # The index of the last element\
    \ in the array.\n    last_index = length(arr) - 1\n    # The index of the last\
    \ element in the array which is not greater than\n    # or equal to the element\
    \ immediately preceding it.\n    last_index_not_greater = last_index\n    # The\
    \ index of the last element in the array which is greater than the\n    # element\
    \ immediately preceding it.\n    last_index_greater = last_index\n    # Iterate\
    \ over the array in reverse order.\n    for i in last_index:-1:1\n        # If\
    \ the current element is greater than the element immediately\n        # preceding\
    \ it then update the index of the last element in the array\n        # which is\
    \ greater than the element immediately preceding it.\n        if arr[i] > arr[i\
    \ - 1]\n            last_index_greater = i\n        # If the current element is\
    \ not greater than the element immediately\n        # preceding it then update\
    \ the index of the last element in the array\n        # which is not greater than\
    \ or equal to the element immediately\n        # preceding it.\n        else\n\
    \            last_index_not_greater = i\n        end\n    end\n    # If the index\
    \ of the last element in the array which is not greater than\n    # or equal to\
    \ the element immediately preceding it is equal to the index\n    # of the last\
    \ element in the array which is greater than the element\n    # immediately preceding\
    \ it then return -1.\n    if last_index_not_greater == last_index_greater\n  \
    \      return -1\n    # Otherwise return the index of the last element in the\
    \ array which is not\n    # greater than or equal to the element immediately preceding\
    \ it.\n    else\n        return last_index_not_greater\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9z8efqf9.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmp9z8efqf9.jl:53\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9z8efqf9.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9z8efqf9.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9z8efqf9.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp9z8efqf9.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp9z8efqf9.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9z8efqf9.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9z8efqf9.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp9z8efqf9.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9z8efqf9.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9z8efqf9.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9z8efqf9.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp9z8efqf9.jl:"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] < arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgcq5ogha.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpgcq5ogha.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:26\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 1 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:27\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:28\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 2:length(arr)\n      \
    \  if arr[i] < arr[i-1]\n            return i-1\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeckepu7l.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpeckepu7l.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeckepu7l.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpeckepu7l.jl:24\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     1      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    if length(arr) == 1\n        return\
    \ -1\n    end\n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n \
    \           return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy7ch3vjm.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpy7ch3vjm.jl:31\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7ch3vjm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7ch3vjm.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Initialize the largest index\
    \ to -1\n    largest_index = -1\n    # Iterate through the array\n    for i in\
    \ 1:length(arr)\n        # If the current element is less than or equal to the\
    \ previous element\n        if arr[i] <= arr[i-1]\n            # Update the largest\
    \ index\n            largest_index = i\n        end\n    end\n    # Return the\
    \ largest index\n    return largest_index\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv01weopu.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpv01weopu.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv01weopu.jl:18\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv01weopu.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv01weopu.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpv01weopu.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpv01weopu.jl:18\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv01weopu.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv01weopu.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpv01weopu.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv01weopu.jl:18\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv01weopu.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv01weopu.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpv01weopu.jl:"
  timestamp: 1659792530
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # initialize the largest index\
    \ to -1\n    largest_index = -1\n    # loop through the array\n    for i in 1:length(arr)\n\
    \        # if the current element is not greater than or equal to the previous\n\
    \        # element\n        if arr[i] < arr[i-1]\n            # update the largest\
    \ index\n            largest_index = i\n        end\n    end\n    # return the\
    \ largest index\n    return largest_index\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpbwtyaijp.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpbwtyaijp.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbwtyaijp.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbwtyaijp.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbwtyaijp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbwtyaijp.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpbwtyaijp.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbwtyaijp.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbwtyaijp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbwtyaijp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbwtyaijp.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbwtyaijp.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbwtyaijp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbwtyaijp.jl:"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    if length(arr) == 1\n        return\
    \ -1\n    end\n    for i in 2:length(arr)\n        if arr[i] < arr[i-1]\n    \
    \        return i-1\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkqqhjn0r.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpkqqhjn0r.jl:31\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkqqhjn0r.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkqqhjn0r.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     1      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Initialize the index to -1\n\
    \    index = -1\n    # Iterate through the array\n    for i in 1:length(arr)\n\
    \        # If the current element is not greater than or equal to the previous\n\
    \        # element, then update the index\n        if arr[i] < arr[i-1]\n    \
    \        index = i\n        end\n    end\n    # Return the index\n    return index\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa4vl779r.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpa4vl779r.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa4vl779r.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa4vl779r.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa4vl779r.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpa4vl779r.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpa4vl779r.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa4vl779r.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa4vl779r.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpa4vl779r.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa4vl779r.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa4vl779r.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa4vl779r.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpa4vl779r.jl:"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    i = length(arr) - 1\n    while\
    \ i > 0\n        if arr[i] < arr[i-1]\n            return i-1\n        end\n \
    \       i -= 1\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpesxzmi6q.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpesxzmi6q.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpesxzmi6q.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpesxzmi6q.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpesxzmi6q.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpesxzmi6q.jl:30\n  Expression: candidate([4, 8, 5, 7,\
    \ 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesxzmi6q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesxzmi6q.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    3     1      1      5\n"
  timestamp: 1659792530
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp8dzrve0c.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp8dzrve0c.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp8dzrve0c.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dzrve0c.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dzrve0c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8dzrve0c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp8dzrve0c.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dzrve0c.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Initialize the largest index\
    \ to -1\n    largest_index = -1\n    # Iterate through the array\n    for i in\
    \ 1:length(arr)\n        # If the current element is not greater than or equal\
    \ to the preceding\n        # element\n        if arr[i] < arr[i-1]\n        \
    \    # Update the largest index\n            largest_index = i\n        end\n\
    \    end\n    # Return the largest index\n    return largest_index\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqg26c054.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpqg26c054.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqg26c054.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqg26c054.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqg26c054.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqg26c054.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpqg26c054.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqg26c054.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqg26c054.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqg26c054.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqg26c054.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqg26c054.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqg26c054.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqg26c054.jl:"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n\n\
    \        if arr[i] >= arr[i-1]\n            return i-1\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgay6cowv.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpgay6cowv.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgay6cowv.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgay6cowv.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgay6cowv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgay6cowv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpgay6cowv.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgay6cowv.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgay6cowv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgay6cowv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgay6cowv.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgay6cowv.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgay6cowv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgay6cowv.jl:"
  timestamp: 1659792530
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n\n\
    \        if arr[i] < arr[i-1]\n            return i-1\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp632shboj.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp632shboj.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp632shboj.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp632shboj.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp632shboj.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp632shboj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp632shboj.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp632shboj.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp632shboj.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp632shboj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp632shboj.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp632shboj.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp632shboj.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp632shboj.jl:"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    if n == 1\n\
    \        return -1\n    end\n    for i in 1:n-1\n        if arr[i] >= arr[i+1]\n\
    \            return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8d0c2v6y.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp8d0c2v6y.jl:32\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8d0c2v6y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8d0c2v6y.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in eachindex(arr)\n     \
    \   if i > 1 && arr[i] <= arr[i-1]\n            return i-1\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkfsqbt3h.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkfsqbt3h.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkfsqbt3h.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkfsqbt3h.jl:24\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     1      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # your code here\n    return -1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_4la02uf.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp_4la02uf.jl:21\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_4la02uf.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_4la02uf.jl:20\ntest set: Test Failed at /tmp/tmp_4la02uf.jl:23\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_4la02uf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_4la02uf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_4la02uf.jl:24\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: -1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_4la02uf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_4la02uf.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n\n\
    \        if i == 1\n            continue\n        end\n        if arr[i] < arr[i-1]\n\
    \            return i-1\n        end\n    end\n    return -1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfhzfqd0i.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpfhzfqd0i.jl:32\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhzfqd0i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhzfqd0i.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    if length(arr) == 1\n        return\
    \ -1\n    end\n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuw_fxjcl.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpuw_fxjcl.jl:31\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuw_fxjcl.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuw_fxjcl.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     1      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] < arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgcq5ogha.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpgcq5ogha.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:26\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 1 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:27\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:28\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # TODO: Write your code here\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe4ko3xzc.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpe4ko3xzc.jl:21\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe4ko3xzc.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe4ko3xzc.jl:20\ntest set: Test Failed at /tmp/tmpe4ko3xzc.jl:23\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe4ko3xzc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe4ko3xzc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe4ko3xzc.jl:24\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: -1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe4ko3xzc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe4ko3xzc.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    if n == 1\n\
    \        return -1\n    end\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n\
    \            return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0vy5ib7f.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp0vy5ib7f.jl:32\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0vy5ib7f.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0vy5ib7f.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     1      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Initialize the largest index\
    \ to -1\n    largest_index = -1\n    # Iterate over the array\n    for i in 1:length(arr)\n\
    \        # If the current element is not greater than or equal to the previous\n\
    \        # element\n        if arr[i] < arr[i-1]\n            # Update the largest\
    \ index\n            largest_index = i\n        end\n    end\n    # Return the\
    \ largest index\n    return largest_index\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpduqke0ln.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpduqke0ln.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpduqke0ln.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpduqke0ln.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpduqke0ln.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpduqke0ln.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpduqke0ln.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpduqke0ln.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpduqke0ln.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpduqke0ln.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpduqke0ln.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpduqke0ln.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpduqke0ln.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpduqke0ln.jl:"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    max_index\
    \ = n\n    for i in n:-1:2\n        if arr[i] < arr[i-1]\n            max_index\
    \ = i - 1\n        end\n    end\n    return max_index\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9y5tief4.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp9y5tief4.jl:28\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n   Evaluated: 4 == -1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9y5tief4.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9y5tief4.jl:26\ntest set: Test Failed at /tmp/tmp9y5tief4.jl:30\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9y5tief4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9y5tief4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9y5tief4.jl:31\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n   Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9y5tief4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9y5tief4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Initialize the largest index\
    \ to -1\n    largest_index = -1\n    # Loop through the array\n    for i in 1:length(arr)\n\
    \        # If the current element is not greater than or equal to the previous\n\
    \        # element then update the largest index\n        if arr[i] < arr[i-1]\n\
    \            largest_index = i\n        end\n    end\n    # Return the largest\
    \ index\n    return largest_index\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3n7evynw.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp3n7evynw.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3n7evynw.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3n7evynw.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3n7evynw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3n7evynw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp3n7evynw.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3n7evynw.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3n7evynw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3n7evynw.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3n7evynw.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3n7evynw.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3n7evynw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3n7evynw.jl:"
  timestamp: 1659792530
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] < arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgcq5ogha.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpgcq5ogha.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:26\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 1 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:27\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgcq5ogha.jl:28\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgcq5ogha.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgcq5ogha.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Initialize a variable to store\
    \ the index of the largest element\n    # which is not greater than the previous\
    \ element\n    largest_index = -1\n    # Iterate over the array\n    for i in\
    \ 1:length(arr)\n        # If the current element is not greater than the previous\
    \ element\n        # and the current index is greater than the largest index\n\
    \        if arr[i] <= arr[i-1] && i > largest_index\n            # Update the\
    \ largest index\n            largest_index = i\n        end\n    end\n    # Return\
    \ the largest index\n    return largest_index\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmh0lczkp.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpmh0lczkp.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmh0lczkp.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmh0lczkp.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmh0lczkp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmh0lczkp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpmh0lczkp.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmh0lczkp.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmh0lczkp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmh0lczkp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmh0lczkp.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmh0lczkp.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmh0lczkp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmh0lczkp.jl:"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] <= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp01172ft8.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp01172ft8.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp01172ft8.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp01172ft8.jl:24\ntest set: Test Failed at /tmp/tmp01172ft8.jl:26\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 1 == -1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp01172ft8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp01172ft8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp01172ft8.jl:27\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp01172ft8.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp01172ft8.jl:24\ntest set: Test Failed at /tmp/tmp01172ft8.jl:28\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp01172ft8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp01172ft8.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] > arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfd29owyb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfd29owyb.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd29owyb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd29owyb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1i4db8j2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1i4db8j2.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i4db8j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i4db8j2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    for i in 1:n\n\
    \        if arr[i] <= arr[i-1]\n            return i-1\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2k7_74o_.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp2k7_74o_.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2k7_74o_.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2k7_74o_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2k7_74o_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2k7_74o_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp2k7_74o_.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2k7_74o_.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2k7_74o_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2k7_74o_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2k7_74o_.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2k7_74o_.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2k7_74o_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2k7_74o_.jl:"
  timestamp: 1659792530
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    max_index\
    \ = n\n    for i in n:-1:2\n        if arr[i] >= arr[i-1]\n            max_index\
    \ = i-1\n        end\n    end\n    return max_index\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjvaqct0u.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpjvaqct0u.jl:27\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjvaqct0u.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjvaqct0u.jl:26\ntest set: Test Failed at /tmp/tmpjvaqct0u.jl:28\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 1 == -1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvaqct0u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvaqct0u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjvaqct0u.jl:29\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjvaqct0u.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjvaqct0u.jl:26\ntest set: Test Failed at /tmp/tmpjvaqct0u.jl:30\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvaqct0u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvaqct0u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjvaqct0u.jl:31\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n   Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @"
  timestamp: 1659792529
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
- exit_code: 1
  program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4v3fo6yo.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp4v3fo6yo.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4v3fo6yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4v3fo6yo.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
