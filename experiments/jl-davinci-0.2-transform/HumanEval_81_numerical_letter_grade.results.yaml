language: jl
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of numerical grades and returns\
    \ a vector of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade\
    \ in grades\n        if grade == 4.0\n            push!(letter_grades, \"A+\"\
    )\n        elseif grade > 3.7\n            push!(letter_grades, \"A\")\n     \
    \   elseif grade > 3.3\n            push!(letter_grades, \"A-\")\n        elseif\
    \ grade > 3.0\n            push!(letter_grades, \"B+\")\n        elseif grade\
    \ > 2.7\n            push!(letter_grades, \"B\")\n        elseif grade > 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif grade > 2.0\n      \
    \      push!(letter_grades, \"C+\")\n        elseif grade > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif grade > 1.3\n            push!(letter_grades, \"C-\"\
    )\n        elseif grade > 1.0\n            push!(letter_grades, \"D+\")\n    \
    \    elseif grade > 0.7\n            push!(letter_grades, \"D\")\n        elseif\
    \ grade > 0.0\n            push!(letter_grades, \"D-\")\n        elseif grade\
    \ == 0.0\n            push!(letter_grades, \"E\")\n        end\n    end\n    return\
    \ letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i >= 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i >= 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i >= 3.3\n            push!(letter_grades, \"A-\")\n\
    \        elseif i >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i >= 2.7\n            push!(letter_grades, \"B\")\n        elseif i >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif i >= 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif i >= 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i >= 1.3\n            push!(letter_grades, \"C-\")\n\
    \        elseif i >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i >= 0.7\n            push!(letter_grades, \"D\")\n        elseif i >= 0.0\n\
    \            push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0t4i7xd0.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp0t4i7xd0.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Create a vector of strings of the same length as the input vector\n\
    \    letter_grades = String[]\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14w_x2g0.jl:62

    '
  stdout: "test set: Test Failed at /tmp/tmp14w_x2g0.jl:65\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14w_x2g0.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14w_x2g0.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp14w_x2g0.jl:68\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14w_x2g0.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14w_x2g0.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp14w_x2g0.jl:69\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14w_x2g0.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14w_x2g0.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp14w_x2g0.jl:70\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14w_x2g0.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14w_x2g0.jl:64\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # create a vector of strings to store the letter grades\n    letter_grades\
    \ = Vector{String}(undef, length(grades))\n    # loop through the grades vector\n\
    \    for i in 1:length(grades)\n        # if the grade is 4.0, the letter grade\
    \ is A+\n        if grades[i] == 4.0\n            letter_grades[i] = \"A+\"\n\
    \        # if the grade is greater than 3.7, the letter grade is A\n        elseif\
    \ grades[i] > 3.7\n            letter_grades[i] = \"A\"\n        # if the grade\
    \ is greater than 3.3, the letter grade is A-\n        elseif grades[i] > 3.3\n\
    \            letter_grades[i] = \"A-\"\n        # if the grade is greater than\
    \ 3.0, the letter grade is B+\n        elseif grades[i] > 3.0\n            letter_grades[i]\
    \ = \"B+\"\n        # if the grade is greater than 2.7, the letter grade is B\n\
    \        elseif grades[i] > 2.7\n            letter_grades[i] = \"B\"\n      \
    \  # if the grade is greater than 2.3, the letter grade is B-\n        elseif\
    \ grades[i] > 2.3\n            letter_grades[i] = \"B-\"\n        # if the grade\
    \ is greater than 2.0, the letter grade is C+\n        elseif grades[i] > 2.0\n\
    \            letter_grades[i] = \"C+\"\n        # if the grade is greater than\
    \ 1.7, the letter grade is C\n        elseif grades[i] > 1.7\n            letter_grades[i]\
    \ = \"C\"\n        # if the grade is greater than 1.3, the letter grade is C-\n\
    \        elseif grades[i] > 1.3\n            letter_grades[i] = \"C-\"\n     \
    \   # if the grade is greater than 1.0, the letter grade is D+\n        elseif\
    \ grades[i] > 1.0\n            letter_grades[i] = \"D+\"\n        # if the grade\
    \ is greater than 0.7, the letter grade is D\n        elseif grades[i] > 0.7\n\
    \            letter_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3m3rt5t.jl:1\nin expression starting at /tmp/tmpk3m3rt5t.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(grades_letter, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(grades_letter, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(grades_letter, \"A-\")\n        elseif grade >= 3.0\n            push!(grades_letter,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(grades_letter, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(grades_letter, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(grades_letter, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(grades_letter, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(grades_letter, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(grades_letter, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(grades_letter, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(grades_letter, \"D-\")\n        else\n            push!(grades_letter,\
    \ \"E\")\n        end\n    end\n    return grades_letter\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7l2icb1b.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp7l2icb1b.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7l2icb1b.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7l2icb1b.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp7l2icb1b.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7l2icb1b.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7l2icb1b.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp7l2icb1b.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7l2icb1b.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7l2icb1b.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp7l2icb1b.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7l2icb1b.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7l2icb1b.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Takes a vector of numerical grades and returns a vector of\
    \ letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade == 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade > 3.7\n            push!(letter_grades, \"A\")\n        elseif grade >\
    \ 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade > 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade > 2.7\n      \
    \      push!(letter_grades, \"B\")\n        elseif grade > 2.3\n            push!(letter_grades,\
    \ \"B-\")\n        elseif grade > 2.0\n            push!(letter_grades, \"C+\"\
    )\n        elseif grade > 1.7\n            push!(letter_grades, \"C\")\n     \
    \   elseif grade > 1.3\n            push!(letter_grades, \"C-\")\n        elseif\
    \ grade > 1.0\n            push!(letter_grades, \"D+\")\n        elseif grade\
    \ > 0.7\n            push!(letter_grades, \"D\")\n        elseif grade > 0.0\n\
    \            push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n     \
    \       push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        elseif grade >= 0.0\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqlp4c11d.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpqlp4c11d.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlp4c11d.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlp4c11d.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpqlp4c11d.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlp4c11d.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlp4c11d.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpqlp4c11d.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlp4c11d.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlp4c11d.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpqlp4c11d.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqlp4c11d.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqlp4c11d.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for g in grades\n        if g >= 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif g >= 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif g >= 3.3\n            push!(letter_grades, \"A-\")\n\
    \        elseif g >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ g >= 2.7\n            push!(letter_grades, \"B\")\n        elseif g >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif g >= 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif g >= 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif g >= 1.3\n            push!(letter_grades, \"C-\")\n\
    \        elseif g >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ g >= 0.7\n            push!(letter_grades, \"D\")\n        elseif g >= 0.0\n\
    \            push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptkljvw6o.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmptkljvw6o.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkljvw6o.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkljvw6o.jl:63\ntest set: Test\
    \ Failed at /tmp/tmptkljvw6o.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkljvw6o.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkljvw6o.jl:63\ntest set: Test\
    \ Failed at /tmp/tmptkljvw6o.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkljvw6o.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkljvw6o.jl:63\ntest set: Test\
    \ Failed at /tmp/tmptkljvw6o.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkljvw6o.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkljvw6o.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(letter_grades, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(letter_grades, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(letter_grades, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(letter_grades, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(letter_grades, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(letter_grades, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(letter_grades, \"C\")\n        elseif grades[i] > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(letter_grades, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(letter_grades, \"D-\")\n\
    \        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz3dqy6a9.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpz3dqy6a9.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:70\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:71\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:72\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8upbkra7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp8upbkra7.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8upbkra7.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8upbkra7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8upbkra7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8upbkra7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Vector{String}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8upbkra7.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  timestamp: 1659804621
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for g in grades\n        if g == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif g > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif g > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif g > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ g > 2.7\n            push!(letter_grades, \"B\")\n        elseif g > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif g > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif g > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif g > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif g > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ g > 0.7\n            push!(letter_grades, \"D\")\n        elseif g > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of numerical grades and returns\
    \ a vector of \n    letter grades.\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades\n        if grade >= 4.0\n            push!(letter_grades, \"\
    A+\")\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\")\n\
    \        elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n     \
    \   elseif grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ grade >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade\
    \ >= 2.3\n            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n\
    \            push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n     \
    \       push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n           \
    \ push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades,\
    \ \"D+\")\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n   \
    \     else\n            push!(letter_grades, \"E\")\n        end\n    end\n  \
    \  return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxagdt_cd.jl:65

    '
  stdout: "test set: Test Failed at /tmp/tmpxagdt_cd.jl:68\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxagdt_cd.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxagdt_cd.jl:67\ntest set: Test\
    \ Failed at /tmp/tmpxagdt_cd.jl:71\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxagdt_cd.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxagdt_cd.jl:67\ntest set: Test\
    \ Failed at /tmp/tmpxagdt_cd.jl:72\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxagdt_cd.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxagdt_cd.jl:67\ntest set: Test\
    \ Failed at /tmp/tmpxagdt_cd.jl:73\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxagdt_cd.jl:73 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxagdt_cd.jl:67\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyo1lf3w9.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpyo1lf3w9.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpyo1lf3w9.jl:70\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpyo1lf3w9.jl:71\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpyo1lf3w9.jl:72\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804619
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    #initialize empty vector\n    letter_grades = []\n    #iterate through\
    \ grades\n    for grade in grades\n        #check if grade is greater than 4.0\n\
    \        if grade > 4.0\n            push!(letter_grades, \"A+\")\n        #check\
    \ if grade is greater than 3.7\n        elseif grade > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        #check if grade is greater than 3.3\n        elseif grade >\
    \ 3.3\n            push!(letter_grades, \"A-\")\n        #check if grade is greater\
    \ than 3.0\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        #check if grade is greater than 2.7\n        elseif grade > 2.7\n \
    \           push!(letter_grades, \"B\")\n        #check if grade is greater than\
    \ 2.3\n        elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n\
    \        #check if grade is greater than 2.0\n        elseif grade > 2.0\n   \
    \         push!(letter_grades, \"C+\")\n        #check if grade is greater than\
    \ 1.7\n        elseif grade > 1.7\n            push!(letter_grades, \"C\")\n \
    \       #check if grade is greater than 1.3\n        elseif grade > 1.3\n    \
    \        push!(letter_grades, \"C-\")\n        #check if grade is greater than\
    \ 1.0\n        elseif grade > 1.0\n            push!(letter_grades, \"D+\")\n\
    \        #check if grade is greater than 0.7\n        elseif grade > 0.7\n   \
    \         push!(letter_grades, \"D\")\n        #check if grade is greater than\
    \ 0.0\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\")\n\
    \        #check if grade is greater than 0.0\n        elseif grade == 0.0\n  \
    \          push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4r75cf7q.jl:76

    '
  stdout: "test set: Test Failed at /tmp/tmp4r75cf7q.jl:79\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A\", \"B\", \"C-\", \"C\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4r75cf7q.jl:79 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4r75cf7q.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(letter_grades, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(letter_grades, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(letter_grades, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(letter_grades, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(letter_grades, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(letter_grades, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(letter_grades, \"C\")\n        elseif grades[i] > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(letter_grades, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(letter_grades, \"D-\")\n\
    \        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8upbkra7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp8upbkra7.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8upbkra7.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8upbkra7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8upbkra7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8upbkra7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Vector{String}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8upbkra7.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  timestamp: 1659804621
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes in a vector of numerical grades and returns\
    \ a vector of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade\
    \ in grades\n        if grade >= 4.0\n            push!(letter_grades, \"A+\"\
    )\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\")\n    \
    \    elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif\
    \ grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif grade\
    \ >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n     \
    \       push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n          \
    \  push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades, \"D+\"\
    )\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\")\n    \
    \    elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n        elseif\
    \ grade == 0.0\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw2clgvt0.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpw2clgvt0.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2clgvt0.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2clgvt0.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpw2clgvt0.jl:70\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2clgvt0.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2clgvt0.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpw2clgvt0.jl:71\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2clgvt0.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2clgvt0.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpw2clgvt0.jl:72\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2clgvt0.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2clgvt0.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqqkmvwn.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmprqqkmvwn.jl:36\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"D+\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqqkmvwn.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqqkmvwn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprqqkmvwn.jl:37\n  Expression: candidate([0.5]) == [\"D-\"\
    ]\n   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqqkmvwn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqqkmvwn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprqqkmvwn.jl:38\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"E\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqqkmvwn.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqqkmvwn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprqqkmvwn.jl:39\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqqkmvwn.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqqkmvwn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprqqkmvwn.jl:40\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   "
  timestamp: 1659804620
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        elseif i == 0.0\n        \
    \    push!(grades_letters, \"E\")\n        end\n    end\n    return grades_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz3dqy6a9.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpz3dqy6a9.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:70\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:71\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:72\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(letter_grades, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(letter_grades, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(letter_grades, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(letter_grades, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(letter_grades, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(letter_grades, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(letter_grades, \"C\")\n        elseif grades[i] > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(letter_grades, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(letter_grades, \"D-\")\n\
    \        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmphv5hva4f.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmphv5hva4f.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmphv5hva4f.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphv5hva4f.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphv5hva4f.jl:33\ntest set:\
    \ Error During Test at /tmp/tmphv5hva4f.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Vector{String}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmphv5hva4f.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  timestamp: 1659804621
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        elseif i == 0.0\n        \
    \    push!(grades_letters, \"E\")\n        end\n    end\n    return grades_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8upbkra7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp8upbkra7.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8upbkra7.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8upbkra7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8upbkra7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8upbkra7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Vector{String}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8upbkra7.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  timestamp: 1659804621
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        elseif i == 0.0\n        \
    \    push!(grades_letters, \"E\")\n        end\n    end\n    return grades_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes in a vector of numerical grades and returns\
    \ a vector of letter grades.\n    \"\"\"\n    letter_grades = []\n    for i in\
    \ grades\n        if i == 4.0\n            push!(letter_grades, \"A+\")\n    \
    \    elseif i > 3.7\n            push!(letter_grades, \"A\")\n        elseif i\
    \ > 3.3\n            push!(letter_grades, \"A-\")\n        elseif i > 3.0\n  \
    \          push!(letter_grades, \"B+\")\n        elseif i > 2.7\n            push!(letter_grades,\
    \ \"B\")\n        elseif i > 2.3\n            push!(letter_grades, \"B-\")\n \
    \       elseif i > 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ i > 1.7\n            push!(letter_grades, \"C\")\n        elseif i > 1.3\n \
    \           push!(letter_grades, \"C-\")\n        elseif i > 1.0\n           \
    \ push!(letter_grades, \"D+\")\n        elseif i > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif i > 0.0\n            push!(letter_grades, \"D-\")\n \
    \       elseif i == 0.0\n            push!(letter_grades, \"E\")\n        end\n\
    \    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # initialize empty vector to store letter grades\n    letter_grades =\
    \ []\n    # iterate through each grade and append the corresponding letter grade\n\
    \    for grade in grades\n        if grade >= 4.0\n            push!(letter_grades,\
    \ \"A+\")\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\"\
    )\n        elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n   \
    \     elseif grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ grade >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade\
    \ >= 2.3\n            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n\
    \            push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n     \
    \       push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n           \
    \ push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades,\
    \ \"D+\")\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n   \
    \     else\n            push!(letter_grades, \"E\")\n        end\n    end\n  \
    \  return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnnjcdzxb.jl:63

    '
  stdout: "test set: Test Failed at /tmp/tmpnnjcdzxb.jl:66\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnjcdzxb.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnjcdzxb.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpnnjcdzxb.jl:69\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnjcdzxb.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnjcdzxb.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpnnjcdzxb.jl:70\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnjcdzxb.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnjcdzxb.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpnnjcdzxb.jl:71\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnnjcdzxb.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnnjcdzxb.jl:65\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return letter_grades\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpwln4q7cj.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwln4q7cj.jl:35\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpwln4q7cj.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwln4q7cj.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwln4q7cj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwln4q7cj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  UndefVarError: letter_grades not defined\n \
    \ Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n     @\
    \ Main /tmp/tmpwln4q7cj.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwln4q7cj.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwln4q7cj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwln4q7cj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  UndefVarError: letter_grades not defined\n \
    \ Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n     @\
    \ Main /tmp/tmpwln4q7cj.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwln4q7cj.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwln4q7cj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwln4q7cj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([0.0]) == [\"E\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vect"
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Create a vector of strings to store the letter grades\n    letter_grades\
    \ = String[]\n    # Iterate through the grades\n    for g in grades\n        #\
    \ Check if the grade is greater than 4.0\n        if g > 4.0\n            # If\
    \ so, add \"A+\" to the letter_grades vector\n            push!(letter_grades,\
    \ \"A+\")\n        # Check if the grade is greater than 3.7\n        elseif g\
    \ > 3.7\n            # If so, add \"A\" to the letter_grades vector\n        \
    \    push!(letter_grades, \"A\")\n        # Check if the grade is greater than\
    \ 3.3\n        elseif g > 3.3\n            # If so, add \"A-\" to the letter_grades\
    \ vector\n            push!(letter_grades, \"A-\")\n        # Check if the grade\
    \ is greater than 3.0\n        elseif g > 3.0\n            # If so, add \"B+\"\
    \ to the letter_grades vector\n            push!(letter_grades, \"B+\")\n    \
    \    # Check if the grade is greater than 2.7\n        elseif g > 2.7\n      \
    \      # If so, add \"B\" to the letter_grades vector\n            push!(letter_grades,\
    \ \"B\")\n        # Check if the grade is greater than 2.3\n        elseif g >\
    \ 2.3\n            # If so, add \"B-\" to the letter_grades vector\n         \
    \   push!(letter_grades, \"B-\")\n        # Check if the grade is greater than\
    \ 2.0\n        elseif g > 2.0\n            # If so, add \"C+\" to the letter_grades\
    \ vector\n            push!(letter_grades, \"C+\")\n        # Check if the grade\
    \ is greater than 1.7\n        elseif g > 1.7\n            # If so, add \"C\"\
    \ to the letter_grades vector\n            push!(letter_grades, \"C\")\n     \
    \   # Check if the grade is greater than 1.3\n        elseif g > 1.3\n       \
    \     # If so, add \"C-\" to the letter_grades vector\n            push!(letter_grades,\
    \ \"C-\")\n        # Check if the grade is greater than 1.0\n        elseif g\
    \ >\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrnb65s2.jl:1\nin expression starting at /tmp/tmpgrnb65s2.jl:1\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i >= 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i >= 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i >= 3.3\n            push!(letter_grades, \"A-\")\n\
    \        elseif i >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i >= 2.7\n            push!(letter_grades, \"B\")\n        elseif i >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif i >= 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif i >= 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i >= 1.3\n            push!(letter_grades, \"C-\")\n\
    \        elseif i >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i >= 0.7\n            push!(letter_grades, \"D\")\n        elseif i >= 0.0\n\
    \            push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0t4i7xd0.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp0t4i7xd0.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyo1lf3w9.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpyo1lf3w9.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpyo1lf3w9.jl:70\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpyo1lf3w9.jl:71\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpyo1lf3w9.jl:72\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyo1lf3w9.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyo1lf3w9.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804619
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(letter_grades, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(letter_grades, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(letter_grades, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(letter_grades, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(letter_grades, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(letter_grades, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(letter_grades, \"C\")\n        elseif grades[i] > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(letter_grades, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(letter_grades, \"D-\")\n\
    \        elseif grades[i] == 0.0\n            push!(letter_grades, \"E\")\n  \
    \      end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz3dqy6a9.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpz3dqy6a9.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:70\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:71\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz3dqy6a9.jl:72\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3dqy6a9.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3dqy6a9.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Initialize a vector of strings of the same length as grades\n    letter_grades\
    \ = String[]\n    # Iterate through the grades and append the corresponding letter\
    \ grade\n    for grade in grades\n        if grade >= 4.0\n            push!(letter_grades,\
    \ \"A+\")\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\"\
    )\n        elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n   \
    \     elseif grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ grade >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade\
    \ >= 2.3\n            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n\
    \            push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n     \
    \       push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n           \
    \ push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades,\
    \ \"D+\")\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n   \
    \     else\n            push!(letter_grades, \"E\")\n        end\n    end\n  \
    \  return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpccg87_v1.jl:63

    '
  stdout: "test set: Test Failed at /tmp/tmpccg87_v1.jl:66\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccg87_v1.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg87_v1.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpccg87_v1.jl:69\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccg87_v1.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg87_v1.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpccg87_v1.jl:70\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccg87_v1.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg87_v1.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpccg87_v1.jl:71\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccg87_v1.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccg87_v1.jl:65\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Initialize empty vector\n    letter_grades = []\n    # Loop through\
    \ each grade\n    for grade in grades\n        # Check if grade is greater than\
    \ 4.0\n        if grade > 4.0\n            push!(letter_grades, \"A+\")\n    \
    \    # Check if grade is greater than 3.7\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        # Check if grade is greater than 3.3\n\
    \        elseif grade > 3.3\n            push!(letter_grades, \"A-\")\n      \
    \  # Check if grade is greater than 3.0\n        elseif grade > 3.0\n        \
    \    push!(letter_grades, \"B+\")\n        # Check if grade is greater than 2.7\n\
    \        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n       \
    \ # Check if grade is greater than 2.3\n        elseif grade > 2.3\n         \
    \   push!(letter_grades, \"B-\")\n        # Check if grade is greater than 2.0\n\
    \        elseif grade > 2.0\n            push!(letter_grades, \"C+\")\n      \
    \  # Check if grade is greater than 1.7\n        elseif grade > 1.7\n        \
    \    push!(letter_grades, \"C\")\n        # Check if grade is greater than 1.3\n\
    \        elseif grade > 1.3\n            push!(letter_grades, \"C-\")\n      \
    \  # Check if grade is greater than 1.0\n        elseif grade > 1.0\n        \
    \    push!(letter_grades, \"D+\")\n        # Check if grade is greater than 0.7\n\
    \        elseif grade > 0.7\n            push!(letter_grades, \"D\")\n       \
    \ # Check if grade is greater than 0.0\n        elseif grade > 0.0\n         \
    \   push!(letter_grades, \"D-\")\n        # Check if grade is greater than 0.0\n\
    \        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n      \
    \  end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp70zvzdik.jl:76

    '
  stdout: "test set: Test Failed at /tmp/tmp70zvzdik.jl:79\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A\", \"B\", \"C-\", \"C\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp70zvzdik.jl:79 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp70zvzdik.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i >= 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i >= 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i >= 3.3\n            push!(letter_grades, \"A-\")\n\
    \        elseif i >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i >= 2.7\n            push!(letter_grades, \"B\")\n        elseif i >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif i >= 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif i >= 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i >= 1.3\n            push!(letter_grades, \"C-\")\n\
    \        elseif i >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i >= 0.7\n            push!(letter_grades, \"D\")\n        elseif i >= 0.0\n\
    \            push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0t4i7xd0.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp0t4i7xd0.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i >= 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i >= 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i >= 3.3\n            push!(letter_grades, \"A-\")\n\
    \        elseif i >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i >= 2.7\n            push!(letter_grades, \"B\")\n        elseif i >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif i >= 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif i >= 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i >= 1.3\n            push!(letter_grades, \"C-\")\n\
    \        elseif i >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i >= 0.7\n            push!(letter_grades, \"D\")\n        elseif i >= 0.0\n\
    \            push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0t4i7xd0.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp0t4i7xd0.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0t4i7xd0.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t4i7xd0.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t4i7xd0.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # create a vector of strings to store the letter grades\n    letter_grades\
    \ = Vector{String}(undef, length(grades))\n    # iterate through the grades\n\
    \    for i in 1:length(grades)\n        # if the grade is greater than 4.0, then\
    \ it is an A+\n        if grades[i] > 4.0\n            letter_grades[i] = \"A+\"\
    \n        # if the grade is greater than 3.7, then it is an A\n        elseif\
    \ grades[i] > 3.7\n            letter_grades[i] = \"A\"\n        # if the grade\
    \ is greater than 3.3, then it is an A-\n        elseif grades[i] > 3.3\n    \
    \        letter_grades[i] = \"A-\"\n        # if the grade is greater than 3.0,\
    \ then it is an B+\n        elseif grades[i] > 3.0\n            letter_grades[i]\
    \ = \"B+\"\n        # if the grade is greater than 2.7, then it is an B\n    \
    \    elseif grades[i] > 2.7\n            letter_grades[i] = \"B\"\n        # if\
    \ the grade is greater than 2.3, then it is an B-\n        elseif grades[i] >\
    \ 2.3\n            letter_grades[i] = \"B-\"\n        # if the grade is greater\
    \ than 2.0, then it is an C+\n        elseif grades[i] > 2.0\n            letter_grades[i]\
    \ = \"C+\"\n        # if the grade is greater than 1.7, then it is an C\n    \
    \    elseif grades[i] > 1.7\n            letter_grades[i] = \"C\"\n        # if\
    \ the grade is greater than 1.3, then it is an C-\n        elseif grades[i] >\
    \ 1.3\n            letter_grades[i] = \"C-\"\n        # if the grade is greater\
    \ than 1.0, then it is an D+\n        elseif grades[i] > 1.0\n            letter_grades[i]\
    \ = \"D+\"\n        # if the grade is greater than 0.7, then it is an D\n    \
    \    elseif grades[i] > 0.7\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq9_b2e8.jl:1\nin expression starting at /tmp/tmpnq9_b2e8.jl:1\n"
  stdout: ''
  timestamp: 1659804619
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsh9uycaj.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpsh9uycaj.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh9uycaj.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh9uycaj.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpsh9uycaj.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh9uycaj.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh9uycaj.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpsh9uycaj.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh9uycaj.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh9uycaj.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpsh9uycaj.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh9uycaj.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh9uycaj.jl:63\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # TODO: Implement this function\n    return [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp11p0o7c7.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp11p0o7c7.jl:36\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"D+\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp11p0o7c7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp11p0o7c7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp11p0o7c7.jl:37\n  Expression: candidate([0.5]) == [\"D-\"\
    ]\n   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp11p0o7c7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp11p0o7c7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp11p0o7c7.jl:38\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"E\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp11p0o7c7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp11p0o7c7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp11p0o7c7.jl:39\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp11p0o7c7.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp11p0o7c7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp11p0o7c7.jl:40\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   "
  timestamp: 1659804620
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n\
    \            push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfm9uifj1.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpfm9uifj1.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9uifj1.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9uifj1.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpfm9uifj1.jl:70\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9uifj1.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9uifj1.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpfm9uifj1.jl:71\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9uifj1.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9uifj1.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpfm9uifj1.jl:72\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm9uifj1.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm9uifj1.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4    "
  timestamp: 1659804620
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpztjkfktf.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmpztjkfktf.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpztjkfktf.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpztjkfktf.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpztjkfktf.jl:63\nTest Summary:\
    \ | Pass  Fa"
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for g in grades\n        if g == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif g > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif g > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif g > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ g > 2.7\n            push!(letter_grades, \"B\")\n        elseif g > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif g > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif g > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif g > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif g > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ g > 0.7\n            push!(letter_grades, \"D\")\n        elseif g > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659804618
- exit_code: 0
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(letter_grades, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(letter_grades, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(letter_grades, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(letter_grades, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(letter_grades, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(letter_grades, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(letter_grades, \"C\")\n        elseif grades[i] > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(letter_grades, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(letter_grades, \"D-\")\n\
    \        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
