language: jl
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i+1 for i in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l + 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5bk909nx.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp5bk909nx.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmp5bk909nx.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5bk909nx.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5bk909nx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5bk909nx.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmp5bk909nx.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1659795016
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l + 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5bk909nx.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp5bk909nx.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmp5bk909nx.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5bk909nx.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5bk909nx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5bk909nx.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmp5bk909nx.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1659795016
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l.+1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    for i in 1:length(l)\n        l[i] += 1\n    end\n    return l\nend\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l.+1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i+1 for i in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
