language: jl
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: implement this function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb28v5ksz.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpb28v5ksz.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into an array of characters\n    letters =\
    \ split(test, \" \")\n    # create a dictionary to store the letters and their\
    \ counts\n    hist = Dict()\n    # loop through the letters\n    for letter in\
    \ letters\n        # if the letter is in the dictionary, increment its count\n\
    \        if letter in keys(hist)\n            hist[letter] += 1\n        # otherwise,\
    \ add it to the dictionary with a count of 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphk26c15i.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmphk26c15i.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk26c15i.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk26c15i.jl:40\ntest set: Test\
    \ Failed at /tmp/tmphk26c15i.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk26c15i.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk26c15i.jl:40\ntest set: Test\
    \ Failed at /tmp/tmphk26c15i.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk26c15i.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk26c15i.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        if\
    \ haskey(histogram, letter)\n            histogram[letter] += 1\n        else\n\
    \            histogram[letter] = 1\n        end\n    end\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpob73me56.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpob73me56.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpob73me56.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpob73me56.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpob73me56.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpob73me56.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpob73me56.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: Implement this function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps8crsbwl.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmps8crsbwl.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8crsbwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps8crsbwl.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8crsbwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps8crsbwl.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8crsbwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps8crsbwl.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in split(test)\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn9ao8k38.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpn9ao8k38.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9ao8k38.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9ao8k38.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpn9ao8k38.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9ao8k38.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9ao8k38.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Initialize a dictionary to store the results\n    hist =\
    \ Dict{String, Int64}()\n    # Loop over the letters\n    for letter in letters\n\
    \        # If the letter is already in the dictionary, increment the count\n \
    \       if haskey(hist, letter)\n            hist[letter] += 1\n        # If the\
    \ letter is not in the dictionary, add it with a count of 1\n        else\n  \
    \          hist[letter] = 1\n        end\n    end\n    # Find the maximum count\n\
    \    max_count = maximum(values(hist))\n    # Initialize a new dictionary to store\
    \ the results\n    max_hist = Dict{String, Int64}()\n    # Loop over the letters\n\
    \    for (letter, count) in hist\n        # If the count is equal to the maximum\
    \ count, add it to the new dictionary\n        if count == max_count\n       \
    \     max_hist[letter] = count\n        end\n    end\n    # Return the new dictionary\n\
    \    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkg765a42.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmpkg765a42.jl:58\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpkg765a42.jl:34\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpkg765a42.jl:58 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpkg765a42.jl:51\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test, \" \")\n    # Create an empty dictionary\n    hist = Dict{String,\
    \ Int64}()\n    # Iterate through the array of characters\n    for letter in letters\n\
    \        # If the letter is not in the dictionary, add it with a value of 1\n\
    \        if !haskey(hist, letter)\n            hist[letter] = 1\n        # If\
    \ the letter is in the dictionary, increment the value by 1\n        else\n  \
    \          hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp58k2xxl2.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp58k2xxl2.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp58k2xxl2.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp58k2xxl2.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp58k2xxl2.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp58k2xxl2.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp58k2xxl2.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp58k2xxl2.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp58k2xxl2.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp58k2xxl2.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary to store the letter and its count\n\
    \    hist = Dict{String, Int64}()\n    # Iterate over the vector of characters\n\
    \    for letter in letters\n        # If the letter is not in the dictionary,\
    \ add it with a count of 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # If the letter is already in the dictionary, increment its count\n\
    \        else\n            hist[letter] += 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfl0g10et.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpfl0g10et.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfl0g10et.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfl0g10et.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpfl0g10et.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfl0g10et.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfl0g10et.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpfl0g10et.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfl0g10et.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfl0g10et.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
- exit_code: 0
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test)\n\
    \    # Initialize a dictionary to store the letters and their counts\n    hist\
    \ = Dict{String, Int64}()\n    # Loop through the letters and count the number\
    \ of times each letter appears\n    for letter in letters\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # Initialize a dictionary to store the letters\
    \ with the most repetition\n    max_hist = Dict{String, Int64}()\n    # Initialize\
    \ a variable to store the maximum count\n    max_count = 0\n    # Loop through\
    \ the histogram and find the maximum count\n    for (key, value) in hist\n   \
    \     if value > max_count\n            max_count = value\n        end\n    end\n\
    \    # Loop through the histogram and find the letters with the maximum count\n\
    \    for (key, value) in hist\n        if value == max_count\n            max_hist[key]\
    \ = value\n        end\n    end\n    # Return the dictionary with the letters\
    \ with the maximum count\n    return max_hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in test\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp68a48qi2.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp68a48qi2.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp68a48qi2.jl:27\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp68a48qi2.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp68a48qi2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp68a48qi2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Initialize a dictionary to store the results\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the words\n    for word in words\n        # If the word is already\
    \ in the dictionary, increment the count\n        if haskey(hist, word)\n    \
    \        hist[word] += 1\n        # Otherwise, initialize the count to 1\n   \
    \     else\n            hist[word] = 1\n        end\n    end\n    # Return the\
    \ dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppwlgac27.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmppwlgac27.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwlgac27.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwlgac27.jl:40\ntest set: Test\
    \ Failed at /tmp/tmppwlgac27.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwlgac27.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwlgac27.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into an array of letters\n    letters = split(test)\n\
    \    # create a dictionary to store the letters and their counts\n    hist = Dict{String,\
    \ Int64}()\n    # iterate over the letters\n    for letter in letters\n      \
    \  # if the letter is not in the dictionary, add it with a count of 1\n      \
    \  if !haskey(hist, letter)\n            hist[letter] = 1\n        # otherwise,\
    \ increment the count\n        else\n            hist[letter] += 1\n        end\n\
    \    end\n    # return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgmoze1q1.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpgmoze1q1.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmoze1q1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmoze1q1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpgmoze1q1.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmoze1q1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmoze1q1.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Initialize a dictionary to store the letters and their counts\n\
    \    hist = Dict{String, Int64}()\n    # Split the string into a vector of characters\n\
    \    letters = split(test)\n    # Loop through the vector of characters\n    for\
    \ letter in letters\n        # If the letter is not in the dictionary, add it\
    \ with a count of 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # If the letter is in the dictionary, increment its count by 1\n\
    \        else\n            hist[letter] += 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6osvuzau.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp6osvuzau.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6osvuzau.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6osvuzau.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp6osvuzau.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6osvuzau.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6osvuzau.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the letters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it\n        if !haskey(hist, letter)\n       \
    \     hist[letter] = 1\n        # If the letter is in the dictionary, increment\
    \ the count\n        else\n            hist[letter] += 1\n        end\n    end\n\
    \    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqum62sq1.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpqum62sq1.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqum62sq1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqum62sq1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqum62sq1.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqum62sq1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqum62sq1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqum62sq1.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqum62sq1.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqum62sq1.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of letters\n    letters = split(test)\n\
    \    # Create a dictionary of the letters and their counts\n    counts = Dict{String,\
    \ Int64}()\n    for letter in letters\n        if haskey(counts, letter)\n   \
    \         counts[letter] += 1\n        else\n            counts[letter] = 1\n\
    \        end\n    end\n    # Find the maximum count\n    max_count = maximum(values(counts))\n\
    \    # Create a dictionary of the letters with the maximum count\n    max_letters\
    \ = Dict{String, Int64}()\n    for (letter, count) in counts\n        if count\
    \ == max_count\n            max_letters[letter] = count\n        end\n    end\n\
    \    return max_letters\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_wz4zm77.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp_wz4zm77.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp_wz4zm77.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp_wz4zm77.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp_wz4zm77.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799287
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the array of characters\n    for letter in letters\n     \
    \   # If the letter is not in the dictionary, add it with a value of 1\n     \
    \   if !haskey(hist, letter)\n            hist[letter] = 1\n        # If the letter\
    \ is in the dictionary, increment the value by 1\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpduvs1akd.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpduvs1akd.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduvs1akd.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduvs1akd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpduvs1akd.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduvs1akd.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduvs1akd.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: implement this function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb28v5ksz.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpb28v5ksz.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of words\n    words = split(test)\n\
    \    # create a dictionary to store the results\n    histo = Dict{String, Int64}()\n\
    \    # loop over the words\n    for word in words\n        # if the word is not\
    \ in the dictionary, add it\n        if !haskey(histo, word)\n            histo[word]\
    \ = 1\n        # if the word is already in the dictionary, increment the count\n\
    \        else\n            histo[word] += 1\n        end\n    end\n    # return\
    \ the dictionary\n    return histo\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9q6xvaqj.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp9q6xvaqj.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9q6xvaqj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9q6xvaqj.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp9q6xvaqj.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9q6xvaqj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9q6xvaqj.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Create a dictionary of the letters and their counts\n    counts = Dict(i\
    \ => count(x -> x == i, letters) for i in letters)\n    # Create a dictionary\
    \ of the letters with the maximum count\n    max_count = maximum(values(counts))\n\
    \    max_letters = Dict(i => counts[i] for i in keys(counts) if counts[i] == max_count)\n\
    \    return max_letters\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmppfxdq4f3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmppfxdq4f3.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmppfxdq4f3.jl:24\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmppfxdq4f3.jl:39 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmppfxdq4f3.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799287
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    test_vec =\
    \ split(test)\n    # Create a dictionary of the characters and their counts\n\
    \    test_dict = Dict(test_vec[i] => count(test_vec, test_vec[i]) for i in 1:length(test_vec))\n\
    \    # Create a vector of the counts\n    test_counts = values(test_dict)\n  \
    \  # Create a vector of the characters\n    test_letters = keys(test_dict)\n \
    \   # Find the maximum count\n    max_count = maximum(test_counts)\n    # Create\
    \ a vector of the characters that have the maximum count\n    max_letters = test_letters[test_counts\
    \ .== max_count]\n    # Create a dictionary of the characters with the maximum\
    \ count and their counts\n    max_dict = Dict(max_letters[i] => max_count for\
    \ i in 1:length(max_letters))\n    return max_dict\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpfr9og8ix.jl:40\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    objects of type Vector{SubString{String}} are not callable\n  Use square brackets
    [] for indexing an Array.\n  Stacktrace:\n    [1] _simple_count(pred::Vector{SubString{String}},
    itr::SubString{String}, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] #count#271\n      @
    ./reduce.jl:1201 [inlined]\n    [3] count\n      @ ./reduce.jl:1201 [inlined]\n    [4]
    #1\n      @ ./none:0 [inlined]\n    [5] iterate\n      @ ./generator.jl:47 [inlined]\n    [6]
    _all\n      @ ./reduce.jl:1156 [inlined]\n    [7] all\n      @ ./reduce.jl:1152
    [inlined]\n    [8] Dict(kv::Base.Generator{UnitRange{Int64}, var"#1#3"{Vector{SubString{String}}}})\n      @
    Base ./dict.jl:131\n    [9] histogram(test::String)\n      @ Main /tmp/tmpfr9og8ix.jl:22\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [11] macro expansion\n      @ /tmp/tmpfr9og8ix.jl:40 [inlined]\n   [12]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [13] top-level scope\n      @ /tmp/tmpfr9og8ix.jl:39\n  \n  caused
    by: MethodError: objects of type Vector{SubString{String}} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n    [1] _simple_count(pred::Vector{SubString{String}},
    itr::SubString{String}, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] #count#271\n      @
    ./reduce.jl:1201 [inlined]\n    [3] count\n      @ ./reduce.jl:1201 [inlined]\n    [4]
    #1\n      @ ./none:0 [inlined]\n    [5] iterate\n      @ ./generator.jl:47 [inlined]\n    [6]
    Dict{SubString{String}, Int64}(kv::Base.Generator{UnitRange{Int64}, var"#1#3"{Vector{SubString{String}}}})\n      @
    Base ./dict.jl:103\n    [7] dict_with_eltype\n      @ ./abstractdict.jl:541 [inlined]\n    [8]
    dict_with_eltype\n      @ ./abstractdict.jl:548 [inlined]\n    [9] Dict(kv::Base.Generator{UnitRange{Int6'
  timestamp: 1659799288
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    test_vec = split(test)\n\
    \    # Create a dictionary with the default value of 0\n    hist = Dict(x => 0\
    \ for x in test_vec)\n    # Iterate through the vector and update the dictionary\n\
    \    for x in test_vec\n        hist[x] += 1\n    end\n    # Create a dictionary\
    \ with the default value of 0\n    hist_max = Dict(x => 0 for x in test_vec)\n\
    \    # Iterate through the dictionary and update the dictionary\n    for (x, y)\
    \ in hist\n        if y > hist_max[x]\n            hist_max[x] = y\n        end\n\
    \    end\n    # Return the dictionary\n    return hist_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5bky9m07.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp5bky9m07.jl:44\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5bky9m07.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5bky9m07.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp5bky9m07.jl:47\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5bky9m07.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5bky9m07.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Create a dictionary with the letters as keys and the count as\
    \ values\n    hist = Dict()\n    for letter in test\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    \n    # Find the maximum count\n    max_count = maximum(values(hist))\n\
    \    \n    # Create a dictionary with the letters with the maximum count as keys\
    \ and the count as values\n    max_hist = Dict()\n    for (letter, count) in hist\n\
    \        if count == max_count\n            max_hist[letter] = count\n       \
    \ end\n    end\n    \n    return max_hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp5116h8pv.jl:47\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    Dict{String, Int64}(kv::Dict{Any, Any})\n     @ Base ./dict.jl:104\n   [3] convert\n     @
    ./abstractdict.jl:528 [inlined]\n   [4] histogram(test::String)\n     @ Main /tmp/tmp5116h8pv.jl:40\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5116h8pv.jl:47 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5116h8pv.jl:46\ntest set: Error
    During Test at /tmp/tmp5116h8pv.jl:48\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object
    of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    Dict{String, In'
  timestamp: 1659799288
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a list of words\n    words = split(test)\n\
    \    # Create a dictionary to store the word counts\n    word_counts = Dict{String,\
    \ Int64}()\n    # Loop over the words\n    for word in words\n        # If the\
    \ word is not in the dictionary, add it with a count of 1\n        if !haskey(word_counts,\
    \ word)\n            word_counts[word] = 1\n        # Otherwise, increment the\
    \ count\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    # Return the dictionary\n    return word_counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppks2ae4y.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmppks2ae4y.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppks2ae4y.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppks2ae4y.jl:40\ntest set: Test\
    \ Failed at /tmp/tmppks2ae4y.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppks2ae4y.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppks2ae4y.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Initialize a dictionary to store the letters and their counts\n\
    \    hist = Dict{String, Int64}()\n    # Loop through the array of characters\n\
    \    for letter in letters\n        # If the letter is already in the dictionary,\
    \ increment the count\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        # If the letter is not in the dictionary, add it with a count\
    \ of 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ # Initialize a dictionary to store the letters with the most repetition\n  \
    \  max_hist = Dict{String, Int64}()\n    # Find the maximum count\n    max_count\
    \ = maximum(values(hist))\n    # Loop through the dictionary of letters and counts\n\
    \    for (letter, count) in hist\n        # If the count is equal to the maximum\
    \ count, add the letter to the dictionary of letters with the most repetition\n\
    \        if count == max_count\n            max_hist[letter] = count\n       \
    \ end\n    end\n    # Return the dictionary of letters with the most repetition\n\
    \    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpbwr2c0n1.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmpbwr2c0n1.jl:58\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpbwr2c0n1.jl:36\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpbwr2c0n1.jl:58 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpbwr2c0n1.jl:51\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary of the characters and their counts\n\
    \    counts = Dict(i => count(x -> x == i, letters) for i in letters)\n    # Find\
    \ the maximum count\n    max_count = maximum(values(counts))\n    # Return a dictionary\
    \ of the characters with the maximum count\n    return Dict(i => counts[i] for\
    \ i in keys(counts) if counts[i] == max_count)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl7jcwev1.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpl7jcwev1.jl:39\n  Expression: candidate(\"\
    \") == Dict()\n   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7jcwev1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7jcwev1.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659799287
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in test\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp68a48qi2.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp68a48qi2.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp68a48qi2.jl:27\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp68a48qi2.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp68a48qi2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp68a48qi2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = split(test)\n    hist = Dict{String, Int64}()\n    for\
    \ letter in letters\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd17onxxh.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpd17onxxh.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd17onxxh.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    dict = Dict()\n    for letter in split(test)\n        if haskey(dict,\
    \ letter)\n            dict[letter] += 1\n        else\n            dict[letter]\
    \ = 1\n        end\n    end\n    return dict\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl24xbjls.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpl24xbjls.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl24xbjls.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl24xbjls.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl24xbjls.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl24xbjls.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl24xbjls.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: implement this function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb28v5ksz.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpb28v5ksz.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary with the letters as keys and the\
    \ count as values\n    hist = Dict{String, Int64}()\n    for letter in letters\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    # Find the maximum count\n\
    \    max_count = maximum(values(hist))\n    # Create a dictionary with the letters\
    \ that have the maximum count as keys and the count as values\n    max_hist =\
    \ Dict{String, Int64}()\n    for (letter, count) in hist\n        if count ==\
    \ max_count\n            max_hist[letter] = count\n        end\n    end\n    return\
    \ max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz37b0hfu.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpz37b0hfu.jl:52\n  Expression: candidate(\"\
    \") == Dict()\n   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz37b0hfu.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz37b0hfu.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test, \" \")\n    # Create an empty dictionary\n    d = Dict{String, Int64}()\n\
    \    # Loop through the letters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it\n        if !haskey(d, letter)\n          \
    \  d[letter] = 1\n        # If the letter is in the dictionary, increment its\
    \ value\n        else\n            d[letter] += 1\n        end\n    end\n    #\
    \ Create an empty dictionary\n    max_d = Dict{String, Int64}()\n    # Find the\
    \ maximum value in the dictionary\n    max_value = maximum(values(d))\n    # Loop\
    \ through the dictionary\n    for (k, v) in d\n        # If the value is equal\
    \ to the maximum value, add it to the new dictionary\n        if v == max_value\n\
    \            max_d[k] = v\n        end\n    end\n    # Return the new dictionary\n\
    \    return max_d\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz9a6gtfn.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmpz9a6gtfn.jl:58\n  Expression: candidate(\"\
    \") == Dict()\n   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz9a6gtfn.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz9a6gtfn.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Create a dictionary to count the occurrences of each word\n    counts =\
    \ Dict{String, Int64}()\n    # Loop over the words\n    for word in words\n  \
    \      # If the word is not in the dictionary, add it with a count of 1\n    \
    \    if !haskey(counts, word)\n            counts[word] = 1\n        # If the\
    \ word is already in the dictionary, increment the count\n        else\n     \
    \       counts[word] += 1\n        end\n    end\n    # Return the dictionary\n\
    \    return counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi9lm027p.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpi9lm027p.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9lm027p.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9lm027p.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpi9lm027p.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9lm027p.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9lm027p.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: implement this function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb28v5ksz.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpb28v5ksz.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Create a dictionary to store the letters and their counts\n    hist = Dict{String,\
    \ Int64}()\n    # Loop through the letters and add them to the dictionary\n  \
    \  for letter in letters\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ # Find the maximum count\n    max_count = maximum(values(hist))\n    # Create\
    \ a dictionary to store the letters with the maximum count\n    max_hist = Dict{String,\
    \ Int64}()\n    # Loop through the letters and add them to the dictionary if they\
    \ have the maximum count\n    for (letter, count) in hist\n        if count ==\
    \ max_count\n            max_hist[letter] = count\n        end\n    end\n    #\
    \ Return the dictionary\n    return max_hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0mptllvx.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmp0mptllvx.jl:55\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp0mptllvx.jl:32\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp0mptllvx.jl:55 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp0mptllvx.jl:48\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: implement the function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpac11w0ve.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpac11w0ve.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac11w0ve.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpac11w0ve.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpac11w0ve.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac11w0ve.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpac11w0ve.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpac11w0ve.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac11w0ve.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpac11w0ve.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpac11w0ve.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac11w0ve.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the characters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it\n        if !haskey(hist, letter)\n       \
    \     hist[letter] = 1\n        # Otherwise, increment the count\n        else\n\
    \            hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvroc71xt.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpvroc71xt.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvroc71xt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvroc71xt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvroc71xt.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvroc71xt.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvroc71xt.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: Implement me!\n    return Dict()\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2d9trvh7.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp2d9trvh7.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2d9trvh7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2d9trvh7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2d9trvh7.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2d9trvh7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2d9trvh7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2d9trvh7.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2d9trvh7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2d9trvh7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2d9trvh7.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2d9trvh7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of characters\n    test_vec =\
    \ split(test)\n    # create an empty dictionary\n    hist = Dict{String, Int64}()\n\
    \    # loop over the vector of characters\n    for i in test_vec\n        # if\
    \ the character is not a key in the dictionary, add it\n        if !haskey(hist,\
    \ i)\n            hist[i] = 1\n        # if the character is a key in the dictionary,\
    \ increment the value\n        else\n            hist[i] += 1\n        end\n \
    \   end\n    # return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzn98_io1.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpzn98_io1.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzn98_io1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzn98_io1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpzn98_io1.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzn98_io1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzn98_io1.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = split(test)\n    hist = Dict{String, Int64}()\n    for\
    \ letter in letters\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd17onxxh.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpd17onxxh.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd17onxxh.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for word in split(test)\n\
    \        if haskey(histogram, word)\n            histogram[word] += 1\n      \
    \  else\n            histogram[word] = 1\n        end\n    end\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdb_b5qtb.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpdb_b5qtb.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdb_b5qtb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdb_b5qtb.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdb_b5qtb.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdb_b5qtb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdb_b5qtb.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of characters\n    letters =\
    \ split(test)\n    # create a dictionary of the letters and their counts\n   \
    \ counts = Dict{String, Int64}()\n    for letter in letters\n        if haskey(counts,\
    \ letter)\n            counts[letter] += 1\n        else\n            counts[letter]\
    \ = 1\n        end\n    end\n    # find the maximum count\n    max_count = maximum(values(counts))\n\
    \    # create a dictionary of the letters with the maximum count\n    max_counts\
    \ = Dict{String, Int64}()\n    for (letter, count) in counts\n        if count\
    \ == max_count\n            max_counts[letter] = count\n        end\n    end\n\
    \    return max_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp3p6qbh2p.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp3p6qbh2p.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp3p6qbh2p.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp3p6qbh2p.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp3p6qbh2p.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799287
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in test\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7exjmbsk.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp7exjmbsk.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp7exjmbsk.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7exjmbsk.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7exjmbsk.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7exjmbsk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799291
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of letters\n    letters = split(test,\
    \ \" \")\n    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the letters\n    for letter in letters\n        # If the letter\
    \ is in the dictionary, increment the count\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        # If the letter is not in the dictionary,\
    \ initialize it with a count of 1\n        else\n            hist[letter] = 1\n\
    \        end\n    end\n    # Return the dictionary\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxqtshtxn.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpxqtshtxn.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqtshtxn.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqtshtxn.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxqtshtxn.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqtshtxn.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqtshtxn.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxqtshtxn.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxqtshtxn.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxqtshtxn.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpx3phitml.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpx3phitml.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpx3phitml.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx3phitml.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx3phitml.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpx3phitml.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpx3phitml.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro ex"
  timestamp: 1659799291
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Split the string into an array of strings\n    test_array = split(test)\n\
    \    # Iterate over the array\n    for i in test_array\n        # If the letter\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ i)\n            hist[i] = 1\n        # If the letter is in the dictionary, increment\
    \ the count\n        else\n            hist[i] += 1\n        end\n    end\n  \
    \  # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcorl9fgy.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpcorl9fgy.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcorl9fgy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcorl9fgy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpcorl9fgy.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcorl9fgy.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcorl9fgy.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histo = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(histo, letter)\n            histo[letter] += 1\n        else\n\
    \            histo[letter] = 1\n        end\n    end\n    return histo\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw3vrv8bm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpw3vrv8bm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3vrv8bm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3vrv8bm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpw3vrv8bm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3vrv8bm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3vrv8bm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Create a dictionary to store the letters and their counts\n\
    \    hist = Dict{String, Int64}()\n    # Loop through the letters\n    for letter\
    \ in letters\n        # If the letter is not in the dictionary, add it with a\
    \ count of 1\n        if !haskey(hist, letter)\n            hist[letter] = 1\n\
    \        # If the letter is in the dictionary, increment the count\n        else\n\
    \            hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7bvrdls.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpa7bvrdls.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7bvrdls.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7bvrdls.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpa7bvrdls.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7bvrdls.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7bvrdls.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(letters, letter)\n            letters[letter] += 1\n      \
    \  else\n            letters[letter] = 1\n        end\n    end\n    return letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxkqkl983.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpxkqkl983.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkqkl983.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkqkl983.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxkqkl983.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkqkl983.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkqkl983.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Create a dictionary to store the results\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the letters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # If the letter is already in\
    \ the dictionary, increment its count\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5lvfrtb9.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp5lvfrtb9.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lvfrtb9.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lvfrtb9.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp5lvfrtb9.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lvfrtb9.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lvfrtb9.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test)\n\
    \    # Create a dictionary with default value 0\n    hist = Dict{String, Int64}()\n\
    \    for letter in letters\n        hist[letter] = get(hist, letter, 0) + 1\n\
    \    end\n    # Find the maximum value\n    max_val = maximum(values(hist))\n\
    \    # Filter the dictionary to keep only the letters with the maximum value\n\
    \    hist = filter(x -> x[2] == max_val, hist)\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpie6w65ra.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpie6w65ra.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpie6w65ra.jl:27\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpie6w65ra.jl:43 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpie6w65ra.jl:36\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = split(test)\n    hist = Dict{String, Int64}()\n    for\
    \ letter in letters\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd17onxxh.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpd17onxxh.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd17onxxh.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test)\n\
    \    # Create a dictionary to store the letters and their counts\n    hist = Dict{String,\
    \ Int64}()\n    # Iterate through the vector of letters\n    for letter in letters\n\
    \        # If the letter is not in the dictionary, add it with a count of 1\n\
    \        if !haskey(hist, letter)\n            hist[letter] = 1\n        # If\
    \ the letter is in the dictionary, increment its count\n        else\n       \
    \     hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n \
    \   return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc4hpkb6t.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpc4hpkb6t.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc4hpkb6t.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc4hpkb6t.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpc4hpkb6t.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc4hpkb6t.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc4hpkb6t.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in test\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7exjmbsk.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp7exjmbsk.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp7exjmbsk.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7exjmbsk.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7exjmbsk.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7exjmbsk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799291
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Loop through the letters\n    for letter in letters\n        # Check if\
    \ the letter is already in the dictionary\n        if haskey(hist, letter)\n \
    \           # If it is, increment the count\n            hist[letter] += 1\n \
    \       else\n            # If it isn't, add it to the dictionary with a count\
    \ of 1\n            hist[letter] = 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp83v61hbb.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp83v61hbb.jl:43\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83v61hbb.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83v61hbb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp83v61hbb.jl:46\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83v61hbb.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83v61hbb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp83v61hbb.jl:48\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp83v61hbb.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp83v61hbb.jl:41\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histo = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(histo, letter)\n            histo[letter] += 1\n        else\n\
    \            histo[letter] = 1\n        end\n    end\n    return histo\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw3vrv8bm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpw3vrv8bm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3vrv8bm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3vrv8bm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpw3vrv8bm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3vrv8bm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3vrv8bm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Create a dictionary with the default value of 0\n    hist\
    \ = Dict{String, Int64}(default = 0)\n    # Loop over the letters and increment\
    \ the corresponding value in the dictionary\n    for letter in letters\n     \
    \   hist[letter] += 1\n    end\n    # Return the dictionary\n    return hist\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdll597qc.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpdll597qc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching Dict{String, Int64}(; default=0)\n  Closest candidates are:\n\
    \    Dict{K, V}() where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:88\
    \ got unsupported keyword argument \"default\"\n    Dict{K, V}(!Matched::Dict{K,\
    \ V}) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:92 got unsupported\
    \ keyword argument \"default\"\n    Dict{K, V}(!Matched::Pair) where {K, V} at\
    \ ~/.conda/envs/polyglot/share/julia/base/dict.jl:108 got unsupported keyword\
    \ argument \"default\"\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpdll597qc.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdll597qc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdll597qc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdll597qc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching Dict{String, Int64}(; default=0)\n  Closest candidates are:\n\
    \    Dict{K, V}() where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:88\
    \ got unsupported keyword argument \"default\"\n    Dict{K, V}(!Matched::Dict{K,\
    \ V}) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:92 got unsupported\
    \ keyword argument \"default\"\n    Dict{K, V}(!Matched::Pair) where {K, V} at\
    \ ~/.conda/envs/polyglot/share/julia/base/dict.jl:108 got unsupported keyword\
    \ argument \"default\"\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpdll597qc.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdll597qc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659799291
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in test\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7exjmbsk.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp7exjmbsk.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp7exjmbsk.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7exjmbsk.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7exjmbsk.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7exjmbsk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799291
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test)\n\
    \    # Create a dictionary of the letters\n    letters_dict = Dict{String, Int64}()\n\
    \    for letter in letters\n        if haskey(letters_dict, letter)\n        \
    \    letters_dict[letter] += 1\n        else\n            letters_dict[letter]\
    \ = 1\n        end\n    end\n    # Find the maximum value\n    max_value = maximum(values(letters_dict))\n\
    \    # Create a dictionary of the letters with the maximum value\n    max_letters_dict\
    \ = Dict{String, Int64}()\n    for (key, value) in letters_dict\n        if value\
    \ == max_value\n            max_letters_dict[key] = value\n        end\n    end\n\
    \    return max_letters_dict\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp9g9rz__p.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp9g9rz__p.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp9g9rz__p.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp9g9rz__p.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp9g9rz__p.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for word in split(test)\n        if haskey(hist,\
    \ word)\n            hist[word] += 1\n        else\n            hist[word] = 1\n\
    \        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6cghsgsa.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp6cghsgsa.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cghsgsa.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cghsgsa.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6cghsgsa.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cghsgsa.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cghsgsa.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 0
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of letters\n    letters = split(test)\n\
    \    # Initialize a dictionary to store the letter and its count\n    hist = Dict{String,\
    \ Int64}()\n    # Iterate through the letters\n    for letter in letters\n   \
    \     # If the letter is already in the dictionary, increment the count\n    \
    \    if haskey(hist, letter)\n            hist[letter] += 1\n        # Otherwise,\
    \ add the letter to the dictionary with a count of 1\n        else\n         \
    \   hist[letter] = 1\n        end\n    end\n    # Initialize a dictionary to store\
    \ the letters with the highest count\n    max_hist = Dict{String, Int64}()\n \
    \   # Iterate through the letters\n    for letter in letters\n        # If the\
    \ letter has the highest count, add it to the dictionary\n        if hist[letter]\
    \ == maximum(values(hist))\n            max_hist[letter] = hist[letter]\n    \
    \    end\n    end\n    # Return the dictionary of letters with the highest count\n\
    \    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of letters\n    letters = split(test)\n\
    \    # create a dictionary to hold the letters and their counts\n    hist = Dict{String,\
    \ Int64}()\n    # loop through the letters\n    for letter in letters\n      \
    \  # if the letter is already in the dictionary, increment the count\n       \
    \ if haskey(hist, letter)\n            hist[letter] += 1\n        # otherwise,\
    \ add the letter to the dictionary with a count of 1\n        else\n         \
    \   hist[letter] = 1\n        end\n    end\n    # return the dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeg1ijgpr.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpeg1ijgpr.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeg1ijgpr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeg1ijgpr.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpeg1ijgpr.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeg1ijgpr.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeg1ijgpr.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799290
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = split(test)\n    counts = Dict()\n    for letter in\
    \ letters\n        if haskey(counts, letter)\n            counts[letter] += 1\n\
    \        else\n            counts[letter] = 1\n        end\n    end\n    return\
    \ counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2b2jj_9b.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp2b2jj_9b.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2b2jj_9b.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2b2jj_9b.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2b2jj_9b.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2b2jj_9b.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2b2jj_9b.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: implement this function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb28v5ksz.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpb28v5ksz.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb28v5ksz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb28v5ksz.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb28v5ksz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n    # Iterate\
    \ through the vector of letters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it\n        if !haskey(hist, letter)\n       \
    \     hist[letter] = 1\n        # If the letter is in the dictionary, increment\
    \ the count\n        else\n            hist[letter] += 1\n        end\n    end\n\
    \    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqxb3l0bb.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpqxb3l0bb.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqxb3l0bb.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqxb3l0bb.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqxb3l0bb.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqxb3l0bb.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqxb3l0bb.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary with the letters as keys and 0\
    \ as values\n    hist = Dict(letters[i] => 0 for i in 1:length(letters))\n   \
    \ # Count the number of occurrences of each letter\n    for i in 1:length(letters)\n\
    \        hist[letters[i]] += 1\n    end\n    # Get the maximum number of occurrences\n\
    \    max_occurrences = maximum(values(hist))\n    # Create a dictionary with the\
    \ letters that have the maximum number of occurrences\n    # as keys and the number\
    \ of occurrences as values\n    max_hist = Dict(key => value for (key, value)\
    \ in hist if value == max_occurrences)\n    return max_hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg8q8702s.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpg8q8702s.jl:45\n  Expression: candidate(\"\
    \") == Dict()\n   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg8q8702s.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg8q8702s.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659799290
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Create a dictionary of the words\n    hist = Dict{String, Int64}()\n  \
    \  for word in words\n        if haskey(hist, word)\n            hist[word] +=\
    \ 1\n        else\n            hist[word] = 1\n        end\n    end\n    # Find\
    \ the maximum value in the dictionary\n    max_val = maximum(values(hist))\n \
    \   # Create a new dictionary with the keys corresponding to the maximum value\n\
    \    max_hist = Dict{String, Int64}()\n    for (key, value) in hist\n        if\
    \ value == max_val\n            max_hist[key] = value\n        end\n    end\n\
    \    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpk5ey_xyl.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpk5ey_xyl.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpk5ey_xyl.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpk5ey_xyl.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpk5ey_xyl.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799290
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Create a dictionary to store the letters and their counts\n\
    \    hist = Dict{String, Int64}()\n    # Loop through the array of characters\n\
    \    for letter in letters\n        # If the letter is not in the dictionary,\
    \ add it with a count of 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # If the letter is in the dictionary, increment the count by 1\n\
    \        else\n            hist[letter] += 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp90icqfck.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp90icqfck.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90icqfck.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90icqfck.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp90icqfck.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90icqfck.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90icqfck.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799290
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of words\n    words = split(test)\n\
    \    # Create a dictionary to store the results\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the words\n    for word in words\n        # If the word is\
    \ already in the dictionary, increment the count\n        if haskey(hist, word)\n\
    \            hist[word] += 1\n        # Otherwise, add it to the dictionary with\
    \ a count of 1\n        else\n            hist[word] = 1\n        end\n    end\n\
    \    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm810khyz.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpm810khyz.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm810khyz.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm810khyz.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm810khyz.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm810khyz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm810khyz.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799290
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi5_ke8gt.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpi5_ke8gt.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpi5_ke8gt.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5_ke8gt.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5_ke8gt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpi5_ke8gt.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpi5_ke8gt.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5_ke8gt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] "
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        if\
    \ haskey(histogram, letter)\n            histogram[letter] += 1\n        else\n\
    \            histogram[letter] = 1\n        end\n    end\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpob73me56.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpob73me56.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpob73me56.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpob73me56.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpob73me56.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpob73me56.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpob73me56.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Create a dictionary with the words as keys and the counts as values\n \
    \   counts = Dict{String, Int64}()\n    for word in words\n        if haskey(counts,\
    \ word)\n            counts[word] += 1\n        else\n            counts[word]\
    \ = 1\n        end\n    end\n    # Find the maximum count\n    max_count = maximum(values(counts))\n\
    \    # Create a dictionary with the maximum count as keys and the words as values\n\
    \    max_counts = Dict{Int64, String}()\n    for (word, count) in counts\n   \
    \     if haskey(max_counts, count)\n            max_counts[count] = max_counts[count]\
    \ * \" \" * word\n        else\n            max_counts[count] = word\n       \
    \ end\n    end\n    # Return the dictionary with the maximum count as keys and\
    \ the words as values\n    return max_counts\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.\nin expression starting at /tmp/tmp7vh7g9xy.jl:46\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmp7vh7g9xy.jl:49\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::String, key0::Int64)\n     @ Base ./dict.jl:373\n   [2]
    Dict{String, Int64}(kv::Dict{Int64, String})\n     @ Base ./dict.jl:104\n   [3]
    convert\n     @ ./abstractdict.jl:528 [inlined]\n   [4] histogram(test::String)\n     @
    Main /tmp/tmp7vh7g9xy.jl:42\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7vh7g9xy.jl:49 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7vh7g9xy.jl:48\ntest set: Error
    During Test at /tmp/tmp7vh7g9xy.jl:50\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object
    of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::String, key0::Int64)\n     @ Base ./dict.jl:373\n   [2]
    Dict'
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_hc16sq7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_hc16sq7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_hc16sq7.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_hc16sq7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_hc16sq7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_hc16sq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799294
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    test_vec = split(test)\n\
    \    # Create a dictionary of the letters and their count\n    hist = Dict(test_vec[i]\
    \ => count(test_vec, test_vec[i]) for i in 1:length(test_vec))\n    # Create a\
    \ vector of the counts\n    counts = collect(values(hist))\n    # Create a vector\
    \ of the letters\n    letters = collect(keys(hist))\n    # Create a vector of\
    \ the letters with the highest count\n    max_letters = letters[counts .== maximum(counts)]\n\
    \    # Create a dictionary of the letters with the highest count and their count\n\
    \    max_hist = Dict(max_letters[i] => maximum(counts) for i in 1:length(max_letters))\n\
    \    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpl17dovnc.jl:38\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    objects of type Vector{SubString{String}} are not callable\n  Use square brackets
    [] for indexing an Array.\n  Stacktrace:\n    [1] _simple_count(pred::Vector{SubString{String}},
    itr::SubString{String}, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] #count#271\n      @
    ./reduce.jl:1201 [inlined]\n    [3] count\n      @ ./reduce.jl:1201 [inlined]\n    [4]
    #1\n      @ ./none:0 [inlined]\n    [5] iterate\n      @ ./generator.jl:47 [inlined]\n    [6]
    _all\n      @ ./reduce.jl:1156 [inlined]\n    [7] all\n      @ ./reduce.jl:1152
    [inlined]\n    [8] Dict(kv::Base.Generator{UnitRange{Int64}, var"#1#3"{Vector{SubString{String}}}})\n      @
    Base ./dict.jl:131\n    [9] histogram(test::String)\n      @ Main /tmp/tmpl17dovnc.jl:22\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [11] macro expansion\n      @ /tmp/tmpl17dovnc.jl:38 [inlined]\n   [12]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [13] top-level scope\n      @ /tmp/tmpl17dovnc.jl:37\n  \n  caused
    by: MethodError: objects of type Vector{SubString{String}} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n    [1] _simple_count(pred::Vector{SubString{String}},
    itr::SubString{String}, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] #count#271\n      @
    ./reduce.jl:1201 [inlined]\n    [3] count\n      @ ./reduce.jl:1201 [inlined]\n    [4]
    #1\n      @ ./none:0 [inlined]\n    [5] iterate\n      @ ./generator.jl:47 [inlined]\n    [6]
    Dict{SubString{String}, Int64}(kv::Base.Generator{UnitRange{Int64}, var"#1#3"{Vector{SubString{String}}}})\n      @
    Base ./dict.jl:103\n    [7] dict_with_eltype\n      @ ./abstractdict.jl:541 [inlined]\n    [8]
    dict_with_eltype\n      @ ./abstractdict.jl:548 [inlined]\n    [9] Dict(kv::Base.Generator{UnitRange{Int6'
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test,\
    \ \" \")\n    # Create a dictionary to store the letters and their counts\n  \
    \  hist = Dict{String, Int64}()\n    # Iterate through the vector of strings\n\
    \    for letter in letters\n        # If the letter is already in the dictionary,\
    \ increment the count\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        # If the letter is not in the dictionary, add it with a count\
    \ of 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1b71rqnc.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp1b71rqnc.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1b71rqnc.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1b71rqnc.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1b71rqnc.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1b71rqnc.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1b71rqnc.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1b71rqnc.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1b71rqnc.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1b71rqnc.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Initialize a dictionary\n    hist = Dict()\n    # Iterate\
    \ over the array of characters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # If the letter is in the dictionary,\
    \ increment the count\n        else\n            hist[letter] += 1\n        end\n\
    \    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7soni6wf.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp7soni6wf.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7soni6wf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7soni6wf.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7soni6wf.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7soni6wf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7soni6wf.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Create a dictionary of the letters and their counts\n   \
    \ counts = Dict{String, Int64}()\n    for letter in letters\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    end\n    # Find the maximum count\n    max_count\
    \ = maximum(values(counts))\n    # Create a dictionary of the letters with the\
    \ maximum count\n    max_letters = Dict{String, Int64}()\n    for (letter, count)\
    \ in counts\n        if count == max_count\n            max_letters[letter] =\
    \ count\n        end\n    end\n    return max_letters\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmph4k6tylr.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmph4k6tylr.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmph4k6tylr.jl:27\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmph4k6tylr.jl:48 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmph4k6tylr.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split string into a vector of characters\n    letters = split(test)\n\
    \    # create a dictionary with default value 0\n    hist = Dict(k => 0 for k\
    \ in letters)\n    # iterate over the vector of characters\n    for letter in\
    \ letters\n        # increment the value of the dictionary for the current letter\n\
    \        hist[letter] += 1\n    end\n    # return the dictionary\n    return hist\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplgnv3ds7.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmplgnv3ds7.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplgnv3ds7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplgnv3ds7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplgnv3ds7.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplgnv3ds7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplgnv3ds7.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_hc16sq7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_hc16sq7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_hc16sq7.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_hc16sq7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_hc16sq7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_hc16sq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary of the letters and their counts\n\
    \    hist = Dict(i => count(x -> x == i, letters) for i in letters)\n    # Create\
    \ a vector of the counts\n    counts = collect(values(hist))\n    # Find the maximum\
    \ count\n    max_count = maximum(counts)\n    # Create a dictionary of the letters\
    \ with the maximum count\n    max_hist = Dict(i => hist[i] for i in keys(hist)\
    \ if hist[i] == max_count)\n    return max_hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1yet8jzt.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp1yet8jzt.jl:42\n  Expression: candidate(\"\
    \") == Dict()\n   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yet8jzt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yet8jzt.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the letters\n    for letter in letters\n        # If the letter\
    \ is already in the dictionary, increment the count\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        # Otherwise, add it to the dictionary\
    \ with a count of 1\n        else\n            hist[letter] = 1\n        end\n\
    \    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5wv3tur1.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp5wv3tur1.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5wv3tur1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5wv3tur1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp5wv3tur1.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5wv3tur1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5wv3tur1.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_hc16sq7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_hc16sq7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_hc16sq7.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_hc16sq7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_hc16sq7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_hc16sq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of letters\n    letters = split(test)\n\
    \    # create a dictionary with the letter as the key and the count as the value\n\
    \    hist = Dict{String, Int64}()\n    for letter in letters\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # find the maximum value in the dictionary\n\
    \    max_value = maximum(values(hist))\n    # create a new dictionary with the\
    \ letters that have the maximum value\n    max_hist = Dict{String, Int64}()\n\
    \    for (key, value) in hist\n        if value == max_value\n            max_hist[key]\
    \ = value\n        end\n    end\n    return max_hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpjiyz155l.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpjiyz155l.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpjiyz155l.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpjiyz155l.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpjiyz155l.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: Implement this function\n    return Dict()\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps8crsbwl.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmps8crsbwl.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8crsbwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps8crsbwl.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8crsbwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps8crsbwl.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8crsbwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps8crsbwl.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8crsbwl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Initialize a dictionary\n    histo = Dict{String, Int64}()\n\
    \    # Split the string into a vector of strings\n    test_vec = split(test)\n\
    \    # Iterate through the vector of strings\n    for i in test_vec\n        #\
    \ If the letter is not in the dictionary, add it\n        if !haskey(histo, i)\n\
    \            histo[i] = 1\n        # If the letter is in the dictionary, increment\
    \ the count\n        else\n            histo[i] += 1\n        end\n    end\n \
    \   # Return the dictionary\n    return histo\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpibn03oyt.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpibn03oyt.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibn03oyt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibn03oyt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpibn03oyt.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibn03oyt.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibn03oyt.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_hc16sq7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_hc16sq7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_hc16sq7.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_hc16sq7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_hc16sq7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_hc16sq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary to store the results\n    histo\
    \ = Dict{String, Int64}()\n    # Iterate over the vector of characters\n    for\
    \ letter in letters\n        # If the letter is already in the dictionary, increment\
    \ the count\n        if haskey(histo, letter)\n            histo[letter] += 1\n\
    \        # If the letter is not in the dictionary, add it with a count of 1\n\
    \        else\n            histo[letter] = 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return histo\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkz_fkp5q.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpkz_fkp5q.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz_fkp5q.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz_fkp5q.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpkz_fkp5q.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz_fkp5q.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz_fkp5q.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpkz_fkp5q.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkz_fkp5q.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkz_fkp5q.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Create a dictionary of the letters and their counts\n\
    \    counts = Dict(i => count(x -> x == i, letters) for i in letters)\n    # Find\
    \ the maximum count\n    max_count = maximum(values(counts))\n    # Create a dictionary\
    \ of the letters with the maximum count\n    max_letters = Dict(i => j for (i,\
    \ j) in counts if j == max_count)\n    return max_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplw69qmw9.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmplw69qmw9.jl:40\n  Expression: candidate(\"\
    \") == Dict()\n   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw69qmw9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw69qmw9.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Create a dictionary with the letter as the key and the count as the value\n\
    \    hist = Dict()\n    for letter in letters\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    # Find the maximum value in the dictionary\n    max_value\
    \ = maximum(values(hist))\n    # Create a new dictionary with the letters that\
    \ have the maximum value\n    max_hist = Dict()\n    for (key, value) in hist\n\
    \        if value == max_value\n            max_hist[key] = value\n        end\n\
    \    end\n    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpf1qhel49.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpf1qhel49.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Any})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Any})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpf1qhel49.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpf1qhel49.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpf1qhel49.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test, \" \")\n    # Initialize a dictionary to store the letters and their\
    \ counts\n    hist = Dict{String, Int64}()\n    # Loop through the letters\n \
    \   for letter in letters\n        # If the letter is not in the dictionary, add\
    \ it with a count of 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # Otherwise, increment the count\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjjmmpztd.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpjjmmpztd.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjmmpztd.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjmmpztd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpjjmmpztd.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjmmpztd.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjmmpztd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpjjmmpztd.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjjmmpztd.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjjmmpztd.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Create a dictionary to store the letters and their counts\n\
    \    hist = Dict{String, Int64}()\n    # Split the string into an array of letters\n\
    \    letters = split(test)\n    # Loop through the array of letters\n    for letter\
    \ in letters\n        # If the letter is not in the dictionary, add it to the\
    \ dictionary\n        if !haskey(hist, letter)\n            hist[letter] = 1\n\
    \        # If the letter is in the dictionary, increment the count\n        else\n\
    \            hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkqx3pa1c.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpkqx3pa1c.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqx3pa1c.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqx3pa1c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpkqx3pa1c.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqx3pa1c.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqx3pa1c.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799292
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the array of characters\n    for letter in letters\n     \
    \   # If the letter is not in the dictionary, add it with a value of 1\n     \
    \   if !haskey(hist, letter)\n            hist[letter] = 1\n        # If the letter\
    \ is in the dictionary, increment the value by 1\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfeo0h48c.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpfeo0h48c.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfeo0h48c.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfeo0h48c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpfeo0h48c.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfeo0h48c.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfeo0h48c.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: implement this function\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwv0xd361.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpwv0xd361.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpwv0xd361.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwv0xd361.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwv0xd361.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpwv0xd361.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpwv0xd361.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwv0xd361.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] "
  timestamp: 1659799295
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO: Your code here\n    return Dict()\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc19bjqzt.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpc19bjqzt.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc19bjqzt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc19bjqzt.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc19bjqzt.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc19bjqzt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc19bjqzt.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc19bjqzt.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc19bjqzt.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc19bjqzt.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc19bjqzt.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc19bjqzt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test)\n\
    \    # Create a dictionary with the letters as keys and the number of occurrences\
    \ as values\n    counts = Dict{String, Int64}()\n    for letter in letters\n \
    \       if haskey(counts, letter)\n            counts[letter] += 1\n        else\n\
    \            counts[letter] = 1\n        end\n    end\n    # Find the maximum\
    \ number of occurrences\n    max_count = maximum(values(counts))\n    # Create\
    \ a dictionary with the letters that have the maximum number of occurrences\n\
    \    max_letters = Dict{String, Int64}()\n    for (letter, count) in counts\n\
    \        if count == max_count\n            max_letters[letter] = count\n    \
    \    end\n    end\n    # Return the dictionary\n    return max_letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpogrmy4lt.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpogrmy4lt.jl:53\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpogrmy4lt.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpogrmy4lt.jl:53 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpogrmy4lt.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test,\
    \ \" \")\n    # Initialize an empty dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the vector of letters\n    for letter in letters\n        # If\
    \ the letter is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # If the letter is already in\
    \ the dictionary, increment the count\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwn0u8xt1.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpwn0u8xt1.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwn0u8xt1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwn0u8xt1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpwn0u8xt1.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwn0u8xt1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwn0u8xt1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpwn0u8xt1.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwn0u8xt1.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwn0u8xt1.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Create a dictionary to store the letters and their counts\n\
    \    histogram = Dict{String, Int64}()\n    # Split the string into a vector of\
    \ letters\n    letters = split(test)\n    # Iterate through the vector of letters\n\
    \    for letter in letters\n        # If the letter is already in the dictionary,\
    \ increment its count\n        if haskey(histogram, letter)\n            histogram[letter]\
    \ += 1\n        # Otherwise, add the letter to the dictionary with a count of\
    \ 1\n        else\n            histogram[letter] = 1\n        end\n    end\n \
    \   # Find the maximum count\n    max_count = maximum(values(histogram))\n   \
    \ # Create a dictionary to store the letters with the maximum count\n    max_letters\
    \ = Dict{String, Int64}()\n    # Iterate through the dictionary of letters and\
    \ counts\n    for (letter, count) in histogram\n        # If the count is equal\
    \ to the maximum count, add the letter to the dictionary\n        if count ==\
    \ max_count\n            max_letters[letter] = count\n        end\n    end\n \
    \   # Return the dictionary of letters with the maximum count\n    return max_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpa_p3l8zs.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmpa_p3l8zs.jl:58\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpa_p3l8zs.jl:34\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpa_p3l8zs.jl:58 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpa_p3l8zs.jl:51\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Split the string into an array of letters\n    letters = split(test)\n\
    \    # Iterate over the array of letters\n    for letter in letters\n        #\
    \ If the letter is already in the dictionary, increment the count\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        # Otherwise, add\
    \ the letter to the dictionary with a count of 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmcm3ra5v.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpmcm3ra5v.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmcm3ra5v.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmcm3ra5v.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpmcm3ra5v.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmcm3ra5v.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmcm3ra5v.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799295
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a list of letters\n    letters = split(test)\n\
    \    # Create a dictionary to store the letter and the count\n    hist = Dict{String,\
    \ Int64}()\n    # Loop through the list of letters\n    for letter in letters\n\
    \        # If the letter is not in the dictionary, add it with a count of 1\n\
    \        if !haskey(hist, letter)\n            hist[letter] = 1\n        # If\
    \ the letter is in the dictionary, increment the count\n        else\n       \
    \     hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n \
    \   return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpog3jipfr.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpog3jipfr.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpog3jipfr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpog3jipfr.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpog3jipfr.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpog3jipfr.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpog3jipfr.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799295
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_hc16sq7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_hc16sq7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_hc16sq7.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_hc16sq7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_hc16sq7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_hc16sq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    test_vec =\
    \ split(test)\n    # Create a dictionary with the characters as keys and the values\
    \ as 0\n    hist = Dict(test_vec[i] => 0 for i in 1:length(test_vec))\n    # Iterate\
    \ through the vector and increment the corresponding value in the dictionary\n\
    \    for i in 1:length(test_vec)\n        hist[test_vec[i]] += 1\n    end\n  \
    \  # Create a dictionary with the characters as keys and the values as the maximum\
    \ value\n    max_hist = Dict(test_vec[i] => maximum(values(hist)) for i in 1:length(test_vec))\n\
    \    # Create a dictionary with the characters as keys and the values as the minimum\
    \ value\n    min_hist = Dict(test_vec[i] => minimum(values(hist)) for i in 1:length(test_vec))\n\
    \    # Create a dictionary with the characters as keys and the values as the minimum\
    \ value\n    min_hist = Dict(test_vec[i] => minimum(values(hist)) for i in 1:length(test_vec))\n\
    \    # Create a dictionary with the characters as keys and the values as the minimum\
    \ value\n    min_hist = Dict(test_vec[i] => minimum(values(hist)) for i in 1:length(test_vec))\n\
    \    # Create a dictionary with the characters as keys and the values as the minimum\
    \ value\n    min_hist = Dict(test_vec[i] => minimum(values(hist)) for i in 1:length(test_vec))\n\
    \    # Create a dictionary with the characters as keys and the values as the minimum\
    \ value\n    min_hist = Dict(test_vec[i] => minimum(values(hist)) for i in 1:length(test_vec))\n\
    \    # Create a dictionary with the characters as keys and the values as the minimum\
    \ value\n    min_hist = Dict(test_vec[i] => minimum(values(hist)) for i in 1:length(test_vec))\n\
    \    # Create a dictionary with the characters as keys and the values as the minimum\
    \ value\n    min_hist = Dict(test_vec[i] => minimum(values(hist)) for i in 1:length(test\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptm5d6w51.jl:43\nin expression starting at\
    \ /tmp/tmptm5d6w51.jl:43\n"
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test,\
    \ \" \")\n    # Create a dictionary\n    hist = Dict{String, Int64}()\n    # Loop\
    \ through the vector of strings\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it with a value of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # If the letter is in the dictionary,\
    \ increment the value by 1\n        else\n            hist[letter] += 1\n    \
    \    end\n    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_zi8giy8.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp_zi8giy8.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zi8giy8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zi8giy8.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp_zi8giy8.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zi8giy8.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zi8giy8.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp_zi8giy8.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_zi8giy8.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_zi8giy8.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3nx2vs3p.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp3nx2vs3p.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nx2vs3p.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nx2vs3p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3nx2vs3p.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nx2vs3p.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nx2vs3p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3nx2vs3p.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nx2vs3p.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nx2vs3p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3nx2vs3p.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nx2vs3p.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  timestamp: 1659799295
- exit_code: 0
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split string into array of characters\n    letters = split(test)\n\
    \    # Create dictionary of characters with default value of 0\n    hist = Dict(letters[i]\
    \ => 0 for i in 1:length(letters))\n    # Iterate through array of characters\
    \ and increment dictionary value\n    for i in 1:length(letters)\n        hist[letters[i]]\
    \ += 1\n    end\n    # Create dictionary of characters with max value\n    max_hist\
    \ = Dict(k => v for (k, v) in hist if v == maximum(values(hist)))\n    return\
    \ max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split string into array of characters\n    letters = split(test)\n\
    \    # create dictionary\n    hist = Dict{String, Int64}()\n    # loop through\
    \ letters\n    for letter in letters\n        # if letter is not in dictionary,\
    \ add it\n        if !haskey(hist, letter)\n            hist[letter] = 1\n   \
    \     # if letter is in dictionary, increment count\n        else\n          \
    \  hist[letter] += 1\n        end\n    end\n    # return dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1fk_5joa.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp1fk_5joa.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fk_5joa.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fk_5joa.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1fk_5joa.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fk_5joa.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fk_5joa.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799295
- exit_code: 0
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    test_split\
    \ = split(test)\n    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Initialize a variable to store the maximum count\n    max_count = 0\n \
    \   # Loop over the characters\n    for i in test_split\n        # If the character\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ i)\n            hist[i] = 1\n        # If the character is in the dictionary,\
    \ increment the count by 1\n        else\n            hist[i] += 1\n        end\n\
    \        # If the count is greater than the maximum count, update the maximum\
    \ count\n        if hist[i] > max_count\n            max_count = hist[i]\n   \
    \     end\n    end\n    # Initialize a dictionary to store the characters with\
    \ the maximum count\n    max_hist = Dict{String, Int64}()\n    # Loop over the\
    \ characters\n    for i in test_split\n        # If the count is equal to the\
    \ maximum count, add the character to the dictionary\n        if hist[i] == max_count\n\
    \            max_hist[i] = max_count\n        end\n    end\n    # Return the dictionary\n\
    \    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659799293
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Create a dictionary of the letters and their counts\n    counts = Dict()\n\
    \    for letter in letters\n        if haskey(counts, letter)\n            counts[letter]\
    \ += 1\n        else\n            counts[letter] = 1\n        end\n    end\n \
    \   # Find the maximum count\n    max_count = maximum(values(counts))\n    # Create\
    \ a dictionary of the letters with the maximum count\n    max_letters = Dict()\n\
    \    for (letter, count) in counts\n        if count == max_count\n          \
    \  max_letters[letter] = count\n        end\n    end\n    return max_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpcqoy981i.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpcqoy981i.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Any})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Any})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpcqoy981i.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpcqoy981i.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpcqoy981i.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Initialize the dictionary\n    hist = Dict()\n    # Loop over the letters\n\
    \    for letter in letters\n        # If the letter is already in the dictionary,\
    \ increment the count\n        if letter in keys(hist)\n            hist[letter]\
    \ += 1\n        # If the letter is not in the dictionary, add it with a count\
    \ of 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4iu37n0z.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp4iu37n0z.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4iu37n0z.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4iu37n0z.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp4iu37n0z.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4iu37n0z.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4iu37n0z.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of characters\n    letters =\
    \ split(test)\n    # create a dictionary with the letters as keys and the number\
    \ of occurrences as values\n    hist = Dict{String, Int64}()\n    for letter in\
    \ letters\n        if haskey(hist, letter)\n            hist[letter] += 1\n  \
    \      else\n            hist[letter] = 1\n        end\n    end\n    # find the\
    \ maximum number of occurrences\n    max_occurrences = maximum(values(hist))\n\
    \    # create a dictionary with the letters that have the maximum number of occurrences\
    \ as keys\n    # and the number of occurrences as values\n    max_hist = Dict{String,\
    \ Int64}()\n    for (letter, occurrences) in hist\n        if occurrences == max_occurrences\n\
    \            max_hist[letter] = occurrences\n        end\n    end\n    return\
    \ max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpf2fpmfam.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpf2fpmfam.jl:53\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpf2fpmfam.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpf2fpmfam.jl:53 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpf2fpmfam.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(letters, letter)\n            letters[letter] += 1\n      \
    \  else\n            letters[letter] = 1\n        end\n    end\n    return letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxkqkl983.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpxkqkl983.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkqkl983.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkqkl983.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxkqkl983.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkqkl983.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkqkl983.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799289
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test, \" \")\n    # Initialize the dictionary\n    hist = Dict{String,\
    \ Int64}()\n    # Loop over the characters\n    for letter in letters\n      \
    \  # If the letter is not in the dictionary, add it\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # Otherwise, increment the count\n\
    \        else\n            hist[letter] += 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpen92jggl.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpen92jggl.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpen92jggl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpen92jggl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpen92jggl.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpen92jggl.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpen92jggl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpen92jggl.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpen92jggl.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpen92jggl.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of single characters\n    letters\
    \ = split(test)\n    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the letters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # If the letter is in the dictionary,\
    \ increment the count\n        else\n            hist[letter] += 1\n        end\n\
    \    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppp4vfqpf.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmppp4vfqpf.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppp4vfqpf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppp4vfqpf.jl:40\ntest set: Test\
    \ Failed at /tmp/tmppp4vfqpf.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppp4vfqpf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppp4vfqpf.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = split(test)\n    hist = Dict{String, Int64}()\n    for\
    \ letter in letters\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd17onxxh.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpd17onxxh.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd17onxxh.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    result = Dict()\n    for letter in split(test)\n        if haskey(result,\
    \ letter)\n            result[letter] += 1\n        else\n            result[letter]\
    \ = 1\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdcbrkstk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpdcbrkstk.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdcbrkstk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcbrkstk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdcbrkstk.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdcbrkstk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcbrkstk.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Create a dictionary of the letters and their counts\n    counts = Dict(i\
    \ => count(x -> x == i, letters) for i in letters)\n    # Find the maximum count\n\
    \    max_count = maximum(values(counts))\n    # Return a dictionary of the letters\
    \ with the maximum count\n    return Dict(i => counts[i] for i in keys(counts)\
    \ if counts[i] == max_count)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpca5120ha.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpca5120ha.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpca5120ha.jl:24\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpca5120ha.jl:39 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpca5120ha.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    test_list = split(test)\n    histogram = Dict{String, Int64}()\n\
    \    for i in test_list\n        if haskey(histogram, i)\n            histogram[i]\
    \ += 1\n        else\n            histogram[i] = 1\n        end\n    end\n   \
    \ return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmvc9cr9o.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpmvc9cr9o.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvc9cr9o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvc9cr9o.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpmvc9cr9o.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvc9cr9o.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvc9cr9o.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Create a dictionary to store the letters and their counts\n\
    \    hist = Dict()\n    # Split the string into an array of letters\n    letters\
    \ = split(test)\n    # Loop through the letters\n    for letter in letters\n \
    \       # If the letter is already in the dictionary, increment the count\n  \
    \      if haskey(hist, letter)\n            hist[letter] += 1\n        # Otherwise,\
    \ add the letter to the dictionary with a count of 1\n        else\n         \
    \   hist[letter] = 1\n        end\n    end\n    # Return the dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb703m0wh.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpb703m0wh.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb703m0wh.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb703m0wh.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpb703m0wh.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb703m0wh.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb703m0wh.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799297
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    test_array\
    \ = split(test)\n    # Create a dictionary to store the result\n    result = Dict{String,\
    \ Int64}()\n    # Iterate through the array of characters\n    for i in test_array\n\
    \        # If the character is not in the dictionary, add it\n        if !haskey(result,\
    \ i)\n            result[i] = 1\n        # If the character is in the dictionary,\
    \ increment the count\n        else\n            result[i] += 1\n        end\n\
    \    end\n    # Return the dictionary\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1fgtcpu8.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp1fgtcpu8.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fgtcpu8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fgtcpu8.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp1fgtcpu8.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fgtcpu8.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fgtcpu8.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Initialize an empty dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the letters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # If the letter is in the dictionary,\
    \ increment its count\n        else\n            hist[letter] += 1\n        end\n\
    \    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplx_19zrd.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmplx_19zrd.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx_19zrd.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx_19zrd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmplx_19zrd.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx_19zrd.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx_19zrd.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799296
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Create a dictionary to store the letters and their counts\n\
    \    hist = Dict()\n    # Iterate over the letters\n    for letter in letters\n\
    \        # If the letter is already in the dictionary, increment the count\n \
    \       if haskey(hist, letter)\n            hist[letter] += 1\n        # Otherwise,\
    \ add the letter to the dictionary with a count of 1\n        else\n         \
    \   hist[letter] = 1\n        end\n    end\n    # Return the dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg_hgj0sh.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpg_hgj0sh.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_hgj0sh.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_hgj0sh.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpg_hgj0sh.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_hgj0sh.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_hgj0sh.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799297
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test)\n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Iterate over the array of characters\n    for letter in letters\n     \
    \   # If the letter is not in the dictionary, add it with a count of 1\n     \
    \   if !haskey(hist, letter)\n            hist[letter] = 1\n        # If the letter\
    \ is in the dictionary, increment the count by 1\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp62hz28mp.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp62hz28mp.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp62hz28mp.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp62hz28mp.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp62hz28mp.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp62hz28mp.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp62hz28mp.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799297
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of letters\n    letters = split(test,\
    \ \" \")\n    # create a dictionary to store the letter and its count\n    hist\
    \ = Dict{String, Int64}()\n    # loop through the vector of letters\n    for letter\
    \ in letters\n        # if the letter is not in the dictionary, add it\n     \
    \   if !haskey(hist, letter)\n            hist[letter] = 1\n        # if the letter\
    \ is in the dictionary, increment the count\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgsfsp3li.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpgsfsp3li.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsfsp3li.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsfsp3li.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpgsfsp3li.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsfsp3li.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsfsp3li.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpgsfsp3li.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgsfsp3li.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgsfsp3li.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799297
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Create a dictionary to store the results\n    results = Dict{String,\
    \ Int64}()\n    # Iterate through the vector of characters\n    for letter in\
    \ letters\n        # If the letter is already in the dictionary, increment the\
    \ count\n        if haskey(results, letter)\n            results[letter] += 1\n\
    \        # If the letter is not in the dictionary, add it with a count of 1\n\
    \        else\n            results[letter] = 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqc4w7g6m.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpqc4w7g6m.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqc4w7g6m.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqc4w7g6m.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqc4w7g6m.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqc4w7g6m.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqc4w7g6m.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799297
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = split(test)\n    hist = Dict{String, Int64}()\n    for\
    \ letter in letters\n        if haskey(hist, letter)\n            hist[letter]\
    \ += 1\n        else\n            hist[letter] = 1\n        end\n    end\n   \
    \ return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd17onxxh.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpd17onxxh.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd17onxxh.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd17onxxh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd17onxxh.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799286
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Create a dictionary to store the results\n    hist = Dict{String,\
    \ Int64}()\n    # Iterate over the letters\n    for letter in letters\n      \
    \  # If the letter is not in the dictionary, add it with a count of 1\n      \
    \  if !haskey(hist, letter)\n            hist[letter] = 1\n        # If the letter\
    \ is already in the dictionary, increment the count\n        else\n          \
    \  hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6mk4eupc.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp6mk4eupc.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6mk4eupc.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6mk4eupc.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp6mk4eupc.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6mk4eupc.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6mk4eupc.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799297
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Create a dictionary of the letters and their counts\n   \
    \ counts = Dict(i => count(x -> x == i, letters) for i in letters)\n    # Find\
    \ the maximum count\n    max_count = maximum(values(counts))\n    # Return a dictionary\
    \ of the letters with the maximum count\n    return Dict(i => counts[i] for i\
    \ in keys(counts) if counts[i] == max_count)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpx9jtjmdo.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpx9jtjmdo.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpx9jtjmdo.jl:24\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpx9jtjmdo.jl:39 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpx9jtjmdo.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799298
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into an array of characters\n    letters =\
    \ split(test, \" \")\n    # Create an empty dictionary\n    hist = Dict{String,\
    \ Int64}()\n    # Iterate over the array of characters\n    for letter in letters\n\
    \        # If the letter is not in the dictionary, add it with a count of 1\n\
    \        if !haskey(hist, letter)\n            hist[letter] = 1\n        # If\
    \ the letter is in the dictionary, increment its count\n        else\n       \
    \     hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n \
    \   return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcindg9xy.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpcindg9xy.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcindg9xy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcindg9xy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpcindg9xy.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcindg9xy.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcindg9xy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpcindg9xy.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcindg9xy.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcindg9xy.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799298
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Create a dictionary of the words and their counts\n    hist = Dict{String,\
    \ Int64}()\n    for word in words\n        if haskey(hist, word)\n           \
    \ hist[word] += 1\n        else\n            hist[word] = 1\n        end\n   \
    \ end\n    # Find the maximum count\n    max_count = maximum(values(hist))\n \
    \   # Create a dictionary of the words with the maximum count\n    max_hist =\
    \ Dict{String, Int64}()\n    for (word, count) in hist\n        if count == max_count\n\
    \            max_hist[word] = count\n        end\n    end\n    return max_hist\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp6qhaouoa.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp6qhaouoa.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp6qhaouoa.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp6qhaouoa.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp6qhaouoa.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799298
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of characters\n    letters =\
    \ split(test)\n    # create a dictionary to store the letters and their counts\n\
    \    hist = Dict{String, Int64}()\n    # loop through the letters\n    for letter\
    \ in letters\n        # if the letter is not in the dictionary, add it\n     \
    \   if !haskey(hist, letter)\n            hist[letter] = 1\n        # otherwise,\
    \ increment the count\n        else\n            hist[letter] += 1\n        end\n\
    \    end\n    # return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_zg8vl2w.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp_zg8vl2w.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zg8vl2w.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zg8vl2w.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp_zg8vl2w.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zg8vl2w.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zg8vl2w.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799298
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Initialize a dictionary with the first letter\n    hist =\
    \ Dict(letters[1] => 1)\n    # Loop over the remaining letters\n    for i in 2:length(letters)\n\
    \        # If the letter is already in the dictionary, increment the count\n \
    \       if haskey(hist, letters[i])\n            hist[letters[i]] += 1\n     \
    \   # Otherwise, add the letter to the dictionary with a count of 1\n        else\n\
    \            hist[letters[i]] = 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp19bmpsf7.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp19bmpsf7.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19bmpsf7.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19bmpsf7.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp19bmpsf7.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19bmpsf7.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19bmpsf7.jl:40\ntest set: Error\
    \ During Test at /tmp/tmp19bmpsf7.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == Dict()\n  BoundsError: attempt to access 0-element Vector{SubString{String}}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmp19bmpsf7.jl:22\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp19bmpsf7.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp19bmpsf7.jl:40\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659799300
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_hc16sq7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_hc16sq7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_hc16sq7.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_hc16sq7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_hc16sq7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_hc16sq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into an array of letters\n    letters = split(test)\n\
    \    # create an empty dictionary\n    hist = Dict{String, Int64}()\n    # iterate\
    \ over the letters\n    for letter in letters\n        # if the letter is not\
    \ in the dictionary, add it with a count of 1\n        if !haskey(hist, letter)\n\
    \            hist[letter] = 1\n        # otherwise, increment the count\n    \
    \    else\n            hist[letter] += 1\n        end\n    end\n    # return the\
    \ dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpay9hcuna.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpay9hcuna.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpay9hcuna.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpay9hcuna.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpay9hcuna.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpay9hcuna.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpay9hcuna.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799298
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    test_vec =\
    \ split(test)\n    # Initialize the dictionary\n    hist = Dict()\n    # Loop\
    \ over the vector of characters\n    for i in test_vec\n        # If the character\
    \ is not in the dictionary, add it\n        if !haskey(hist, i)\n            hist[i]\
    \ = 1\n        # If the character is in the dictionary, increment the count\n\
    \        else\n            hist[i] += 1\n        end\n    end\n    # Return the\
    \ dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvcwdipbt.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpvcwdipbt.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcwdipbt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcwdipbt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvcwdipbt.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcwdipbt.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcwdipbt.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    return Dict()\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpunvosn3g.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpunvosn3g.jl:26\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunvosn3g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunvosn3g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpunvosn3g.jl:27\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunvosn3g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunvosn3g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpunvosn3g.jl:28\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunvosn3g.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunvosn3g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpunvosn3g.jl:29\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunvosn3g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # TODO\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp0w1whua.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpp0w1whua.jl:27\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp0w1whua.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp0w1whua.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp0w1whua.jl:28\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp0w1whua.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp0w1whua.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp0w1whua.jl:29\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp0w1whua.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp0w1whua.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp0w1whua.jl:30\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp0w1whua.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_hc16sq7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_hc16sq7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_hc16sq7.jl:27\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_hc16sq7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_hc16sq7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_hc16sq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./d"
  timestamp: 1659799294
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of lowercase letters\n    letters\
    \ = split(test)\n    # Create a dictionary to store the letter and its count\n\
    \    hist = Dict{String, Int64}()\n    # Iterate over the vector of letters\n\
    \    for letter in letters\n        # If the letter is not in the dictionary,\
    \ add it with a count of 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # If the letter is already in the dictionary, increment the count\n\
    \        else\n            hist[letter] += 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpctg_ab7c.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpctg_ab7c.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctg_ab7c.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctg_ab7c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpctg_ab7c.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctg_ab7c.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctg_ab7c.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the letters\n    for letter in letters\n        # If the letter\
    \ is already in the dictionary, increment the count\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        # Otherwise, add the letter to the dictionary\
    \ with a count of 1\n        else\n            hist[letter] = 1\n        end\n\
    \    end\n    # Find the maximum count\n    max_count = maximum(values(hist))\n\
    \    # Initialize a new dictionary\n    max_hist = Dict{String, Int64}()\n   \
    \ # Loop over the letters\n    for letter in keys(hist)\n        # If the letter\
    \ has the maximum count, add it to the new dictionary\n        if hist[letter]\
    \ == max_count\n            max_hist[letter] = max_count\n        end\n    end\n\
    \    # Return the new dictionary\n    return max_hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp29959dzz.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmp29959dzz.jl:58\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp29959dzz.jl:34\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp29959dzz.jl:58 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp29959dzz.jl:51\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Create a dictionary with the default value of 0\n    hist\
    \ = Dict{String, Int64}(default=0)\n    # Iterate over the letters and increment\
    \ the corresponding value in the dictionary\n    for letter in letters\n     \
    \   hist[letter] += 1\n    end\n    # Find the maximum value in the dictionary\n\
    \    max_count = maximum(values(hist))\n    # Create a new dictionary with the\
    \ maximum value as the key and the letters as the value\n    max_hist = Dict{Int64,\
    \ Vector{String}}(default=String[])\n    for (letter, count) in hist\n       \
    \ push!(max_hist[count], letter)\n    end\n    # Return the dictionary with the\
    \ maximum value as the key and the letters as the value\n    return max_hist[max_count]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpvc3seu63.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpvc3seu63.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching Dict{String, Int64}(; default=0)\n  Closest candidates are:\n\
    \    Dict{K, V}() where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:88\
    \ got unsupported keyword argument \"default\"\n    Dict{K, V}(!Matched::Dict{K,\
    \ V}) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:92 got unsupported\
    \ keyword argument \"default\"\n    Dict{K, V}(!Matched::Pair) where {K, V} at\
    \ ~/.conda/envs/polyglot/share/julia/base/dict.jl:108 got unsupported keyword\
    \ argument \"default\"\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpvc3seu63.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvc3seu63.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvc3seu63.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpvc3seu63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching Dict{String, Int64}(; default=0)\n  Closest candidates are:\n\
    \    Dict{K, V}() where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:88\
    \ got unsupported keyword argument \"default\"\n    Dict{K, V}(!Matched::Dict{K,\
    \ V}) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:92 got unsupported\
    \ keyword argument \"default\"\n    Dict{K, V}(!Matched::Pair) where {K, V} at\
    \ ~/.conda/envs/polyglot/share/julia/base/dict.jl:108 got unsupported keyword\
    \ argument \"default\"\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpvc3seu63.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvc3seu63.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659799300
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n    # Loop\
    \ over the words\n    for word in words\n        # If the word is not in the dictionary,\
    \ add it with a count of 1\n        if !haskey(hist, word)\n            hist[word]\
    \ = 1\n        # Otherwise, increment the count\n        else\n            hist[word]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5csnkzoh.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp5csnkzoh.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5csnkzoh.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5csnkzoh.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp5csnkzoh.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5csnkzoh.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5csnkzoh.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split the string into a vector of strings\n    letters = split(test)\n\
    \    # create a dictionary to store the results\n    hist = Dict{String, Int64}()\n\
    \    # loop over the letters\n    for letter in letters\n        # if the letter\
    \ is already in the dictionary, increment the count\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        # otherwise, add the letter to the dictionary\
    \ with a count of 1\n        else\n            hist[letter] = 1\n        end\n\
    \    end\n    # return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpljmwl59t.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpljmwl59t.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljmwl59t.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljmwl59t.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpljmwl59t.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljmwl59t.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljmwl59t.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    test = split(test)\n    d = Dict{String, Int64}()\n    for i in\
    \ test\n        if haskey(d, i)\n            d[i] += 1\n        else\n       \
    \     d[i] = 1\n        end\n    end\n    return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2hivzqrm.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp2hivzqrm.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hivzqrm.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hivzqrm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2hivzqrm.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hivzqrm.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hivzqrm.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letters = split(test)\n    counts = Dict{String, Int64}()\n  \
    \  for letter in letters\n        if haskey(counts, letter)\n            counts[letter]\
    \ += 1\n        else\n            counts[letter] = 1\n        end\n    end\n \
    \   return counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqmjemdtm.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpqmjemdtm.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmjemdtm.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmjemdtm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpqmjemdtm.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmjemdtm.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmjemdtm.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n    # Iterate\
    \ over the words\n    for word in words\n        # If the word is not in the dictionary,\
    \ add it with a count of 1\n        if !haskey(hist, word)\n            hist[word]\
    \ = 1\n        # Otherwise, increment the count\n        else\n            hist[word]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiufkfqbt.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpiufkfqbt.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiufkfqbt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiufkfqbt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpiufkfqbt.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiufkfqbt.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiufkfqbt.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        hist[letter] = get(hist, letter, 0) + 1\n    end\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzcrolrsl.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpzcrolrsl.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcrolrsl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcrolrsl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzcrolrsl.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcrolrsl.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcrolrsl.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799299
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of strings\n    letters = split(test)\n\
    \    # Create a dictionary with the letters as keys and the count as values\n\
    \    hist = Dict{String, Int64}()\n    for letter in letters\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # Find the maximum count\n    max_count = maximum(values(hist))\n\
    \    # Create a dictionary with the letters with the maximum count as keys and\
    \ the count as values\n    hist_max = Dict{String, Int64}()\n    for (letter,\
    \ count) in hist\n        if count == max_count\n            hist_max[letter]\
    \ = count\n        end\n    end\n    return hist_max\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp1ys4a4kv.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp1ys4a4kv.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp1ys4a4kv.jl:31\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp1ys4a4kv.jl:52 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp1ys4a4kv.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659799300
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        if\
    \ haskey(histogram, letter)\n            histogram[letter] += 1\n        else\n\
    \            histogram[letter] = 1\n        end\n    end\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpob73me56.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpob73me56.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpob73me56.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpob73me56.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpob73me56.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpob73me56.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpob73me56.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for word in split(test)\n  \
    \      if haskey(hist, word)\n            hist[word] += 1\n        else\n    \
    \        hist[word] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3ny2ap1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3ny2ap1.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3ny2ap1.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3ny2ap1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3ny2ap1.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of words\n    words = split(test)\n\
    \    # Create a dictionary with the default value of 0\n    hist = Dict{String,\
    \ Int64}(default=0)\n    # Loop through the words and increment the count for\
    \ each word\n    for word in words\n        hist[word] += 1\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqvrelx0e.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpqvrelx0e.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching Dict{String, Int64}(; default=0)\n  Closest candidates are:\n\
    \    Dict{K, V}() where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:88\
    \ got unsupported keyword argument \"default\"\n    Dict{K, V}(!Matched::Dict{K,\
    \ V}) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:92 got unsupported\
    \ keyword argument \"default\"\n    Dict{K, V}(!Matched::Pair) where {K, V} at\
    \ ~/.conda/envs/polyglot/share/julia/base/dict.jl:108 got unsupported keyword\
    \ argument \"default\"\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpqvrelx0e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvrelx0e.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvrelx0e.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqvrelx0e.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching Dict{String, Int64}(; default=0)\n  Closest candidates are:\n\
    \    Dict{K, V}() where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:88\
    \ got unsupported keyword argument \"default\"\n    Dict{K, V}(!Matched::Dict{K,\
    \ V}) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:92 got unsupported\
    \ keyword argument \"default\"\n    Dict{K, V}(!Matched::Pair) where {K, V} at\
    \ ~/.conda/envs/polyglot/share/julia/base/dict.jl:108 got unsupported keyword\
    \ argument \"default\"\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpqvrelx0e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvrelx0e.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659799301
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkxs2x5o6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpkxs2x5o6.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkxs2x5o6.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkxs2x5o6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkxs2x5o6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6t5hmm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzm6t5hmm.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzm6t5hmm.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm6t5hmm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm6t5hmm.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    chars = split(test)\n\
    \    # Initialize a dictionary\n    hist = Dict()\n    # Loop over the characters\n\
    \    for c in chars\n        # If the character is not in the dictionary, add\
    \ it with value 1\n        if !haskey(hist, c)\n            hist[c] = 1\n    \
    \    # Otherwise, increment the value by 1\n        else\n            hist[c]\
    \ += 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2ft5kl0o.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp2ft5kl0o.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ft5kl0o.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ft5kl0o.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp2ft5kl0o.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ft5kl0o.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ft5kl0o.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799300
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Create a dictionary to store the letters and their count\n \
    \   hist = Dict{String, Int64}()\n    # Split the string into a vector of letters\n\
    \    letters = split(test)\n    # Loop through the vector of letters\n    for\
    \ letter in letters\n        # If the letter is not in the dictionary, add it\n\
    \        if !haskey(hist, letter)\n            hist[letter] = 1\n        # If\
    \ the letter is in the dictionary, increment the count\n        else\n       \
    \     hist[letter] += 1\n        end\n    end\n    # Return the dictionary\n \
    \   return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0oq5518i.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp0oq5518i.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0oq5518i.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0oq5518i.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0oq5518i.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0oq5518i.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0oq5518i.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799300
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # split string into array of characters\n    test_array = split(test,\
    \ \" \")\n    # initialize dictionary\n    histogram_dict = Dict()\n    # loop\
    \ through array\n    for i in test_array\n        # if character is not in dictionary,\
    \ add it with a count of 1\n        if !haskey(histogram_dict, i)\n          \
    \  histogram_dict[i] = 1\n        # if character is in dictionary, increment count\
    \ by 1\n        else\n            histogram_dict[i] += 1\n        end\n    end\n\
    \    # return dictionary\n    return histogram_dict\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6vxmq0nl.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp6vxmq0nl.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6vxmq0nl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6vxmq0nl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp6vxmq0nl.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6vxmq0nl.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6vxmq0nl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp6vxmq0nl.jl:47\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6vxmq0nl.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6vxmq0nl.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     3      8\n"
  timestamp: 1659799300
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    for c in split(test)\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn9ao8k38.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpn9ao8k38.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9ao8k38.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9ao8k38.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpn9ao8k38.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9ao8k38.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9ao8k38.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Split the string into a vector of characters\n    letters =\
    \ split(test)\n    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the characters\n    for letter in letters\n        # If the letter\
    \ is already in the dictionary, increment the count\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        # Otherwise, add it to the dictionary\
    \ with a count of 1\n        else\n            hist[letter] = 1\n        end\n\
    \    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv8b5797w.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpv8b5797w.jl:42\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8b5797w.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8b5797w.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpv8b5797w.jl:45\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8b5797w.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8b5797w.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659799300
