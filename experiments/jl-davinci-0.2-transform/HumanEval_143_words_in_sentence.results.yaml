language: jl
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5w6nm5lf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5w6nm5lf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpas8ka875.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpas8ka875.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = \"\"\n    for word in words\n        if length(word) in primes\n         \
    \   result = result * \" \" * word\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx_680ceh.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpx_680ceh.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi am Hussein\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:40\n  Expression: candidate(\""
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphnlylvm5.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmphnlylvm5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = \"\"\n    for word in words\n        if length(word) in primes\n \
    \           result = result * \" \" * word\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplfmd7fhw.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmplfmd7fhw.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi am Hussein\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:40\n  Expression: candidate(\""
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpq0p02npm.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpq0p02npm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  new_sentence = []\n    for word in words\n        if length(word) in primes\n\
    \            push!(new_sentence, word)\n        end\n    end\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = \"\"\n    for word in words\n\
    \        if isprime(length(word))\n            result = result * \" \" * word\n\
    \        end\n    end\n    return strip(result)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwgigbo2i.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwgigbo2i.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwgigbo2i.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgigbo2i.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgigbo2i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwgigbo2i.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwgigbo2i.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgigbo2i.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgigbo2i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwgigbo2i.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwgigbo2i.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgigbo2i.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgigbo2i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwgigbo2i.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659793771
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  prime_words = []\n    for word in words\n        if length(word) in primes\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  prime_words = []\n    for word in words\n        if length(word) in primes\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = \"\"\n    for word in words\n        if length(word) in primes\n \
    \           result = result * \" \" * word\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplfmd7fhw.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmplfmd7fhw.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi am Hussein\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:40\n  Expression: candidate(\""
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpas8ka875.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpas8ka875.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = \"\"\n    for word in words\n        if length(word) in primes\n         \
    \   result = result * \" \" * word\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx_680ceh.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpx_680ceh.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi am Hussein\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:40\n  Expression: candidate(\""
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpq0p02npm.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpq0p02npm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    join(result, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpq0p02npm.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpq0p02npm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpq0p02npm.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0p02npm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0p02npm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq0p02npm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    new_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(new_words, word)\n      \
    \  end\n    end\n    join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp311wbcom.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp311wbcom.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp311wbcom.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp311wbcom.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp311wbcom.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp311wbcom.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp311wbcom.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp311wbcom.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp311wbcom.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp311wbcom.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp311wbcom.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp311wbcom.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp311wbcom.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp311wbcom.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659793771
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for word\
    \ in words\n        if length(word) in primes\n            println(word)\n   \
    \     end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpluurgnwh.jl:31

    '
  stdout: "is\ntest set: Error During Test at /tmp/tmpluurgnwh.jl:34\n  Test threw\
    \ exception\n  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpluurgnwh.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpluurgnwh.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpluurgnwh.jl:33\ngo\nfor\n\
    test set: Error During Test at /tmp/tmpluurgnwh.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"lets go for swimming\") == \"go for\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpluurgnwh.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpluurgnwh.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659793772
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = \"\"\n    for word in words\n        if length(word) in primes\n \
    \           result = result * \" \" * word\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplfmd7fhw.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmplfmd7fhw.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi am Hussein\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfmd7fhw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfmd7fhw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplfmd7fhw.jl:40\n  Expression: candidate(\""
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    join(result, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5w6nm5lf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5w6nm5lf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  new_sentence = []\n    for word in words\n        if length(word) in primes\n\
    \            push!(new_sentence, word)\n        end\n    end\n    join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphnlylvm5.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmphnlylvm5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphnlylvm5.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmphnlylvm5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = \"\"\n    for word in words\n        if length(word) in primes\n         \
    \   result = result * \" \" * word\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx_680ceh.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpx_680ceh.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi am Hussein\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_680ceh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_680ceh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx_680ceh.jl:40\n  Expression: candidate(\""
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    res = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(res, word)\n        end\n\
    \    end\n    join(res, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpp2q0ddtm.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpp2q0ddtm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpp2q0ddtm.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp2q0ddtm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp2q0ddtm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpp2q0ddtm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpp2q0ddtm.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp2q0ddtm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp2q0ddtm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpp2q0ddtm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpp2q0ddtm.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp2q0ddtm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp2q0ddtm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpp2q0ddtm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659793771
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    join(result, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    join(result, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_sentence\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(new_sentence, word)\n        end\n    end\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpas8ka875.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpas8ka875.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5w6nm5lf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5w6nm5lf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphnlylvm5.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmphnlylvm5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphnlylvm5.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphnlylvm5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphnlylvm5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphnlylvm5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  new_words = []\n    for word in words\n        if length(word) in primes\n\
    \            push!(new_words, word)\n        end\n    end\n    join(new_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = \"\"\n    for word in words\n\
    \        if isprime(length(word))\n            result = result * \" \" * word\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpcc6vuf_m.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpcc6vuf_m.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcc6vuf_m.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcc6vuf_m.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcc6vuf_m.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcc6vuf_m.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcc6vuf_m.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcc6vuf_m.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcc6vuf_m.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcc6vuf_m.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpcc6vuf_m.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcc6vuf_m.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcc6vuf_m.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcc6vuf_m.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659793771
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5w6nm5lf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5w6nm5lf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code goes here\n    return \"\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbys5tki4.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpbys5tki4.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbys5tki4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbys5tki4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbys5tki4.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbys5tki4.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbys5tki4.jl:28\ntest set: Test Failed at /tmp/tmpbys5tki4.jl:31\n\
    \  Expression: candidate(\"there is no place available here\") == \"there is no\
    \ place\"\n   Evaluated: \"\" == \"there is no place\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbys5tki4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbys5tki4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbys5tki4.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbys5tki4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbys5tki4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbys5tki4.jl:33\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"\" == \"go for it\"\nStacktrace:\n [1] macro "
  timestamp: 1659793770
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxioazyn4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxioazyn4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxioazyn4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxioazyn4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxioazyn4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxioazyn4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5w6nm5lf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5w6nm5lf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5w6nm5lf.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6nm5lf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6nm5lf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5w6nm5lf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpas8ka875.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpas8ka875.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpas8ka875.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas8ka875.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas8ka875.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpas8ka875.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    result = []\n    for word in words\n    \
    \    if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtw1ejb.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtw1ejb.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfdtw1ejb.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdtw1ejb.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdtw1ejb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfdtw1ejb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfdtw1ejb.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdtw1ejb.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdtw1ejb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfdtw1ejb.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpfdtw1ejb.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdtw1ejb.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdtw1ejb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfdtw1ejb.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659793771
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return join(filter(word -> isprime(length(word)), split(sentence, \" \"\
    )), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpr5u1xzfy.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpr5u1xzfy.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpr5u1xzfy.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr5u1xzfy.jl:21\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpr5u1xzfy.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr5u1xzfy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpr5u1xzfy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpr5u1xzfy.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr5u1xzfy.jl:21\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpr5u1xzfy.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr5u1xzfy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpr5u1xzfy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpr5u1xzfy.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr5u1xzfy.jl:21\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdli"
  timestamp: 1659793771
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        if length(word) in primes\n           \
    \ push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwvnv2ux0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpwvnv2ux0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwvnv2ux0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvnv2ux0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvnv2ux0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwvnv2ux0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(primes, word)\n        end\n\
    \    end\n    return join(primes, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpw_5tgvcf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpw_5tgvcf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpw_5tgvcf.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_5tgvcf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_5tgvcf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpw_5tgvcf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpw_5tgvcf.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_5tgvcf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_5tgvcf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpw_5tgvcf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpw_5tgvcf.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_5tgvcf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_5tgvcf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpw_5tgvcf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659793771
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for word in words\n        if length(word) in primes\n   \
    \         push!(result, word)\n        end\n    end\n    return join(result, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
