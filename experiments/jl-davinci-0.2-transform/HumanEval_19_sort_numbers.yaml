name: HumanEval_19_sort_numbers
language: jl
prompt: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to\
  \ largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n  \
  \  \"\"\"\nfunction sort_numbers(numbers::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
  \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
  \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six\
  \ five four three two one zero\") == \"zero one two three four five six\")\nend\n"
completions: ["    nums = split(numbers)\n    nums = sort(nums)\n    nums = join(nums)\n\
    \    return nums\nend", "    nums = split(numbers)\n    nums = sort(nums)\n  \
    \  return join(nums, \" \")\nend", "    num_dict = Dict(\"zero\" => 0, \"one\"\
    \ => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" =>\
    \ 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9)\n    num_list = split(numbers,\
    \ \" \")\n    num_list = map(num_dict, num_list)\n    sort!(num_list)\n    num_list\
    \ = map(num_dict, num_list)\n    return join(num_list, \" \")\nend", "    nums\
    \ = split(numbers)\n    nums = sort(nums)\n    return join(nums, \" \")\nend",
  "    nums = numbers.split(\" \")\n    nums = sort(nums)\n    return join(nums, \"\
    \ \")\nend", "    num_dict = Dict(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"\
    three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\"\
    \ => 8, \"nine\" => 9)\n    num_list = split(numbers, \" \")\n    num_list = map(num_dict,\
    \ num_list)\n    sort!(num_list)\n    num_list = map(num_dict, num_list)\n   \
    \ return join(num_list, \" \")\nend", "    num_dict = Dict(\"zero\" => 0, \"one\"\
    \ => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" =>\
    \ 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9)\n    num_list = [num_dict[i]\
    \ for i in split(numbers)]\n    sort!(num_list)\n    return join([key for (key,\
    \ value) in num_dict if value in num_list], \" \")\nend", "    num_dict = Dict(\"\
    zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\"\
    \ => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9)\n    num_list\
    \ = split(numbers, \" \")\n    num_list = map(x -> num_dict[x], num_list)\n  \
    \  sort!(num_list)\n    num_list = map(x -> num_dict[x], num_list)\n    return\
    \ join(num_list, \" \")\nend", "    num_list = numbers.split()\n    num_list =\
    \ sort(num_list)\n    return \" \".join(num_list)\nend", "    nums = split(numbers)\n\
    \    nums = sort(nums)\n    return join(nums)\nend", "    nums = split(numbers,\
    \ \" \")\n    nums = sort(nums)\n    return join(nums, \" \")\nend", "    num_dict\
    \ = Dict(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" =>\
    \ 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" =>\
    \ 9)\n    num_list = split(numbers, \" \")\n    num_list = map(num_dict, num_list)\n\
    \    sort!(num_list)\n    num_list = map(num_dict, num_list)\n    return join(num_list,\
    \ \" \")\nend", "    nums = numbers.split()\n    nums = sort(nums)\n    return\
    \ join(nums, \" \")\nend", "    nums = split(numbers)\n    nums = sort(nums)\n\
    \    return join(nums, \" \")\nend", "    num_list = split(numbers, \" \")\n \
    \   num_list = sort(num_list)\n    return join(num_list, \" \")\nend", "    nums\
    \ = split(numbers, \" \")\n    nums = sort(nums)\n    return join(nums, \" \"\
    )\nend", "    nums = split(numbers, \" \")\n    num_dict = Dict(\"zero\" => 0,\
    \ \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"\
    six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9)\n    num_list = []\n\
    \    for num in nums\n        push!(num_list, num_dict[num])\n    end\n    num_list\
    \ = sort(num_list)\n    num_list_str = []\n    for num in num_list\n        push!(num_list_str,\
    \ num_dict[num])\n    end\n    return join(num_list_str, \" \")\nend", "    num_dict\
    \ = Dict(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" =>\
    \ 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" =>\
    \ 9)\n    num_list = numbers.split(\" \")\n    num_list = sort(num_list)\n   \
    \ num_list = map(num_list) do x\n        num_dict[x]\n    end\n    num_list =\
    \ sort(num_list)\n    num_list = map(num_list) do x\n        for (key, value)\
    \ in num_dict\n            if value == x\n                return key\n       \
    \     end\n        end\n    end\n    return join(num_list, \" \")\nend", "   \
    \ num_dict = Dict(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"\
    four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\"\
    \ => 9)\n    num_list = [num_dict[n] for n in split(numbers)]\n    return join([key\
    \ for (key, value) in num_dict if value in sort(num_list)], \" \")\nend", "  \
    \  num_dict = Dict(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3,\
    \ \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8,\
    \ \"nine\" => 9)\n    num_list = split(numbers, \" \")\n    num_list = map(num_dict,\
    \ num_list)\n    sort!(num_list)\n    num_list = map(num_dict, num_list)\n   \
    \ return join(num_list, \" \")\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
