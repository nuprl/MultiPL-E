name: HumanEval_159_eat
language: jl
prompt: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    but now you need to eat more carrots to complete the day's\
  \ meals.\n    you should return an array of [ total number of eaten carrots after\
  \ your meals,\n                                    the number of carrots left after\
  \ your meals ]\n    if there are not enough remaining carrots, you will eat all\
  \ remaining carrots, but will still be hungry.\n    \n    Example:\n    >>> eat(5,\
  \ 6, 10)\n    [11, 4]\n    >>> eat(4, 8, 9)\n    [12, 1]\n    >>> eat(1, 10, 10)\n\
  \    [11, 0]\n    >>> eat(2, 11, 5)\n    [7, 0]\n    \n    Variables:\n    @number\
  \ : integer\n        the number of carrots that you have eaten.\n    @need : integer\n\
  \        the number of carrots that you need to eat.\n    @remaining : integer\n\
  \        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n\
  \    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\
  \n    Have fun :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6,\
  \ 10) == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1,\
  \ 10, 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
  \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
completions: ["    if remaining < need\n        return [number + remaining, 0]\n \
    \   else\n        return [number + need, remaining - need]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining >= need\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if remaining >= need\n        return [number\
    \ + need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    if (number + need) > remaining\n        return [remaining,\
    \ 0]\n    else\n        return [number + need, remaining - (number + need)]\n\
    \    end\nend", "    if remaining < need\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if number + need <= remaining\n        return [number + need, remaining - (number\
    \ + need)]\n    else\n        return [remaining, 0]\n    end\nend", "    if remaining\
    \ < need\n        return [number + remaining, 0]\n    else\n        return [number\
    \ + need, remaining - need]\n    end\nend", "    if remaining >= need\n      \
    \  return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if remaining < need\n        return [number\
    \ + remaining, 0]\n    else\n        return [number + need, remaining - need]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if need\
    \ > remaining\n        return [number + remaining, 0]\n    else\n        return\
    \ [number + need, remaining - need]\n    end\nend", "    if need <= remaining\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if number + need <= remaining\n       \
    \ return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if remaining >= need\n        return [number\
    \ + need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    total = number + need\n    if total > remaining\n       \
    \ return [remaining, 0]\n    else\n        return [total, remaining - total]\n\
    \    end\nend", "    if number + need <= remaining\n        return [number + need,\
    \ remaining - (number + need)]\n    else\n        return [remaining, 0]\n    end\n\
    end", "    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend",
  "    if number + need <= remaining\n        return [number + need, remaining - (number\
    \ + need)]\n    else\n        return [remaining, 0]\n    end\nend", "    if number\
    \ + need <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if number + need\
    \ <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if (number + need)\
    \ <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if number + need\
    \ <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if remaining >=\
    \ need\n        return [number + need, remaining - need]\n    else\n        return\
    \ [number + remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if number + need > remaining\n\
    \        return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if remaining < need\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if remaining >= need\n        return [number + need, remaining - need]\n  \
    \  else\n        return [number + remaining, 0]\n    end\nend", "    if need >\
    \ remaining\n        return [number + remaining, 0]\n    else\n        return\
    \ [number + need, remaining - need]\n    end\nend", "    if number + need > remaining\n\
    \        return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if number + need <= remaining\n    \
    \    return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if remaining >= need\n        return [number\
    \ + need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    if need > remaining\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if remaining >= need\n        return [number + need, remaining - need]\n  \
    \  else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining >= need\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if number + need > remaining\n        return\
    \ [remaining, 0]\n    else\n        return [number + need, remaining - (number\
    \ + need)]\n    end\nend", "    total = number + need\n    if total > remaining\n\
    \        return [remaining, 0]\n    else\n        return [total, remaining - total]\n\
    \    end\nend", "    if number + need <= remaining\n        return [number + need,\
    \ remaining - (number + need)]\n    else\n        return [remaining, 0]\n    end\n\
    end", "    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend", "    if number\
    \ + need <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if remaining < need\n\
    \        return [number + remaining, 0]\n    else\n        return [number + need,\
    \ remaining - need]\n    end\nend", "    if number + need <= remaining\n     \
    \   return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if remaining >= need\n        return [number\
    \ + need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    if number + need > remaining\n        return [remaining,\
    \ 0]\n    else\n        return [number + need, remaining - (number + need)]\n\
    \    end\nend", "    if number + need > remaining\n        return [remaining,\
    \ 0]\n    else\n        return [number + need, remaining - (number + need)]\n\
    \    end\nend", "    if (number + need) > remaining\n        return [remaining,\
    \ 0]\n    else\n        return [number + need, remaining - (number + need)]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if number + need <= remaining\n        return [number + need, remaining -\
    \ (number + need)]\n    else\n        return [remaining, 0]\n    end\nend", " \
    \   # your code here\n    return [0, 0]\nend", "    if remaining < need\n    \
    \    return [number + remaining, 0]\n    else\n        return [number + need,\
    \ remaining - need]\n    end\nend", "    if number + need <= remaining\n     \
    \   return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if need > remaining\n        return [number\
    \ + remaining, 0]\n    else\n        return [number + need, remaining - need]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if need > remaining\n        return [number + remaining, 0]\n    else\n  \
    \      return [number + need, remaining - need]\n    end\nend", "    if number\
    \ + need <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if remaining >=\
    \ need\n        return [number + need, remaining - need]\n    else\n        return\
    \ [number + remaining, 0]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if remaining < need\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if remaining < need\n        return [number + remaining, 0]\n    else\n   \
    \     return [number + need, remaining - need]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining < need\n \
    \       return [number + remaining, 0]\n    else\n        return [number + need,\
    \ remaining - need]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if remaining >= need\n        return [number + need,\
    \ remaining - need]\n    else\n        return [number + remaining, 0]\n    end\n\
    end", "    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if need > remaining\n \
    \       return [number + remaining, 0]\n    else\n        return [number + need,\
    \ remaining - need]\n    end\nend", "    if number + need <= remaining\n     \
    \   return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    total = number + need\n    if total > remaining\n\
    \        return [remaining, 0]\n    else\n        return [total, remaining - total]\n\
    \    end\nend", "    if remaining < need\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if (number + need) > remaining\n        return [remaining, 0]\n    else\n \
    \       return [number + need, remaining - (number + need)]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining >= need\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if remaining >= need\n        return [number\
    \ + need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    if number + need <= remaining\n        return [number + need,\
    \ remaining - (number + need)]\n    else\n        return [remaining, 0]\n    end\n\
    end", "    if need > remaining\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend", "    total =\
    \ number + need\n    if total > remaining\n        return [remaining, 0]\n   \
    \ else\n        return [total, remaining - total]\n    end\nend", "    if need\
    \ > remaining\n        return [number + remaining, 0]\n    else\n        return\
    \ [number + need, remaining - need]\n    end\nend", "    if number + need > remaining\n\
    \        return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if remaining >= need\n        return [number + need,\
    \ remaining - need]\n    else\n        return [number + remaining, 0]\n    end\n\
    end", "    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend", "    if number\
    \ + need <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if number + need\
    \ <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if remaining >=\
    \ need\n        return [number + need, remaining - need]\n    else\n        return\
    \ [number + remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if (number + need) <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    total = number + need\n    if total > remaining\n  \
    \      return [remaining, 0]\n    else\n        return [total, remaining - total]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    total = number + need\n    if total > remaining\n  \
    \      return [remaining, 0]\n    else\n        return [total, remaining - total]\n\
    \    end\nend", "    if number + need <= remaining\n        return [number + need,\
    \ remaining - (number + need)]\n    else\n        return [remaining, 0]\n    end\n\
    end", "    # your code here\nend", "    if number + need <= remaining\n      \
    \  return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if remaining < need\n        return [number\
    \ + remaining, 0]\n    else\n        return [number + need, remaining - need]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if need > remaining\n \
    \       return [number + remaining, 0]\n    else\n        return [number + need,\
    \ remaining - need]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if number + need <= remaining\n        return [number\
    \ + need, remaining - (number + need)]\n    else\n        return [remaining, 0]\n\
    \    end\nend", "    if need > remaining\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if number + need <= remaining\n        return [number + need, remaining - (number\
    \ + need)]\n    else\n        return [remaining, 0]\n    end\nend", "    if (number\
    \ + need) > remaining\n        return [remaining, 0]\n    else\n        return\
    \ [number + need, remaining - (number + need)]\n    end\nend", "    if remaining\
    \ < need\n        return [number + remaining, 0]\n    else\n        return [number\
    \ + need, remaining - need]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    # your code here\nend", "    #\
    \ your code here\n    return [0, 0]\nend", "    if (number + need) > remaining\n\
    \        return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if remaining >= need\n        return [number + need,\
    \ remaining - need]\n    else\n        return [number + remaining, 0]\n    end\n\
    end", "    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend", "    if (number\
    \ + need) <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if number < 0 ||\
    \ need < 0 || remaining < 0\n        error(\"All variables must be positive integers\"\
    )\n    end\n    if number > 1000 || need > 1000 || remaining > 1000\n        error(\"\
    All variables must be less than 1000\")\n    end\n    if remaining < need\n  \
    \      return [number + remaining, 0]\n    else\n        return [number + need,\
    \ remaining - need]\n    end\nend", "    if number + need <= remaining\n     \
    \   return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if remaining >= need\n        return [number\
    \ + need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    if number + need <= remaining\n        return [number + need,\
    \ remaining - (number + need)]\n    else\n        return [remaining, 0]\n    end\n\
    end", "    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if number + need > remaining\n\
    \        return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if need > remaining\n        return\
    \ [number + remaining, 0]\n    else\n        return [number + need, remaining\
    \ - need]\n    end\nend", "    if number + need <= remaining\n        return [number\
    \ + need, remaining - (number + need)]\n    else\n        return [remaining, 0]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if number\
    \ + need > remaining\n        return [remaining, 0]\n    else\n        return\
    \ [number + need, remaining - (number + need)]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining < need\n \
    \       return [number + remaining, 0]\n    else\n        return [number + need,\
    \ remaining - need]\n    end\nend", "    if remaining < need\n        return [number\
    \ + remaining, 0]\n    else\n        return [number + need, remaining - need]\n\
    \    end\nend", "    if remaining < need\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if number + need <= remaining\n        return [number + need, remaining - (number\
    \ + need)]\n    else\n        return [remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining >= need\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if number + need <= remaining\n       \
    \ return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if need > remaining\n        return [number\
    \ + remaining, 0]\n    else\n        return [number + need, remaining - need]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if number + need <= remaining\n        return [number + need, remaining -\
    \ (number + need)]\n    else\n        return [remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if (number + need) > remaining\n\
    \        return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if remaining < need\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if number + need > remaining\n        return [remaining, 0]\n    else\n   \
    \     return [number + need, remaining - (number + need)]\n    end\nend", "  \
    \  if number + need <= remaining\n        return [number + need, remaining - (number\
    \ + need)]\n    else\n        return [remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining >= need\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if number + need > remaining\n        return\
    \ [remaining, 0]\n    else\n        return [number + need, remaining - (number\
    \ + need)]\n    end\nend", "    if number + need <= remaining\n        return\
    \ [number + need, remaining - (number + need)]\n    else\n        return [remaining,\
    \ 0]\n    end\nend", "    total = number + need\n    if total > remaining\n  \
    \      return [remaining, 0]\n    else\n        return [total, remaining - total]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if remaining >= need\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"number, need and remaining must be positive integers\"\
    )\n    end\n    if number > 1000 || need > 1000 || remaining > 1000\n        error(\"\
    number, need and remaining must be less than 1000\")\n    end\n    if remaining\
    \ < need\n        return [number + remaining, 0]\n    else\n        return [number\
    \ + need, remaining - need]\n    end\nend", "    if (number + need) <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if number + need <= remaining\n        return [number\
    \ + need, remaining - (number + need)]\n    else\n        return [remaining, 0]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if number + need <= remaining\n        return [number\
    \ + need, remaining - (number + need)]\n    else\n        return [remaining, 0]\n\
    \    end\nend", "    if number + need <= remaining\n        return [number + need,\
    \ remaining - (number + need)]\n    else\n        return [remaining, 0]\n    end\n\
    end", "    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend", "    if number\
    \ + need <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend", "    if remaining >=\
    \ need\n        return [number + need, remaining - need]\n    else\n        return\
    \ [number + remaining, 0]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if remaining < need\n        return [number + remaining,\
    \ 0]\n    else\n        return [number + need, remaining - need]\n    end\nend",
  "    if remaining < need\n        return [number + remaining, 0]\n    else\n   \
    \     return [number + need, remaining - need]\n    end\nend", "    if number\
    \ + need > remaining\n        return [remaining, 0]\n    else\n        return\
    \ [number + need, remaining - (number + need)]\n    end\nend", "    if need >\
    \ remaining\n        return [number + remaining, 0]\n    else\n        return\
    \ [number + need, remaining - need]\n    end\nend", "    if remaining >= need\n\
    \        return [number + need, remaining - need]\n    else\n        return [number\
    \ + remaining, 0]\n    end\nend", "    if number + need > remaining\n        return\
    \ [remaining, 0]\n    else\n        return [number + need, remaining - (number\
    \ + need)]\n    end\nend", "    if need <= remaining\n        return [number +\
    \ need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if (number + need) > remaining\n\
    \        return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if number + need > remaining\n     \
    \   return [remaining, 0]\n    else\n        return [number + need, remaining\
    \ - (number + need)]\n    end\nend", "    if number + need <= remaining\n    \
    \    return [number + need, remaining - (number + need)]\n    else\n        return\
    \ [remaining, 0]\n    end\nend", "    if remaining >= need\n        return [number\
    \ + need, remaining - need]\n    else\n        return [number + remaining, 0]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend", " \
    \   if remaining >= need\n        return [number + need, remaining - need]\n \
    \   else\n        return [number + remaining, 0]\n    end\nend", "    if remaining\
    \ >= need\n        return [number + need, remaining - need]\n    else\n      \
    \  return [number + remaining, 0]\n    end\nend", "    if number + need <= remaining\n\
    \        return [number + need, remaining - (number + need)]\n    else\n     \
    \   return [remaining, 0]\n    end\nend", "    if remaining >= need\n        return\
    \ [number + need, remaining - need]\n    else\n        return [number + remaining,\
    \ 0]\n    end\nend", "    if number + need > remaining\n        return [remaining,\
    \ 0]\n    else\n        return [number + need, remaining - (number + need)]\n\
    \    end\nend", "    if remaining >= need\n        return [number + need, remaining\
    \ - need]\n    else\n        return [number + remaining, 0]\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
