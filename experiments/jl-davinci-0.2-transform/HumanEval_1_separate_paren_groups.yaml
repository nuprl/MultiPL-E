name: HumanEval_1_separate_paren_groups
language: jl
prompt: "\"\"\" Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n    separate those group into separate strings and\
  \ return the list of those.\n    Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n    Ignore any spaces in the\
  \ input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"\
  ()\", \"(())\", \"(()())\"]\n    \"\"\"\nfunction separate_paren_groups(paren_string::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = separate_paren_groups;\n\t@test(candidate(\"\
  (()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
  ])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\"\
  , \"(((())))\"])\n\t@test(candidate(\"(()(())((())))\") == [\"(()(())((())))\"])\n\
  \t@test(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])\nend\n"
completions: ["    # your code here\n    return []\nend", "    # TODO: implement this\
    \ function\n    return []\nend", "    # YOUR CODE HERE\nend", "    # YOUR CODE\
    \ HERE\n    return []\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    \    return []\nend", "    # your code here\nend", "    paren_string = replace(paren_string,\
    \ \" \" => \"\")\n    paren_groups = Vector{String}()\n    paren_group = \"\"\n\
    \    open_parens = 0\n    for c in paren_string\n        if c == '('\n       \
    \     open_parens += 1\n        elseif c == ')'\n            open_parens -= 1\n\
    \        end\n        paren_group *= c\n        if open_parens == 0\n        \
    \    push!(paren_groups, paren_group)\n            paren_group = \"\"\n      \
    \  end\n    end\n    return paren_groups\nend", "    # TODO: Implement this function\n\
    \    return []\nend", "    # TODO: implement this function\n    return []\nend",
  "    # YOUR CODE HERE\n    return []\nend", "    # your code here\nend", "    #\
    \ YOUR CODE HERE\n    return []\nend", "    # YOUR CODE HERE\n    return []\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\n    return []\nend",
  "    # your code here\nend", "    # YOUR CODE HERE\n    return []\nend", "    #\
    \ YOUR CODE HERE\n    return []\nend", "    # YOUR CODE HERE\n    return []\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
