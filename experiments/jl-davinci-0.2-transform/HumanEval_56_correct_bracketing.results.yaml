language: jl
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<'\n        if brackets[end] == '>'\n    \
    \        return correct_bracketing(brackets[2:end-1])\n        else\n        \
    \    return false\n        end\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiw0d8vvs.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpiw0d8vvs.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiw0d8vvs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiw0d8vvs.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiw0d8vvs.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiw0d8vvs.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiw0d8vvs.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiw0d8vvs.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiw0d8vvs.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiw0d8vvs.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[end]\
    \ == '<'\n        return false\n    elseif brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[1:end-1])\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp289lk5rx.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp289lk5rx.jl:35\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp289lk5rx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp289lk5rx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp289lk5rx.jl:36\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp289lk5rx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp289lk5rx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp289lk5rx.jl:37\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp289lk5rx.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp289lk5rx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp289lk5rx.jl:38\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp289lk5rx.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp289lk5rx.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n % 2 != 0\n        return\
    \ false\n    end\n    if brackets[1] == \">\"\n        return false\n    end\n\
    \    if brackets[n] == \"<\"\n        return false\n    end\n    for i in 1:n-1\n\
    \        if brackets[i] == \"<\" && brackets[i+1] == \"<\"\n            return\
    \ false\n        end\n        if brackets[i] == \">\" && brackets[i+1] == \">\"\
    \n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn0l73s9z.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpn0l73s9z.jl:47\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0l73s9z.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0l73s9z.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpn0l73s9z.jl:49\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0l73s9z.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0l73s9z.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpn0l73s9z.jl:52\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0l73s9z.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0l73s9z.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpn0l73s9z.jl:53\n  Expression: candidate(\"<><><<><>><>>><>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0l73s9z.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0l73s9z.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp819g7qbj.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp819g7qbj.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp819g7qbj.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp819g7qbj.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ []\n    for bracket in brackets\n        if bracket == '<'\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return isempty(bracket_stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp819g7qbj.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp819g7qbj.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp819g7qbj.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp819g7qbj.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqnc_gd_a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqnc_gd_a.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqnc_gd_a.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '<'\n            push!(stack, i)\n      \
    \  elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqnc_gd_a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqnc_gd_a.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqnc_gd_a.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '<'\n            push!(stack, i)\n      \
    \  elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '<'\n            push!(stack, i)\n      \
    \  elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if isempty(stack)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqnc_gd_a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqnc_gd_a.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqnc_gd_a.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '<'\n            push!(stack, i)\n      \
    \  elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdvhq31gg.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdvhq31gg.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test Failed at /tmp/tmpdvhq31gg.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp819g7qbj.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp819g7qbj.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp819g7qbj.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp819g7qbj.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp819g7qbj.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp819g7qbj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqnc_gd_a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqnc_gd_a.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqnc_gd_a.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    if open_brackets == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[end]\
    \ == '<'\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6_dzo9_.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpq6_dzo9_.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\ntest set: Test Failed at /tmp/tmpq6_dzo9_.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpq6_dzo9_.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ []\n    for bracket in brackets\n        if bracket == '<'\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return isempty(bracket_stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '>' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp11g_fj0d.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp11g_fj0d.jl:40\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp11g_fj0d.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp11g_fj0d.jl:38\ntest set: Test Failed at /tmp/tmp11g_fj0d.jl:41\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp11g_fj0d.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp11g_fj0d.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp11g_fj0d.jl:42\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp11g_fj0d.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp11g_fj0d.jl:38\ntest set: Test Failed at /tmp/tmp11g_fj0d.jl:48\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp11g_fj0d.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp11g_fj0d.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    bracket_count += 1\n        elseif brackets[i] == '>'\n            bracket_count\
    \ -= 1\n        end\n        if bracket_count < 0\n            return false\n\
    \        end\n    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo1nzzngk.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpo1nzzngk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    else\n        if brackets[1] == \"<\"\n            if brackets[end]\
    \ == \">\"\n                return correct_bracketing(brackets[2:end-1])\n   \
    \         else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnkyqhdw2.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpnkyqhdw2.jl:35\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnkyqhdw2.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnkyqhdw2.jl:34\ntest set: Test Failed at /tmp/tmpnkyqhdw2.jl:36\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnkyqhdw2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnkyqhdw2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnkyqhdw2.jl:37\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnkyqhdw2.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnkyqhdw2.jl:34\ntest set: Test Failed at /tmp/tmpnkyqhdw2.jl:38\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnkyqhdw2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnkyqhdw2.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    i = 1\n    while i <= n\n     \
    \   if brackets[i] == \"<\"\n            j = i + 1\n            while j <= n\n\
    \                if brackets[j] == \">\"\n                    break\n        \
    \        end\n                j += 1\n            end\n            if j == n +\
    \ 1\n                return false\n            end\n            brackets = brackets[1:i-1]\
    \ * brackets[j+1:n]\n            n = length(brackets)\n            i = 1\n   \
    \     else\n            i += 1\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoqb28i1z.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpoqb28i1z.jl:58\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoqb28i1z.jl:58 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpoqb28i1z.jl:53\ntest set: Test Failed at /tmp/tmpoqb28i1z.jl:59\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoqb28i1z.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoqb28i1z.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpoqb28i1z.jl:61\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoqb28i1z.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoqb28i1z.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpoqb28i1z.jl:63\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoqb28i1z.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoqb28i1z.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpoqb28i1z.jl:64\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expa"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '<'\n            push!(stack, i)\n      \
    \  elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        if brackets[end] == '<'\n            return false\n        elseif\
    \ brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi7liy69f.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpi7liy69f.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\ntest set: Test Failed at /tmp/tmpi7liy69f.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi7liy69f.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in 1:length(brackets)\n        if brackets[i] == '<'\n            push!(stack,\
    \ brackets[i])\n        elseif brackets[i] == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo1nzzngk.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpo1nzzngk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        if brackets[2] == '>'\n            return correct_bracketing(brackets[3:end])\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmf9bf4cf.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpmf9bf4cf.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\ntest set: Test Failed at /tmp/tmpmf9bf4cf.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmf9bf4cf.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\ntest set: Test Failed at /tmp/tmpmf9bf4cf.jl:42\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[end]\
    \ == '<'\n        return false\n    elseif brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[1:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx_y768lx.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpx_y768lx.jl:35\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx_y768lx.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx_y768lx.jl:34\ntest set: Test Failed at /tmp/tmpx_y768lx.jl:36\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_y768lx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_y768lx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpx_y768lx.jl:37\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx_y768lx.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx_y768lx.jl:34\ntest set: Test Failed at /tmp/tmpx_y768lx.jl:38\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_y768lx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_y768lx.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdvhq31gg.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdvhq31gg.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test Failed at /tmp/tmpdvhq31gg.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo1nzzngk.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpo1nzzngk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        else\n            return correct_bracketing(brackets[2:end])\n\
    \        end\n    else\n        if length(brackets) == 1\n            return true\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpktnr6qz4.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpktnr6qz4.jl:39\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpktnr6qz4.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpktnr6qz4.jl:34\ntest set: Test Failed at /tmp/tmpktnr6qz4.jl:40\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpktnr6qz4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpktnr6qz4.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpktnr6qz4.jl:43\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpktnr6qz4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpktnr6qz4.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpktnr6qz4.jl:44\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpktnr6qz4.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpktnr6qz4.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpktnr6qz4.jl:45\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansi"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            count += 1\n   \
    \     elseif bracket == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    i = 1\n    while i <= n\n        if brackets[i] == '<'\n            i +=\
    \ 1\n        elseif brackets[i] == '>'\n            if i == 1\n              \
    \  return false\n            else\n                i -= 1\n            end\n \
    \       end\n        i += 1\n    end\n    return i == 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpuaputweh.jl:35\n  Expression: candidate("<>")
    == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpuaputweh.jl:35 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpuaputweh.jl:34\n'''
  timestamp: 1659799732
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo1nzzngk.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpo1nzzngk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[end]\
    \ == '<'\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6_dzo9_.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpq6_dzo9_.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\ntest set: Test Failed at /tmp/tmpq6_dzo9_.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpq6_dzo9_.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\"\n     \
    \   return correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == \"\
    >\"\n        return correct_bracketing(brackets[1:n-1])\n    end\n    return correct_bracketing(brackets[1:n-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0livz7hr.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp0livz7hr.jl:40\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0livz7hr.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0livz7hr.jl:39\ntest set: Test Failed at /tmp/tmp0livz7hr.jl:41\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0livz7hr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0livz7hr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp0livz7hr.jl:42\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0livz7hr.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0livz7hr.jl:39\ntest set: Test Failed at /tmp/tmp0livz7hr.jl:43\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0livz7hr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0livz7hr.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799731
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        if brackets[2] == '>'\n            return correct_bracketing(brackets[3:end])\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmf9bf4cf.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpmf9bf4cf.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\ntest set: Test Failed at /tmp/tmpmf9bf4cf.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmf9bf4cf.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\ntest set: Test Failed at /tmp/tmpmf9bf4cf.jl:42\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf9bf4cf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf9bf4cf.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[end]\
    \ == '<'\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6_dzo9_.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpq6_dzo9_.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\ntest set: Test Failed at /tmp/tmpq6_dzo9_.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpq6_dzo9_.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6_dzo9_.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6_dzo9_.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    bracket_count += 1\n        elseif brackets[i] == '>'\n            bracket_count\
    \ -= 1\n        end\n        if bracket_count < 0\n            return false\n\
    \        end\n    end\n    if bracket_count == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        if brackets[end] == '<'\n            return false\n        elseif\
    \ brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi7liy69f.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpi7liy69f.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\ntest set: Test Failed at /tmp/tmpi7liy69f.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi7liy69f.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_w697qdz.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp_w697qdz.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_w697qdz.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_w697qdz.jl:30\ntest set: Test Failed at /tmp/tmp_w697qdz.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_w697qdz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_w697qdz.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_w697qdz.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_w697qdz.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_w697qdz.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799731
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for b in brackets\n        if b == '<'\n            open_count += 1\n   \
    \     elseif b == '>'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqnc_gd_a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqnc_gd_a.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqnc_gd_a.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    i = 1\n    while i <= n\n       \
    \ if brackets[i] == '<'\n            j = i + 1\n            while j <= n\n   \
    \             if brackets[j] == '>'\n                    break\n             \
    \   end\n                j += 1\n            end\n            if j > n\n     \
    \           return false\n            end\n            i = j + 1\n        else\n\
    \            i += 1\n        end\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx8c2f9oh.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmpx8c2f9oh.jl:56\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx8c2f9oh.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx8c2f9oh.jl:51\ntest set: Test Failed at /tmp/tmpx8c2f9oh.jl:61\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx8c2f9oh.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx8c2f9oh.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpx8c2f9oh.jl:62\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx8c2f9oh.jl:62 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx8c2f9oh.jl:51\ntest set: Test Failed at /tmp/tmpx8c2f9oh.jl:63\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx8c2f9oh.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx8c2f9oh.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799731
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_bracket_count\
    \ += 1\n        elseif bracket == '>'\n            open_bracket_count -= 1\n \
    \       end\n        if open_bracket_count < 0\n            return false\n   \
    \     end\n    end\n    return open_bracket_count == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    i = 1\n    while i <= n\n     \
    \   if brackets[i] == \"<\"\n            j = i + 1\n            while j <= n\n\
    \                if brackets[j] == \">\"\n                    break\n        \
    \        end\n                j += 1\n            end\n            if j == n +\
    \ 1\n                return false\n            end\n            if j == i + 1\n\
    \                return false\n            end\n            brackets = brackets[1:i-1]\
    \ * brackets[j+1:n]\n            n = length(brackets)\n            i = 1\n   \
    \     else\n            i += 1\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxww3zrui.jl:54

    '
  stdout: "test set: Test Failed at /tmp/tmpxww3zrui.jl:61\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxww3zrui.jl:61 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxww3zrui.jl:56\ntest set: Test Failed at /tmp/tmpxww3zrui.jl:62\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxww3zrui.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxww3zrui.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpxww3zrui.jl:64\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxww3zrui.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxww3zrui.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpxww3zrui.jl:66\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxww3zrui.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxww3zrui.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpxww3zrui.jl:67\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expa"
  timestamp: 1659799731
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = Stack()\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp9ha9y7tf.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp9ha9y7tf.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp9ha9y7tf.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ha9y7tf.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ha9y7tf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9ha9y7tf.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp9ha9y7tf.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ha9y7tf.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ha9y7tf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9ha9y7tf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp9ha9y7tf.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ha9y7tf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ha9y7tf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9ha9y7tf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmp9ha9y7tf.jl:14\n   [2] macro expansion\n     @ ~/.conda/"
  timestamp: 1659799732
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        elseif brackets[end] == '>'\n      \
    \      return correct_bracketing(brackets[2:end-1])\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx78c46g7.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpx78c46g7.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx78c46g7.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx78c46g7.jl:32\ntest set: Test Failed at /tmp/tmpx78c46g7.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx78c46g7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx78c46g7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx78c46g7.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx78c46g7.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx78c46g7.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799731
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_bracket_count\
    \ += 1\n        elseif bracket == '>'\n            open_bracket_count -= 1\n \
    \       end\n        if open_bracket_count < 0\n            return false\n   \
    \     end\n    end\n    return open_bracket_count == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[end] == '>'\n        return correct_bracketing(brackets[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf1nwnk2p.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpf1nwnk2p.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf1nwnk2p.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf1nwnk2p.jl:30\ntest set: Test Failed at /tmp/tmpf1nwnk2p.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf1nwnk2p.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf1nwnk2p.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpf1nwnk2p.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf1nwnk2p.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf1nwnk2p.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799731
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        if length(brackets) == 1\n           \
    \ return false\n        else\n            return correct_bracketing(brackets[2:end])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5letawix.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp5letawix.jl:31\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5letawix.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5letawix.jl:30\ntest set: Test Failed at /tmp/tmp5letawix.jl:32\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5letawix.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5letawix.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5letawix.jl:33\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5letawix.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5letawix.jl:30\ntest set: Test Failed at /tmp/tmp5letawix.jl:34\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5letawix.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5letawix.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5letawix.jl:37\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659799731
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo1nzzngk.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpo1nzzngk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test Failed at /tmp/tmpo1nzzngk.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1nzzngk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1nzzngk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo1nzzngk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    if open_brackets == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            n += 1\n \
    \       elseif brackets[i] == '>'\n            n -= 1\n        end\n        if\
    \ n < 0\n            return false\n        end\n    end\n    return n == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    i = 1\n    while i <= n\n       \
    \ if brackets[i] == '<'\n            j = i + 1\n            while j <= n\n   \
    \             if brackets[j] == '>'\n                    break\n             \
    \   end\n                j += 1\n            end\n            if j == n + 1\n\
    \                return false\n            end\n            if j == i + 1\n  \
    \              return false\n            end\n            i = j + 1\n        else\n\
    \            i += 1\n        end\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf3t4c45p.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpf3t4c45p.jl:55\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf3t4c45p.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf3t4c45p.jl:54\ntest set: Test Failed at /tmp/tmpf3t4c45p.jl:56\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3t4c45p.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3t4c45p.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpf3t4c45p.jl:57\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf3t4c45p.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf3t4c45p.jl:54\ntest set: Test Failed at /tmp/tmpf3t4c45p.jl:58\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3t4c45p.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3t4c45p.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpf3t4c45p.jl:64\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659799732
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdvhq31gg.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdvhq31gg.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test Failed at /tmp/tmpdvhq31gg.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdvhq31gg.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdvhq31gg.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test Failed at /tmp/tmpdvhq31gg.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        if brackets[end] == '<'\n            return false\n        elseif\
    \ brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi7liy69f.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpi7liy69f.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\ntest set: Test Failed at /tmp/tmpi7liy69f.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi7liy69f.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7liy69f.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi7liy69f.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open = 0\n \
    \   for b in brackets\n        if b == '<'\n            num_open += 1\n      \
    \  elseif b == '>'\n            num_open -= 1\n        end\n        if num_open\
    \ < 0\n            return false\n        end\n    end\n    return num_open ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799731
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    if open_brackets == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799731
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == \"<\" && brackets[n] != \">\"\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] != \"<\" && brackets[n] == \">\"\n        return\
    \ correct_bracketing(brackets[1:n-1])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpiq5f1364.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpiq5f1364.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpiq5f1364.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiq5f1364.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiq5f1364.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpiq5f1364.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpiq5f1364.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiq5f1364.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiq5f1364.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpiq5f1364.jl:44\n  Test thr"
  timestamp: 1659799734
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht59io1r.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpht59io1r.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht59io1r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht59io1r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpht59io1r.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in brackets\n        if i == \"<\"\n            open_brackets +=\
    \ 1\n        elseif i == \">\"\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm7_8ylsj.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpm7_8ylsj.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm7_8ylsj.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm7_8ylsj.jl:31\ntest set: Test Failed at /tmp/tmpm7_8ylsj.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm7_8ylsj.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm7_8ylsj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm7_8ylsj.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm7_8ylsj.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm7_8ylsj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm7_8ylsj.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm7_8ylsj.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm7_8ylsj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm7_8ylsj.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799732
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == '>'\n    \
    \    return correct_bracketing(brackets[1:n-1])\n    end\n    return correct_bracketing(brackets[1:n-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmvyypa76.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpmvyypa76.jl:40\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmvyypa76.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmvyypa76.jl:39\ntest set: Test Failed at /tmp/tmpmvyypa76.jl:41\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvyypa76.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvyypa76.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpmvyypa76.jl:42\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmvyypa76.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmvyypa76.jl:39\ntest set: Test Failed at /tmp/tmpmvyypa76.jl:43\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmvyypa76.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmvyypa76.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799732
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        elseif brackets[end] == '>'\n      \
    \      return correct_bracketing(brackets[2:end-1])\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx78c46g7.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpx78c46g7.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx78c46g7.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx78c46g7.jl:32\ntest set: Test Failed at /tmp/tmpx78c46g7.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx78c46g7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx78c46g7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx78c46g7.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx78c46g7.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx78c46g7.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799731
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq6ddo5q4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpq6ddo5q4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test Failed at /tmp/tmpq6ddo5q4.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ddo5q4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ddo5q4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq6ddo5q4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp50sq1ki3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp50sq1ki3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp50sq1ki3.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50sq1ki3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp50sq1ki3.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqnc_gd_a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqnc_gd_a.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqnc_gd_a.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\ntest set: Test Failed at /tmp/tmpqnc_gd_a.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnc_gd_a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnc_gd_a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659799730
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdvhq31gg.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdvhq31gg.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test Failed at /tmp/tmpdvhq31gg.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvhq31gg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvhq31gg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdvhq31gg.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1659799730
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<' && brackets[n]\
    \ == '>'\n        return correct_bracketing(brackets[2:n-1])\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvkac7xyh.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpvkac7xyh.jl:38\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvkac7xyh.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvkac7xyh.jl:36\ntest set: Test Failed at /tmp/tmpvkac7xyh.jl:39\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkac7xyh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkac7xyh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvkac7xyh.jl:40\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvkac7xyh.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvkac7xyh.jl:36\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1659799732
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '<'\n            push!(stack, i)\n      \
    \  elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659799728
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
