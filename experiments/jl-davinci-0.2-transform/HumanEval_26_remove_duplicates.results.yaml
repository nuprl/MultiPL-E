language: jl
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(unique, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzngptzwj.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpzngptzwj.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzngptzwj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzngptzwj.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for n in numbers\n        push!(unique_numbers,\
    \ n)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsfzn0ko1.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpsfzn0ko1.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsfzn0ko1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsfzn0ko1.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpsfzn0ko1.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsfzn0ko1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsfzn0ko1.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptar4su3w.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmptar4su3w.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptar4su3w.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptar4su3w.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptar4su3w.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptar4su3w.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptar4su3w.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwb7zinr6.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpwb7zinr6.jl:14\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] remove_duplicates(numbers::Vector{Int64})\n  \
    \   @ Main /tmp/tmpwb7zinr6.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwb7zinr6.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwb7zinr6.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpwb7zinr6.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] remove_duplicates(numbers::Vector{Int64})\n  \
    \   @ Main /tmp/tmpwb7zinr6.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro e"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbwcbbsgx.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpbwcbbsgx.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbwcbbsgx.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbwcbbsgx.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptar4su3w.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmptar4su3w.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptar4su3w.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptar4su3w.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptar4su3w.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptar4su3w.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptar4su3w.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpemhu2lol.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpemhu2lol.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemhu2lol.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemhu2lol.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0fs_qy7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpx0fs_qy7.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0fs_qy7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0fs_qy7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0fs_qy7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpx0fs_qy7.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0fs_qy7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0fs_qy7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0fs_qy7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpx0fs_qy7.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0fs_qy7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0fs_qy7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpemhu2lol.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpemhu2lol.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemhu2lol.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemhu2lol.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptar4su3w.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmptar4su3w.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptar4su3w.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptar4su3w.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptar4su3w.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptar4su3w.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptar4su3w.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4dfhokdr.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmp4dfhokdr.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4dfhokdr.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dfhokdr.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp4dfhokdr.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4dfhokdr.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dfhokdr.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgr49jv87.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpgr49jv87.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr49jv87.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr49jv87.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgr49jv87.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr49jv87.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr49jv87.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpemhu2lol.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpemhu2lol.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemhu2lol.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemhu2lol.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0fs_qy7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpx0fs_qy7.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0fs_qy7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0fs_qy7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpemhu2lol.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpemhu2lol.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemhu2lol.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemhu2lol.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgr49jv87.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpgr49jv87.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr49jv87.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr49jv87.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgr49jv87.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr49jv87.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr49jv87.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt7uqh3cz.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpt7uqh3cz.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7uqh3cz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7uqh3cz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgr49jv87.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpgr49jv87.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr49jv87.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr49jv87.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgr49jv87.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr49jv87.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr49jv87.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
