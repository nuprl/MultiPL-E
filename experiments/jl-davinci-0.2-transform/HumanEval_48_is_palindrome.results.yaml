language: jl
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    elseif text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif length(text)\
    \ == 2\n        return text[1] == text[2]\n    else\n        return (text[1] ==\
    \ text[end]) && is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif length(text)\
    \ == 2\n        return text[1] == text[end]\n    else\n        if text[1] == text[end]\n\
    \            return is_palindrome(text[2:end-1])\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    text == reverse(text)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif length(text)\
    \ == 2\n        return text[1] == text[2]\n    else\n        return text[1] ==\
    \ text[end] && is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    end\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    end\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    else\n        return text == reverse(text)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif length(text)\
    \ == 2\n        if text[1] == text[2]\n            return true\n        else\n\
    \            return false\n        end\n    else\n        if text[1] == text[end]\n\
    \            return is_palindrome(text[2:end-1])\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    else\n        return text == reverse(text)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif length(text)\
    \ == 2\n        return text[1] == text[2]\n    else\n        return text[1] ==\
    \ text[end] && is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    # TODO: implement this function\n  \
    \  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp57pw74n4.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp57pw74n4.jl:21\n  Expression: candidate(\"\
    \") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp57pw74n4.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp57pw74n4.jl:20\ntest set: Test Failed at /tmp/tmp57pw74n4.jl:22\n\
    \  Expression: candidate(\"aba\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57pw74n4.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57pw74n4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp57pw74n4.jl:23\n  Expression: candidate(\"aaaaa\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57pw74n4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57pw74n4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp57pw74n4.jl:25\n  Expression: candidate(\"xywyx\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57pw74n4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57pw74n4.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659794547
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    return text == reverse(text)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        return text[1] == text[end] && is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if text == \"\"\n        return true\n\
    \    end\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif length(text)\
    \ == 2\n        return text[1] == text[2]\n    else\n        return text[1] ==\
    \ text[end] && is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        if text[1] == text[end]\n            return is_palindrome(text[2:end-1])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif text[1]\
    \ == text[end]\n        return is_palindrome(text[2:end-1])\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    elseif length(text) == 1\n        return true\n    elseif length(text)\
    \ == 2\n        return text[1] == text[2]\n    else\n        return text[1] ==\
    \ text[end] && is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659794546
