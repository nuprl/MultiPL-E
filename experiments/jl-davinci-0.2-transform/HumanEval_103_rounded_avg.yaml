name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n,\
    \ m]))))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return -1\n  \
    \  end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(Int64, \"0b\", base(avg, 2))\nend", "    if n > m\n\
    \        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return\
    \ \"0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n    end\n    return\
    \ \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n   \
    \     return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n +\
    \ m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\"\
    \ * string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return -1\n\
    \    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\
    \nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\nend",
  "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n   \
    \ end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return string(Int64, \"0b\", binary(avg))\nend", "    if n > m\n \
    \       return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"\
    0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n    end\n    return\
    \ \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n   \
    \     return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg,\
    \ 2))\"\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return -1\n  \
    \  end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n,\
    \ m]))))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return -1\n  \
    \  end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n,\
    \ m]))))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return \"0b$(dec2bin(avg))\"\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(dec2bin(avg))\"\
    \nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n  \
    \      return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n +\
    \ m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(sum(n:m)/(m-n+1))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b\" *\
    \ string(dec2bin(avg))\nend", "    if n > m\n        return -1\n    end\n    return\
    \ \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "  \
    \  if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return\
    \ \"0b\" * string(avg)\nend", "    if n > m\n        return -1\n    end\n    return\
    \ \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n   \
    \     return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b\"\
    \ * string(dec2bin(avg))\nend", "    if n > m\n        return -1\n    end\n  \
    \  return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n    \
    \    return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m)\
    \ / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n,\
    \ m]))))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(Int(round(mean([n, m]))))\nend", " \
    \   if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return string(Int64, \"0b\", base(avg, 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return -1\n\
    \    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend",
  "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return \"0b$(dec2bin(avg))\"\nend", "    if n > m\n        return -1\n  \
    \  end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(dec2bin(avg))\"\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    avg = round(Int64, (n + m) / 2)\n    return \"0b$(dec2bin(avg))\"\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int(round(mean([n, m]))))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n\
    \    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n,\
    \ m]))))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg,\
    \ 2))\"\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(Int(round(mean([n, m]))))\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(Int,\
    \ (n + m) / 2)))\nend", "    if n > m\n        return -1\n    end\n    return\
    \ \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n   \
    \     return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n +\
    \ m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(dec2bin(avg))\"\nend", "    if n > m\n      \
    \  return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m)\
    \ / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n  \
    \      return -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n\
    \ > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return\
    \ \"0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n    end\n    return\
    \ \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n   \
    \     return -1\n    end\n    return \"0b\" * string(Int(round(sum(n:m)/(m-n+1))))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return \"0b$(dec2bin(avg))\"\nend", "    if n > m\n        return\
    \ -1\n    end\n    return Int(round(mean([n:m]))) |> Int64 |> binary\nend", " \
    \   if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n   \
    \ end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n  \
    \      return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n +\
    \ m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\"\
    \ * string(Int(round(mean([n, m]))))\nend", "    if n > m\n        return -1\n\
    \    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg,\
    \ 2))\"\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    sum = 0\n    for i in n:m\n        sum += i\n    end\n    avg = round(Int64,\
    \ sum / (m - n + 1))\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n \
    \       return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n\
    \ + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\"\
    \ * string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return -1\n\
    \    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n  \
    \      return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"\
    0b$(dec2bin(avg))\"\nend", "    if n > m\n        return -1\n    end\n    return\
    \ Int64(round(mean([n:m])))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n  \
    \      return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n +\
    \ m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\"\
    \ * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n\
    \    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(dec2bin(avg))\"\
    \nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    return \"0b\" * string(Int(round(mean([n:m]))))\nend", "    if n > m\n  \
    \      return -1\n    end\n    return Int(round(mean([n:m])))\nend", "    if n\
    \ > m\n        return -1\n    end\n    return Int(round(mean([n:m])))\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m)\
    \ / 2)\n    return \"0b$(dec2bin(avg))\"\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg,\
    \ 2))\"\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int(round(mean([n:m]))))\nend", "    if n > m\n        return -1\n  \
    \  end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\n\
    end", "    if n > m\n        return -1\n    end\n    return convert(Int64, round(mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n,\
    \ m]))))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, mean([n:m])))\n\
    end", "    if n > m\n        return -1\n    end\n    sum = 0\n    for i in n:m\n\
    \        sum += i\n    end\n    avg = round(Int64, sum / (m - n + 1))\n    return\
    \ \"0b$(Int(avg, 2))\"\nend", "    if n > m\n        return -1\n    end\n    return\
    \ \"0b\" * string(Int(round(mean([n, m]))))\nend", "    if n > m \n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg,\
    \ 2))\"\nend", "    if n > m\n        return -1\n    end\n    return \"0b\" *\
    \ string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(Int(round(mean([n, m]))))\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64, round(Int64,\
    \ (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return \"0b\" * string(Int64, round(Int64, (n + m) /\
    \ 2))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, 2))\"\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(Int(avg,\
    \ 2))\"\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
