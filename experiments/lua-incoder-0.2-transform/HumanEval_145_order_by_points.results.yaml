language: lua
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j\
    \ = 1, 10 do\n      sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for\
    \ i = 1, #sorted_nums do\n    sorted_nums_copy[#sorted_nums_copy + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9tah4ud.lua:15:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpl9tah4ud.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpl9tah4ud.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n\
    \    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfujbxl4.lua:24:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpzfujbxl4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  if #nums == 0 then\n    return {}\n  end\n  local sums = {}\n  for i = 1, #nums\
    \ do\n    local sum = sums[#sums] + nums[i]\n    sums[#sums] = sum\n  end\n  local\
    \ sorted = {}\n  for i = 1, #sums do\n    table.insert(sorted, sums[i])\n  end\n\
    \  table.sort(sorted, function(a, b)\n    return #a > #b\n  end)\n  return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp073r5uon.lua:16:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp073r5uon.lua:16: in function 'candidate'\n\t/tmp/tmp073r5uon.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local num_sum = tonumber(string.format(\"%0.1f\", num))\n\
    \    local index = num_sums[num_sum]\n    if index then\n      nums_sorted[index]\
    \ = num\n      num_sums[num_sum] = nil\n    else\n      num_sums[num_sum] = i\n\
    \    end\n  end\n  for num_sum, index in pairs(num_sums) do\n    nums_sorted[index]\
    \ = nums[num_sum]\n  end\n  return nums_sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1urximbg.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1}\nstack traceback:\n\t/tmp/tmp1urximbg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  local index = 1\n  for _, num in pairs(nums) do\n\
    \    local digits = math.floor(math.log10(num))\n    local sum = 0\n    for i\
    \ = 1, digits do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n\
    \    end\n    index = index + 1\n    if nums_sorted[sum] == nil then\n      table.insert(nums_sorted,\
    \ sum)\n    end\n  end\n  table.sort(nums_sorted, function(a, b)\n    return a\
    \ < b\n  end)\n  return nums_sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8niop3u.lua:34:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t\
    /tmp/tmpw8niop3u.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums) do\n\
    \    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a < num_sum - b end)\n  return nums_sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbwcd4mr.lua:24:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {11, 1, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpxbwcd4mr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, #v do\n      sum = sum + v[i]\n    end\n    table.insert(result, v)\n\
    \    if sum > 0 then\n      table.sort(result, function(a, b) return sum - a <\
    \ sum - b end)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcijn95f7.lua:14:\
    \ attempt to get length of local 'v' (a number value)\nstack traceback:\n\t/tmp/tmpcijn95f7.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcijn95f7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for _, v in pairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, #v do\n      sum = sum + tonumber(string.format(\"%.\" .. (#v - i) ..\
    \ \"d\", v[i]))\n    end\n    table.insert(result, v)\n    if sum > 0 then\n \
    \     table.sort(result, function(a, b)\n        return sum - tonumber(string.format(\"\
    %.\" .. (#b - #a) .. \"d\", b))\n      end)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfddxevjm.lua:14:\
    \ attempt to get length of local 'v' (a number value)\nstack traceback:\n\t/tmp/tmpfddxevjm.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpfddxevjm.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    num_sum = num_sum + num_digits\n    if num_sum > 0 then\n      nums_sorted[num_sum]\
    \ = num\n    end\n  end\n  local num_sum = 0\n  for i = 1, #nums_sorted do\n \
    \   local num = nums_sorted[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    num_sum = num_sum + num_digits\n  end\n  if num_sum > 0\
    \ then\n    nums_sorted = table.sort(nums_sorted)\n  end\n  return nums_sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp117h1i69.lua:36:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp117h1i69.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j\
    \ = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted)\n  return nums_sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4n34fglu.lua:14:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmp4n34fglu.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp4n34fglu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, 10 do\n      sum = sum + math.floor(v / math.pow(10, i))\n      v = v\
    \ % (math.pow(10, i))\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp0eeo87.lua:27:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-2, -2, -1, 0, 1}\nstack traceback:\n\
    \t/tmp/tmpzp0eeo87.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, 9 do\n      sum = sum + math.floor(v / math.pow(10, i))\n      v = math.mod(v,\
    \ math.pow(10, i))\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3fno6ry.lua:27:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-10, -10, -9, 0, 1}\nstack traceback:\n\
    \t/tmp/tmpf3fno6ry.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1,\
    \ 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    table.insert(result,\
    \ sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2agq8t7.lua:15:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpi2agq8t7.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpi2agq8t7.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, 10 do\n      sum = sum + math.floor(v / math.pow(10, i))\n      v = v\
    \ % (math.pow(10, i))\n    end\n    result[sum] = v\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhzvh0zh.lua:26:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-2=8, -1=9, 0=1, 1}\nstack traceback:\n\
    \t/tmp/tmpwhzvh0zh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n\
    \    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfujbxl4.lua:24:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpzfujbxl4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  for _, num in ipairs(nums) do\n    local digits =\
    \ num:reverse():gsub(\"%d+\", \"\"):reverse()\n    local sum_digits = tonumber(digits)\n\
    \    if sum_digits == nil then\n      sum_digits = 0\n    end\n    local index\
    \ = #nums_sorted\n    nums_sorted[index] = num\n  end\n  return table.concat(nums_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdg2ump9.lua:13:\
    \ attempt to index local 'num' (a number value)\nstack traceback:\n\t/tmp/tmpfdg2ump9.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpfdg2ump9.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, 10 do\n      sum = sum + math.floor(v / math.pow(10, i))\n      v = v\
    \ % (math.pow(10, i))\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp0eeo87.lua:27:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-2, -2, -1, 0, 1}\nstack traceback:\n\
    \t/tmp/tmpzp0eeo87.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n  \
    \  local digits = math.floor(math.log(num) / math.log(10))\n    local sum_of_digits\
    \ = math.fmod(num, math.pow(10, digits))\n    local index = #nums_sorted\n   \
    \ if sum_of_digits > 0 then\n      index = index + 1\n    end\n    nums_sorted[index]\
    \ = num\n  end\n  return nums_sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13sqadik.lua:28:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {0=1, -12}\nstack traceback:\n\t/tmp/tmp13sqadik.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, 9 do\n      sum = sum + v % 10\n      v = v // 10\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9qeqpqtr.lua:16: unexpected symbol near ''/''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local nums_sorted = {}\n  for i = 1, #nums do\n    local digits = nums:sub(i,\
    \ i):gsub(\"%d+\", \"\"):gsub(\"%d*\", \"\"):gsub(\"%d\", \"\")\n    local sum_digits\
    \ = tonumber(digits)\n    if sum_digits == 0 then\n      nums_sorted[i] = nums[i]\n\
    \    else\n      local index = #nums_sorted\n      while index > 0 and sum_digits\
    \ > nums_sorted[index - 1] do\n        index = index - 1\n      end\n      nums_sorted[index\
    \ + 1] = nums[i]\n    end\n  end\n  return nums_sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjq7u0x97.lua:13:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpjq7u0x97.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpjq7u0x97.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
