name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is happy\
  \ or not.\n-- A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n-- >>> is_happy(aa)\n\
  -- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n-- false\n-- >>>\
  \ is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local happy = false\n  local len = #s\n  if len < 3 then\n    return\
    \ happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n\
    \      break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n     \
    \ if s[i + 3] ~= s[i + 3] then\n        happy = false\n        break\n      end\n\
    \    end\n  end\n  return happy\nend", "  local happy = false\n  local count =\
    \ 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy = false\n \
    \     break\n    end\n    count = count + 1\n  end\n  if count >= 3 and count\
    \ == #s then\n    happy = true\n  end\n  return happy\nend", "  local count =\
    \ 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      count = count + 1\n\
    \    else\n      count = count + 1\n    end\n    if count > 3 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i - 1] == s[i] then\n      count = count + 1\n    else\n   \
    \   count = count\n    end\n  end\n  return count >= 3 and count == #s and #s\
    \ % 3 == 0\nend", "  -- Your code here\n  local happy = false\n  local count =\
    \ 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i] ~= s[count + 1]\
    \ then\n        happy = false\n        break\n      end\n      count = count +\
    \ 1\n    else\n      if s[i] ~= s[count + 1] then\n        happy = false\n   \
    \     break\n      end\n      count = count + 1\n    end\n  end\n  if happy ==\
    \ true then\n    return true\n  else\n    return false\n  end\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2]\
    \ then\n      count = count + 1\n    end\n  end\n  return count >= 3 and count\
    \ == #s or nil\nend", "  local happy = false\n  local len = #s\n  if len < 3 then\n\
    \    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n    \
    \  happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for i =\
    \ 1, len do\n      if s[i+i] ~= s[i+i] then\n        happy = false\n        break\n\
    \      end\n    end\n  end\n  return happy\nend", "    local happy = false\n \
    \   local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i]\
    \ ~= s[i - 2] then\n            happy = true\n        end\n        count = count\
    \ + 1\n        if count == 3 then\n            happy = false\n        end\n  \
    \  end\n    return happy\nend", "  local count = 0\n  for i = 1, #s do\n    count\
    \ = count + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for\
    \ i = 1, #s do\n    count = count + 1\n    if count > 3 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local happy = false\n  local n = 1\n\
    \  while n <= #s do\n    if s[n] == s[n+1] then\n      n = n + 1\n    else\n \
    \     happy = true\n      break\n    end\n  end\n  return happy\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n \
    \   if s[i] ~= s[i+1] then happy = true end\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n\
    \        happy = false\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n      n = n + 1\n    end\n  end\n  return n >= 3 and string.sub(s,\
    \ 1, 3) == string.sub(s, 3, #s)\nend", "  local happy = false\n  local len = #s\n\
    \  if len < 3 then\n    return happy\n  end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[i] then\n      happy = false\n      break\n    end\n  end\n  if len > 3\
    \ then\n    for i = 1, len do\n      if s[i+1] ~= s[i+2] then\n        happy =\
    \ false\n        break\n      end\n    end\n  end\n  return happy\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= string.sub(s, i\
    \ - 1, i) then\n      count = count + 1\n    end\n  end\n  return count >= 3 and\
    \ count == #s or false\nend", "    local count = 0\n    for i = 1, #s do\n   \
    \     if s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n \
    \   end\n    return count >= 3 and count % 3 == 0\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy\
    \ = false\n      break\n    end\n    count = count + 1\n  end\n  if count >= 3\
    \ and happy == false then\n    happy = true\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n\
    \  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n      happy = true\n     \
    \ break\n    end\n  end\n  return happy\nend", "  local happy = false\n  local\
    \ len = #s\n  if len < 3 then return false end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[i] then return false end\n  end\n  for i = 1, len do\n    if s[i+1] ~=\
    \ s[i] then return false end\n  end\n  for i = 1, len do\n    if s[i+2] ~= s[i]\
    \ then return false end\n  end\n  return true\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy\
    \ = false\n      break\n    end\n    count = count + 1\n    if count > 3 then\n\
    \      happy = false\n      break\n    end\n  end\n  return happy\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
