name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is happy\
  \ or not.\n-- A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n-- >>> is_happy(aa)\n\
  -- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n-- false\n-- >>>\
  \ is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local happy = false\n  local len = #s\n  if len < 3 then\n    return\
    \ happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n\
    \      break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n     \
    \ if s[i + 3] ~= s[i + 3] then\n        happy = false\n        break\n      end\n\
    \    end\n  end\n  return happy\nend", "  local happy = false\n  local count =\
    \ 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy = false\n \
    \     break\n    end\n    count = count + 1\n  end\n  if count >= 3 and count\
    \ == #s then\n    happy = true\n  end\n  return happy\nend", "  local count =\
    \ 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      count = count + 1\n\
    \    else\n      count = count + 1\n    end\n    if count > 3 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i - 1] == s[i] then\n      count = count + 1\n    else\n   \
    \   count = count\n    end\n  end\n  return count >= 3 and count == #s and #s\
    \ % 3 == 0\nend", "  -- Your code here\n  local happy = false\n  local count =\
    \ 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i] ~= s[count + 1]\
    \ then\n        happy = false\n        break\n      end\n      count = count +\
    \ 1\n    else\n      if s[i] ~= s[count + 1] then\n        happy = false\n   \
    \     break\n      end\n      count = count + 1\n    end\n  end\n  if happy ==\
    \ true then\n    return true\n  else\n    return false\n  end\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2]\
    \ then\n      count = count + 1\n    end\n  end\n  return count >= 3 and count\
    \ == #s or nil\nend", "  local happy = false\n  local len = #s\n  if len < 3 then\n\
    \    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n    \
    \  happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for i =\
    \ 1, len do\n      if s[i+i] ~= s[i+i] then\n        happy = false\n        break\n\
    \      end\n    end\n  end\n  return happy\nend", "    local happy = false\n \
    \   local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i]\
    \ ~= s[i - 2] then\n            happy = true\n        end\n        count = count\
    \ + 1\n        if count == 3 then\n            happy = false\n        end\n  \
    \  end\n    return happy\nend", "  local count = 0\n  for i = 1, #s do\n    count\
    \ = count + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for\
    \ i = 1, #s do\n    count = count + 1\n    if count > 3 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local happy = false\n  local n = 1\n\
    \  while n <= #s do\n    if s[n] == s[n+1] then\n      n = n + 1\n    else\n \
    \     happy = true\n      break\n    end\n  end\n  return happy\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n \
    \   if s[i] ~= s[i+1] then happy = true end\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n\
    \        happy = false\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n      n = n + 1\n    end\n  end\n  return n >= 3 and string.sub(s,\
    \ 1, 3) == string.sub(s, 3, #s)\nend", "  local happy = false\n  local len = #s\n\
    \  if len < 3 then\n    return happy\n  end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[i] then\n      happy = false\n      break\n    end\n  end\n  if len > 3\
    \ then\n    for i = 1, len do\n      if s[i+1] ~= s[i+2] then\n        happy =\
    \ false\n        break\n      end\n    end\n  end\n  return happy\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= string.sub(s, i\
    \ - 1, i) then\n      count = count + 1\n    end\n  end\n  return count >= 3 and\
    \ count == #s or false\nend", "    local count = 0\n    for i = 1, #s do\n   \
    \     if s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n \
    \   end\n    return count >= 3 and count % 3 == 0\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy\
    \ = false\n      break\n    end\n    count = count + 1\n  end\n  if count >= 3\
    \ and happy == false then\n    happy = true\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n\
    \  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n      happy = true\n     \
    \ break\n    end\n  end\n  return happy\nend", "  local happy = false\n  local\
    \ len = #s\n  if len < 3 then return false end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[i] then return false end\n  end\n  for i = 1, len do\n    if s[i+1] ~=\
    \ s[i] then return false end\n  end\n  for i = 1, len do\n    if s[i+2] ~= s[i]\
    \ then return false end\n  end\n  return true\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy\
    \ = false\n      break\n    end\n    count = count + 1\n    if count > 3 then\n\
    \      happy = false\n      break\n    end\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local n = 1\n  while n <= #s do\n    if s[n] == s[n+1] then\n\
    \      n = n + 1\n    else\n      happy = true\n      break\n    end\n  end\n\
    \  return happy\nend", "  local happy = false\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i, i+1) then\n      happy = true\n      break\n   \
    \ end\n  end\n  return happy\nend", "  local count = 0\n  local letters = {}\n\
    \  for i = 1, #s do\n    local letter = s[i]\n    if not letters[letter] then\n\
    \      letters[letter] = true\n      count = count + 1\n    end\n  end\n  return\
    \ count >= 3 and count == #letters and #letters == 3\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i\
    \ - 2] then\n      count = count + 1\n      if count > 3 then\n        happy =\
    \ true\n        break\n      end\n    end\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n\
    \  for i = 1, len do\n    local letter = s[i]\n    if letter ~= letter then\n\
    \      happy = false\n      break\n    end\n  end\n  if happy == false then\n\
    \    return happy\n  end\n  local happy = false\n  for i = 1, len do\n    local\
    \ letter = s[i]\n    if letter ~= letter then\n      happy = false\n      break\n\
    \    end\n  end\n  if happy == false then\n    return happy\n  end\n  local happy\
    \ = false\n  for i = 1, len do\n    local letter = s[i]\n    if letter ~= letter\
    \ then\n      happy = false\n      break\n    end\n  end\n  if happy == false\
    \ then\n    return happy\n  end\n  local happy = true\n  for i = 1, len do\n \
    \   local letter = s[i]\n    if letter ~= letter then\n      happy = false\n \
    \     break\n    end\n  end\n  return happy\nend", "  local happy = false\n  for\
    \ i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s, i, i+1) then\n \
    \     happy = true\n      break\n    end\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n\
    \        happy = false\n        break\n      end\n      count = count + 2\n  \
    \  end\n  end\n  return happy\nend", "  local happy = false\n  local count = 0\n\
    \  for i = 1, #s do\n    if s[i] == s[i - 1] then\n      count = count + 1\n \
    \   else\n      if count >= 3 then\n        happy = true\n      end\n      count\
    \ = 0\n    end\n  end\n  return happy\nend", "    local happy = false\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count] then\n        \
    \    happy = true\n        else\n            count = count + 1\n        end\n\
    \    end\n    return happy and count >= 3\nend", "  local happy = false\n  local\
    \ len = #s\n  if len < 3 then\n    return false\n  end\n  for i = 1, len do\n\
    \    if s[i] ~= s[(i-1)] then\n      happy = false\n      break\n    end\n  end\n\
    \  if happy == false then\n    return false\n  end\n  for i = 1, len do\n    if\
    \ s[i] ~= s[(i-1)] then\n      happy = false\n      break\n    end\n  end\n  if\
    \ happy == false then\n    return false\n  end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[(i-1)] then\n      happy = false\n      break\n    end\n  end\n  return\
    \ true\nend", "    local count = 0\n    for i = 1, #s do\n        if s[i - 1]\
    \ ~= s[i] then\n            count = count + 1\n        end\n    end\n    return\
    \ count >= 3 and count == #s\nend", "  -- base case\n  if #s <= 3 then return\
    \ false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\
    \ happy = true break end\n  end\n  return happy\nend", "    local n = #s\n   \
    \ if n < 3 then\n        return false\n    end\n    local ok = true\n    for i\
    \ = 1, n do\n        local j = i - 1\n        local k = i + 1\n        local l\
    \ = j + 1\n        if s[k] == s[k] then\n            ok = false\n        elseif\
    \ s[k] == s[l] then\n            ok = false\n        elseif s[k] == s[k] then\n\
    \            ok = false\n        end\n    end\n    return ok\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n \
    \   if s[i] ~= s[i - 1] then return false end\n  end\n  return happy\nend", " \
    \ local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n      happy = false\n\
    \      break\n    end\n  end\n  return happy\nend", "    local count = 0\n   \
    \ for i = 1, #s do\n        if s[i] ~= s[count] then\n            count = count\
    \ + 1\n        else\n            count = count + 1\n        end\n    end\n   \
    \ return count >= 3 and count == #s or false\nend", "  -- base case\n  if #s <\
    \ 3 then\n    return false\n  end\n  -- base case\n  if #s == 3 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 2 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 1 then\n    return true\n  end\n  -- base case\n  if #s\
    \ == 0 then\n    return false\n  end\n  -- base case\n  if #s == 4 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 5 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 6 then\n    return true\n  end\n  -- base case\n  if #s\
    \ == 7 then\n    return true\n  end\n  -- base case\n  if #s == 8 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 9 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 10 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 11 then\n    return true\n  end\n  -- base case\n  if #s == 12 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 13 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 14 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 15 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 16 then\n    return true\n  end\n  -- base case\n  if #s == 17 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 18 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 19 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 20 then\n    return true\n  end\n  -- base case\n  if #s == 21 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 22 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 23 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 24 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 25 then\n    return true\n  end\n  -- base case\n  if #s == 26 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 27 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 28 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 29 then\n    return true\n  end\n  -- base case\n  if #s == 30 then\n\
    \    return true\n  end\n", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  local\
    \ happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i -\
    \ 2] and s[i] ~= s[i - 3] then\n      happy = true\n    end\n  end\n  return happy\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1]\
    \ or s[i] ~= s[i - 2] then\n            count = count + 1\n        end\n    end\n\
    \    return count >= 3 and count == #s or false\nend", "  local happy = false\n\
    \  local len = #s\n  if len < 3 then return false end\n  for i = 1, len do\n \
    \   if s[i] ~= s[i] then return false end\n  end\n  for i = 1, len do\n    if\
    \ s[i+i] ~= s[i+i] then return false end\n  end\n  for i = 1, len do\n    if s[i+i+i]\
    \ ~= s[i+i+i] then return false end\n  end\n  return true\nend", "  local happy\
    \ = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n\
    \      happy = false\n      break\n    end\n    count = count + 1\n  end\n  if\
    \ count >= 3 and count == #s then\n    for i = 1, #s do\n      if s[i] ~= s[count\
    \ + 1] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend", "  -- base case\n  if #s <= 3 then\n    return true\n \
    \ end", "  -- base case\n  if #s < 3 then\n    return false\n  end\n  -- base\
    \ case\n  if #s == 3 then\n    return true\n  end\n  -- recursive case\n  local\
    \ happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i -\
    \ 2] then\n      happy = true\n    end\n  end\n  return happy\nend", "    local\
    \ happy = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] ~=\
    \ s[i - 1] then\n            count = count + 1\n        end\n        if count\
    \ == 3 then\n            happy = true\n            count = 0\n        end\n  \
    \  end\n    return happy\nend", "  local happy = false\n  local count = 0\n  for\
    \ i = 1, #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n\
    \    end\n    count = count + 1\n  end\n  if count >= 3 and happy == false then\n\
    \    happy = true\n  end\n  return happy\nend", "    local happy = false\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i] ~=\
    \ s[i - 2] then\n            happy = true\n        end\n        count = count\
    \ + 1\n        if count == 3 then\n            happy = false\n        end\n  \
    \  end\n    return happy\nend", "    local count = 0\n    for i = 1, #s do\n \
    \       if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n            count = count\
    \ + 1\n        end\n    end\n    return count >= 3 and count == #s\nend", "  \
    \  local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n          \
    \  happy = true\n            count = count + 1\n        end\n    end\n    if count\
    \ >= 3 then\n        happy = true\n    end\n    return happy\nend", "  -- Your\
    \ code here\n  local happy = false\n  local count = 0\n  for i = 1, #s do\n  \
    \  if s[i] == s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n  \
    \  elseif count > 3 then\n      happy = true\n      break\n    end\n  end\n  return\
    \ happy\nend", "  local happy = false\n  local count = 0\n  for i = 1, #s do\n\
    \    if count == 3 then\n      happy = true\n      count = 0\n    end\n    if\
    \ s[i] ~= s[count] then\n      happy = false\n    end\n    count = count + 1\n\
    \  end\n  return happy\nend", "  local n = 1\n  local happy = false\n  for i =\
    \ 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s, i+1, i+2) then\n   \
    \   n = n + 1\n      if n == 3 then\n        happy = true\n      end\n    end\n\
    \  end\n  return happy\nend", "  -- Write your code here\n  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if count > 3 then\n      happy = true\n\
    \      break\n    end\n    if s[i] ~= s[i - 1] then\n      happy = false\n   \
    \   break\n    end\n    count = count + 1\n  end\n  return happy\nend", "  local\
    \ n = 1\n  local happy = false\n  for i = 1, #s do\n    if string.sub(s, i, i+1)\
    \ ~= string.sub(s, i, i+1) then\n      n = n + 1\n      if n == 3 then\n     \
    \   happy = true\n      end\n    end\n  end\n  return happy\nend", "  local happy\
    \ = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n  for\
    \ i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n      break\n\
    \    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if s[i+1] ~=\
    \ s[i+2] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i + 1) ~= string.sub(s, i - 1, i) then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count == #s or false\nend", "  -- Your code here\n\
    \  local count = 0\n  for i = 1, #s do\n    if i == 1 then\n      if s[i] ~= s[i\
    \ - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n        return false\n  \
    \    end\n    elseif i == 2 then\n      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2]\
    \ or s[i] ~= s[i - 3] then\n        return false\n      end\n    elseif i == 3\
    \ then\n      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n\
    \        return false\n      end\n    elseif s[i - 1] == s[i - 2] and s[i - 1]\
    \ == s[i - 3] then\n      if s[i] ~= s[i - 4] then\n        return false\n   \
    \   end\n    elseif s[i - 1] == s[i - 2] and s[i - 2] ~= s[i - 3] then\n     \
    \ if s[i] ~= s[i - 4] then\n        return false\n      end\n    elseif s[i -\
    \ 1] == s[i - 2] and s[i - 2] ~= s[i - 3] then\n      if s[i] ~= s[i - 4] then\n\
    \        return false\n      end\n    elseif s[i - 3] == s[i - 4] and s[i - 3]\
    \ == s[i - 5] then\n      if s[i] ~= s[i - 6] then\n        return false\n   \
    \   end\n    elseif s[i - 3] == s[i - 4] and s[i - 4] ~= s[i - 5] then\n     \
    \ if s[i] ~= s[i - 6] then\n        return false\n      end\n    elseif s[i -\
    \ 3] == s[i - 4] and s[i - 4] ~= s[i - 5] then\n      if s[i] ~= s[i - 6] then\n\
    \        return false\n      end\n    elseif s[i - 5] == s[i - 6] and s[i - 5]\
    \ == s[i - 7] then\n      if s[i] ~= s[i - 8] then\n        return false\n   \
    \   end\n    elseif s[i - 5] == s[i - 6] and s[i - 6] ~= s[i - 7] then\n     \
    \ if s[i] ~= s[i - 8] then\n        return false\n      end\n    elseif s[i -\
    \ 5] == s[i - 6] and s[i - 6] ~= s[i - 7] then\n      if s[i] ~= s[i - 8] then\n\
    \        return false\n      end\n    end\n    count = count + 1\n  end\n  if\
    \ count < 3 then\n    return false\n  end\n  return true\nend", "  local n = 1\n\
    \  while n <= #s do\n    local ok = true\n    for i = 1, n do\n      if s[i] ~=\
    \ s[n-i] then\n        ok = false\n        break\n      end\n    end\n    if ok\
    \ then\n      n = n + 1\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local count = 0\n  for i = 1, #s do\n    count = count + 1\n\
    \    if count > 3 then\n      return false\n    end\n  end\n  for i = 1, #s do\n\
    \    if s[i] ~= s[i] then\n      return false\n    end\n  end\n  return true\n\
    end", "    local happy = false\n    local len = #s\n    if len < 3 then\n    \
    \    return false\n    end\n    local last_letter = nil\n    for i = 1, len do\n\
    \        local letter = s[i]\n        if last_letter ~= letter then\n        \
    \    happy = true\n        end\n        last_letter = letter\n    end\n    return\
    \ happy\nend", "    local happy = false\n    local len = #s\n    if len < 3 then\n\
    \        return happy\n    end\n    local i = 0\n    while i < len do\n      \
    \  local letter = s[i]\n        if letter ~= letter then\n            happy =\
    \ false\n            break\n        end\n        i = i + 1\n    end\n    if len\
    \ % 3 ~= 0 then\n        happy = false\n    end\n    local j = 1\n    while j\
    \ < len do\n        if s[i+j] == s[i+j+1] then\n            j = j + 1\n      \
    \  else\n            happy = false\n            break\n        end\n    end\n\
    \    return happy\nend", "  local happy = false\n  local count = 0\n  for i =\
    \ 1, #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n \
    \   end\n    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, count\
    \ do\n      if s[i] ~= s[count + 1] then\n        happy = false\n        break\n\
    \      end\n    end\n  end\n  return happy\nend", "  -- Write your code here\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n    end\n    count = count + 1\n  end\n  return happy\n\
    end", "  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n\
    \      happy = true\n      break\n    end\n  end\n  return happy\nend", "  local\
    \ n = 0\n  for i = 1, #s do\n    local c = s[i]\n    if n ~= 0 then\n      if\
    \ c == s[n] then\n        n = n + 1\n      else\n        return false\n      end\n\
    \    else\n      n = 1\n    end\n  end\n  return true\nend", "  -- base case\n\
    \  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return true\
    \ end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n    local\
    \ letter = s[i]\n    -- base case\n    if letter ~= letter then return false end\n\
    \    -- recursive case\n    if letter ~= s[i - 1] then return false end\n  end\n\
    \  return happy\nend", "  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i] ~= s[count] then\n\
    \        happy = false\n        break\n      else\n        count = count + 1\n\
    \      end\n    else\n      happy = true\n      count = count + 1\n    end\n \
    \ end\n  return happy\nend", "  -- Your code here\n  local happy = false\n  local\
    \ count = 0\n  for i = 1, #s do\n    if s[i] == s[i] then\n      count = count\
    \ + 1\n    else\n      if count >= 3 then\n        happy = true\n        break\n\
    \      end\n      count = 0\n    end\n  end\n  return happy\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n \
    \   if s[i] ~= s[i - 1] then return false end\n  end\n  return happy\nend", " \
    \ local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n    \
    \  happy = true\n      break\n    end\n  end\n  return happy\nend", "  local count\
    \ = 0\n  local last = ''\n  for i = 1, #s do\n    local c = s[i]\n    if last\
    \ ~= c and last ~= c and last ~= c then\n      count = count + 1\n    end\n  \
    \  last = s[i]\n  end\n  return count >= 3 and count == #s\nend", "  local happy\
    \ = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n  for\
    \ i = 1, len do\n    if s[i] ~= s[i+1] then\n      happy = true\n      break\n\
    \    end\n  end\n  return happy\nend", "  local happy = false\n  local count =\
    \ 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy = false\n \
    \     break\n    end\n    count = count + 1\n  end\n  if count >= 3 then\n   \
    \ for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n        happy = false\n\
    \        break\n      end\n    end\n  end\n  return happy\nend", "  local n =\
    \ 0\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s, i+1, i+2)\
    \ then\n      n = n + 1\n    end\n  end\n  return n >= 3 and n == #s\nend", " \
    \ local happy = false\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n      happy = true\n      break\n    end\n  end\n  return happy\n\
    end", "  local happy = false\n  local len = #s\n  if len < 3 then\n    return\
    \ happy\n  end\n  local last_letter = nil\n  for i = 1, len do\n    local letter\
    \ = s[i]\n    if last_letter ~= letter then\n      happy = true\n      break\n\
    \    end\n    last_letter = letter\n  end\n  return happy\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n            count\
    \ = count + 1\n        end\n    end\n    return count >= 3 and count % 3 == 0\n\
    end", "  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[i - 1] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n    if count == 3 then\n      happy = true\n      count = 0\n    end\n\
    \  end\n  return happy\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[count] then\n      count = count + 1\n    end\n  end\n  return count >=\
    \ 3 and count == #s and #s % 3 == 0\nend", "  local happy = false\n  local len\
    \ = #s\n  if len < 3 then\n    return happy\n  end\n  for i = 1, len do\n    local\
    \ letter = s[i]\n    local count = 0\n    for j = 1, i do\n      if s[j] == letter\
    \ then\n        count = count + 1\n      end\n    end\n    if count % 3 == 0 then\n\
    \      happy = false\n    end\n  end\n  return happy\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy\
    \ = false\n      break\n    end\n    count = count + 1\n    if count == 3 then\n\
    \      happy = true\n      count = 0\n    end\n  end\n  return happy\nend", " \
    \ local happy = false\n  local len = #s\n  if len < 3 then return false end\n\
    \  for i = 1, len do\n    if s[i] ~= s[i] then return false end\n  end\n  for\
    \ i = 1, len do\n    if s[i - 1] ~= s[i] then return false end\n  end\n  for i\
    \ = 1, len do\n    if s[i - 2] ~= s[i] then return false end\n  end\n  for i =\
    \ 1, len do\n    if s[i - 3] ~= s[i] then return false end\n  end\n  return true\n\
    end", "  -- Your code here\n  local happy = false\n  local count = 0\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[count] then\n      happy = false\n      count =\
    \ count + 1\n    else\n      count = count + 1\n    end\n  end\n  if count >=\
    \ 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n        happy\
    \ = false\n        break\n      end\n    end\n  end\n  return happy\nend", " \
    \ local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n\
    \        happy = false\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[i - 1] then\n      count = count + 1\n    end\n    if count == 3 then\n\
    \      happy = true\n      count = 0\n    end\n  end\n  return happy\nend", " \
    \ local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i\
    \ - 1] then\n      happy = false\n      break\n    end\n    count = count + 1\n\
    \    if count == 3 then\n      happy = true\n      count = 0\n    end\n  end\n\
    \  return happy\nend", "  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if s[2]\
    \ ~= s[3] then return false end\n  -- recursive case\n  if s[1] ~= s[2] then return\
    \ false end\n  -- recursive case\n  if s[1] ~= s[3] then return false end\n  --\
    \ recursive case\n  return is_happy(s[4])\nend", "  local happy = false\n  local\
    \ n = #s\n  if n >= 3 then\n    for i = 1, n do\n      if s[i] ~= s[i+1] then\n\
    \        happy = true\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local happy = false\n  local len = #s\n  if len < 3 then return false\
    \ end\n  for i = 1, len do\n    if s[i] ~= s[i] then return false end\n  end\n\
    \  for i = 1, len do\n    if s[i - 1] ~= s[i] then return false end\n  end\n \
    \ for i = 1, len do\n    if s[i - 1] ~= s[i - 1] then return false end\n  end\n\
    \  return true\nend", "  local happy = false\n  local len = #s\n  if len < 3 then\n\
    \    return false\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i] ~= s[i + 1] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend", "  local n = 1\n \
    \ for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s, i, i+1) then\n\
    \      n = n + 1\n    end\n  end\n  return n >= 3 and string.sub(s, 1, 3) == string.sub(s,\
    \ 4, #s)\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i - 1]\
    \ or s[i] == s[i - 2] or s[i] == s[i - 3] then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count ~= #s\nend", "  -- base case\n  if #s <\
    \ 3 then return false end\n  -- base case\n  if s[1] == s[2] and s[1] == s[3]\
    \ then return true end\n  -- recursive case\n  return is_happy(s:sub(1, 3)) or\
    \ is_happy(s:sub(3, 5))\nend", "  local count = 0\n  for i = 1, #s do\n    if\
    \ s[i] == s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count ~= #s and #s % 3 == 0\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n \
    \   if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n     \
    \ happy = true\n    end\n  end\n  return happy\nend", "  -- Your code here\n \
    \ local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      if s[i]:lower() == s[i+1]:lower() and s[i]:lower() == s[i+2]:lower()\
    \ then\n        happy = true\n      end\n      count = 0\n    else\n      count\
    \ = count + 1\n    end\n  end\n  return happy\nend", "  -- base case\n  if #s\
    \ < 3 then return false end\n  -- check every 3 consecutive letters are distinct\n\
    \  for i = 1, #s, 3 do\n    if #(s:sub(i, i + 3)) ~= 3 then return false end\n\
    \  end\n  return true\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if s[1] == s[2] and s[1] == s[3] then return true end\n  --\
    \ recursive case\n  return is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(3))\
    \ or is_happy(s:sub(4))\nend", "  -- base case\n  if #s < 3 then return false\
    \ end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n\
    \  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return\
    \ false end\n  end\n  return happy\nend", "  -- Your code here\n  local happy\
    \ = false\n  local count = 0\n  for i = 1, #s do\n    if count == 3 then\n   \
    \   if s[i] ~= s[count] then\n        happy = false\n        break\n      end\n\
    \      count = 0\n    else\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend", "  local happy = false\n  local count = 0\n  for i = 1, #s do\n\
    \    if s[i] == s[i] then\n      count = count + 1\n    elseif count == 3 then\n\
    \      happy = true\n      count = 0\n    else\n      count = 0\n    end\n  end\n\
    \  return happy\nend", "    local happy = false\n    local len = #s\n    if len\
    \ >= 3 then\n        for i = 1, len do\n            if s[i] ~= s[i - 1] then\n\
    \                happy = true\n                break\n            end\n      \
    \  end\n    end\n    return happy\nend", "  local count = 0\n  for i = 1, #s do\n\
    \    count = count + 1\n    if count > 3 then\n      return false\n    end\n \
    \ end\n  for i = 1, #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[count] then\n      count = count + 1\n    end\n  end\n  return count >=\
    \ 3 and count % 3 == 0\nend", "  local happy = false\n  local len = #s\n  if len\
    \ < 3 then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i -\
    \ 1] then\n      happy = true\n      break\n    end\n  end\n  return happy\nend",
  "  local happy = false\n  for i = 1, #s do\n    if #s - i >= 3 then\n      happy\
    \ = not happy\n    end\n    if #s - i == 3 then\n      happy = not happy\n   \
    \ end\n  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return false\
    \ end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n\
    \  if #s == 3 then\n    local first = s[1]\n    local second = s[2]\n    local\
    \ third = s[3]\n    if first ~= second and first ~= third then return false end\n\
    \    if second ~= third then return false end\n    return true\n  end\n  -- recursive\
    \ case\n  local first = s[1]\n  local second = s[2]\n  local third = s[3]\n  if\
    \ first ~= second and first ~= third then\n    return false\n  end\n  if second\
    \ ~= third then\n    return false\n  end\n  return is_happy(s[3])\nend", "  --\
    \ base case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then\
    \ return true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s\
    \ do\n    if s[i] ~= s[(i + 1) % (#s)] then happy = true end\n  end\n  return\
    \ happy\nend", "    local count = 0\n    for i = 1, #s do\n        if s[i]:lower()\
    \ == s[i]:lower() then\n            count = count + 1\n        else\n        \
    \    count = count - 1\n        end\n        if count < 3 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local happy = false\n\
    \  local n = #s\n  if n >= 3 then\n    for i = 1, n do\n      if s[i] ~= s[i]\
    \ then\n        happy = true\n        break\n      end\n    end\n  end\n  return\
    \ happy\nend", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- recursive case\n  if #s == 2 then\n \
    \   return not is_happy(s[2])\n  end\n  -- recursive case\n  if #s == 1 then\n\
    \    return not is_happy(s[1]) or not is_happy(s[2])\n  end\n  -- recursive case\n\
    \  return is_happy(s[1]) or is_happy(s[2]) or is_happy(s[3])\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if s[count] == s[count+1] then\n      count = count\
    \ + 1\n    else\n      count = count\n    end\n  end\n  return count >= 3 and\
    \ count % 3 == 0\nend", "  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend", "  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2] then\n      count = count\
    \ + 1\n    end\n  end\n  return count >= 3 and count == #s or nil\nend", "  --\
    \ base case\n  if #s <= 3 then return true end", "  local happy = false\n  local\
    \ len = #s\n  if len < 3 then return false end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[i - 1] then return false end\n  end\n  happy = true\n  for i = 1, len do\n\
    \    if s[i] ~= s[i + 1] then return false end\n  end\n  return happy\nend", " \
    \ -- base case\n  if #s < 3 then return false end\n  -- base case\n  if s[1] ==\
    \ s[2] and s[1] == s[3] then return true end\n  -- recursive case\n  return is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(3)) or is_happy(s:sub(4))\nend", " \
    \ -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n  end\n  return happy\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if s[i]:lower() == s[i]:lower()\
    \ then\n            count = count + 1\n        end\n    end\n    return count\
    \ >= 3 and count % 3 == 0\nend", "  local count = 0\n  for i = 1, #s do\n    count\
    \ = count + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for\
    \ i = 1, #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend", "  local happy = false\n  local\
    \ len = #s\n  if len < 3 then return false end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[i] then return false end\n  end\n  for i = 1, len do\n    if s[i] != s[i+1]\
    \ then return false end\n  end\n  return true\nend", "  local happy = false\n\
    \  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = true\n      break\n\
    \    end\n  end\n  return happy\nend", "  local count = 0\n  for i = 1, #s do\n\
    \    if string.sub(s, i, i+1) ~= string.sub(s, i+1, i+2) then\n      count = count\
    \ + 1\n    end\n  end\n  return count >= 3 and count == #s\nend", "  local happy\
    \ = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n  for\
    \ i = 1, len do\n    if s[i] ~= s[i - 1] then\n      happy = true\n      break\n\
    \    end\n  end\n  return happy\nend", "  local happy = false\n  local len = #s\n\
    \  if len < 3 then\n    return happy\n  end\n  for i = 1, len do\n    if s[i]\
    \ ~= s[i - 1] then\n      happy = true\n      break\n    end\n  end\n  return\
    \ happy\nend", "    local n = #s\n    if n < 3 then return false end\n    local\
    \ ok = true\n    for i = 1, n do\n        local j = i - 1\n        local k = i\
    \ + 1\n        local l = j + 1\n        if s[k] == s[k] then\n            if s[k]\
    \ == s[l] then\n                if s[k] == s[k] then\n                    if s[k]\
    \ == s[k] then\n                        ok = false\n                    end\n\
    \                end\n            end\n        end\n    end\n    return ok\nend",
  "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= string.sub(s,\
    \ i, i) then\n      n = n + 1\n    end\n  end\n  return n >= 3 and n == #s and\
    \ #string.gsub(s, \"(.)\\\\1+\", \"%1\") ~= 0\nend", "  local n = 1\n  while n\
    \ < #s do\n    if s[n] == s[n+1] then\n      n = n + 1\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend", "  -- base case\n  if #s < 3 then\n\
    \    return false\n  end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i] then\n      happy = false\n      break\n   \
    \ end\n  end\n  return happy\nend", "  local count = 0\n  for i = 1, #s do\n \
    \   if string.sub(s, i, i+1) ~= string.sub(s, i+1, i+2) then\n      count = count\
    \ + 1\n    end\n  end\n  return count >= 3 and count % 3 == 0\nend", "  local\
    \ n = 1\n  while n <= #s do\n    if string.sub(s, n, n + 3) == string.sub(s, n\
    \ - 1, n) then\n      n = n + 1\n    else\n      return false\n    end\n  end\n\
    \  return true\nend", "  local happy = false\n  local len = #s\n  if len < 3 then\n\
    \    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n\
    \      happy = false\n      break\n    end\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n\
    \  local i = 0\n  while i < len do\n    local letter = s[i]\n    if letter ~=\
    \ letter then\n      happy = false\n      break\n    end\n    i = i + 1\n  end\n\
    \  if i == len then\n    return happy\n  end\n  local j = 1\n  while j < len do\n\
    \    local letter = s[j]\n    if letter ~= letter then\n      happy = false\n\
    \      break\n    end\n    j = j + 1\n  end\n  if j == len then\n    return happy\n\
    \  end\n  local k = 1\n  while k < len do\n    local letter = s[k]\n    if letter\
    \ ~= letter then\n      happy = false\n      break\n    end\n    k = k + 1\n \
    \ end\n  if k == len then\n    return happy\n  end\n  local l = 1\n  while l <\
    \ len do\n    local letter = s[l]\n    if letter ~= letter then\n      happy =\
    \ false\n      break\n    end\n    l = l + 1\n  end\n  if l == len then\n    return\
    \ happy\n  end\n  local m = 1\n  while m < len do\n    local letter = s[m]\n \
    \   if letter ~= letter then\n      happy = false\n      break\n    end\n    m\
    \ = m + 1\n  end\n  if m == len then\n    return happy\n  end\n  local n = 2\n\
    \  while n < len do\n    local letter = s[n]\n    if letter ~= letter then\n \
    \     happy = false\n      break\n    end\n    n = n + 1\n  end\n  if n == len\
    \ then\n    return happy\n  end\n  local o = 3\n  while o < len do\n    local\
    \ letter = s[o]\n    if letter ~= letter then\n      happy = false\n      break\n\
    \    end\n    o = o + 1\n  end\n  if o == len then\n    return happy\n  end\n\
    \  local p = 1\n  while p < len do\n    local letter = s[p]\n    if letter ~=\
    \ letter then\n      happy = false\n      break\n    end\n    p = p + 1\n  end\n\
    \  if p == len then\n    return happy\n  end\n  local q = 1\n  while q < len do\n\
    \    local letter = s[q]\n    if letter ~= letter then\n      happy = false\n\
    \      break\n    end\n    q = q + 1\n  end\n  if q == len then\n    return happy\n\
    \  end\n  local r = 1\n  while r < len do\n    local letter = s[r]\n    if letter\
    \ ~", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if\
    \ #s == 3 then return true end\n  -- recursive case\n  local happy = false\n \
    \ for i = 1, #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then happy = true\
    \ end\n  end\n  return happy\nend", "  local happy = false\n  local n = 1\n  for\
    \ i = 1, #s do\n    if string.sub(s, i, i+3) == string.sub(s, 1, i+3) then\n \
    \     n = n + 1\n    else\n      if n >= 3 then\n        happy = true\n      end\n\
    \      n = 1\n    end\n  end\n  return happy\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count == #s and #s % 3 == 0\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2] then\n\
    \      count = count + 1\n    end\n  end\n  return count >= 3 and count % 3 ==\
    \ 0\nend", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- recursive case\n  local happy = false\n\
    \  for i = 1, #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i + 1] then happy =\
    \ true end\n  end\n  return happy\nend", "    local happy = false\n    local len\
    \ = #s\n    if len < 3 then\n        return false\n    end\n    for i = 1, len\
    \ do\n        local letter = s[i]\n        for j = i + 1, len do\n           \
    \ if s[j] == letter then\n                happy = false\n                break\n\
    \            end\n        end\n    end\n    return happy\nend", "  local n = 0\n\
    \  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s, i+1, i+2) then\n\
    \      n = n + 1\n    end\n  end\n  return n >= 3 and n == #s or false\nend",
  "  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n\
    \        happy = false\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local happy = false\n  local len = #s\n  if len < 3 then\n    return\
    \ happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n      happy\
    \ = false\n      break\n    end\n  end\n  return happy\nend", "  local happy =\
    \ false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n  for i\
    \ = 1, len do\n    local letter = s[i]\n    if letter ~= letter then\n      happy\
    \ = false\n      break\n    end\n  end\n  if len % 3 ~= 0 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    local letter = s[i]\n    if letter ~= letter\
    \ then\n      happy = false\n      break\n    end\n  end\n  return happy\nend",
  "  -- Write your code here\n  local happy = false\n  local count = 0\n  for i =\
    \ 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2] then\n      count = count\
    \ + 1\n    elseif count >= 3 then\n      happy = true\n      break\n    end\n\
    \  end\n  return happy\nend", "  local count = 0\n  for i = 1, #s do\n    count\
    \ = count + 1\n    if count == 3 then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3\nend", "  local happy = false\n  local count = 0\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n      happy =\
    \ true\n      count = count + 1\n    end\n  end\n  return happy and count >= 3\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i+1)\
    \ then\n      count = count + 1\n    end\n  end\n  return count >= 3 and count\
    \ % 3 == 0\nend", "  -- base case\n  if #s < 3 then return false end\n  -- base\
    \ case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend", "  local happy = false\n  local len = #s\n  if len\
    \ < 3 then\n    return happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n\
    \    for j = 1, 3 do\n      if letter == s[j] then\n        return false\n   \
    \   end\n    end\n  end\n  return true\nend", "  -- base case\n  if #s < 3 then\
    \ return false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  if s[2] ~= s[3] then return false end\n  -- recursive case\n  if s[1]\
    \ ~= s[2] then return false end\n  -- recursive case\n  if s[1] ~= s[3] then return\
    \ false end\n  -- recursive case\n  return is_happy(s[4])\nend", "  local happy\
    \ = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n\
    \      happy = false\n      break\n    end\n    count = count + 1\n    if count\
    \ == 3 then\n      happy = true\n      count = 0\n    end\n  end\n  return happy\n\
    end", "  local n = 1\n  local happy = false\n  for i = 1, #s do\n    if n == 3\
    \ then\n      if s[i] ~= s[n-2][#s[n-2]] then\n        happy = false\n       \
    \ break\n      end\n    end\n    if s[i] ~= s[n-2][#s[n-2]] then\n      happy\
    \ = false\n      break\n    end\n    n = n + 1\n  end\n  return happy\nend", " \
    \ local happy = false\n  local len = #s\n  if len < 3 then\n    return false\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if happy == false then\n    return false\n  end\n\
    \  for i = 1, len do\n    if s[i+i] ~= s[i+i] then\n      happy = false\n    \
    \  break\n    end\n  end\n  if happy == false then\n    return false\n  end\n\
    \  for i = 1, len do\n    if s[i+i+i] ~= s[i+i+i] then\n      happy = false\n\
    \      break\n    end\n  end\n  if happy == false then\n    return false\n  end\n\
    \  return true\nend", "    local happy = false\n    local len = #s\n    if len\
    \ < 3 then\n        return happy\n    end\n    for i = 1, len do\n        if s[i]\
    \ ~= s[i - 1] then\n            happy = true\n            break\n        end\n\
    \    end\n    return happy\nend", "  local happy = false\n  local len = #s\n \
    \ if len < 3 then\n    return happy\n  end\n  for i = 1, len do\n    local letter\
    \ = s[i]\n    for j = 1, 3 do\n      if letter == s[j] then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "  local happy = false\n  local\
    \ len = #s\n  if len < 3 then\n    return happy\n  end\n  for i = 1, len do\n\
    \    if s[i] ~= s[i - 1] then\n      happy = true\n      break\n    end\n  end\n\
    \  return happy\nend", "  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if #s ==\
    \ 2 then\n    if s[1] == s[2] and s[1] == s[3] then return true end\n    return\
    \ false\n  end\n  -- recursive case\n  if #s == 1 then\n    if s[1] == s[1] then\
    \ return true end\n    return false\n  end\n  -- recursive case\n  if s[1] ==\
    \ s[1] and s[2] ~= s[2] and s[3] ~= s[3] then return false end\n  return is_happy(s[3],\
    \ s[4], s[5], s[6])\nend", "  local count = 0\n  for i = 1, #s do\n    count =\
    \ count + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for\
    \ i = 1, #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      happy = false\n     \
    \ count = 0\n    end\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n    \
    \  happy = true\n      count = count + 1\n    end\n  end\n  return happy\nend",
  "  -- base case\n  if #s <= 3 then return true end", "  local happy = false\n  local\
    \ n = #s\n  if n >= 3 then\n    for i = 1, n do\n      if s[i] ~= s[i] then\n\
    \        happy = true\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count >= 3 and count == #s and #s % 3 == 0 then\n    happy\
    \ = true\n  end\n  return happy\nend", "  local n = 1\n  while n <= #s do\n  \
    \  local letter = s[n]\n    if letter ~= letter then\n      return false\n   \
    \ end\n    local count = 0\n    for i = 1, n do\n      if s[n] == s[i] then\n\
    \        count = count + 1\n      end\n    end\n    if count ~= 3 then\n     \
    \ return false\n    end\n    n = n + 1\n  end\n  return true\nend", "  -- Your\
    \ code here\n  local happy = false\n  for i = 1, #s do\n    if string.sub(s, i,\
    \ i+3) == string.sub(s, i, i+3) then\n      happy = true\n    end\n  end\n  return\
    \ happy\nend", "  local happy = false\n  local len = #s\n  if len < 3 then\n \
    \   return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n \
    \     happy = true\n      break\n    end\n  end\n  return happy\nend", "  local\
    \ n = 1\n  local happy = false\n  for i = 1, #s do\n    if string.sub(s,i,i) ==\
    \ string.sub(s,i,i+1) then\n      n = n + 1\n    elseif n == 3 then\n      happy\
    \ = true\n      n = n + 1\n    end\n  end\n  return happy\nend", "  local happy\
    \ = false\n  local len = #s\n  if len < 3 then\n    return happy\n  end\n  for\
    \ i = 1, len do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n\
    \    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if s[i] ~= s[i\
    \ + 1] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend", "  local n = 1\n  local happy = false\n  for i = 1, #s\
    \ do\n    if n == 1 then\n      happy = not happy\n    elseif s[n] == s[n-1] then\n\
    \      happy = not happy\n    else\n      happy = not happy\n    end\n    n =\
    \ n + 1\n  end\n  return happy\nend", "  local n = 1\n  while n <= #s do\n   \
    \ if string.sub(s, n, n+3) == string.sub(s, n-1, n-2) then\n      n = n + 1\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i] == s[i - 1] or s[i] == s[i\
    \ - 2]\n        then\n            count = count + 1\n        else\n          \
    \  if count > 3 then\n                return false\n            end\n        \
    \    count = 0\n        end\n    end\n    return true\nend", "  -- base case\n\
    \  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return true\
    \ end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n    if\
    \ s[i] ~= s[i - 1] then return false end\n  end\n  return happy\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i - 1] ~= s[i] then\n        \
    \    count = count + 1\n        end\n    end\n    return count >= 3 and count\
    \ % 3 == 0\nend", "  local happy = false\n  local len = #s\n  if len < 3 then\n\
    \    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i] ~= s[i + 1] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if s[i] ~= s[count] then\n      count = count + 1\n \
    \   end\n  end\n  return count >= 3 and count == #s and #s % 3 == 0\nend", " \
    \ local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i+1] ~= s[i+2] then\n        happy = false\n        break\n      end\n   \
    \ end\n  end\n  return happy\nend", "    local happy = false\n    local len =\
    \ #s\n    if len < 3 then\n        return false\n    end\n    for i = 1, len do\n\
    \        if s[i] ~= s[i - 1] then\n            happy = true\n            break\n\
    \        end\n    end\n    return happy\nend", "  -- base case\n  if #s < 3 then\
    \ return false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[(i + 1) %\
    \ #s] then happy = true end\n  end\n  return happy\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if s[i] ~= s[count] then\n      count = count + 1\n \
    \   end\n  end\n  return count >= 3 and count % 3 == 0\nend", "  -- Your code\
    \ here\n  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[i - 1] then\n      count = count + 1\n    end\n    if count == 3 then\n\
    \      happy = true\n    end\n    count = count - 1\n  end\n  return happy\nend",
  "  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n     \
    \ happy = true\n      break\n    end\n  end\n  return happy\nend", "  -- Your\
    \ code here\n  local happy = false\n  local count = 0\n  for i = 1, #s do\n  \
    \  if count == 3 then\n      happy = false\n      count = 0\n    end\n    if s[i]\
    \ ~= s[i - 1] then\n      happy = false\n      count = count + 1\n    end\n  end\n\
    \  if count ~= 3 then\n    happy = false\n  end\n  return happy\nend", "  local\
    \ happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n\
    \        happy = false\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local count = 0\n  local letters = {}\n  for i = 1, #s do\n    letters[#letters\
    \ + 1] = s:sub(i,i)\n  end\n  for i = 1, #letters do\n    count = count + 1\n\
    \    if count == 3 then\n      if letters[i] != letters[i+1] then\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend", "  -- base case\n  if\
    \ #s < 3 then return false end\n  -- check every 3 consecutive letters are distinct\n\
    \  for i = 1, #s - 2, 3 do\n    if s[i] ~= s[i + 1] then return false end\n  end\n\
    \  return true\nend", "  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend", "  local happy = false\n  local n = 1\n  while n\
    \ <= #s do\n    local letter = s[n]\n    if letter == letter then\n      n = n\
    \ + 1\n    else\n      happy = true\n      break\n    end\n  end\n  return happy\n\
    end", "  local happy = false\n  local len = #s\n  if len < 3 then\n    return\
    \ happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n    for j = 1, 3\
    \ do\n      if letter ~= s[j] then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend", "  local happy = false\n  local count = 0\n  for\
    \ i = 1, #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n      happy\
    \ = true\n      count = count + 1\n    end\n  end\n  if count >= 3 then\n    for\
    \ i = 1, #s do\n      if s[i] ~= s[i - 3] then\n        happy = false\n      \
    \  break\n      end\n    end\n  end\n  return happy\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy\
    \ = false\n      break\n    end\n    count = count + 1\n  end\n  if count >= 3\
    \ then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n        happy\
    \ = false\n        break\n      end\n    end\n  end\n  return happy\nend", " \
    \ local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i+i] ~= s[i+i] then\n        happy = false\n        break\n      end\n   \
    \ end\n  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return false\
    \ end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n\
    \  if #s == 2 then\n    local first = s[1]\n    local second = s[2]\n    if first\
    \ ~= second then\n      return false\n    end\n    return is_happy(s[3])\n  end\n\
    \  -- recursive case\n  if #s == 1 then\n    local first = s[1]\n    if first\
    \ ~= first then\n      return false\n    end\n    return is_happy(s[2])\n  end\n\
    \  -- recursive case\n  return is_happy(s[3])\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if s[i] == s[i] then\n            count = count +\
    \ 1\n        else\n            if count > 3 then\n                return false\n\
    \            end\n            count = 0\n        end\n    end\n    return true\n\
    end", "    local happy = false\n    local count = 0\n    for i = 1, #s do\n  \
    \      if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n            happy = true\n\
    \            count = count + 1\n        end\n    end\n    return happy and count\
    \ >= 3\nend", "  local happy = false\n  local n = #s\n  if n < 3 then return false\
    \ end\n  for i = 1, n do\n    if s[i] ~= s[i] then return false end\n  end\n \
    \ happy = true\n  for i = 1, n do\n    if s[i] ~= s[n-i] then return false end\n\
    \  end\n  return happy\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ == s[i] then\n      count = count + 1\n    else\n      count = count\n    end\n\
    \  end\n  return count >= 3 and count == #s or false\nend", "  local happy = false\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy\
    \ = false\n      break\n    end\n    count = count + 1\n  end\n  if count >= 3\
    \ then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n        happy\
    \ = false\n        break\n      end\n    end\n  end\n  return happy\nend", " \
    \ local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n      count = count + 1\n    end\n  end\n  return count >= 3\
    \ and count == #s or false\nend", "  local happy = false\n  local len = #s\n \
    \ if len < 3 then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~=\
    \ s[i] then\n      happy = false\n      break\n    end\n  end\n  if len > 3 then\n\
    \    for i = 1, len do\n      if s[i+i] ~= s[i+i] then\n        happy = false\n\
    \        break\n      end\n    end\n  end\n  return happy\nend", "    local happy\
    \ = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count]\
    \ then\n            happy = true\n        end\n        count = count + 1\n   \
    \ end\n    return happy and count >= 3 and count == #s\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if s[i] == s[i - 1] or s[i] == s[i - 2]\n\
    \        then\n            count = count + 1\n        else\n            count\
    \ = count\n        end\n    end\n    return count >= 3 and count == #s or false\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
