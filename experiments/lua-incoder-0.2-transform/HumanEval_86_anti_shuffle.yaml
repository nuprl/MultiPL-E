name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n-- 'Hi'\n\
  -- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello World!!!')\n\
  -- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = string.gmatch(s, '%w+')\n  local new_words = {}\n \
    \ for i = 1, #words do\n    local word = words[i]\n    local new_word = ''\n \
    \   for j = 1, #word do\n      local c = string.byte(word[j])\n      new_word\
    \ = new_word .. string.char((c - 97) + 64)\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words)\nend", "  local words = s:gmatch('([^\
    \ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local new_word = ''\n    for j = 1, #word do\n      local c = word[j]\n \
    \     local ascii = string.byte(c)\n      if ascii < 32 then\n        new_word\
    \ = new_word .. string.char(ascii + 32)\n      else\n        new_word = new_word\
    \ .. c\n      end\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end", "  local words = s:gsub(' ', ' ')\n  local sorted_words = {}\n  local word_index\
    \ = 1\n  local word_length = #words\n  local word_index = 1\n  while word_index\
    \ < word_length do\n    local current_word = words[word_index]\n    sorted_words[#sorted_words\
    \ + 1] = current_word\n    word_index = word_index + 1\n  end\n  local sorted_s\
    \ = ''\n  for i = 1, #sorted_words do\n    sorted_s = sorted_s .. sorted_words[i]\n\
    \  end\n  return sorted_s\nend", "  local words = string.gmatch(s, '%w+')\n  local\
    \ new_words = {}\n  local new_s = ''\n  for i = 1, #words do\n    local word =\
    \ words[i]\n    local new_word = word\n    for j = 1, #word do\n      local c\
    \ = string.byte(word[j])\n      local new_c = c\n      if c > 127 then\n     \
    \   new_c = string.byte(string.sub(word, 1, j - 1)) + 256 - c\n      end\n   \
    \   new_word = new_word .. string.char(new_c)\n    end\n    new_words[i] = new_word\n\
    \  end\n  for i = 1, #words do\n    new_s = new_s .. new_words[i]\n  end\n  return\
    \ new_s\nend", "  local words = s:gsub(' ', ' ')\n  local new_words = {}\n  for\
    \ i = 1, #words do\n    local word = words[i]\n    local new_word = word\n   \
    \ for j = 1, #word do\n      local c = string.byte(word[j])\n      new_word =\
    \ new_word .. string.char((c > 127 and 255 or c))\n    end\n    new_words[i] =\
    \ new_word\n  end\n  return table.concat(new_words)\nend", "  local words = s:gmatch('([^\
    \ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local new_word = ''\n    for j = 1, #word do\n      local c = word[j]\n \
    \     new_word = new_word .. string.char((string.byte(c) + 32) % 256)\n    end\n\
    \    new_words[i] = new_word\n  end\n  return table.concat(new_words)\nend", " \
    \ local words = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([%z\\1-9]+)(%S+)',\
    \ function(_, w1, w2)\n    return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_,\
    \ w1, w2)\n      return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n\
    \        return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n     \
    \     return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n        \
    \    return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n         \
    \     return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n        \
    \        return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n     \
    \             return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n\
    \                    return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1,\
    \ w2)\n                      return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_,\
    \ w1, w2)\n                        return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_,\
    \ w1, w2)\n                          return w2 .. w1:gsub('([%z\\1-9]+)(%S+)',\
    \ function(_, w1, w2)\n                            return w2 .. w1:gsub('([%z\\\
    1-9]+)(%S+)', function(_, w1, w2)\n                              return w2 ..\
    \ w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n                         \
    \       return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n      \
    \                            return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_,\
    \ w1, w2)\n                                    return w2 .. w1:gsub('([%z\\1-9]+)(%",
  "  local words = string.gmatch(s, '%w+')\n  local shuffled_words = {}\n  for _,\
    \ word in pairs(words) do\n    table.insert(shuffled_words, word)\n  end\n  table.sort(shuffled_words)\n\
    \  return table.concat(shuffled_words, ' ')\nend", "  local words = s:gsub(' ',\
    \ ' '):gsub(' ', ' ')\n  local words = {}\n  for w in words:gmatch'([^ ]+)' do\n\
    \    table.insert(words, w)\n  end\n  table.sort(words)\n  return table.concat(words)\n\
    end", "  local words = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word\
    \ in pairs(words) do\n    local new_word = word\n    local i = 0\n    while i\
    \ < #word do\n      local c = string.byte(word[i])\n      if c > 127 then\n  \
    \      c = string.byte(string.sub(word, 1, i) + string.sub(word, i + 1))\n   \
    \   end\n      new_word = new_word .. string.char(c + ((i % 2 == 0) and 1 or -1))\n\
    \      i = i + 1\n    end\n    new_words[#new_words + 1] = new_word\n  end\n \
    \ return table.concat(new_words, '')\nend", "  local words = s:gmatch('([^ ]+)')\n\
    \  local new_words = {}\n  for _, word in pairs(words) do\n    local new_word\
    \ = word\n    local new_word_len = 0\n    for i = 1, #word do\n      local c =\
    \ string.byte(word, i)\n      local new_c = string.byte(new_word, new_word_len)\n\
    \      if c > new_c then\n        new_word = new_word .. string.sub(word, i, #word)\n\
    \      else\n        new_word_len = new_word_len + 1\n      end\n    end\n   \
    \ new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend", "  local words = string.gmatch(s, '([^ ]+)')\n  local new_words\
    \ = {}\n  for _, word in pairs(words) do\n    table.insert(new_words, word)\n\
    \  end\n  table.sort(new_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(new_words, ' ')\nend", "  local words = s:gmatch('([^\
    \ ]+)') -- Split string into words\n  local word_count = {}\n  for i = 1, #words\
    \ do -- Count occurences of each word\n    word_count[words[i]] = word_count[words[i]]\
    \ or 0\n    word_count[words[i]]  = word_count[words[i]] + 1\n  end\n  -- Sort\
    \ words by their occurences\n  table.sort(word_count, function(a, b) return word_count[a]\
    \ < word_count[b] end)\n  -- Rearrange words by their occurences\n  local new_words\
    \ = {}\n  for i = 1, #words do\n    new_words[i] = words[i]\n  end\n  for i =\
    \ 1, #word_count do\n    new_words[i] = word_count[i]\n  end\n  return table.concat(new_words,\
    \ ' ')\nend", "  local words = string.gmatch(s, '([^ ]+)')\n  local new_words\
    \ = {}\n  for _, word in pairs(words) do\n    table.insert(new_words, word)\n\
    \  end\n  table.sort(new_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(new_words, ' ')\nend", "  local words = string.gmatch(s,\
    \ '%w+') -- Split string into words\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do -- Iterate through each character in word\n      local ascii = string.byte(word[j])\
    \ -- Get the ascii value of current character\n      local new_ascii = ascii +\
    \ 1 -- Increment ascii value by 1\n      new_word = new_word .. string.char(new_ascii)\
    \ -- Append ascii value to new_word\n    end\n    new_words[i] = new_word -- Append\
    \ new_word to new_words\n  end\n  return table.concat(new_words) -- Return new_words\
    \ concatenated into one string\nend", "  local words = string.gmatch(s, '%w+')\
    \ -- get all words in the sentence\n  local sorted_words = {}\n  -- sort words\
    \ by ascii value\n  for i = 1, #words do\n    sorted_words[i] = string.char(string.byte(words[i])\
    \ + 256)\n  end\n  -- rearrange the words by sorting them in ascending order\n\
    \  for i = 1, #words do\n    words[i] = sorted_words[words[i]]\n  end\n  return\
    \ table.concat(words) -- rearrange the words by sorting them in ascending order\n\
    end", "  local words = s:gsub(' ', ' ')\n  local sorted_words = {}\n  for i =\
    \ 1, #words do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words)\n\
    \  return table.concat(sorted_words, ' ')\nend", "  local words = s:gmatch('([^\
    \ ]+)')\n  local new_words = {}\n  for _, word in pairs(words) do\n    local new_word\
    \ = ''\n    for _, c in pairs(word) do\n      new_word = new_word .. string.char((string.byte(c)\
    \ + string.byte(new_word)) % 256)\n    end\n    new_words[#new_words + 1] = new_word\n\
    \  end\n  return table.concat(new_words, ' ')\nend", "  local words = s:gmatch('([^\
    \ ]+)')\n  local new_words = {}\n  for _, word in pairs(words) do\n    table.insert(new_words,\
    \ word)\n  end\n  table.sort(new_words)\n  local new_s = ''\n  for _, word in\
    \ pairs(new_words) do\n    new_s = new_s .. word .. ' '\n  end\n  return new_s\n\
    end", "  local words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for\
    \ _, word in ipairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n\
    \  return table.concat(new_words, ' ')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
