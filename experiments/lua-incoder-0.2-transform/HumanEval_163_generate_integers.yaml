name: HumanEval_163_generate_integers
language: lua
prompt: "-- Given two positive integers a and b, return the even digits between a\n\
  -- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8)\n\
  -- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(10,\
  \ 14)\n-- {}\nlocal function generate_integers(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
  \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
  \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
  \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for i = a, b do\n    table.insert(result, i)\n\
    \  end\n  return result\nend", "  local digits = {}\n  for i = a, b do\n    digits[i]\
    \ = 1\n  end\n  local i = 1\n  while i <= b do\n    if digits[i] then\n      i\
    \ = i + 1\n    else\n      i = i + 1\n      digits[i] = 0\n    end\n  end\n  return\
    \ digits\nend", "  local result = {}\n  for i = a, b do\n    table.insert(result,\
    \ i)\n  end\n  return result\nend", "  local result = {}\n  for i = a, b do\n\
    \    table.insert(result, i)\n  end\n  return result\nend", "  local result =\
    \ {}\n  for i = a, b do\n    table.insert(result, i)\n  end\n  return result\n\
    end", "  local results = {}\n  for i = a, b do\n    table.insert(results, i)\n\
    \  end\n  return results\nend", "  local result = {}\n  for i = a, b do\n    table.insert(result,\
    \ i)\n  end\n  return result\nend", "  local results = {}\n  for i = a, b do\n\
    \    table.insert(results, i)\n  end\n  return results\nend", "  local result\
    \ = {}\n  for i = a, b do\n    table.insert(result, i)\n  end\n  return result\n\
    end", "  local result = {}\n  for i = a, b do\n    table.insert(result, i)\n \
    \ end\n  return result\nend", "  local results = {}\n  for i = a, b do\n    table.insert(results,\
    \ i)\n  end\n  return results\nend", "  local digits = {}\n  for i = a, b do\n\
    \    table.insert(digits, i)\n  end\n  table.sort(digits)\n  return digits\nend",
  "  local digits = {}\n  for i = a, b do\n    digits[i] = true\n  end\n  table.sort(digits)\n\
    \  return table.concat(digits)\nend", "  local result = {}\n  for i = a, b do\n\
    \    table.insert(result, i)\n  end\n  return result\nend", "  local results =\
    \ {}\n  for i = a, b do\n    table.insert(results, i)\n  end\n  return results\n\
    end", "  local results = {}\n  for i = a, b do\n    table.insert(results, i)\n\
    \  end\n  return results\nend", "  local results = {}\n  for i = a, b do\n   \
    \ table.insert(results, i)\n  end\n  return results\nend", "  -- Initialize result\
    \ to an empty set.\n  local result = {}\n  -- Initialize a counter to 0.\n  local\
    \ i = 0\n  -- While the counter is less than the upper bound of the range.\n \
    \ while i < b do\n    -- If the counter is less than the lower bound of the range.\n\
    \    if i < a then\n      -- Add the current digit to the result.\n      table.insert(result,\
    \ i)\n    -- Increment the counter.\n    i = i + 1\n  end\n  -- Return the result.\n\
    \  return result\nend", "  local result = {}\n  for i = a, b do\n    table.insert(result,\
    \ i)\n  end\n  return result\nend", "  local result = {}\n  for i = a, b do\n\
    \    table.insert(result, i)\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
