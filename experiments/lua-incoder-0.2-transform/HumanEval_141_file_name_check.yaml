name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
  -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   -- Check that the file name contains exactly one dot '.'\n   if\
    \ string.find(file_name, \".\") ~= nil then\n      -- Check that the file's name\
    \ contains exactly one digit ('0'-'9')\n      if string.find(file_name, \".\"\
    ) ~= nil then\n         if string.find(file_name, \".\") ~= nil then\n       \
    \     -- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n            if\
    \ string.find(file_name, \".\") ~= nil then\n               if string.find(file_name,\
    \ \".\") ~= nil then\n                  if string.find(file_name, \".\") ~= nil\
    \ then\n                     -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n                    if string.find(file_name,\
    \ \".\") ~= nil then\n                        -- Return Yes if the file's name\
    \ is valid\n                        return 'Yes'\n                    else\n \
    \                       -- Return No if the file's name is invalid\n         \
    \               return 'No'\n                     end\n                  else\n\
    \                     -- Return No if the file's name is invalid\n           \
    \             return 'No'\n                  end\n               else\n      \
    \            -- Return No if the file's name is invalid\n                  return\
    \ 'No'\n               end\n            else\n               -- Return No if the\
    \ file's name is invalid\n               return 'No'\n            end\n      \
    \   else\n            -- Return No if the file's name is invalid\n           \
    \ return 'No'\n         end\n      else\n         -- Return No if the file's name\
    \ is invalid\n         return 'No'\n      end\n   else\n      -- Return No if\
    \ the file's name is invalid\n      return 'No'\n   end\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name < 3 then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '^' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'a' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'z' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return\
    \ nil\n   end\n   if file_name:sub(2, 3) ~= 'txt' then\n      return nil\n   end\n\
    \   if file_name:sub(2, 3) ~= 'exe' then\n      return nil\n   end\n   if file_name:sub(2,\
    \ 3) ~= 'dll' then\n      return nil\n   end\n   return 'Yes'\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name > 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"^[a-zA-Z]\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"^[0-9]\") then\n      return nil\n   end\n\
    \   return 'Yes'\nend", "    local file_ext = string.match(file_name, \"%.[^.]*$\"\
    )\n    local file_ext = string.match(file_ext, \"%[a-z_]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z]\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext", "   if file_name == nil then\n      return nil\n \
    \  end\n   if #file_name < 3 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '0' and\
    \ file_name:sub(1, 1) ~= '9' then\n      return nil\n   end\n   if file_name:sub(2,\
    \ 1) ~= 'a' and file_name:sub(2, 1) ~= 'z' then\n      return nil\n   end\n  \
    \ if file_name:sub(3, 1) ~= 'A' and file_name:sub(3, 1) ~= 'Z' then\n      return\
    \ nil\n   end\n   return 'Yes'\nend", "    local file_name = file_name:gsub('.*/','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.%.','')\n\
    \    local file_name = file_name:gsub('^%[a-z_]','')\n    local file_name = file_name:gsub('%[a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_]','')\n    local file_name\
    \ = file_name:gsub('%[a-z_][a-z_]$','')\n    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_]$','')\n    local file_name\
    \ = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_]','')\n    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-", "    local\
    \ file_name = file_name:gsub('.*/','')\n    local file_name = file_name:gsub('[^0-9]','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:g",
  "   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name == 0 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= 'z' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'Z'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(2, 1) ~= 'txt' then\n \
    \     return 'No'\n   end\n   if file_name:sub(2, 1) ~= 'exe' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(2, 1) ~= 'dll' then\n      return 'No'\n \
    \  end\n   return 'Yes'\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name < 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ '.') ~= nil then\n      if string.find(file_name, '.') ~= 1 then\n         return\
    \ nil\n      end\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, ", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if #file_name < 3 then\n      return nil\n\
    \   end\n   if string.find(file_name, '.') ~= 1 then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'a' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,1) ~= 'z' then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'A' then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'Z'\
    \ then\n      return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n     \
    \ return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return nil\n\
    \   end\n   return 'Yes'\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if string.len(file_name) > 3 then\n      return 'No'\n   end\n   if\
    \ string.find(file_name, '.') then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ '^[a-z][a-z]') then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ '^[0-9][a-z][a-z]') then\n      return 'No'\n   end\n   return 'Yes'\nend",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= '' then\n    local dot_index = string.find(file_name, '.')\n\
    \    if dot_index == nil then\n      return 'No'\n    end\n    -- Check that the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n    -- the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= '' then\n      if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n        return 'No'\n      end\n    end\n    -- Check that the\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if\
    \ string.sub(file_name,dot_index+1,3) ~= 'txt' and string.sub(file_name,dot_index+1,3)\
    \ ~= 'exe' and string.sub(file_name,dot_index+1,3) ~= 'dll' then\n      return\
    \ 'No'\n    end\n  end\n  return 'Yes'\nend", "   if string.find(file_name, \"\
    .\") ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \".\")-1)\n      local sub_string2 = string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name))\n      \n      if string.find(sub_string, \".\"\
    ) ~= nil then\n         if string.find(sub_string, \".\") ~= nil then\n      \
    \      if string.find(sub_string, \".\") ~= nil then\n               if string.find(sub_string,\
    \ \".\") ~= nil then\n                  if string.find(sub_string, \".\") ~= nil\
    \ then\n                     if string.find(sub_string, \".\") ~= nil then\n \
    \                       if string.find(sub_string, \".\") ~= nil then\n      \
    \                     if string.find(sub_string, \".\") ~= nil then\n        \
    \                      if string.find(sub_string, \".\") ~= nil then\n       \
    \                          if string.find(sub_string, \".\") ~= nil then\n   \
    \                                 if string.find(sub_string, \".\") ~= nil then\n\
    \                                       if string.find(sub_string, \".\") ~= nil\
    \ then\n                                          if string.find(sub_string, \"\
    .\") ~= nil then\n                                             if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                   if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                      if\
    \ string.find(sub_string, \".\") ~= nil then\n                               \
    \                          if string.find(sub_string, \".\") ~= nil then\n   \
    \                                                          if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \          if string.find(sub_string, \".\") ~= nil then\n                   \
    \                                                 if string.find(sub_string, \"\
    .\") ~= nil then\n                                                           \
    \              if string.find(sub_string, \".\") ~= nil then\n               \
    \                                                             if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                        if string.find(sub_string, \".\") ~= nil then\n     \
    \                                                                            \
    \ if string.find(sub_string, \".\") ~= nil then\n                            \
    \                                                         if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                                 if string.find(sub_string, \".\") ~= nil then\n\
    \                                                                            \
    \               if string.find(sub_string, \".\") ~= nil then\n              \
    \                                                                            \
    \    if string.find(sub_string, \".\") ~= nil then\n                         \
    \                                                                        if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                                            if string.", "  -- Check that the\
    \ file name contains exactly one dot '.'\n  if #file_name ~= 1 then\n    return\
    \ 'No'\n  end\n  -- Check that the substring before the dot is not empty\n  if\
    \ file_name[1] ~= '' then\n    return 'No'\n  end\n  -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the substring before the\
    \ dot starts with a letter from the latin alphabet\n  if string.find(file_name,\
    \ '^[a-Z]') then\n    return 'No'\n  end\n  -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n  if string.find(file_name,\
    \ '[txt,exe,dll]') then\n    return 'No'\n  end\n  -- Check that the file's name\
    \ contains exactly three digits ('0'-'9')\n  if string.find(file_name, '^[0-9]')\
    \ then\n    return 'No'\n  end\n  -- Check that the file's name contains exactly\
    \ one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n  end\n\
    \  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n      return\
    \ 'No'\n    end\n    -- Check that the substring before the dot should not be\
    \ empty, and it starts with a letter \n    -- from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n    if file_name:sub(1, 1) ~= '' then\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ 'No'\n      end\n    end\n    -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(1,\
    \ #file_name), {'txt', 'exe', 'dll'}) == nil then\n      return 'No'\n    end\n\
    \  end\n  return 'Yes'\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil and file_name ~= '' then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with \n\
    \      -- a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name\
    \ ~= '' then\n         if file_name:sub(1, 1) ~= '-' then\n            if file_name:sub(1,\
    \ 1) ~= '0' then\n               if file_name:sub(1, 1) ~= '1' then\n        \
    \          if file_name:sub(1, 1) ~= '2' then\n                     if file_name:sub(1,\
    \ 1) ~= '3' then\n                        if file_name:sub(1, 1) ~= '4' then\n\
    \                           if file_name:sub(1, 1) ~= '5' then\n             \
    \                 if file_name:sub(1, 1) ~= '6' then\n                       \
    \          if file_name:sub(1, 1) ~= '7' then\n                              \
    \      if file_name:sub(1, 1) ~= '8' then\n                                  \
    \     if file_name:sub(1, 1) ~= '9' then\n                                   \
    \       if file_name:sub(1, 1) ~= 'A' then\n                                 \
    \            if file_name:sub(1, 1) ~= 'B' then\n                            \
    \                    if file_name:sub(1, 1) ~= 'C' then\n                    \
    \                               if file_name:sub(1, 1) ~= 'D' then\n         \
    \                                             if file_name:sub(1, 1) ~= 'E' then\n\
    \                                                         if file_name:sub(1,\
    \ 1) ~= 'F' then\n                                                           \
    \  if file_name:sub(1, 1) ~= 'G' then\n                                      \
    \                           if file_name:sub(1, 1) ~= 'H' then\n             \
    \                                                        if file_name:sub(1, 1)\
    \ ~= 'I' then\n                                                              \
    \         if file_name:sub(1, 1) ~= 'J' then\n                               \
    \                                           if file_name:sub(1, 1) ~= 'K' then\n\
    \                                                                            if\
    \ file_name:sub(1, 1) ~= 'L' then\n                                          \
    \                                     if file_name:sub(1, 1) ~= 'M' then\n   \
    \                                                                            \
    \   if file_name:sub(1, 1) ~= 'N' then\n                                     \
    \                                                if file_name:sub(1, 1) ~= 'O'\
    \ then\n                                                                     \
    \                  if file_name:sub(1, 1) ~= 'P' then\n                      \
    \                                                                    if file_name:sub(1,\
    \ 1) ~= 'Q' then\n                                                           \
    \                                 if file_name:sub(1, 1) ~= 'R' then\n       \
    \                                                                            \
    \            if file_name:sub(1, 1) ~= 'S' then\n                            \
    \                                                                      if file_name:sub(1,\
    \ 1) ~= 'T' then\n                                                           \
    \                                          if file_name:sub(1, 1) ~= 'U' then\n\
    \                                                                            \
    \                           if file_name:sub(1, 1) ~= 'V' then\n             \
    \                                                                            \
    \                if file_name", "   if #file_name > 3 then\n      return 'No'\n\
    \   end\n   if #file_name == 0 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n      return 'No'\n   end\n   if file_name:sub(2, 2) ~= '.'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n      return 'No'\n   end\n   if string.find(file_name:sub(1,\
    \ #file_name), '.') ~= 1 then\n      return 'No'\n   end\n   return 'Yes'\nend",
  "    local file_name = file_name:lower()\n    local file_name = file_name:gsub('.',\
    \ '')\n    local file_name = file_name:gsub('%w', '')\n    local file_name = file_name:gsub('%d',\
    \ '')\n    local file_name = file_name:gsub('%f', '')\n    local file_name = file_name:gsub('%h',\
    \ '')\n    local file_name = file_name:gsub('%u', '')\n    local file_name = file_name:gsub('%t',\
    \ '')\n    local file_name = file_name:gsub('%x', '')\n    local file_name = file_name:gsub('%o',\
    \ '')\n    local file_name = file_name:gsub('%n', '')\n    local file_name = file_name:gsub('%p',\
    \ '')\n    local file_name = file_name:gsub('%b', '')\n    local file_name = file_name:gsub('%e',\
    \ '')\n    local file_name = file_name:gsub('%v', '')\n    local file_name = file_name:gsub('%x',\
    \ '')\n    local file_name = file_name:gsub('%o', '')\n    local file_name = file_name:gsub('%n',\
    \ '')\n    local file_name = file_name:gsub('%p', '')\n    local file_name = file_name:gsub('%b',\
    \ '')\n    local file_name = file_name:gsub('%e', '')\n    local file_name = file_name:gsub('%v',\
    \ '')\n    local file_name = file_name:gsub('%x', '')\n    local file_name = file_name:gsub('%o',\
    \ '')\n    local file_name = file_name:gsub('%n', '')\n    local file_name = file_name:gsub('%p',\
    \ '')\n    local file_name = file_name:gsub('%b', '')\n    local file_name = file_name:gsub('%e',\
    \ '')\n    local file_name = file_name:gsub('%v', '')\n    local file_name = file_name:gsub('%x',\
    \ '')\n    local file_name = file_name:gsub('%o', '')\n    local file_name = file_name:gsub('%n',\
    \ '')\n    local file_name = file_name:gsub('%p', '')\n    local file_name = file_name:gsub('%b',\
    \ '')\n    local file_name = file_name:gsub('%e', '')\n    local file_name = file_name:gsub('%v',\
    \ '')\n    local file_name = file_name:gsub('%x', '')\n    local file_name = file_name:gsub('%o',\
    \ '')\n    local file_name = file_name:gsub('%n', '')\n    local file_name = file_name:gsub('%p',\
    \ '')\n    ", "   -- Check that the file name contains exactly one dot '.'\n \
    \  if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1)\
    \ ~= '.' then\n         return 'No'\n      end\n   end\n   -- Check that the file's\
    \ name contains only digits and one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n         if file_name:sub(2,\
    \ 2) ~= '0' and file_name:sub(2, 2) ~= '9' then\n            return 'No'\n   \
    \      end\n      end\n   end\n   -- Check that the file's name starts with a\
    \ letter from the latin alphabet ('a' \n   -- to 'z' and 'A' to 'Z')\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n\
    \         if file_name:sub(1, 1) ~= 'a' and file_name:sub(1, 1) ~= 'A' then\n\
    \            return 'No'\n         end\n      end\n   end\n   -- Check that the\
    \ file's name contains only these extensions: ['txt', 'exe', 'dll']\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      if file_name:sub(1, 4) ~= '.' then\n\
    \         if file_name:sub(1, 4) ~= 'txt' and file_name:sub(1, 4) ~= 'exe' and\
    \ file_name:sub(1, 4) ~= 'dll' then\n            return 'No'\n         end\n \
    \     end\n   end\n   return 'Yes'\nend", "    local file_name = file_name:lower()\n\
    \    local dot_index = file_name:find('.')\n    local dot_string = file_name:sub(1,\
    \ dot_index)\n    local dot_string_length = dot_string:len()\n    local dot_string_letter\
    \ = string.sub(dot_string, 1, 1)\n    local dot_string_letter_index = string.find(string.lower(dot_string),\
    \ 'a')\n    local dot_string_letter_index = dot_string_letter_index - 1\n    local\
    \ dot_string_letter = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index\
    \ + 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_", "   if #file_name >\
    \ 3 then\n      return 'No'\n   elseif #file_name == 0 then\n      return 'No'\n\
    \   elseif #file_name ~= 1 then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'a' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'b' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 'c' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'd' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'e' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'f' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 'g' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'h' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'i' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'j' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 'k' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'l' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'm' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'n' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 'o' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'p' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'q' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'r' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 's' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 't' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'u' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'v' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 'w' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'x' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'y' then\n\
    \      return 'No'\n   elseif file_name", "   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil then\n      -- Get the substring\
    \ before the dot '.'\n      local file_name = file_name:sub(1, file_name:find('.')-1)\n\
    \      -- Check that the substring before the dot starts with a letter from the\
    \ latin alphabet ('a' -'z' and 'A'-'Z')\n      if file_name:sub(1, 1) ~= 'a' and\
    \ file_name:sub(1, 1) ~= 'A' then\n         return 'No'\n      end\n      -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \    if file_name:sub(file_name:find('.')+1, file_name:find('.')+3) ~= 'txt' and\
    \ file_name:sub(file_name:find('.')+1, file_name:find('.')+3) ~= 'exe' and file_name:sub(file_name:find('.')+1,\
    \ file_name:find('.')+3) ~= 'dll' then\n         return 'No'\n      end\n   end\n\
    \   return 'Yes'\nend", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if string.find(file_name, '.') then\n      -- Check that the substring\
    \ before the dot is not empty, and it starts with a letter \n      -- from the\
    \ latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1) ~=\
    \ '' or string.sub(file_name,1,1) ~= 'a' \n      or string.sub(file_name,1,1)\
    \ ~= 'A' then\n         return 'No'\n      end\n      -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n      if string.find(file_name,\
    \ 'txt') then\n         return 'Yes'\n      elseif string.find(file_name, 'exe')\
    \ then\n         return 'Yes'\n      elseif string.find(file_name, 'dll') then\n\
    \         return 'Yes'\n      else\n         return 'No'\n      end\n   else\n\
    \      return 'No'\n   end\nend", "  -- Check that the file name contains exactly\
    \ one dot '.'\n  if file_name ~= nil and file_name ~= '' then\n    if string.find(file_name,\
    \ '.') ~= nil then\n      -- Check that the substring before the dot should not\
    \ be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, '.') ~= nil then\n        -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n        if string.find(file_name,\
    \ '.', 1) ~= nil then\n          -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n          if string.find(file_name,\
    \ '.', 2) ~= nil then\n            -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name,\
    \ '.', 3) ~= nil then\n              return 'Yes'\n            else\n        \
    \      return 'No'\n            end\n          else\n            return 'No'\n\
    \          end\n        else\n          return 'No'\n        end\n      else\n\
    \        return 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n\
    \    return 'No'\n  end\nend", "   if file_name == nil then\n      return nil\n\
    \   end", "    local file_name = file_name:gsub('[^0-9\\.]', '')\n    local file_name\
    \ = file_name:sub(1, 3)\n    local file_name = file_name:sub(1, 1)\n    local\
    \ file_name = file_name:lower()\n    local file_name = file_name:sub(1, 3)\n \
    \   local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)", "   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name\
    \ == 0 then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '\\' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= '_' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'a' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'b'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'c' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'd' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'e' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'f' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'g' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'h'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'i' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'j' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'k' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'l' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'm' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'n'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'o' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'p' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'q' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'r' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 's' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 't'\
    \ then\n      return 'No'\n   end\n   if file_name", "   -- Check that the file\
    \ name contains exactly one dot '.'\n   if file_name ~= nil then\n      -- Get\
    \ the substring before the dot\n      local file_name = string.sub(file_name,\
    \ 1, string.find(file_name, \".\"))\n      -- Check that it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \"^[a-Z]\") ~= nil then\n         return 'Yes'\n      else\n         return\
    \ 'No'\n      end\n   else\n      return 'No'\n   end\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   local file_name = file_name:lower()\n\
    \   if #file_name > 3 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '.'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= string.sub('abcdefghijklmnopqrstuvwxyz',\
    \ 1, 1)\n   then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name)\
    \ ~= 'exe'\n   then\n      return 'No'\n   end\n   return 'Yes'\nend", "   --\
    \ Check that the file name contains exactly one dot '.'\n   if file_name ~= nil\
    \ and file_name ~= '' then\n      -- Get the substring before the dot\n      local\
    \ file_ext = file_name:sub(1, file_name:find('.')-1)\n      -- Check that it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      local file_ext_letter\
    \ = string.lower(file_ext)\n      if file_ext_letter ~= '' and file_ext_letter\
    \ ~= '.' and file_ext_letter ~= '..' then\n         -- Check that it contains\
    \ only three digits ('0'-'9')\n         if string.find(file_ext, '%w') ~= nil\
    \ then\n            -- Check that it contains only valid file extensions\n   \
    \         if string.find(file_ext, '%w') ~= nil then\n               if string.find(file_ext,\
    \ '%w') ~= nil then\n                  if string.find(file_ext, '%w') ~= nil then\n\
    \                     return 'Yes'\n                  else\n                 \
    \    return 'No'\n                  end\n               else\n               \
    \   return 'No'\n               end\n            else\n               return 'No'\n\
    \            end\n         else\n            return 'No'\n         end\n     \
    \ else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end", "   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ < 3 then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '-' or file_name:sub(1,\
    \ 1) ~= '0' then\n      return nil\n   end\n   if file_name:sub(1, 2) ~= '.' or\
    \ file_name:sub(1, 2) ~= '-' or file_name:sub(1, 2) ~= '0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 3) ~= '.' or file_name:sub(1, 3) ~= '-'\
    \ or file_name:sub(1, 3) ~= '0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 4) ~= '.' or file_name:sub(1, 4) ~= '-' or file_name:sub(1, 4) ~= '0' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 5) ~= '.' or file_name:sub(1,\
    \ 5) ~= '-' or file_name:sub(1, 5) ~= '0' then\n      return nil\n   end\n   if\
    \ file_name:sub(1, 6) ~= '.' or file_name:sub(1, 6) ~= '-' or file_name:sub(1,\
    \ 6) ~= '0' then\n      return nil\n   end\n   if file_name:sub(1, 7) ~= '.' or\
    \ file_name:sub(1, 7) ~= '-' or file_name:sub(1, 7) ~= '0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 8) ~= '.' or file_name:sub(1, 8) ~= '-'\
    \ or file_name:sub(1, 8) ~= '0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 9) ~= '.' or file_name:sub(1, 9) ~= '-' or file_name:sub(1, 9) ~= '0' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 10) ~= '.' or file_name:sub(1,\
    \ 10) ~= '-' or file_name:sub(1, 10) ~= '0' then\n      return nil\n   end\n \
    \  if file_name:sub(1, 11) ~= '.' or file_name:sub(1, 11) ~= '-' or file_name:sub(1,\
    \ 11) ~= '0' then\n      return nil\n   end\n   if file_name:sub(1, 12) ~= '.'\
    \ or file_name:sub(1, 12) ~= '-' or file_name:sub(1, 12) ~= '0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 13) ~= '.' or file_name:sub(1, 13) ~= '-'\
    \ or file_name:sub(1, 13) ~= '0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 14) ~= '.' or ", "    local file_name = file_name:lower()\n    local dot_index\
    \ = string.find(file_name, '.')\n    if dot_index == nil then\n        return\
    \ 'No'\n    end\n    local file_name = file_name:sub(1, dot_index)\n    local\
    \ first_letter = string.sub(file_name, 1, 1)\n    if first_letter ~= 'a' and first_letter\
    \ ~= 'A' then\n        return 'No'\n    end\n    local extensions = ''\n    if\
    \ string.find(file_name, 'exe') then\n        extensions = extensions .. 'exe'\n\
    \    end\n    if string.find(file_name, 'dll') then\n        extensions = extensions\
    \ .. 'dll'\n    end\n    if extensions == '' then\n        return 'No'\n    end\n\
    \    if #file_name == 1 then\n        return 'No'\n    end\n    if #file_name\
    \ > 3 then\n        return 'No'\n    end\n    if string.sub(file_name:sub(1, dot_index),\
    \ 0, 1) ~= 'a' and string.sub(file_name:sub(1, dot_index), 0, 1) ~= 'A' then\n\
    \        return 'No'\n    end\n    if #extensions > 0 then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend", "   local file_extension = string.match(file_name,\
    \ \"%.(%w+)$\")\n   if file_extension == nil then\n      return \"No\"\n   else\n\
    \      if string.find(file_name, \"%.\") == nil then\n         return \"No\"\n\
    \      else\n         if string.find(file_name, \"%.\") ~= 1 then\n          \
    \  return \"No\"\n         else\n            if string.find(file_name, \"%.\"\
    ) ~= 1 then\n               return \"No\"\n            else\n               if\
    \ string.find(file_name, \"%.\") ~= 1 then\n                  return \"No\"\n\
    \               else\n                  if string.find(file_name, \"%.\") ~= 1\
    \ then\n                     return \"No\"\n                  else\n         \
    \            if string.find(file_name, \"%.\") ~= 1 then\n                   \
    \     return \"No\"\n                     else\n                        if string.find(file_name,\
    \ \"%.\") ~= 1 then\n                           return \"No\"\n              \
    \          else\n                           if string.find(file_name, \"%.\")\
    \ ~= 1 then\n                              return \"No\"\n                   \
    \        else\n                              if string.find(file_name, \"%.\"\
    ) ~= 1 then\n                                 return \"No\"\n                \
    \              else\n                                 if string.find(file_name,\
    \ \"%.\") ~= 1 then\n                                    return \"No\"\n     \
    \                            else\n                                    if string.find(file_name,\
    \ \"%.\") ~= 1 then\n                                       return \"No\"\n  \
    \                                  else\n                                    \
    \   if string.find(file_name, \"%.\") ~= 1 then\n                            \
    \              return \"No\"\n                                       else\n  \
    \                                        if string.find(file_name, \"%.\") ~=\
    \ 1 then\n                                             return \"No\"\n       \
    \                                   else\n                                   \
    \          if string.find(file_name, \"%.\") ~= 1 then\n                     \
    \                           return \"No\"\n                                  \
    \           else\n                                                if string.find(file_name,\
    \ \"%.\") ~= 1 then\n                                                   return\
    \ \"No\"\n                                                else\n             \
    \                                      if string.find(file_name, \"%.\") ~= 1\
    \ then\n                                                      return \"No\"\n\
    \                                                   else\n                   \
    \                                   if string.find(file_name, \"%.\") ~= 1 then\n\
    \                                                         return \"No\"\n    \
    \                                                  else\n                    \
    \                                     return \"Yes\"\n                       \
    \                               end\n                                        \
    \           end\n                                                end\n       \
    \                                      end\n                                 \
    \         end\n                                       end\n                  \
    \                  end\n                                 end\n               \
    \               end\n                           end\n                        end\n\
    \                     end\n                  end\n               end\n       \
    \     end\n         end\n      end\n   end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't require any external libraries. I edited my question\
    \ to reflect that.\n<|/ ", "    local file_name = file_name:gsub(\"^%d+\", \"\"\
    ) -- Remove all digits from the beginning of the string\n    local file_name =\
    \ file_name:gsub(\"%.\", \"\") -- Remove all dots from the beginning of the string\n\
    \    local file_name = file_name:gsub(\"^[a-zA-Z]+\", \"\") -- Remove all letters\
    \ from the beginning of the string\n    local file_name = file_name:gsub(\"%[!a-z]\"\
    , \"\") -- Remove all letters from the end of the string\n    local file_name\
    \ = file_name:gsub(\"%[a-z]\", \"\") -- Remove all letters from the beginning\
    \ of the string\n    local file_name = file_name:gsub(\"%[^a-zA-Z.]\", \"\") --\
    \ Remove all letters from the end of the string\n    local file_name = file_name:gsub(\"\
    %[!a-z.]\", \"\") -- Remove all letters from the beginning of the string\n   \
    \ local file_name = file_name:gsub(\"%[a-z.]\", \"\") -- Remove all letters from\
    \ the end of the string\n    local file_name = file_name:gsub(\"%[^a-zA-Z0-9]\"\
    , \"\") -- Remove all letters from the end of the string\n    local file_name\
    \ = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\") -- Remove all letters from the end\
    \ of the string\n    local file_name = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\"\
    ) -- Remove all letters from the end of the string\n    local file_name = file_name:gsub(\"\
    %[^a-zA-Z0-9.]\", \"\") -- Remove all letters from the end of the string\n   \
    \ local file_name = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\") -- Remove all letters\
    \ from the end of the string\n    local file_name = file_name:gsub(\"%[^a-zA-Z0-9.]\"\
    , \"\") -- Remove all letters from the end of the string\n    local file_name\
    \ = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\") -- Remove all letters from the end\
    \ of the string\n    local file_name = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\"\
    ) -- Remove all letters from the end of the string\n    local file_name = file_name:gsub(\"\
    %[^a-zA-Z0-9.]\", \"\") -- Remove all letters from the end of the string\n   \
    \ local file_name = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\") -- Remove all letters\
    \ from the end of the string\n    local file_name = file_name:gsub(\"%[^a-zA-Z0-9.]\"\
    , \"\") -- Remove all letters from the end of the string\n    local file_name\
    \ = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\") -- Remove all letters from the end\
    \ of the string\n    local file_name = file_name:gsub(\"%[^a-zA-Z0-9.]\", \"\"\
    ) -- Remove all letters from the end of the string\n    ", "   local file_name\
    \ = file_name:gsub(\"^%w+\", \"\")\n   local file_name = file_name:gsub(\"%.\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n   local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n   local file_name = file_name:gsub(\"^%l\", \"\")\n   local file_name\
    \ = file_name:gsub(\"^", "   if #file_name > 3 then\n      return false\n   end\n\
    \   if file_name ~= string.sub(file_name, 1, 1) then\n      return false\n   end\n\
    \   if string.sub(file_name, 1, 1) ~= 'a' then\n      return false\n   end\n \
    \  if string.sub(file_name, 1, 1) ~= 'z' then\n      return false\n   end\n  \
    \ if string.sub(file_name, 1, 1) ~= 'A' then\n      return false\n   end\n   if\
    \ string.sub(file_name, 1, 1) ~= 'Z' then\n      return false\n   end\n   if string.sub(file_name,\
    \ 1, 2) ~= '.' then\n      return false\n   end\n   if string.sub(file_name, 1,\
    \ 3) ~= '.' then\n      return false\n   end\n   if string.sub(file_name, 1, 4)\
    \ ~= '.' then\n      return false\n   end\n   if string.sub(file_name, 1, 5) ~=\
    \ '.' then\n      return false\n   end\n   if string.sub(file_name, 1, 6) ~= '.'\
    \ then\n      return false\n   end\n   if string.sub(file_name, 1, 7) ~= '.' then\n\
    \      return false\n   end\n   if string.sub(file_name, 1, 8) ~= '.' then\n \
    \     return false\n   end\n   if string.sub(file_name, 1, 9) ~= '.' then\n  \
    \    return false\n   end\n   return true\nend", "   -- Check that the file name\
    \ contains only digits and one dot\n   if string.find(file_name, \"[^0-9.]\")\
    \ then\n      return 'No'\n   end\n   -- Check that there is only one dot in the\
    \ file name\n   if string.find(file_name, \".\") then\n      return 'No'\n   end\n\
    \   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- Check that there is only one dot\
    \ in the file name\n   if string.find(file_name, \".\") then\n      return 'No'\n\
    \   end\n   -- Check that there is only one dot in the file name\n   if string.find(file_name,\
    \ \".\") then\n      return '", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name\
    \ < 1 then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n      return 'No'\n   end\n   if string.find(file_name:sub(1,\
    \ #file_name), 'exe') ~= nil then\n      return 'No'\n   end\n   if string.find(file_name:sub(1,\
    \ #file_name), 'dll') ~= nil then\n      return 'No'\n   end\n   return 'Yes'\n\
    end", "   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      if string.find(file_name, \".\") == 1 then\n     \
    \    if string.find(file_name, \".\") == 1 then\n            if string.find(file_name,\
    \ \".\") == 1 then\n               if string.find(file_name, \".\") == 1 then\n\
    \                  return \"No\"\n               end\n            end\n      \
    \   end\n      end\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      if string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   return \"No\"\n               end\n            end\n         end\n      end\n\
    \   end\n   if string.find(file_name, \".\") == nil then\n      if string.find(file_name,\
    \ \".\") == nil then\n         if string.find(file_name, \".\") == nil then\n\
    \            if string.find(file_name, \".\") == nil then\n               if string.find(file_name,\
    \ \".\") == nil then\n                  return \"No\"\n               end\n  \
    \          end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") == nil then\n      if string.find(file_name, \".\") == nil then\n   \
    \      if string.find(file_name, \".\") == nil then\n            if string.find(file_name,\
    \ \".\") == nil then\n               if string.find(file_name, \".\") == nil then\n\
    \                  return \"No\"\n               end\n            end\n      \
    \   end\n      end\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      if string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   return \"No\"\n               end\n            end\n         end\n      end\n\
    \   end\n   if string.find(file_name, \".\") == nil then\n      if string.find(file_name,\
    \ \".\") == nil then\n         if string.find(file_name, \".\") == nil then\n\
    \            if string.find(file_name, \".\") == nil then\n               if string.find(file_name,\
    \ \".\") == nil then\n                  return \"No\"\n               end\n  \
    \          end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") == nil then\n      if string.find(file_name, \".\") == nil then\n   \
    \      if string.", "   if #file_name > 3 then\n      return 'No'\n   end\n  \
    \ if #file_name == 0 then\n      return 'No'\n   end\n   if file_name:sub(1, 1)\
    \ ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= 'Z' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 2) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'txt'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'exe' then\n \
    \     return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'dll' then\n      return\
    \ 'No'\n   end\n   return 'Yes'\nend", "   local file_name = file_name:gsub('.*/','')\n\
    \   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name == 0 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1,1) ~= 'a' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(2,2) ~= 'z' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1,1) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1,2)\
    \ ~= 'Z' then\n      return 'No'\n   end\n   return 'Yes'\nend", "  -- Check that\
    \ the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= '' then\n    if string.find(file_name, '.') ~= nil then\n      -- Check that\
    \ the substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ '.') ~= nil then\n        local first_letter = string.sub(file_name,1,1)\n \
    \       if string.find(string.lower(first_letter), string.letters) ~= nil then\n\
    \          -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n          if string.find(file_name, '.') ~= nil then\n      \
    \      local last_letter = string.sub(file_name,string.find(file_name, '.') +\
    \ 1)\n            if string.find(last_letter, 'txt') ~= nil then\n           \
    \   return 'Yes'\n            elseif string.find(last_letter, 'exe') ~= nil then\n\
    \              return 'Yes'\n            elseif string.find(last_letter, 'dll')\
    \ ~= nil then\n              return 'Yes'\n            else\n              return\
    \ 'No'\n            end\n          else\n            return 'No'\n          end\n\
    \        else\n          return 'No'\n        end\n      else\n        return\
    \ 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n    return 'No'\n\
    \  end\nend", "   if #file_name > 3 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\.' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= string.upper(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n      return 'No'\n   end\n   if string.find(file_name, '\\\
    .') ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '\\.',\
    \ 1) ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '\\.',\
    \ 2) ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '\\.',\
    \ 3) ~= 1 then\n      return 'No'\n   end\n   return 'Yes'\nend", "    local file_name\
    \ = file_name:gsub('[^0-9.]', '')\n    local file_name = file_name:sub(1, 3)\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 3)", "   if #file_name > 3 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '\\.' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= string.byte('a'..string.byte('z'))\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= '.' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'txt' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'exe' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'dll' then\n\
    \      return 'No'\n   end\n   return 'Yes'\nend", "    local num_digits = string.len(file_name)\
    \ - string.len(string.sub(file_name,1,1))\n    if num_digits > 3 then\n      \
    \  return 'No'\n    end\n    local dot_index = string.find(file_name,'.')\n  \
    \  if dot_index == nil then\n        return 'No'\n    end\n    local first_letter\
    \ = string.sub(file_name,1,1)\n    local second_letter = string.sub(file_name,dot_index+1,1)\n\
    \    if first_letter ~= 'a' and first_letter ~= 'A' then\n        return 'No'\n\
    \    end\n    if second_letter ~= 'txt' and second_letter ~= 'exe' and second_letter\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend", "   if\
    \ string.find(file_name, \".\") ~= nil then\n      if string.find(file_name, \"\
    .\") ~= 1 then\n         return \"No\"\n      end\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then", "    local file_name = file_name:gsub('%.', '')\n    local\
    \ file_name = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.', '')\n    local\
    \ file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.', '')\n    local file_name =\
    \ file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local\
    \ file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.', '')\n  \
    \  local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.%.', '')\n\
    \    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.%.', '')\n    local\
    \ file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.%.",
  "   -- Get the file's name without the extension\n   local file_name = file_name:sub(1,\
    \ -4)\n   -- Get the substring before the dot\n   local file_name = file_name:sub(1,\
    \ 1)\n   -- Check if the substring starts with a letter from the latin alphabet\n\
    \   if string.sub(file_name, 1, 1) ~= 'a' and string.sub(file_name, 1, 1) ~= 'A'\
    \ then\n      -- If it starts with a digit, return 'No'\n      if string.sub(file_name,\
    \ 1, 1) ~= '0' then\n         return 'No'\n      end\n   end\n   -- Check if the\
    \ substring after the dot is one of the allowed extensions\n   if string.sub(file_name,\
    \ string.len(file_name) - 4, string.len(file_name)) ~= 'txt' then\n      -- If\
    \ it isn't one of the allowed extensions, return 'No'\n      return 'No'\n   end\n\
    \   if string.sub(file_name, string.len(file_name) - 4, string.len(file_name))\
    \ ~= 'exe' then\n      -- If it isn't one of the allowed extensions, return 'No'\n\
    \      return 'No'\n   end\n   if string.sub(file_name, string.len(file_name)\
    \ - 4, string.len(file_name)) ~= 'dll' then\n      -- If it isn't one of the allowed\
    \ extensions, return 'No'\n      return 'No'\n   end\n   -- If it passes all tests,\
    \ return 'Yes'\n   return 'Yes'\nend", "   -- Initialize a variable to store the\
    \ result of the check\n   local result = nil\n   -- Initialize a variable to store\
    \ the file's name\n   local file_name = file_name\n   -- Initialize a variable\
    \ to store the file's extension\n   local file_extension = nil\n   -- Initialize\
    \ a variable to store the file's name's length\n   local file_name_length = nil\n\
    \   -- Initialize a variable to store the file's extension's length\n   local\
    \ file_extension_length = nil\n   -- Initialize a variable to store the file's\
    \ name's first character\n   local file_name_first_character = nil\n   -- Initialize\
    \ a variable to store the file's extension's first character\n   local file_extension_first_character\
    \ = nil\n   -- Initialize a variable to store the file's name's last character\n\
    \   local file_name_last_character = nil\n   -- Initialize a variable to store\
    \ the file's extension's last character\n   local file_extension_last_character\
    \ = nil\n   -- Initialize a variable to store the file's name's first character's\
    \ index\n   local file_name_first_character_index = nil\n   -- Initialize a variable\
    \ to store the file's extension's first character's index\n   local file_extension_first_character_index\
    \ = nil\n   -- Initialize a variable to store the file's name's last character's\
    \ index\n   local file_name_last_character_index = nil\n   -- Initialize a variable\
    \ to store the file's extension's last character's index\n   local file_extension_last_character_index\
    \ = nil\n   -- Initialize a variable to store the file's name's first character's\
    \ value\n   local file_name_first_character_value = nil\n   -- Initialize a variable\
    \ to store the file's extension's first character's value\n   local file_extension_first_character_value\
    \ = nil\n   -- Initialize a variable to store the file's name's last character's\
    \ value\n   local file_name_last_character_value = nil\n   -- Initialize a variable\
    \ to store the file's extension's last character's value\n   local file_extension_last_character_value\
    \ = nil\n   -- Initialize a variable to store the file's name's first character's\
    \ value's index\n   local file_name_first_character_value_index = nil\n   -- Initialize\
    \ a variable to store the file's extension's first character's value's index\n\
    \   local file_extension_first_character_value_index = nil\n   -- Initialize a\
    \ variable to store the file's name's last character's value's index\n   local\
    \ file_name_last_character_value_index = nil\n   -- Initialize a variable to store\
    \ the file's extension's last character's value's index\n   local file_extension_last_character_value_index\
    \ = nil\n   -- Initialize a variable to store the file", "   local file_name =\
    \ file_name:gsub('.', '')\n   local file_name = file_name:gsub('[^0-9a-zA-Z]',\
    \ '')\n   local file_name = file_name:gsub('^[^a-zA-Z]', '')\n   local file_name\
    \ = file_name:gsub('[^a-zA-Z]', '')\n   if file_name == '' then\n      return\
    \ 'No'\n   else\n      return 'Yes'\n   end\nend", "   if file_name == nil then\n\
    \      return nil\n   end\n   if #file_name > 3 then\n      return nil\n   end\n\
    \   if #file_name < 1 then\n      return nil\n   end\n   if file_name:sub(1, 1)\
    \ ~= '\\' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\\'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '/'  then\n   \
    \   return nil\n   end\n   if file_name:sub(1, 1) ~= '~'  then\n      return nil\n\
    \   end\n   if file_name:sub(1, 1) ~= '\\'' then\n      return nil\n   end\n \
    \  if file_name:sub(1, 1) ~= '-'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '_'  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '~'\
    \  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '^'  then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 1) ~= '&'  then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '('  then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= ')'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '|'  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '<'\
    \  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '>'  then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 1) ~= '?'  then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= ':'  then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '@'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '['  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= ']'\
    \  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '{'  then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 1) ~= '}'  then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '|'  then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '+'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '-'  then\n", "   if file_name == nil then\n      return nil\n   end",
  "   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ > 3 then\n      return 'No'\n   end\n   if string.find(file_name, '.') then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '^[a-Z]') then\n    \
    \  return 'No'\n   end\n   if string.find(file_name, '^[1-8]') then\n      return\
    \ 'No'\n   end\n   return 'Yes'\nend", "   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil then\n      -- Get the substring\
    \ before the dot\n      local file_prefix = file_name:sub(1, file_name:find('%.'))\n\
    \      -- Check that the substring starts with a letter from the latin alphabet\
    \ ('a' \n      -- to 'z' and 'A' to 'Z')\n      if file_prefix ~= nil then\n \
    \        if string.sub(file_prefix, 1, 1) ~= 'a' then\n            -- The substring\
    \ starts with a letter from the latin alphabet\n            return 'No'\n    \
    \     end\n      end\n   end\n   -- Check that the file's name contains exactly\
    \ three digits ('0'-'9')\n   if file_name ~= nil then\n      -- Get the substring\
    \ before the dot\n      local file_prefix = file_name:sub(1, file_name:find('%.'))\n\
    \      -- Check that the substring contains only digits and is of length 3\n \
    \     if file_prefix ~= nil then\n         if string.len(file_prefix) ~= 3 then\n\
    \            return 'No'\n         end\n      end\n   end\n   -- Check that the\
    \ file's name contains only digits and is of length 3\n   if file_name ~= nil\
    \ then\n      -- Get the substring before the dot\n      local file_prefix = file_name:sub(1,\
    \ file_name:find('%.'))\n      -- Check that the substring contains only digits\
    \ and is of length 3\n      if file_prefix ~= nil then\n         if string.len(file_prefix)\
    \ ~= 3 then\n            return 'No'\n         end\n      end\n   end\n   -- Check\
    \ that the file's name contains only digits and is of length 3\n   if file_name\
    \ ~= nil then\n      -- Get the substring before the dot\n      local file_prefix\
    \ = file_name:sub(1, file_name:find('%.'))\n      -- Check that the substring\
    \ contains only digits and is of length 3\n      if file_prefix ~= nil then\n\
    \         if string.len(file_prefix) ~= 3 then\n            return 'No'\n    \
    \     end\n      end\n   end\n   -- Check that the file's name contains only digits\
    \ and is of length 3\n   if file_name ~= nil then\n      -- Get the substring\
    \ before the dot\n      local file_prefix = file_name:sub(1, file_name:find('%.'))\n\
    \      -- Check that the substring contains only digits and is of length 3\n \
    \     if file_prefix ~= nil then\n         if string.len(file_prefix) ~= 3 then\n\
    \            return 'No'\n         end\n      end\n   end\n   ", "  -- Check if\
    \ file name contains more than 3 digits and contains exactly one dot\n  -- If\
    \ it does, then return 'Yes'\n  if string.find(file_name, \"%[0-9]\") then\n \
    \   return 'Yes'\n  end\n  -- Check if file name contains exactly one dot and\
    \ starts with a letter from the latin alphabet\n  -- If it does, then return 'Yes'\n\
    \  if string.find(file_name, \"%.\") then\n    if string.find(file_name, \"%a\"\
    ) then\n      return 'Yes'\n    end\n    if string.find(file_name, \"%A\") then\n\
    \      return 'Yes'\n    end\n    if string.find(file_name, \"%b\") then\n   \
    \   return 'Yes'\n    end\n    if string.find(file_name, \"%B\") then\n      return\
    \ 'Yes'\n    end\n    if string.find(file_name, \"%c\") then\n      return 'Yes'\n\
    \    end\n    if string.find(file_name, \"%C\") then\n      return 'Yes'\n   \
    \ end\n    if string.find(file_name, \"%d\") then\n      return 'Yes'\n    end\n\
    \    if string.find(file_name, \"%D\") then\n      return 'Yes'\n    end\n   \
    \ if string.find(file_name, \"%e\") then\n      return 'Yes'\n    end\n    if\
    \ string.find(file_name, \"%E\") then\n      return 'Yes'\n    end\n    if string.find(file_name,\
    \ \"%f\") then\n      return 'Yes'\n    end\n    if string.find(file_name, \"\
    %F\") then\n      return 'Yes'\n    end\n    if string.find(file_name, \"%g\"\
    ) then\n      return 'Yes'\n    end\n    if string.find(file_name, \"%G\") then\n\
    \      return 'Yes'\n    end\n    if string.find(file_name, \"%h\") then\n   \
    \   return 'Yes'\n    end\n    if string.find(file_name, \"%H\") then\n      return\
    \ 'Yes'\n    end\n    if string.find(file_name, \"%i\") then\n      return 'Yes'\n\
    \    end\n    if string.find(file_name, \"%I\") then\n      return 'Yes'\n   \
    \ end\n    if string.find(file_name, \"%j\") then\n      return 'Yes'\n    end\n\
    \    if string.find(file_name, \"%J\") then\n      return 'Yes'\n    end\n   \
    \ if string.find(file_name, \"%k\") then\n      return 'Yes'\n    end\n    if\
    \ string.find(file_name, \"%K\") then\n      return 'Yes'\n    end\n    if string.find(file_name,\
    \ \"%l\") then\n      return 'Yes'\n    end\n    if string.find(file_name, \"\
    %L\") then\n      return 'Yes'\n    end\n    if string.find(file_name, \"%m\"\
    ) then\n      return 'Yes'\n    end\n    if string.find(file_name, \"%M\") then\n\
    \      return 'Yes'\n    end\n    if string.find(file_name, \"%n\") then\n   \
    \   return 'Yes'\n    end\n    if string.find(file_name, \"", "   -- Check that\
    \ the file name contains only digits and one dot\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the file name contains only letters\
    \ from the latin alphabet\n      if not string.find(file_name, \"^[a-Z]\") then\n\
    \         return 'No'\n      end\n   end\n   -- Check that the file name contains\
    \ only digits and one dot\n   if string.find(file_name, \"^[0-9]\") ~= nil then\n\
    \      -- Check that the file name contains only letters from the latin alphabet\n\
    \      if not string.find(file_name, \"^[a-Z]\") then\n         return 'No'\n\
    \      end\n   end\n   -- Check that the file name contains only digits and one\
    \ dot\n   if string.find(file_name, \"^[0-9]\") ~= nil then\n      -- Check that\
    \ the file name contains only letters from the latin alphabet\n      if not string.find(file_name,\
    \ \"^[a-Z]\") then\n         return 'No'\n      end\n   end\n   -- Check that\
    \ the file name contains only digits and one dot\n   if string.find(file_name,\
    \ \"^[0-9]\") ~= nil then\n      -- Check that the file name contains only letters\
    \ from the latin alphabet\n      if not string.find(file_name, \"^[a-Z]\") then\n\
    \         return 'No'\n      end\n   end\n   -- Check that the file name contains\
    \ only digits and one dot\n   if string.find(file_name, \"^[0-9]\") ~= nil then\n\
    \      -- Check that the file name contains only letters from the latin alphabet\n\
    \      if not string.find(file_name, \"^[a-Z]\") then\n         return 'No'\n\
    \      end\n   end\n   -- Check that the file name contains only digits and one\
    \ dot\n   if string.find(file_name, \"^[0-9]\") ~= nil then\n      -- Check that\
    \ the file name contains only letters from the latin alphabet\n      if not string.find(file_name,\
    \ \"^[a-Z]\") then\n         return 'No'\n      end\n   end\n   -- Check that\
    \ the file name contains only digits and one dot\n   if string.find(file_name,\
    \ \"^[0-9]\") ~= nil then\n      -- Check that the file name contains only letters\
    \ from the latin alphabet\n      if not string.find(file_name, \"^[a-Z]\") then\n\
    \         return 'No'\n      end\n   end\n   -- Check that the file name contains\
    \ only digits and one dot\n   if string.find(file_name, \"^[0-9]\") ~= nil then\n\
    \      -- Check that the file name contains only letters from the latin alphabet\n\
    \      if not string.find(", "   if string.find(file_name, \".\") ~= nil then\n\
    \      local file_ext = string.sub(file_name,string.find(file_name, \".\"))\n\
    \      if string.find(file_ext, \".\") ~= nil then\n         if string.find(file_ext,\
    \ \".\") ~= nil then\n            if string.find(file_ext, \".\") ~= nil then\n\
    \               if string.find(file_ext, \".\") ~= nil then\n                \
    \  if string.find(file_ext, \".\") ~= nil then\n                     if string.find(file_ext,\
    \ \".\") ~= nil then\n                        if string.find(file_ext, \".\")\
    \ ~= nil then\n                           if string.find(file_ext, \".\") ~= nil\
    \ then\n                              if string.find(file_ext, \".\") ~= nil then\n\
    \                                 if string.find(file_ext, \".\") ~= nil then\n\
    \                                    if string.find(file_ext, \".\") ~= nil then\n\
    \                                       if string.find(file_ext, \".\") ~= nil\
    \ then\n                                          if string.find(file_ext, \"\
    .\") ~= nil then\n                                             if string.find(file_ext,\
    \ \".\") ~= nil then\n                                                 if string.find(file_ext,\
    \ \".\") ~= nil then\n                                                    if string.find(file_ext,\
    \ \".\") ~= nil then\n                                                      if\
    \ string.find(file_ext, \".\") ~= nil then\n                                 \
    \                        if string.find(file_ext, \".\") ~= nil then\n       \
    \                                                      if string.find(file_ext,\
    \ \".\") ~= nil then\n                                                       \
    \          if string.find(file_ext, \".\") ~= nil then\n                     \
    \                                               if string.find(file_ext, \".\"\
    ) ~= nil then\n                                                              \
    \           if string.find(file_ext, \".\") ~= nil then\n                    \
    \                                                        if string.find(file_ext,\
    \ \".\") ~= nil then\n                                                       \
    \                        if string.find(file_ext, \".\") ~= nil then\n       \
    \                                                                           if\
    \ string.find(file_ext, \".\") ~= nil then\n                                 \
    \                                                    if string.find(file_ext,\
    \ \".\") ~= nil then\n                                                       \
    \                                 if string.find(file_ext, \".\") ~= nil then\n\
    \                                                                            \
    \               if string.find(file_ext, \".\") ~= nil then\n                \
    \                                                                            \
    \  if string.find(file_ext, \".\") ~= nil then\n                             \
    \                                                                   if string.find(file_ext,\
    \ \".\") ~= nil then\n                                                       \
    \                                            if string.find(file_ext, \".\") ~=\
    \ nil then\n                                                                 \
    \                                    if string.find(file_ext, \".\") ~= nil",
  "   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      if string.find(file_name, \".\") ~= 1 then\n     \
    \    return 'No'\n      end\n   end\n   if string.find(file_name, \".\") ~= 1\
    \ then\n      return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n  \
    \    return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n    \
    \  return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n  \
    \ end\n   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n   end\n\
    \   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n   end\n  \
    \ if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n   end\n   if\
    \ string.find(file_name, \".\") ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, \"\
    .\") ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, \".\"\
    ) ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1\
    \ then\n      return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n  \
    \    return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n    \
    \  return 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ 'No'\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n  \
    \ end\n   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n   end\n",
  "   if string.find(file_name, \".\") ~= nil then\n      if string.find(file_name,\
    \ \".\") == 1 then\n         if string.find(file_name, \"\", 1, true) ~= nil then\n\
    \            if string.find(file_name, \"\", 1, true) ~= nil then\n          \
    \     if string.find(file_name, \"\", 1, true) ~= nil then\n                 \
    \ if string.find(file_name, \"\", 1, true) ~= nil then\n                     return\
    \ 'No'\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ 'No'\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ 'No'\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ 'No'\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ 'No'\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \"", "   if file_name == nil then\n      return nil\n   end\n   local file_name\
    \ = file_name:lower()\n   if #file_name > 3 then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\0' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.byte('A') then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.byte('a') then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.byte('Z') then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.byte('z') then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n   end\n   if string.find(file_name, '.')\
    \ then\n      return 'No'\n   end\n   if string.find(file_name, '.', 1) then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 2) then\n      return\
    \ 'No'\n   end\n   return 'Yes'\nend", "   if #file_name > 3 then\n      return\
    \ 'No'\n   end\n   if file_name ~= string.sub(file_name, 1, 1) then\n      return\
    \ 'No'\n   end\n   if string.sub(file_name, 1, 1) ~= 'a' then\n      return 'No'\n\
    \   end\n   if string.sub(file_name, 1, 1) ~= 'z' then\n      return 'No'\n  \
    \ end\n   if string.sub(file_name, 1, 1) ~= 'A' then\n      return 'No'\n   end\n\
    \   if string.sub(file_name, 1, 1) ~= 'Z' then\n      return 'No'\n   end\n  \
    \ if string.sub(file_name, 1, 2) ~= 'txt' then\n      return 'No'\n   end\n  \
    \ if string.sub(file_name, 1, 2) ~= 'exe' then\n      return 'No'\n   end\n  \
    \ if string.sub(file_name, 1, 2) ~= 'dll' then\n      return 'No'\n   end\n  \
    \ return 'Yes'\nend", "   if #file_name > 3 then\n      return 'No'\n   end\n\
    \   if #file_name < 1 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\' or file_name:sub(1, 1) ~= '.' then\n      return 'No'\n   end\n \
    \  if file_name:sub(1, 1) ~= string.upper(file_name:sub(1, 1)) then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 2) ~= string.lower(file_name:sub(1, 2))\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= string.upper(file_name:sub(1,\
    \ 3)) then\n      return 'No'\n   end\n   return 'Yes'\nend", "   -- The function\
    \ returns 'Yes' if the file's name is valid, and returns 'No' otherwise.\n   --\
    \ A file's name is considered to be valid if and only if all the following conditions\
    \ \n   -- are met:\n   -- - There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n   -- - The file's name contains exactly one dot '.'\n\
    \   -- - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n   -- the latin alphapet ('a'-'z' and 'A'-'Z').\n   -- - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n   --\
    \ Examples:\n   -- >>> file_name_check('example.txt')\n   -- 'Yes'\n   -- >>>\
    \ file_name_check('1example.dll')\n   -- 'No'\n   if file_name == nil then\n \
    \     return 'No'\n   end\n   if #file_name < 3 then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'a' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'z'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return 'No'\n\
    \   end\n   if file_name:sub(2, 2) ~= 'txt' then\n      return 'No'\n   end\n\
    \   if file_name:sub(2, 2) ~= 'exe' then\n      return 'No'\n   end\n   if file_name:sub(2,\
    \ 2) ~= 'dll' then\n      return 'No'\n   end\n   return 'Yes'\nend", "   local\
    \ result = true\n   if #file_name > 3 then\n      result = false\n   elseif #file_name\
    \ == 0 then\n      result = false\n   elseif #file_name ~= 1 then\n      result\
    \ = false\n   elseif file_name:sub(1, 1) ~= '.' then\n      result = false\n \
    \  elseif file_name:sub(1, 1) ~= 'a' then\n      result = false\n   elseif file_name:sub(1,\
    \ 1) ~= 'z' then\n      result = false\n   elseif file_name:sub(1, 1) ~= 'A' then\n\
    \      result = false\n   elseif file_name:sub(1, 1) ~= 'Z' then\n      result\
    \ = false\n   elseif file_name:sub(1, 2) ~= '.' then\n      result = false\n \
    \  elseif file_name:sub(1, 2) ~= 'txt' then\n      result = false\n   elseif file_name:sub(1,\
    \ 2) ~= 'exe' then\n      result = false\n   elseif file_name:sub(1, 2) ~= 'dll'\
    \ then\n      result = false\n   end\n   return result\nend", "   -- Check that\
    \ the file name contains exactly one dot '.'\n   if file_name ~= nil then\n  \
    \    if string.find(file_name, \".\") then\n         -- Check that the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n         if string.find(file_name, string.sub(file_name,1,1))\
    \ == nil then\n            -- Check that the substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\"))) ~= nil then\n               if string.find(file_name,\
    \ string.sub(file_name,string.find(file_name, \".\"),string.find(file_name, \"\
    .\"))) ~= 'txt' then\n                  if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\"))) ~= 'exe' then\n                     if\
    \ string.find(file_name, string.sub(file_name,string.find(file_name, \".\"),string.find(file_name,\
    \ \".\"))) ~= 'dll' then\n                        -- Return Yes if the file's\
    \ name is valid\n                        return 'Yes'\n                     else\n\
    \                        -- Return No if the file's name is invalid\n        \
    \                return 'No'\n                     end\n                  else\n\
    \                     -- Return No if the file's name is invalid\n           \
    \             return 'No'\n                  end\n               else\n      \
    \            -- Return No if the file's name is invalid\n                  return\
    \ 'No'\n               end\n            else\n               -- Return No if the\
    \ file's name is invalid\n               return 'No'\n            end\n      \
    \   else\n            -- Return No if the file's name is invalid\n           \
    \ return 'No'\n         end\n      else\n         -- Return No if the file's name\
    \ is invalid\n         return 'No'\n      end\n   else\n      -- Return No if\
    \ the file's name is invalid\n      return 'No'\n   end\nend\n</code>\n<|/ a tags=lua,lua-patterns\
    \ |>\n<| c |>\nI didn't know that Lua had a built-in function `string.find()`.\
    \ Thanks for teaching me something new!\n<|/ c |>\n<| c |>\n, `string.find` was\
    \ introduced in Lua 5.1, so if you're using an older version you'll need to write\
    \ your own function.\n<|/ c |>\n<| c |>\n, thanks for the clarification. I was\
    \ using Lua 5.1 but didn't know that `string.find()` was a 5.1 feature.\n<|/ c\
    \ |>\n<| c |>\n, I've added a function that should work for Lua 5.1.\n", "   if\
    \ file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '9' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 2) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 3) ~= '' then\n      return nil\n   end\n   if file_name:sub(1, 3) ~= file_name:sub(1,\
    \ 3) then\n      return nil\n   end\n   if file_name:sub(1, 4) ~= {'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z'} then\n      return nil\n   end\n   return 'Yes'\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n\
    \   end\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n\
    \   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   if\
    \ string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ '.') ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '.')\
    \ ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '.') ~= 1\
    \ then\n      return 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n    \
    \  return 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n\
    \   end\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n\
    \   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   if\
    \ string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ '.') ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '.')\
    \ ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '.') ~= 1\
    \ then\n      return 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n    \
    \  return 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n\
    \   end\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n",
  "   if string.find(file_name, \"..\") then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         return 'No'\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         return 'No'\n      end\n   end", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if #file_name < 3 then\n      return nil\n\
    \   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if\
    \ file_name:sub(1, 1) ~= '0' and file_name:sub(1, 1) ~= '9' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 2) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 2) ~= 'a' and file_name:sub(1, 2) ~= 'z' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 3) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 3) ~= 'txt' and file_name:sub(1, 3) ~= 'exe' and file_name:sub(1,\
    \ 3) ~= 'dll' then\n      return nil\n   end\n   return 'Yes'\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name < 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'z' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,1) ~= 'A' then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'Z' then\n      return nil\n   end\n   if string.find(file_name, \".\", 1)\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\", 2)\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\", 3)\
    \ ~= 1 then\n      return nil\n   end\n   return 'Yes'\nend", "   if #file_name\
    \ > 3 then\n      return 'No'\n   elseif #file_name == 0 then\n      return 'No'\n\
    \   elseif #file_name ~= 1 then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'a' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'z' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'Z' then\n      return 'No'\n   elseif file_name:sub(1, 2) ~= '.' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 2) ~= 'txt' then\n      return\
    \ 'No'\n   elseif file_name:sub(1, 2) ~= 'exe' then\n      return 'No'\n   elseif\
    \ file_name:sub(1, 2) ~= 'dll' then\n      return 'No'\n   else\n      return\
    \ 'Yes'\n   end\nend", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil then\n      if #file_name ~= 1 then\n         return\
    \ 'No'\n      end\n      -- Check that substring before the dot is not empty,\
    \ and it starts with a letter \n      -- from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if file_name:sub(1, 1) ~= '' then\n         if string.sub(file_name:sub(1,\
    \ 1), 1, 1) ~= 'a' then\n            return 'No'\n         end\n         if string.sub(file_name:sub(1,\
    \ 1), 1, 1) ~= 'z' then\n            return 'No'\n         end\n      end\n  \
    \    -- Check that substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \      if string.find(file_name:sub(1, #file_name), 'exe') ~= nil then\n     \
    \    return 'Yes'\n      end\n      if string.find(file_name:sub(1, #file_name),\
    \ 'dll') ~= nil then\n         return 'Yes'\n      end\n   end\n   return 'No'\n\
    end", "   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      -- Check that the substring before the\
    \ dot is not empty, and it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n      if file_name:sub(1, 1) ~= '' then\n         if string.byte(file_name:sub(1,\
    \ 1)) < 48 or string.byte(file_name:sub(1, 1)) > 57 then\n            return 'No'\n\
    \         end\n      end\n      -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n      if string.byte(file_name:sub(-3)) ~=\
    \ 46 then\n         if string.byte(file_name:sub(-3)) ~= 47 then\n           \
    \ return 'No'\n         end\n      end\n   end\n   -- Check that the file name\
    \ contains exactly three digits ('0'-'9')\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if string.byte(file_name:sub(1, 1)) ~= 48 or string.byte(file_name:sub(1,\
    \ 1)) ~= 49 then\n         return 'No'\n      end\n      if string.byte(file_name:sub(2,\
    \ 1)) ~= 48 or string.byte(file_name:sub(2, 1)) ~= 49 then\n         return 'No'\n\
    \      end\n      if string.byte(file_name:sub(3, 1)) ~= 48 or string.byte(file_name:sub(3,\
    \ 1)) ~= 49 then\n         return 'No'\n      end\n   end\n   -- Check that the\
    \ file name contains only letters ('a'-'z' and 'A'-'Z')\n   if file_name ~= nil\
    \ and file_name ~= '' then\n      if string.byte(file_name:sub(1, 1)) ~= 65 or\
    \ string.byte(file_name:sub(1, 1)) ~= 66 then\n         return 'No'\n      end\n\
    \      if string.byte(file_name:sub(2, 1)) ~= 65 or string.byte(file_name:sub(2,\
    \ 1)) ~= 66 then\n         return 'No'\n      end\n      if string.byte(file_name:sub(3,\
    \ 1)) ~= 65 or string.byte(file_name:sub(3, 1)) ~= 66 then\n         return 'No'\n\
    \      end\n   end\n   return 'Yes'\nend", "   if file_name == nil then\n    \
    \  return nil\n   end\n   if string.len(file_name) ~= 3 then\n      return 'No'\n\
    \   end\n   if string.sub(file_name,1,1) ~= '0' then\n      return 'No'\n   end\n\
    \   if string.sub(file_name,1,2) ~= '0' then\n      return 'No'\n   end\n   if\
    \ string.sub(file_name,1,3) ~= '0' then\n      return 'No'\n   end\n   if string.sub(file_name,1,4)\
    \ ~= '0' then\n      return 'No'\n   end\n   if string.sub(file_name,1,5) ~= '0'\
    \ then\n      return 'No'\n   end\n   if string.sub(file_name,1,6) ~= '0' then\n\
    \      return 'No'\n   end\n   if string.sub(file_name,1,7) ~= '0' then\n    \
    \  return 'No'\n   end\n   if string.sub(file_name,1,8) ~= '0' then\n      return\
    \ 'No'\n   end\n   if string.sub(file_name,1,9) ~= '0' then\n      return 'No'\n\
    \   end\n   if string.sub(file_name,1,10) ~= '0' then\n      return 'No'\n   end\n\
    \   if string.sub(file_name,1,11) ~= '0' then\n      return 'No'\n   end\n   if\
    \ string.sub(file_name,1,12) ~= '0' then\n      return 'No'\n   end\n   if string.sub(file_name,1,13)\
    \ ~= '0' then\n      return 'No'\n   end\n   if string.sub(file_name,1,14) ~=\
    \ '0' then\n      return 'No'\n   end\n   if string.sub(file_name,1,15) ~= '0'\
    \ then\n      return 'No'\n   end\n   if string.sub(file_name,1,16) ~= '0' then\n\
    \      return 'No'\n   end\n   if string.sub(file_name,1,17) ~= '0' then\n   \
    \   return 'No'\n   end\n   if string.sub(file_name,1,18) ~= '0' then\n      return\
    \ 'No'\n   end\n   if string.sub(file_name,1,19) ~= '0' then\n      return 'No'\n\
    \   end\n   if string.sub(file_name,1,20) ~= '0' then\n      return 'No'\n   end\n\
    \   if string.sub(file_name,1,21) ~= '0' then\n      return 'No'\n   end\n   if\
    \ string.sub(file_name,1,22) ~= '0' then\n      return 'No'\n   end\n   if string.sub(file_name,1,23)\
    \ ~= '0' then\n      return 'No'\n   end\n   if string.sub(file_name,", "    local\
    \ num_digits = string.len(file_name)\n    if num_digits > 3 then\n        return\
    \ 'No'\n    end\n    local first_char = string.sub(file_name, 1, 1)\n    if first_char\
    \ ~= string.sub(string.lower(first_char), 1, 1) then\n        return 'No'\n  \
    \  end\n    local dot_index = string.find(file_name, '.')\n    if dot_index ==\
    \ nil then\n        return 'No'\n    end\n    local extension = string.sub(file_name,\
    \ dot_index + 1, string.len(file_name))\n    if extension ~= 'txt' and extension\
    \ ~= 'exe' and extension ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend", "    local file_name = file_name:lower()\n    local file_name =\
    \ file_name:gsub('.', '')\n    local file_name = file_name:gsub('[^0-9a-zA-Z]',\
    \ '')\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local file_name = file_name:sub(1,\
    \ 3)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:lower()\n    local ", "   -- Check that\
    \ the file name contains exactly one dot '.'\n   if file_name == nil then\n  \
    \    return 'No'\n   end\n   -- Check that the file's name contains exactly one\
    \ dot '.'\n   if string.find(file_name, '.') ~= nil then\n      return 'No'\n\
    \   end\n   -- Check that the file's name contains exactly one dot '.'\n   if\
    \ string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   -- Check\
    \ that the file's name contains exactly one dot '.'\n   if string.find(file_name,\
    \ '.') ~= 1 then\n      return 'No'\n   end\n   -- Check that the file's name\
    \ contains exactly one dot '.'\n   if string.find(file_name, '.') ~= 1 then\n\
    \      return 'No'\n   end\n   -- Check that the file's name contains exactly\
    \ one dot '.'\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n\
    \   end\n   -- Check that the file's name contains exactly one dot '.'\n   if\
    \ string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   -- Check\
    \ that the file's name contains exactly one dot '.'\n   if string.find(file_name,\
    \ '.') ~= 1 then\n      return 'No'\n   end\n   -- Check that the file's name\
    \ contains exactly one dot '.'\n   if string.find(file_name, '.') ~= 1 then\n\
    \      return 'No'\n   end\n   -- Check that the file's name contains exactly\
    \ one dot '.'\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n\
    \   end\n   -- Check that the file's name contains exactly one dot '.'\n   if\
    \ string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   -- Check\
    \ that the file's name contains exactly one dot '.'\n   if string.find(file_name,\
    \ '.') ~= 1 then\n      return 'No'\n   end\n   -- Check that the file's name\
    \ contains exactly one dot '.'\n   if string.find(file_name, '.') ~= 1 then\n\
    \      return 'No'\n   end\n   -- Check that the file's name contains exactly\
    \ one dot '.'\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n\
    \   end\n   -- Check that the file's name contains exactly one dot '.'\n   if\
    \ string.find(file_name, '.') ~= 1 then\n      return 'No'\n   end\n   -- Check\
    \ that the file's name contains ", "    local file_name = file_name:lower()\n\
    \    local dot_index = file_name:find('.')\n    if dot_index == nil then\n   \
    \     return 'No'\n    end\n    local file_name = file_name:sub(1, dot_index)\n\
    \    local first_letter = file_name:sub(1, 1)\n    if first_letter ~= 'a' and\
    \ first_letter ~= 'A' then\n        return 'No'\n    end\n    local extensions\
    \ = { \n        'txt', 'exe', 'dll', 'py', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac',\
    \ 'java', 'js', 'php', 'php3', 'php4', 'php5', 'php6', 'php7', 'php8', 'php9',\
    \ 'php10', 'php11', 'php12', 'php13', 'php14', 'php15', 'php16', 'php17', 'php18',\
    \ 'php19', 'php20', 'php21', 'php22', 'php23', 'php24', 'php25', 'php26', 'php27',\
    \ 'php28', 'php29', 'php30', 'php31', 'php32', 'php33', 'php34', 'php35', 'php36',\
    \ 'php37', 'php38', 'php39', 'php40', 'php41', 'php42', 'php43', 'php44', 'php45',\
    \ 'php46', 'php47', 'php48', 'php49', 'php50', 'php51', 'php52', 'php53', 'php54',\
    \ 'php55', 'php56', 'php57', 'php58', 'php59', 'php60', 'php61', 'php62', 'php63',\
    \ 'php64', 'php65', 'php66', 'php67', 'php68', 'php69', 'php70', 'php71', 'php72',\
    \ 'php73', 'php74', 'php75', 'php76', 'php77', 'php78', 'php79', 'php80', 'php81',\
    \ 'php82', 'php83', 'php84', 'php85', 'php86', 'php87', 'php88', 'php89', 'php90',\
    \ 'php91', 'php92', 'php93', 'php94', 'php95', 'php96', 'php97', 'php98', 'php99',\
    \ 'php100', 'php101', 'php102', 'php103', 'php104', 'php105', 'php106', 'php107',\
    \ 'php108', 'php109', 'php110', 'php111', 'php112', 'php113', 'php114', 'php115',\
    \ 'php116', 'php117', 'php118', 'php119', 'php120', 'php121', 'php122', 'php123',\
    \ 'php124', 'php125', 'php126', 'php127', 'php128', 'php129', 'php130', 'php131',\
    \ 'php132', 'php133', 'php134', 'php135', 'php136', 'php137', 'php138", "   if\
    \ string.find(file_name, \".\") ~= nil then\n      local sub_string = string.sub(file_name,\
    \ 1, string.find(file_name, \".\") - 1)\n      if string.len(sub_string) == 0\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \".\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"%\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"/\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \":\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"<\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \">\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"|\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"?\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"*\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"[\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"]\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"{\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"}\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"(\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \")\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"|\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"%\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"/\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \":\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \"<\") ~= nil\
    \ then\n         return 'No'\n      elseif string.find(sub_string, \">\") ~= nil\
    \ then\n         return 'No'\n      elseif string.", "   -- Checks if the file\
    \ name contains only digits and one dot\n   if string.find(file_name, \".\") then\n\
    \      return \"No\"\n   end\n   -- Checks if the file name contains only latin\
    \ letters and one dot\n   if string.find(file_name, \"[^a-zA-Z]\") then\n    \
    \  return \"No\"\n   end\n   -- Checks if the file name contains only latin letters\
    \ and one dot\n   if string.find(file_name, \"^[a-zA-Z]\") then\n      return\
    \ \"No\"\n   end\n   -- Checks if the file name contains only latin letters and\
    \ one dot\n   if string.find(file_name, \"^[^a-zA-Z]\") then\n      return \"\
    No\"\n   end\n   -- Checks if the file name contains only latin letters and one\
    \ dot\n   if string.find(file_name, \"^[^a-zA-Z0-9]\") then\n      return \"No\"\
    \n   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only latin letters and one dot\n\
    \   if string.find(file_name, \"^[^a-zA-Z0-9.]$\") then\n      return \"No\"\n\
    \   end\n   -- ", "  -- Check that the file name contains exactly one dot '.'\n\
    \  if file_name ~= nil then\n    if string.find(file_name, '.') ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.sub(file_name,1,1) ~= '' then\n        -- Check that the substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n        if string.find(file_name,\
    \ 'exe') ~= nil then\n          -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n          if string.find(file_name,\
    \ 'dll') ~= nil then\n            return 'Yes'\n          else\n            return\
    \ 'No'\n          end\n        else\n          return 'No'\n        end\n    \
    \  else\n        return 'No'\n      end\n    else\n      return 'No'\n    end\n\
    \  else\n    return 'No'\n  end\nend", "   if file_name == nil then\n      return\
    \ nil\n   end", "    local file_name = file_name:gsub('.*/','')\n    local file_name\
    \ = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.%.','')\n\
    \    local file_name = file_name:gsub('^%.','')\n    local file_name = file_name:gsub('%.$','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.','')\n\
    \    local file", "  -- Check that the file name contains exactly one dot '.'\n\
    \  if file_name ~= nil and file_name ~= '' then\n    -- Get the substring before\
    \ the dot '.'\n    local file_name = file_name:sub(1, file_name:find('.')-1)\n\
    \    -- Check that the substring starts with a letter from the latin alphabet\
    \ ('a' \n    -- through 'z' and 'A' through 'Z')\n    if file_name ~= nil and\
    \ file_name ~= '' then\n      -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n      if file_name ~= nil and file_name ~=\
    \ '' then\n        -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n        if file_name ~= nil and file_name ~= '' then\n\
    \          -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n          if file_name ~= nil and file_name ~= '' then\n    \
    \        -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n            if file_name ~= nil and file_name ~= '' then\n         \
    \     -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n              if file_name ~= nil and file_name ~= '' then\n       \
    \         -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n                if file_name ~= nil and file_name ~= '' then\n     \
    \             -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n                  if file_name ~= nil and file_name ~= '' then\n\
    \                    -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n                    if file_name ~= nil and file_name\
    \ ~= '' then\n                      -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n                      if file_name ~=\
    \ nil and file_name ~= '' then\n                        -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n                     \
    \   if file_name ~= nil and file_name ~= '' then\n                          --\
    \ Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \                          return 'Yes'\n                        else\n      \
    \                    return 'No'\n                        end\n              \
    \        else\n                        return 'No'\n                      end\n\
    \                    else\n                      return 'No'\n               \
    \     end\n                  else\n                    return 'No'\n         \
    \         end\n                else\n                  return 'No'\n         \
    \       end\n              else\n                return 'No", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if string.len(file_name) ~= 3 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.') ~= 1 then\n    \
    \  return 'No'\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return\
    \ 'No'\n   end\n   if string.sub(file_name,2,2) ~= 'z' then\n      return 'No'\n\
    \   end\n   if string.sub(file_name,1,2) ~= 'A' then\n      return 'No'\n   end\n\
    \   return 'Yes'\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil then\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that the substring before the dot is not empty, and it starts with a letter\
    \ \n    -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= \"\" then\n      local first_letter = string.sub(file_name,1,1)\n      if\
    \ not (first_letter >= 'a' and first_letter <= 'z') then\n        return \"No\"\
    \n      end\n    end\n    -- Check that the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n    local file_types = {'txt', 'exe', 'dll'}\n\
    \    local file_type = string.sub(file_name,dot_index+1,string.len(file_name))\n\
    \    if file_types[file_type] == nil then\n      return \"No\"\n    end\n  end\n\
    \  return \"Yes\"\nend", "   -- Check that the file name contains exactly one\
    \ dot '.'\n   if file_name ~= nil then\n      -- Check that the substring before\
    \ the dot is not empty, and it starts with a letter from \n      -- the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n      if file_name:sub(1, 1) ~= nil then\n \
    \        if string.find(file_name:sub(1, 1), '^[a-Z]') ~= nil then\n         \
    \   -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n            if string.find(file_name:sub(1, #file_name), '(txt|exe|dll)')\
    \ ~= nil then\n               return 'Yes'\n            else\n               return\
    \ 'No'\n            end\n         else\n            return 'No'\n         end\n\
    \      else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end", "   if #file_name > 3 then\n      return 'No'\n   end\n   if file_name ~=\
    \ file_name:sub(1, 3) then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'a' then\n      return 'No'\n   end\n   if file_name:sub(1, 2) ~= 'z'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'A' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 4) ~= 'Z' then\n      return 'No'\n\
    \   end\n   return 'Yes'\nend", "   -- Get the length of the file's name.\n  \
    \ local file_name = string.len(file_name)\n   -- If the file's name is less than\
    \ three digits, return 'No'.\n   if file_name < 3 then\n      return 'No'\n  \
    \ end\n   -- If the file's name contains more than one dot, return 'No'.\n   if\
    \ file_name > 1 then\n      return 'No'\n   end\n   -- If the file's name does\
    \ not contain exactly one dot, return 'No'.\n   if file_name == 1 then\n     \
    \ return 'No'\n   end\n   -- If the file's name does not start with a letter from\
    \ the latin alphabet, return 'No'.\n   if string.sub(file_name, 1, 1) ~= 'a' then\n\
    \      return 'No'\n   end\n   -- If the file's name does not end with one of\
    \ these, return 'No'.\n   if string.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= '.exe' then\n      return 'No'\n   end\n   -- If the file's name contains\
    \ one of the allowed extensions, return 'Yes'.\n   if string.sub(file_name, string.len(file_name)-2,\
    \ string.len(file_name)-1) ~= 'exe' then\n      return 'Yes'\n   end\nend", " \
    \  if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= 'z' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,1) ~= 'A' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'Z' then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 1) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 2) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 3) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 4) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 5) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 6) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 7) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 8) ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\", 9) ~= 1 then\n      return nil\n   end\n   return\
    \ 'Yes'\nend", "  -- Check that the file name contains exactly one dot '.'\n \
    \ if file_name:sub(1,1) ~= '.' then\n    return 'No'\n  end\n  -- Check that the\
    \ substring before the dot is not empty\n  if file_name:sub(1,1) == '' then\n\
    \    return 'No'\n  end\n  -- Check that the substring before the dot starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n  if file_name:sub(1,1)\
    \ ~= 'a' and file_name:sub(1,1) ~= 'A' then\n    return 'No'\n  end\n  -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  if\
    \ string.find(file_name, 'exe') ~= nil or string.find(file_name, 'dll') ~= nil\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend", "   -- Checks if the file\
    \ name contains only numbers and dots.\n   if string.find(file_name, \"%.\") then\n\
    \      return \"No\"\n   end\n   -- Checks if the file name contains only letters.\n\
    \   if string.find(file_name, \"%a\") then\n      return \"No\"\n   end\n   --\
    \ Checks if the file name contains only letters and numbers.\n   if string.find(file_name,\
    \ \"%A\") then\n      return \"No\"\n   end\n   -- Checks if the file name contains\
    \ only letters and numbers and dots.\n   if string.find(file_name, \"%a.\") then\n\
    \      return \"No\"\n   end\n   -- Checks if the file name contains only letters\
    \ and numbers and dots.\n   if string.find(file_name, \"%A.\") then\n      return\
    \ \"No\"\n   end\n   -- Checks if the file name contains only letters and numbers\
    \ and dots.\n   if string.find(file_name, \"%a..\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only letters and numbers and dots.\n\
    \   if string.find(file_name, \"%A..\") then\n      return \"No\"\n   end\n  \
    \ -- Checks if the file name contains only letters and numbers and dots.\n   if\
    \ string.find(file_name, \"%a..\") then\n      return \"No\"\n   end\n   -- Checks\
    \ if the file name contains only letters and numbers and dots.\n   if string.find(file_name,\
    \ \"%A..\") then\n      return \"No\"\n   end\n   -- Checks if the file name contains\
    \ only letters and numbers and dots.\n   if string.find(file_name, \"%a..\") then\n\
    \      return \"No\"\n   end\n   -- Checks if the file name contains only letters\
    \ and numbers and dots.\n   if string.find(file_name, \"%A..\") then\n      return\
    \ \"No\"\n   end\n   -- Checks if the file name contains only letters and numbers\
    \ and dots.\n   if string.find(file_name, \"%a..\") then\n      return \"No\"\n\
    \   end\n   -- Checks if the file name contains only letters and numbers and dots.\n\
    \   if string.find(file_name, \"%A..\") then\n      return \"No\"\n   end\n  \
    \ -- Checks if the file name contains only letters and numbers and dots.\n   if\
    \ string.find(file_name, \"%a..\") then\n      return \"No\"\n   end\n   -- Checks\
    \ if the file name contains only letters and numbers and dots.\n   if string.find(file_name,\
    \ \"%A..\") then\n      return \"No\"\n   end\n   -- Checks if the file name contains\
    \ only letters and numbers and dots.\n   if string.", "    local file_name = file_name:lower()\n\
    \    local dot_index = file_name:find('.')\n    local dot_string = file_name:sub(1,\
    \ dot_index)\n    local dot_string_length = #dot_string\n    local dot_string_first_letter\
    \ = string.sub(dot_string, 1, 1)\n    local dot_string_last_letter = string.sub(dot_string,\
    \ dot_string_length-1, 1)\n    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)",
  "    local file_name = file_name:lower()\n    local dot_index = file_name:find('.')\n\
    \    local dot_string = file_name:sub(1, dot_index)\n    local dot_string_length\
    \ = #dot_string\n    local dot_string_letter = string.sub(dot_string, 1, 1)\n\
    \    local dot_string_letter = string.lower(dot_string_letter)\n    local dot_string_letter_length\
    \ = #dot_string_letter\n    local dot_string_letter_length = dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    local dot_string_letter_length\n    local\
    \ dot_string_letter_length\n    local dot_string_letter_length\n    local dot_string_letter_length\n\
    \    local dot_string_letter_length\n    ", "   -- Check that the file name contains\
    \ only digits and one dot\n   if string.find(file_name, \"%0\") ~= nil then\n\
    \      return 'No'\n   end", "   if file_name == nil then\n      return nil\n\
    \   end\n   if string.len(file_name) ~= 3 then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,1) ~= '0' then\n      return nil\n   end\n   if string.sub(file_name,1,2)\
    \ ~= '0' then\n      return nil\n   end\n   if string.sub(file_name,1,3) ~= '0'\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,4) ~= '0' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,5) ~= '0' then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,6) ~= '0' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,7) ~= '0' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,8) ~= '0' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,9) ~= '0' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,10) ~= '0' then\n      return nil\n   end\n   if string.sub(file_name,1,11)\
    \ ~= '0' then\n      return nil\n   end\n   if string.sub(file_name,1,12) ~= '0'\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,13) ~= '0' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,14) ~= '0' then\n    \
    \  return nil\n   end\n   if string.sub(file_name,1,15) ~= '0' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,16) ~= '0' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,17) ~= '0' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,18) ~= '0' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,19) ~= '0' then\n      return nil\n   end\n   if string.sub(file_name,1,20)\
    \ ~= '0' then\n      return nil\n   end\n   if string.sub(file_name,1,21) ~= '0'\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,22) ~= '0' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,23) ~= '0' then\n    \
    \  return nil\n   end\n   if string.sub(file_name,1,24) ~= '0' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,25) ~", "   if file_name == nil then\n\
    \      return nil\n   end\n   if string.len(file_name) <= 3 then\n      return\
    \ 'No'\n   end\n   if string.find(file_name, '.') then\n      return 'No'\n  \
    \ end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return 'No'\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'z' then\n      return 'No'\n   end\n   if\
    \ string.sub(file_name,1,1) ~= 'A' then\n      return 'No'\n   end\n   if string.sub(file_name,string.find(file_name,\
    \ '.'),string.find(file_name, '.')) ~= 'txt' then\n      return 'No'\n   end\n\
    \   if string.sub(file_name,string.find(file_name, '.'),string.find(file_name,\
    \ '.')) ~= 'exe' then\n      return 'No'\n   end\n   if string.sub(file_name,string.find(file_name,\
    \ '.'),string.find(file_name, '.')) ~= 'dll' then\n      return 'No'\n   end\n\
    \   return 'Yes'\nend", "   if file_name == nil then\n      return nil\n   end\n\
    \   if string.len(file_name) <= 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ '.') ~= nil then\n      if string.find(file_name, '.') ~= 1 then\n         return\
    \ nil\n      end\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, ", "   if #file_name > 3 then\n\
    \      return 'No'\n   end\n   if #file_name == 0 then\n      return 'No'\n  \
    \ end\n   if file_name:sub(1, 1) ~= '\\\\' then\n      return 'No'\n   end\n \
    \  if file_name:sub(1, 1) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.byte(string.sub(file_name,1,1)) then\n      return 'No'\n   end\n\
    \   if string.byte(string.sub(file_name,1,1)) ~= 'a' then\n      return 'No'\n\
    \   end\n   if string.byte(string.sub(file_name,1,1)) ~= 'z' then\n      return\
    \ 'No'\n   end\n   if string.byte(string.sub(file_name,1,1)) ~= 'A' then\n   \
    \   return 'No'\n   end\n   if string.byte(string.sub(file_name,1,1)) ~= 'Z' then\n\
    \      return 'No'\n   end\n   if string.byte(string.sub(file_name,1,1)) ~= '0'\
    \ then\n      return 'No'\n   end\n   if string.byte(string.sub(file_name,1,1))\
    \ ~= '9' then\n      return 'No'\n   end\n   if string.byte(string.sub(file_name,1,1))\
    \ ~= '.' then\n      return 'No'\n   end\n   if string.byte(string.sub(file_name,1,1))\
    \ ~= 'txt' then\n      return 'No'\n   end\n   if string.byte(string.sub(file_name,1,1))\
    \ ~= 'exe' then\n      return 'No'\n   end\n   if string.byte(string.sub(file_name,1,1))\
    \ ~= 'dll' then\n      return 'No'\n   end\n   return 'Yes'\nend", "   if #file_name\
    \ > 3 then\n      return 'No'\n   end\n   if #file_name == 0 then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= 'a' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'z' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'A'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 2) ~= '.' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 3) ~= 'txt' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 3) ~= 'exe' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 3) ~= 'dll' then\n      return 'No'\n   end\n   return 'Yes'\nend", "   if #file_name\
    \ > 3 then\n      return 'No'\n   end\n   if #file_name == 0 then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1,\
    \ 1)) then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= '.'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'txt'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'exe'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'dll'\
    \ then\n      return 'No'\n   end\n   return 'Yes'\nend", "   -- Check that the\
    \ file name contains exactly one dot '.'\n   if file_name ~= nil then\n      if\
    \ string.find(file_name, \".\") ~= nil then\n         -- Check that the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n         if string.find(file_name, \".\", 1,\
    \ 1) ~= nil then\n            if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \               if string.find(file_name, \".\", 1, 1) ~= nil then\n         \
    \         if string.find(file_name, \".\", 1, 1) ~= nil then\n               \
    \      -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n                     if string.find(file_name, \".\", 1, 2) ~=\
    \ nil then\n                        if string.find(file_name, \".\", 1, 2) ~=\
    \ nil then\n                           if string.find(file_name, \".\", 1, 2)\
    \ ~= nil then\n                              if string.find(file_name, \".\",\
    \ 1, 2) ~= nil then\n                                 return 'Yes'\n         \
    \                     end\n                           end\n                  \
    \      end\n                     end\n                  end\n               end\n\
    \            end\n         end\n      end\n   end\n   return 'No'\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error: `lua attempt to call global 'file_name_check' (a nil value)`\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include the function definition. Try it\
    \ now.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error: `lua attempt to call global 'file_name_check' (a nil value)`\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include the function definition. Try it\
    \ now.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error: `lua attempt to call global 'file_name_check' (a nil value)`\n<|/\
    \ c |>\n<| a |>\n<code>", "   if file_name == nil then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%.\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%.\") == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%.\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    %.\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"%.\"\
    ) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"%.\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n  \
    \    return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n    \
    \  return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \"%.\") ~= 1 then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"%.\") ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"%.\") ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \"%.\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%.\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    %.\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"%.\"\
    ) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"%.\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n  \
    \    return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n    \
    \  return nil\n   end\n   if string.find(file_name, \"%.\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%.\") ", "  -- Check that the file\
    \ name contains exactly one dot '.'\n  if file_name ~= nil then\n    local dot_index\
    \ = string.find(file_name, \".\")\n    if dot_index == nil then\n      return\
    \ \"No\"\n    end\n    -- Check that the substring before the dot is not empty,\
    \ and it starts with a letter \n    -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    if string.sub(file_name, 1, 1) ~= nil then\n      local letter_index = string.find(string.sub(file_name,\
    \ 1, 1), \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n      if letter_index\
    \ == nil then\n        return \"No\"\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n    local extensions\
    \ = { \"txt\", \"exe\", \"dll\" }\n    local extension_index = string.find(string.sub(file_name),\
    \ \".\")\n    if extension_index == nil then\n      return \"No\"\n    end\n \
    \   if extensions[extension_index] ~= nil then\n      return \"Yes\"\n    end\n\
    \  end\n  return nil\nend", "  local file_name = file_name:lower()\n  local dot_index\
    \ = file_name:find('.')\n  if dot_index == nil then\n    return 'No'\n  end\n\
    \  local file_name = file_name:sub(1, dot_index)\n  local first_letter = file_name:sub(1,\
    \ 1)\n  if first_letter ~= first_letter:upper() then\n    return 'No'\n  end\n\
    \  local extensions = { ['txt'] = true, ['exe'] = true, ['dll'] = true }\n  for\
    \ extension, valid in pairs(extensions) do\n    if file_name:sub(1, #extension)\
    \ == extension then\n      return 'Yes'\n    end\n  end\n  return 'No'\nend",
  "   -- Check that the file name contains exactly one dot '.'\n   if file_name ~=\
    \ nil and file_name ~= '' then\n      if string.find(file_name, '.') ~= nil then\n\
    \         -- Check that the substring before the dot should not be empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    \
    \     if string.sub(file_name,1,1) ~= nil then\n            if string.sub(file_name,1,1)\
    \ ~= '0' and string.sub(file_name,1,1) ~= '9' then\n               if string.sub(file_name,1,1)\
    \ ~= 'a' and string.sub(file_name,1,1) ~= 'z' and string.sub(file_name,1,1) ~=\
    \ 'A' and string.sub(file_name,1,1) ~= 'Z' then\n                  return 'No'\n\
    \               end\n            end\n         end\n      end\n   end\n   return\
    \ 'Yes'\nend", "   if file_name == nil then\n      return nil\n   end", "   if\
    \ file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'z' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'A' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n\
    \      return nil\n   end\n   if file_name:sub(2, 1) ~= 'txt' then\n      return\
    \ nil\n   end\n   if file_name:sub(2, 1) ~= 'exe' then\n      return nil\n   end\n\
    \   if file_name:sub(2, 1) ~= 'dll' then\n      return nil\n   end\n   return\
    \ 'Yes'\nend", "   if file_name == nil then\n      return nil\n   end", "   if\
    \ #file_name > 3 then\n      return 'No'\n   end\n   if #file_name == 0 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= string.byte('a'..string.byte('z'))\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= '.' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'txt' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'exe' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~= 'dll' then\n\
    \      return 'No'\n   end\n   return 'Yes'\nend", "   -- Check that the file\
    \ name contains exactly one dot '.'\n   if #file_name ~= 1 then\n      return\
    \ 'No'\n   end\n   -- Check that the substring before the dot is not empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n   if\
    \ file_name[1] ~= '' then\n      if file_name[1] ~= string.sub(string.lower(file_name),\
    \ 1, 1) then\n         return 'No'\n      end\n   end\n   -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n   if string.find(file_name,\
    \ '.') then\n      if string.find(file_name, 'exe') then\n         return 'Yes'\n\
    \      elseif string.find(file_name, 'dll') then\n         return 'Yes'\n    \
    \  else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end", "   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil then\n      -- Check that the file's name contains exactly one dot '.'\n\
    \      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n      end\n \
    \     -- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name:sub(1,\
    \ 1) ~= '' then\n         if not(file_name:sub(1, 1) >= 'a' and file_name:sub(1,\
    \ 1) <= 'z' or file_name:sub(1, 1) >= 'A' and file_name:sub(1, 1) <= 'Z') then\n\
    \            return 'No'\n         end\n      end\n      -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n      if not(file_name:sub(2,\
    \ 3) == 'txt' or file_name:sub(2, 3) == 'exe' or file_name:sub(2, 3) == 'dll')\
    \ then\n         return 'No'\n      end\n   end\n   return 'Yes'\nend", "   --\
    \ Check that the file name contains exactly one dot '.'\n   if file_name ~= nil\
    \ then\n      -- Check that the file's name contains exactly one dot '.'\n   \
    \   if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n      end\n    \
    \  -- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name:sub(1,\
    \ 1) ~= '' then\n         if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n            return 'No'\n         end\n      end\n      --\
    \ Check that the substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n      if string.find(file_name:sub(2, #file_name), 'exe') ~= nil then\n\
    \         return 'Yes'\n      end\n      if string.find(file_name:sub(2, #file_name),\
    \ 'dll') ~= nil then\n         return 'Yes'\n      end\n      if string.find(file_name:sub(2,\
    \ #file_name), 'txt') ~= nil then\n         return 'Yes'\n      end\n   end\n\
    \   return 'No'\nend", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil and file_name ~= '' then\n      -- Check that the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name:sub(1, 1) ~= '.'\
    \ or file_name:sub(1, 1) ~= '0' or file_name:sub(1, 1) ~= '9' then\n         return\
    \ 'No'\n      end\n      -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n      if file_name:sub(2, 3) ~= 'txt' and file_name:sub(2,\
    \ 3) ~= 'exe' and file_name:sub(2, 3) ~= 'dll' then\n         return 'No'\n  \
    \    end\n   end\n   return 'Yes'\nend", "   -- Check that the file name contains\
    \ exactly one dot '.'\n   if string.find(file_name, \".\") ~= nil then\n     \
    \ -- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1)\
    \ ~= \"\" then\n         if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n            -- Check that the substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n            if string.find(string.lower(file_name),\"\
    exe\") ~= nil then\n               if string.find(string.lower(file_name),\"dll\"\
    ) ~= nil then\n                  return 'Yes'\n               end\n          \
    \  end\n         end\n      end\n   end\n   return 'No'\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if string.len(file_name) <= 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, '.') ~= nil then\n   \
    \   if string.find(file_name, '.') ~= 1 then\n         return nil\n      end\n\
    \      if string.sub(file_name, 1, 1) ~= 'a' then\n         return nil\n     \
    \ end\n      if string.sub(file_name, 1, 1) ~= 'z' then\n         return nil\n\
    \      end\n   end\n   if string.find(file_name, '.') ~= nil then\n      if string.sub(file_name,\
    \ string.find(file_name, '.') + 1, string.len(file_name)) ~= 'txt' then\n    \
    \     return nil\n      end\n      if string.sub(file_name, string.find(file_name,\
    \ '.') + 1, string.len(file_name)) ~= 'exe' then\n         return nil\n      end\n\
    \      if string.sub(file_name, string.find(file_name, '.') + 1, string.len(file_name))\
    \ ~= 'dll' then\n         return nil\n      end\n   end\n   return 'Yes'\nend",
  "   -- Check that the file name contains exactly one dot '.'\n   if file_name ==\
    \ nil then\n      return nil\n   end\n   if #file_name ~= 1 then\n      return\
    \ nil\n   end\n   -- Check that the substring before the dot is not empty\n  \
    \ if file_name:sub(1, 1) ~= '' then\n      return nil\n   end\n   -- Check that\
    \ the substring after the dot is one of these\n   if {'txt', 'exe', 'dll'}:find(file_name:sub(2,\
    \ #file_name)) ~= nil then\n      return nil\n   end\n   -- Check that the substring\
    \ after the dot starts with a letter from the latin alphabet\n   if {'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'}:find(file_name:sub(2, #file_name)) ~= nil then\n      return nil\n\
    \   end\n   -- Check that the substring after the dot is one of these\n   if {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'}:find(file_name:sub(2, #file_name))\
    \ ~= nil then\n      return nil\n   end\n   return 'Yes'\nend", "   -- Initialize\
    \ a variable to store the result\n   local result = 'No'\n   -- Initialize a variable\
    \ to store the length of the file's name\n   local length = 0\n   -- Initialize\
    \ a variable to store the position of the dot '.'\n   local dot_position = 1\n\
    \   -- Initialize a variable to store the position of the first letter of the\
    \ file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1\n   -- Initialize a variable\
    \ to store the position of the last letter of the file's name\n   local last_letter_position\
    \ = 1\n   -- Initialize a variable to store the position of the first letter of\
    \ the file's name\n   local first_letter_position = 1", "   if string.find(file_name,\
    \ '.') then\n      return \"No\"\n   elseif string.find(file_name, '0') then\n\
    \      return \"No\"\n   elseif string.find(file_name, '9') then\n      return\
    \ \"No\"\n   elseif string.find(file_name, '.') ~= 1 then\n      return \"No\"\
    \n   elseif string.find(file_name, 'a') ~= 1 then\n      return \"No\"\n   elseif\
    \ string.find(file_name, 'z') ~= 1 then\n      return \"No\"\n   elseif string.find(file_name,\
    \ 'A') ~= 1 then\n      return \"No\"\n   else\n      return \"Yes\"\n   end\n\
    end", "   if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") then\n      if string.find(file_name, \"\
    .\") then\n         if string.find(file_name, \".\") then\n            if string.find(file_name,\
    \ \".\") then\n               if string.find(file_name, \".\") then\n        \
    \          if string.find(file_name, \".\") then\n                     if string.find(file_name,\
    \ \".\") then\n                        if string.find(file_name, \".\") then\n\
    \                           if string.find(file_name, \".\") then\n          \
    \                    if string.find(file_name, \".\") then\n                 \
    \                if string.find(file_name, \".\") then\n                     \
    \               if string.find(file_name, \".\") then\n                      \
    \                 if string.find(file_name, \".\") then\n                    \
    \                      \"Yes\"\n                                       else\n\
    \                                          \"No\"\n                          \
    \             end\n                                    else\n                \
    \                       \"No\"\n                                    end\n    \
    \                             else\n                                    \"No\"\
    \n                                 end\n                              else\n \
    \                                \"No\"\n                              end\n \
    \                          else\n                              \"No\"\n      \
    \                     end\n                        else\n                    \
    \       \"No\"\n                        end\n                     else\n     \
    \                   \"No\"\n                     end\n                  else\n\
    \                     \"No\"\n                  end\n               else\n   \
    \               \"No\"\n               end\n            else\n               \"\
    No\"\n            end\n         else\n            \"No\"\n         end\n     \
    \ else\n         \"No\"\n      end\n   else\n      \"No\"\n   end\nend", "   if\
    \ file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,2,1) ~= 'z' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,2) ~= '0' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,3) ~= '9' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,4) ~= 'a' then\n      return nil\n   end\n   if string.sub(file_name,1,5)\
    \ ~= 'z' then\n      return nil\n   end\n   if string.sub(file_name,1,6) ~= '0'\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,7) ~= '9' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,8) ~= 'a' then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,9) ~= 'z' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,10) ~= '0' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,11) ~= '9' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,12) ~= 'a' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,13) ~= 'z' then\n      return nil\n   end\n   if string.sub(file_name,1,14)\
    \ ~= '0' then\n      return nil\n   end\n   if string.sub(file_name,1,15) ~= '9'\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,16) ~= 'a' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,17) ~= 'z' then\n    \
    \  return nil\n   end\n   if string.sub(file_name,1,18) ~= '0' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,19) ~= '9' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,20) ~= 'a' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,21) ~= 'z' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,22) ~= '0' then\n      return nil\n", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name < 3 then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '9' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '-' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'A' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'Z' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= 'txt' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'exe' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'dll' then\n      return nil\n   end\n   return\
    \ 'Yes'\nend", "   -- Check that the file name contains exactly one dot '.'\n\
    \   if string.find(file_name, \".\") then\n      -- Check that the substring before\
    \ the dot is not empty, and it starts with a letter \n      -- from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1) ~= \"\" then\n\
    \         if string.sub(file_name,1,1) ~= string.char(string.byte(\"a\")) then\n\
    \            if string.sub(file_name,1,1) ~= string.char(string.byte(\"A\")) then\n\
    \               return \"No\"\n            end\n         end\n      end\n   end\n\
    \   -- Check that the file's name contains only digits and '0'-'9'\n   if string.find(file_name,\
    \ \"[^0-9]\") then\n      return \"No\"\n   end\n   -- Check that the file's name\
    \ contains only 'txt', 'exe', 'dll'\n   if string.find(file_name, \"(txt|exe|dll)\"\
    ) then\n      return \"Yes\"\n   end\n   return \"No\"\nend", "  local file_extension\
    \ = string.match(file_name, \"%.(%a+)$\")\n  local file_extension_length = string.len(file_extension)\n\
    \  if file_extension_length == 0 then\n    return 'No'\n  elseif file_extension_length\
    \ == 1 then\n    return 'No'\n  elseif file_extension_length == 2 then\n    return\
    \ 'No'\n  elseif file_extension_length == 3 then\n    return 'No'\n  elseif file_extension_length\
    \ == 4 then\n    return 'No'\n  elseif file_extension_length == 5 then\n    return\
    \ 'No'\n  elseif file_extension_length == 6 then\n    return 'No'\n  elseif file_extension_length\
    \ == 7 then\n    return 'No'\n  elseif file_extension_length == 8 then\n    return\
    \ 'No'\n  elseif file_extension_length >= 9 then\n    return 'No'\n  else\n  \
    \  return 'Yes'\n  end\nend", "   if #file_name > 3 then\n      return 'No'\n\
    \   elseif #file_name == 0 then\n      return 'No'\n   elseif #file_name ~= 1\
    \ then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= '.' then\n      return\
    \ 'No'\n   elseif file_name:sub(1, 1) ~= 'a' then\n      return 'No'\n   elseif\
    \ file_name:sub(1, 1) ~= 'z' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'A' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'Z' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 2) ~= '.' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 2) ~= 'txt' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 2) ~= 'exe' then\n      return 'No'\n   elseif file_name:sub(1, 2) ~= 'dll'\
    \ then\n      return 'No'\n   else\n      return 'Yes'\n   end\nend", "    local\
    \ file_name = file_name:gsub('%w+%.', '')\n    local file_name = file_name:gsub('.+%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.+', '')\n    local file_name\
    \ = file_name:gsub('.+%w+%.+', '')\n    local file_name = file_name:gsub('%w+%.+%w+%.+',\
    \ '')\n    local file_name = file_name:gsub('%w+%.+%w+%.+%w+%.+', '')\n    local\
    \ file_name = file_name:gsub('%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+', '')\n    local\
    \ file_name = file_name:gsub('%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+%.+%w+",
  "   local file_name = file_name:gsub('.*/','')\n   local file_name = file_name:gsub('^[%w[Zz]]','')\n\
    \   local file_name = file_name:gsub('[^%w[Zz]]','')\n   local file_name = file_name:gsub('%.%.%.%','')\n\
    \   local file_name = file_name:gsub('%.%.%','')\n   local file_name = file_name:gsub('%.%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n\
    \   local file_name = file_name:gsub('%','')\n   local file_name = file_name:gsub('%','')\n",
  "   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name == 0 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= string.upper(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name)\
    \ ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~=\
    \ 'txt' then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~=\
    \ 'exe' then\n      return 'No'\n   end\n   if file_name:sub(1, #file_name) ~=\
    \ 'dll' then\n      return 'No'\n   end\n   return 'Yes'\nend", "   -- Check that\
    \ the file name contains exactly one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n\
    \      end\n   end\n   -- Check that the file name starts with a letter from the\
    \ latin alphapet ('a'-'z' and 'A'-'Z')\n   if file_name ~= nil and file_name ~=\
    \ '' then\n      if file_name:sub(1, 1) ~= 'a' then\n         return 'No'\n  \
    \    end\n      if file_name:sub(1, 1) ~= 'A' then\n         return 'No'\n   \
    \   end\n   end\n   -- Check that the file name contains exactly three digits\
    \ ('0'-'9')\n   if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1,\
    \ 1) ~= '0' then\n         return 'No'\n      end\n      if file_name:sub(1, 1)\
    \ ~= '1' then\n         return 'No'\n      end\n      if file_name:sub(1, 1) ~=\
    \ '2' then\n         return 'No'\n      end\n      if file_name:sub(1, 1) ~= '3'\
    \ then\n         return 'No'\n      end\n      if file_name:sub(1, 1) ~= '4' then\n\
    \         return 'No'\n      end\n      if file_name:sub(1, 1) ~= '5' then\n \
    \        return 'No'\n      end\n      if file_name:sub(1, 1) ~= '6' then\n  \
    \       return 'No'\n      end\n      if file_name:sub(1, 1) ~= '7' then\n   \
    \      return 'No'\n      end\n      if file_name:sub(1, 1) ~= '8' then\n    \
    \     return 'No'\n      end\n      if file_name:sub(1, 1) ~= '9' then\n     \
    \    return 'No'\n      end\n   end\n   -- Check that the file name contains exactly\
    \ one of these strings: ['txt', 'exe', 'dll']\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if file_name:sub(1, 1) ~= 'txt' then\n         return 'No'\n\
    \      end\n      if file_name:sub(1, 1) ~= 'exe' then\n         return 'No'\n\
    \      end\n      if file_name:sub(1, 1) ~= 'dll' then\n         return 'No'\n\
    \      end\n   end\n   return 'Yes'\nend", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil then\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.find(file_name, string.sub(file_name,1,1)) == nil\
    \ then\n        -- Check that the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n        if string.find(file_name, \"exe\") ~= nil then\n\
    \          -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n          if string.find(file_name, \"dll\") ~= nil then\n  \
    \          return 'Yes'\n          else\n            return 'No'\n          end\n\
    \        else\n          return 'No'\n        end\n      else\n        return\
    \ 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n    return 'No'\n\
    \  end\nend", "   -- Create a variable 'result' to store the result of the 'if'\
    \ statement.\n   local result\n   -- Create a variable 'file_name_length' to store\
    \ the length of the file's name.\n   local file_name_length\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot '.' in the file's name.\n  \
    \ local dot_position\n   -- Create a variable 'dot_position' to store the position\
    \ of the dot '.' in the file's name.\n   local dot_position\n   -- Create a variable\
    \ 'dot_position' to store the position of the dot ", "   if string.find(file_name,\
    \ '.') ~= nil then\n      local file_ext = string.sub(file_name,string.find(file_name,\
    \ '.') + 1)\n      if file_ext ~= 'txt' and file_ext ~= 'exe' and file_ext ~=\
    \ 'dll' then\n         return 'No'\n      else\n         if string.find(file_name,\
    \ '.') ~= 1 then\n            local file_ext = string.sub(file_name,string.find(file_name,\
    \ '.') + 1)\n            if file_ext ~= 'txt' and file_ext ~= 'exe' and file_ext\
    \ ~= 'dll' then\n               return 'No'\n            else\n              \
    \ if string.find(file_name, '.') ~= 1 then\n                  local file_ext =\
    \ string.sub(file_name,string.find(file_name, '.') + 1)\n                  if\
    \ file_ext ~= 'txt' and file_ext ~= 'exe' and file_ext ~= 'dll' then\n       \
    \              return 'No'\n                  else\n                     return\
    \ 'Yes'\n                  end\n               else\n                  return\
    \ 'Yes'\n               end\n            end\n         else\n            return\
    \ 'Yes'\n         end\n      end\n   else\n      return 'Yes'\n   end\nend", " \
    \   local digits = string.gsub(file_name, '[^0-9]', '')\n    if digits ~= '' then\n\
    \        return 'No'\n    end\n    local dot_index = string.find(file_name, '.',\
    \ 2)\n    if dot_index == nil then\n        return 'No'\n    end\n    local substring_before_dot\
    \ = string.sub(file_name, 1, dot_index - 1)\n    if substring_before_dot == ''\
    \ then\n        return 'No'\n    end\n    local substring_after_dot = string.sub(file_name,\
    \ (dot_index + 1))\n    local valid_extensions = {\n        'txt',\n        'exe',\n\
    \        'dll'\n    }\n    if substring_after_dot ~= '' then\n        if string.find(valid_extensions,\
    \ substring_after_dot) == nil then\n            return 'No'\n        end\n   \
    \ end\n    return 'Yes'\nend", "   -- Get the length of the file's name.\n   local\
    \ file_name_length = string.len(file_name)\n   -- Get the substring before the\
    \ dot.\n   local file_name_before_dot = string.sub(file_name, 1, string.find(file_name,\
    \ \".\"))\n   -- Get the substring after the dot.\n   local file_name_after_dot\
    \ = string.sub(file_name, string.find(file_name, \".\") + 1)\n   -- Get the first\
    \ character of the file's name.\n   local file_name_first_character = string.sub(file_name,\
    \ 1, 1)\n   -- Get the last character of the file's name.\n   local file_name_last_character\
    \ = string.sub(file_name, string.len(file_name) - 1)\n   -- Get the first character\
    \ of the file's name.\n   local file_name_first_character_upper = string.upper(file_name,\
    \ 1, 1)\n   -- Get the last character of the file's name.\n   local file_name_last_character_upper\
    \ = string.upper(file_name, string.len(file_name) - 1)\n   -- Check if the file's\
    \ name is valid.\n   if file_name_length < 3 then\n      return \"No\"\n   elseif\
    \ file_name_length == 3 then\n      if file_name_before_dot ~= \"\" then\n   \
    \      if file_name_first_character ~= string.upper(file_name_first_character)\
    \ then\n            return \"No\"\n         elseif file_name_last_character ~=\
    \ string.upper(file_name_last_character) then\n            return \"No\"\n   \
    \      end\n      else\n         if file_name_first_character ~= string.upper(file_name_first_character)\
    \ then\n            return \"No\"\n         elseif file_name_last_character ~=\
    \ string.upper(file_name_last_character) then\n            return \"No\"\n   \
    \      end\n      end\n   elseif file_name_length == 4 then\n      if file_name_before_dot\
    \ ~= \"\" then\n         if file_name_first_character ~= string.upper(file_name_first_character)\
    \ then\n            return \"No\"\n         elseif file_name_last_character ~=\
    \ string.upper(file_name_last_character) then\n            return \"No\"\n   \
    \      end\n      else\n         if file_name_first_character ~= string.upper(file_name_first_character)\
    \ then\n            return \"No\"\n         elseif file_name_last_character ~=\
    \ string.upper(file_name_last_character) then\n            return \"No\"\n   \
    \      end\n      end\n   elseif file_name_length == 5 then\n      if file_name_before_dot\
    \ ~= \"\" then\n         if file_name_first_character ~= string.upper(file_name_first_character)\
    \ then\n            return \"No\"\n         elseif file_name_last_character ~=\
    \ string.upper(file_name_last_character) then\n            return \"No\"\n   \
    \      end\n      else\n         if file_name_first_character ~= string.upper(file_name_first_character) ",
  "   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return 'No'\n   end\n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' or file_name:sub(1, 1) ~= '0' or file_name:sub(1, 1) ~= '9' then\n\
    \         return 'No'\n      end\n   end\n   if #file_name == 2 then\n      if\
    \ file_name:sub(1, 2) ~= '-' or file_name:sub(1, 2) ~= '0' or file_name:sub(1,\
    \ 2) ~= '9' then\n         return 'No'\n      end\n   end\n   if #file_name ==\
    \ 3 then\n      if file_name:sub(1, 3) ~= '-' or file_name:sub(1, 3) ~= '0' or\
    \ file_name:sub(1, 3) ~= '9' then\n         return 'No'\n      end\n   end\n \
    \  if #file_name > 3 then\n      return 'No'\n   end\n   if file_name:sub(1, 1)\
    \ ~= 'a' or file_name:sub(1, 1) ~= 'z' or file_name:sub(1, 1) ~= 'A' then\n  \
    \    return 'No'\n   end\n   if file_name:sub(1, 2) ~= 'a' or file_name:sub(1,\
    \ 2) ~= 'z' or file_name:sub(1, 2) ~= 'A' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 3) ~= 'a' or file_name:sub(1, 3) ~= 'z' or file_name:sub(1,\
    \ 3) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1, 4) ~= 'a'\
    \ or file_name:sub(1, 4) ~= 'z' or file_name:sub(1, 4) ~= 'A' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 5) ~= 'a' or file_name:sub(1, 5) ~= 'z'\
    \ or file_name:sub(1, 5) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 6) ~= 'a' or file_name:sub(1, 6) ~= 'z' or file_name:sub(1, 6) ~= 'A' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 7) ~= 'a' or file_name:sub(1,\
    \ 7) ~= 'z' or file_name:sub(1, 7) ~= 'A' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 8) ~= 'a' or file_name:sub(1, 8) ~= 'z' or file_name:sub(1,\
    \ 8) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1, 9) ~= 'a'\
    \ or ", "    local file_name = file_name:lower()\n    local dot_index = file_name:find('.')\n\
    \    local substring_before_dot = file_name:sub(1, dot_index)\n    local substring_after_dot\
    \ = file_name:sub(dot_index + 1)\n    local substring_after_dot_index = substring_after_dot:find('txt')\n\
    \    local substring_after_dot_index_2 = substring_after_dot:find('exe')\n   \
    \ local substring_after_dot_index_3 = substring_after_dot:find('dll')\n    local\
    \ substring_after_dot_index_4 = substring_after_dot:find('py')\n    local substring_after_dot_index_5\
    \ = substring_after_dot:find('pyw')\n    local substring_after_dot_index_6 = substring_after_dot:find('pyc')\n\
    \    local substring_after_dot_index_7 = substring_after_dot:find('pyo')\n   \
    \ local substring_after_dot_index_8 = substring_after_dot:find('pyd')\n    local\
    \ substring_after_dot_index_9 = substring_after_dot:find('pyo')\n    local substring_after_dot_index_10\
    \ = substring_after_dot:find('pyw')\n    local substring_after_dot_index_11 =\
    \ substring_after_dot:find('pyc')\n    local substring_after_dot_index_12 = substring_after_dot:find('pyo')\n\
    \    local substring_after_dot_index_13 = substring_after_dot:find('pyd')\n  \
    \  local substring_after_dot_index_14 = substring_after_dot:find('pyo')\n    local\
    \ substring_after_dot_index_15 = substring_after_dot:find('pyw')\n    local substring_after_dot_index_16\
    \ = substring_after_dot:find('pyc')\n    local substring_after_dot_index_17 =\
    \ substring_after_dot:find('pyo')\n    local substring_after_dot_index_18 = substring_after_dot:find('pyd')\n\
    \    local substring_after_dot_index_19 = substring_after_dot:find('pyo')\n  \
    \  local substring_after_dot_index_20 = substring_after_dot:find('pyw')\n    local\
    \ substring_after_dot_index_21 = substring_after_dot:find('pyc')\n    local substring_after_dot_index_22\
    \ = substring_after_dot:find('pyo')\n    local substring_after_dot_index_23 =\
    \ substring_after_dot:find('pyd')\n    local substring_after_dot_index_24 = substring_after_dot:find('pyo')\n\
    \    local substring_after_dot_index_25 = substring_after_dot:find('pyw')\n  \
    \  local substring_after_dot_index_26 = substring_after_dot:find('pyc')\n    local\
    \ substring_after_", "    local file_name = file_name:lower()\n    local file_name\
    \ = file_name:gsub('.', '')\n    local file_name = file_name:gsub('^[a-z_]', '')\n\
    \    local file_name = file_name:gsub('[a-z_]$', '')\n    local file_name = file_name:gsub('^[a-z_][^.]*$',\
    \ '')\n    local file_name = file_name:gsub('[a-z_][^.]*$', '')\n    local file_name\
    \ = file_name:gsub('^[^.]*[a-z_]', '')\n    local file_name = file_name:gsub('^[^.]*[a-z_][^.]*$',\
    \ '')\n    local file_name = file_name:gsub('^[^.]*[^.]*[a-z_]', '')\n    local\
    \ file_name = file_name:gsub('^[^.]*[^.]*[a-z_][^.]*$', '')\n    local file_name\
    \ = file_name:gsub('^[^.]*[^.]*[^.]*[a-z_]', '')\n    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[a-z_][^.]*$',\
    \ '')\n    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[a-z_]', '')\n\
    \    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[a-z_][^.]*$', '')\n\
    \    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[^.]*[a-z_]', '')\n\
    \    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[a-z_][^.]*$',\
    \ '')\n    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[a-z_]',\
    \ '')\n    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[a-z_][^.]*$',\
    \ '')\n    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[a-z_]',\
    \ '')\n    local file_name = file_name:gsub('^[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[^.]*[a-z_",
  "    local file_name = file_name:gsub(\"^0*([1-9][0-9]*)%.\", \"\") -- Remove leading\
    \ zeros and any digits after the dot\n    local file_name = file_name:gsub(\"\
    ^([a-zA-Z])%.\", \"\") -- Remove leading letters and any digits after the dot\n\
    \    local file_name = file_name:gsub(\"^[^.]+\", \"\") -- Remove everything after\
    \ the dot\n    local file_name = file_name:gsub(\"%.$\", \"\") -- Remove everything\
    \ after the dot\n    local file_name = file_name:gsub(\"^.\", \"\") -- Remove\
    \ everything before the dot\n    local file_name = file_name:gsub(\"^0*\", \"\"\
    ) -- Remove leading zeros and any digits after the dot\n    local file_name =\
    \ file_name:gsub(\"^[a-zA-Z]\", \"\") -- Remove leading letters and any digits\
    \ after the dot\n    local file_name = file_name:gsub(\"^[^.]+\", \"\") -- Remove\
    \ everything after the dot\n    local file_name = file_name:gsub(\"%.$\", \"\"\
    ) -- Remove everything after the dot\n    local file_name = file_name:gsub(\"\
    ^.\", \"\") -- Remove everything before the dot\n    local file_name = file_name:gsub(\"\
    ^0*\", \"\") -- Remove leading zeros and any digits after the dot\n    local file_name\
    \ = file_name:gsub(\"^[a-zA-Z]\", \"\") -- Remove leading letters and any digits\
    \ after the dot\n    local file_name = file_name:gsub(\"^[^.]+\", \"\") -- Remove\
    \ everything after the dot\n    local file_name = file_name:gsub(\"%.$\", \"\"\
    ) -- Remove everything after the dot\n    local file_name = file_name:gsub(\"\
    ^.\", \"\") -- Remove everything before the dot\n    local file_name = file_name:gsub(\"\
    ^0*\", \"\") -- Remove leading zeros and any digits after the dot\n    local file_name\
    \ = file_name:gsub(\"^[a-zA-Z]\", \"\") -- Remove leading letters and any digits\
    \ after the dot\n    local file_name = file_name:gsub(\"^[^.]+\", \"\") -- Remove\
    \ everything after the dot\n    local file_name = file_name:gsub(\"%.$\", \"\"\
    ) -- Remove everything after the dot\n    local file_name = file_name:gsub(\"\
    ^.\", \"\") -- Remove everything before the dot\n    local file_name = file_name:gsub(\"\
    ^0*\", \"\") -- Remove leading zeros and any digits after the dot\n    local file_name\
    \ = file_name:gsub(\"^[a-zA-Z]\", \"\") -- Remove leading letters and any digits\
    \ after the dot\n    local file_name = file_name:gsub(\"^[^.]+\", \"\") -- Remove\
    \ everything after the dot\n    local file_name = file_name:g", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if string.len(file_name) > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= 'z' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,1) ~= 'A' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'Z' then\n      return nil\n   end\n   if\
    \ string.find(file_name, '.') ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ '.') ~= 1 then\n      return nil\n   end\n   if string.find(file_name, '.')\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, '.') ~= 1\
    \ then\n      return nil\n   end\n   return 'Yes'\nend", "   local file_name =\
    \ file_name:lower()\n   if #file_name > 3 then\n      return nil\n   end\n   if\
    \ file_name:sub(1, 1) ~= '\\.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.upper(string.sub(file_name, 1, 1)) then\n      return nil\n   end\n\
    \   if string.find(file_name, '\\.') then\n      return nil\n   end\n   if string.find(file_name,\
    \ '\\.') then\n      return nil\n   end\n   if string.find(file_name, '\\.') then\n\
    \      return nil\n   end\n   return 'Yes'\nend", "   if file_name == nil then\n\
    \      return nil\n   end\n   if #file_name > 3 then\n      return 'No'\n   end\n\
    \   if #file_name < 1 then\n      return 'No'\n   end\n   if #file_name > 1 then\n\
    \      if file_name:sub(1, 1) ~= '-' then\n         return 'No'\n      end\n \
    \  end\n   if #file_name > 1 then\n      if file_name:sub(1, 1) ~= '-' then\n\
    \         if file_name:sub(2, 2) ~= '-' then\n            return 'No'\n      \
    \   end\n      end\n   end\n   if #file_name > 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         if file_name:sub(2, 2) ~= '-' then\n            if\
    \ file_name:sub(3, 3) ~= '-' then\n               return 'No'\n            end\n\
    \         end\n      end\n   end\n   if #file_name > 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         if file_name:sub(2, 2) ~= '-' then\n            if\
    \ file_name:sub(3, 3) ~= '-' then\n               if file_name:sub(4, 4) ~= '-'\
    \ then\n                  return 'No'\n               end\n            end\n \
    \        end\n      end\n   end\n   if #file_name > 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         if file_name:sub(2, 2) ~= '-' then\n            if\
    \ file_name:sub(3, 3) ~= '-' then\n               if file_name:sub(4, 4) ~= '-'\
    \ then\n                  if file_name:sub(5, 5) ~= '-' then\n               \
    \      return 'No'\n                  end\n               end\n            end\n\
    \         end\n      end\n   end\n   if #file_name > 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         if file_name:sub(2, 2) ~= '-' then\n            if\
    \ file_name:sub(3, 3) ~= '-' then\n               if file_name:sub(4, 4) ~= '-'\
    \ then\n                  if file_name:sub(5, 5) ~= '-' then\n               \
    \      if file_name:sub(6, 6) ~= '-' then\n                        if file_name:sub(7,\
    \ 7) ~= '-' then\n                           if file_name:sub(8, 8) ~= '-' then\n\
    \                              if file_name:sub(9, 9) ~= '-' then\n          \
    \                       return 'No'\n                              end\n     \
    \                      end\n                        end\n                    \
    \ end\n                  end\n               ", "   if string.find(file_name,\
    \ \".\") ~= nil then\n      local file_ext = string.sub(file_name, string.find(file_name,\
    \ \".\") + 1)\n      if file_ext ~= 'txt' and file_ext ~= 'exe' and file_ext ~=\
    \ 'dll' then\n         return 'No'\n      else\n         if string.find(file_name,\
    \ \".\") ~= 1 then\n            local file_ext = string.sub(file_name, 1, string.find(file_name,\
    \ \".\") - 1)\n            if file_ext ~= 'txt' and file_ext ~= 'exe' and file_ext\
    \ ~= 'dll' then\n               return 'No'\n            else\n              \
    \ if string.find(file_name, \".\") ~= 1 then\n                  local file_ext\
    \ = string.sub(file_name, 1, string.find(file_name, \".\") - 1)\n            \
    \      if file_ext ~= 'txt' and file_ext ~= 'exe' and file_ext ~= 'dll' then\n\
    \                     return 'No'\n                  else\n                  \
    \   return 'Yes'\n                  end\n               else\n               \
    \   return 'Yes'\n               end\n            end\n         else\n       \
    \     return 'Yes'\n         end\n      end\n   else\n      return 'Yes'\n   end\n\
    end", "   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ == nil then\n      return 'No'\n   end\n   if #file_name ~= 1 then\n      return\
    \ 'No'\n   end\n   -- Check that the substring before the dot is not empty, and\
    \ it starts with a letter \n   -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return 'No'\n   end\n   -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \ if string.find(file_name:sub(1, #file_name), '%.') ~= nil then\n      return\
    \ 'No'\n   end\n   -- Check that the file's name contains only digits (0-9)\n\
    \   if string.find(file_name, '%%d') ~= nil then\n      return 'No'\n   end\n\
    \   -- Check that the file's name contains only latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if string.find(file_name, '%l') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check that the file's name contains only latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if string.find(file_name, '%L') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check that the file's name contains only latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if string.find(file_name, '%l') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check that the file's name contains only latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if string.find(file_name, '%L') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check that the file's name contains only latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if string.find(file_name, '%L') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check that the file's name contains only latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if string.find(file_name, '%L') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check that the file's name contains only latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if string.find(file_name, '%L') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check ", "   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name\
    \ == 0 then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '0' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '9' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= '-' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'a' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'z'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 2) ~= '.' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 3) ~= '' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 3) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'txt'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'exe' then\n \
    \     return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'dll' then\n      return\
    \ 'No'\n   end\n   return 'Yes'\nend", "   if file_name == nil then\n      return\
    \ nil\n   end", "   if string.find(file_name, '.') ~= nil then\n      if string.find(file_name,\
    \ '.') ~= 1 then\n         return 'No'\n      else\n         if string.find(file_name,\
    \ '.') ~= 1 then\n            if string.find(file_name, '.') ~= 1 then\n     \
    \          if string.find(file_name, '.') ~= 1 then\n                  if string.find(file_name,\
    \ '.') ~= 1 then\n                     return 'No'\n                  else\n \
    \                    return 'No'\n                  end\n               else\n\
    \                  return 'No'\n               end\n            else\n       \
    \        return 'No'\n            end\n         else\n            return 'No'\n\
    \         end\n      end\n   else\n      return 'No'\n   end\nend", "   if string.find(file_name,\
    \ \".\") ~= nil then\n      local file_name = string.gsub(file_name, \"\", \"\
    .\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n      local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.", "   if file_name == nil then\n      return\
    \ nil\n   end\n   if #file_name > 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"^[a-zA-Z]\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"^[0-9]\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^[a-zA-Z0-9]\") then\n\
    \      return nil\n   end\n   return 'Yes'\nend", "    local file_name = file_name:gsub('%.',\
    \ '')\n    local file_name = file_name:gsub('[^0-9a-zA-Z]', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('^[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('%.', '')\n    local file_name = file_name:gsub('%.%.', '')\n\
    \    local file_name = file_name:gsub('%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.', '')\n    local\
    \ file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.', '')\n    local file_name =\
    \ file_name:gsub('%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local\
    \ file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local\
    \ file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.',\
    \ '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.', '')\n  \
    \  local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.', '')\n    local file_name = file_name:gsub('%.%.%.%.%.%.%.%.%.%.%.',\
    \ '')\n    local ", "   -- Check that the file name contains exactly one dot '.'\n\
    \   if file_name ~= nil then\n      if string.find(file_name, \".\") ~= nil then\n\
    \         -- Check that the substring before the dot should not be empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    \
    \     if string.sub(file_name,1,1) ~= \"\" then\n            if string.find(string.lower(string.sub(file_name,1,1)),string.letters)\
    \ ~= nil then\n               -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n               if string.find(string.lower(string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name))),{'txt','exe','dll'}) ~= nil then\n          \
    \        return 'Yes'\n               else\n                  return 'No'\n  \
    \             end\n            else\n               return 'No'\n            end\n\
    \         else\n            return 'No'\n         end\n      else\n         return\
    \ 'No'\n      end\n   else\n      return 'No'\n   end\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name > 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'z' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,1) ~= 'A' then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'Z' then\n      return nil\n   end\n   if string.find(file_name, \"exe\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"dll\") then\n\
    \      return nil\n   end\n   return 'Yes'\nend", "   -- Check that the file name\
    \ contains only digits and one dot.\n   if string.find(file_name, '%%d') ~= nil\
    \ then\n      return 'No'\n   end\n   -- Check that the file name contains only\
    \ latin letters.\n   if string.find(file_name, '%a') ~= nil then\n      return\
    \ 'No'\n   end\n   -- Check that the file name contains only latin letters.\n\
    \   if string.find(file_name, '%A') ~= nil then\n      return 'No'\n   end\n \
    \  -- Check that the file name contains only latin letters.\n   if string.find(file_name,\
    \ '%z') ~= nil then\n      return 'No'\n   end\n   -- Check that the file name\
    \ contains only latin letters.\n   if string.find(file_name, '%Z') ~= nil then\n\
    \      return 'No'\n   end\n   -- Check that the file name contains only latin\
    \ letters.\n   if string.find(file_name, '%0') ~= nil then\n      return 'No'\n\
    \   end\n   -- Check that the file name contains only latin letters.\n   if string.find(file_name,\
    \ '%9') ~= nil then\n      return 'No'\n   end\n   -- Check that the file name\
    \ contains only latin letters.\n   if string.find(file_name, '%A') ~= nil then\n\
    \      return 'No'\n   end\n   -- Check that the file name contains only latin\
    \ letters.\n   if string.find(file_name, '%z') ~= nil then\n      return 'No'\n\
    \   end\n   -- Check that the file name contains only latin letters.\n   if string.find(file_name,\
    \ '%Z') ~= nil then\n      return 'No'\n   end\n   -- Check that the file name\
    \ contains only latin letters.\n   if string.find(file_name, '%0') ~= nil then\n\
    \      return 'No'\n   end\n   -- Check that the file name contains only latin\
    \ letters.\n   if string.find(file_name, '%9') ~= nil then\n      return 'No'\n\
    \   end\n   -- Check that the file name contains only latin letters.\n   if string.find(file_name,\
    \ '%A') ~= nil then\n      return 'No'\n   end\n   -- Check that the file name\
    \ contains only latin letters.\n   if string.find(file_name, '%z') ~= nil then\n\
    \      return 'No'\n   end\n   -- Check that the file name contains only latin\
    \ letters.\n   if string.find(file_name, '%Z') ~= nil then\n      return 'No'\n\
    \   end\n   ", "   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      local file_name = string.gsub(file_name, \"[^0-9]\"\
    , \"\")\n      if string.find(file_name, \".\") == nil then\n         return nil\n\
    \      end\n      local file_name = string.gsub(file_name, \"^[^A-Za-z]\", \"\"\
    )\n      if string.find(file_name, \".\") == nil then\n         return nil\n \
    \     end\n      local file_name = string.gsub(file_name, \"^[^A-Za-z]\", \"\"\
    )\n      if string.find(file_name, \".\") == nil then\n         return nil\n \
    \     end\n   end\n   if string.find(file_name, \".\") == nil then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") == nil then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") == nil then\n      return nil\n \
    \  end\n   if string.find(file_name, \".\") == nil then\n      return nil\n  \
    \ end\n   if string.find(file_name, \".\") == nil then\n      return nil\n   end\n\
    \   return 'Yes'\nend", "   if file_name == nil then\n      return nil\n   end\n\
    \   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name < 1 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= '9' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '-' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'a' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'z' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'A'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= '0' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= '9' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'txt'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'exe' then\n \
    \     return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'dll' then\n      return\
    \ 'No'\n   end\n   return 'Yes'\nend", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') ~= nil then\n    -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= '' then\n      -- Check that the substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n      if string.find(file_name, 'exe') ~= nil\
    \ then\n        return 'Yes'\n      elseif string.find(file_name, 'dll') ~= nil\
    \ then\n        return 'Yes'\n      elseif string.find(file_name, 'txt') ~= nil\
    \ then\n        return 'Yes'\n      else\n        return 'No'\n      end\n   \
    \ else\n      return 'No'\n    end\n  else\n    return 'No'\n  end\nend", "  local\
    \ file_name = file_name:lower()\n  local dot_index = file_name:find('.')\n  if\
    \ dot_index == nil then\n    return 'No'\n  end\n  local first_letter = file_name:sub(1,\
    \ 1)\n  if first_letter ~= first_letter then\n    return 'No'\n  end\n  local\
    \ dot_index = file_name:find('.')\n  if dot_index == nil then\n    return 'No'\n\
    \  end\n  local extension = file_name:sub(dot_index + 1)\n  if #extension > 3\
    \ then\n    return 'No'\n  end\n  local extension_array = extension:split('.')\n\
    \  if #extension_array ~= 2 then\n    return 'No'\n  end\n  local extension_array_1\
    \ = extension_array[1]\n  if #extension_array_1 ~= 1 then\n    return 'No'\n \
    \ end\n  local extension_array_2 = extension_array_1[1]\n  if #extension_array_2\
    \ ~= 1 then\n    return 'No'\n  end\n  if extension_array_2 ~= 'txt' and extension_array_2\
    \ ~= 'exe' and extension_array_2 ~= 'dll' then\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend", "   -- Check that the file name contains exactly one dot '.'\n\
    \   if file_name ~= nil then\n      if string.find(file_name, \".\") ~= nil then\n\
    \         -- Check that the substring before the dot should not be empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    \
    \     if string.find(file_name, \".\", 1, 1) ~= nil then\n            if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n               if string.find(file_name, \".\", 1,\
    \ 1) ~= nil then\n                  if string.find(file_name, \".\", 1, 1) ~=\
    \ nil then\n                     -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n                    if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                         if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                             if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                                 if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                                    if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                                       return 'Yes'\n\
    \                                    else\n                                  \
    \     return 'No'\n                                    end\n                 \
    \                else\n                                    return 'No'\n     \
    \                            end\n                             else\n        \
    \                        return 'No'\n                             end\n     \
    \                    else\n                            return 'No'\n         \
    \                end\n                     else\n                        return\
    \ 'No'\n                     end\n                  else\n                   \
    \  return 'No'\n                  end\n               else\n                 \
    \ return 'No'\n               end\n            else\n               return 'No'\n\
    \            end\n         else\n            return 'No'\n         end\n     \
    \ else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end", "   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name\
    \ == 0 then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 2), 1, 1)) then\n      return 'No'\n   end\n   if #string.gsub(file_name, '.',\
    \ '') ~= 1 then\n      return 'No'\n   end\n   if #string.gsub(file_name, '.',\
    \ '') ~= 1 then\n      return 'No'\n   end\n   if string.find(file_name, '.')\
    \ ~= 1 then\n      return 'No'\n   end\n   return 'Yes'\nend", "   local file_extension\
    \ = string.match(file_name, \"%.[^.]*$\")\n   if file_extension == nil then\n\
    \      return \"No\"\n   end\n   if string.len(file_extension) > 3 then\n    \
    \  return \"No\"\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return\
    \ \"No\"\n   end\n   if string.sub(file_name,1,1) ~= 'z' then\n      return \"\
    No\"\n   end\n   if string.sub(file_name,1,1) ~= 'A' then\n      return \"No\"\
    \n   end\n   if string.sub(file_name,1,1) ~= 'Z' then\n      return \"No\"\n \
    \  end\n   if string.sub(file_name,1,2) ~= '.' then\n      return \"No\"\n   end\n\
    \   if string.sub(file_name,1,3) ~= '' then\n      return \"No\"\n   end\n   if\
    \ string.match(file_extension, \"(exe|dll)\") ~= nil then\n      return \"Yes\"\
    \n   end\nend", "   -- Get the substring before the dot\n   local file_extension\
    \ = file_name:sub(1, file_name:find('.')-1)\n   -- Get the substring after the\
    \ dot\n   local file_extension_check = file_name:sub((file_name:find('.')+1))\n\
    \   -- Check if the substring after the dot contains one of the valid file extensions\n\
    \   if file_extension_check == 'txt' or file_extension_check == 'exe' or file_extension_check\
    \ == 'dll' then\n      return 'Yes'\n   else\n      return 'No'\n   end\nend",
  "   if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(2, 1) ~= '.' or\
    \ file_name:sub(2, 1) ~= '\\' or file_name:sub(2, 1) ~= '0' or file_name:sub(2,\
    \ 1) ~= '9' then\n      return nil\n   end\n   if file_name:sub(1, 2) ~= '' then\n\
    \      if file_name:sub(1, 2) ~= 'a' or file_name:sub(1, 2) ~= 'A' then\n    \
    \     return nil\n      end\n   end\n   if file_name:sub(3, 3) ~= '.' or file_name:sub(3,\
    \ 3) ~= '\\' or file_name:sub(3, 3) ~= '0' or file_name:sub(3, 3) ~= '9' then\n\
    \      return nil\n   end\n   return 'Yes'\nend", "   if #file_name > 3 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '\\.' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a' .. 'z' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'A' .. 'Z' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= '0' .. '9' then\n      return 'No'\n   end\n   if\
    \ file_name:sub(1, 2) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 3) ~= '.txt' then\n      return 'No'\n   end\n   if file_name:sub(1, 4) ~= '.exe'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 5) ~= '.dll' then\n\
    \      return 'No'\n   end\n   return 'Yes'\nend", "   if file_name == nil then\n\
    \      return nil\n   end\n   local file_name = file_name:lower()\n   if #file_name\
    \ < 3 then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 2) ~= '\\\\' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 3) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 4) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 5) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 6) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 7) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 8) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 9) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 10) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 11) ~= '.'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 12) ~= '.' then\n   \
    \   return nil\n   end\n   if file_name:sub(1, 13) ~= '.' then\n      return nil\n\
    \   end\n   if file_name:sub(1, 14) ~= '.' then\n      return nil\n   end\n  \
    \ if file_name:sub(1, 15) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 16) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 17) ~= '.'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 18) ~= '.' then\n   \
    \   return nil\n   end\n   if file_name:sub(1, 19) ~= '.' then\n      return nil\n\
    \   end\n   if file_name:sub(1, 20) ~= '.' then\n      return nil\n   end\n  \
    \ if file_name:sub(1, 21) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 22) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 23) ~= '.'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 24) ~= '.' then\n   \
    \   return nil\n   end\n   if file_name:", "   if #file_name > 3 then\n      return\
    \ 'No'\n   end\n   if #file_name == 0 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '-' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '0'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '9' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'z' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'Z' then\n      return 'No'\n   end\n   if file_name:sub(1, 2) ~= '.'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= '' then\n    \
    \  return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'exe' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 3) ~= 'dll' then\n      return 'No'\n \
    \  end\n   return 'Yes'\nend", "    local file_name = file_name:lower()\n    local\
    \ dot_index = file_name:find('.')\n    local dot_string = file_name:sub(1, dot_index)\n\
    \    local dot_string_length = dot_string:len()\n    local dot_string_start_letter\
    \ = string.sub(dot_string, 1, 1)\n    local dot_string_end_letter = string.sub(dot_string,\
    \ dot_string_length + 1, dot_string_length)\n    local dot_string_start_letter_upper\
    \ = string.upper(dot_string_start_letter)\n    local dot_string_end_letter_upper\
    \ = string.upper(dot_string_end_letter)\n    local dot_string_start_letter_lower\
    \ = string.lower(dot_string_start_letter)\n    local dot_string_end_letter_lower\
    \ = string.lower(dot_string_end_letter)\n    local dot_string_start_letter_upper\
    \ = string.upper(dot_string_start_letter)\n    local dot_string_end_letter_upper\
    \ = string.upper(dot_string_end_letter)\n    local dot_string_start_letter_lower\
    \ = string.lower(dot_string_start_letter)\n    local dot_string_end_letter_lower\
    \ = string.lower(dot_string_end_letter)\n    local dot_string_start_letter_upper\
    \ = string.upper(dot_string_start_letter)\n    local dot_string_end_letter_upper\
    \ = string.upper(dot_string_end_letter)\n    local dot_string_start_letter_lower\
    \ = string.lower(dot_string_start_letter)\n    local dot_string_end_letter_lower\
    \ = string.lower(dot_string_end_letter)\n    local dot_string_start_letter_upper\
    \ = string.upper(dot_string_start_letter)\n    local dot_string_end_letter_upper\
    \ = string.upper(dot_string_end_letter)\n    local dot_string_start_letter_lower\
    \ = string.lower(dot_string_start_letter)\n    local dot_string_end_letter_lower\
    \ = string.lower(dot_string_end_letter)\n    local dot_string_start_letter_upper\
    \ = string.upper(dot_string_start_letter)\n    local dot_string_end_letter_upper\
    \ = string.upper(dot_string_end_letter)\n    local dot_string_start_letter_lower\
    \ = string.lower(dot_string_start_letter)\n    local dot_string_end_letter_lower\
    \ = string.lower(dot_string_end_letter)\n    local dot_string_start_letter_upper\
    \ = string.upper(dot_string_start_letter)\n    local dot_string_end_letter_upper\
    \ = string.upper(dot_string_end_letter)\n    local dot_string_start_letter_lower\
    \ = string.lower(dot_string_start_letter)\n    local dot_string_end_letter_lower\
    \ = string.lower(dot_string_end_letter)\n    local dot_string_start_letter_upper\
    \ = string.upper(dot_string_start_letter)\n    local dot_string_end_letter_upper\
    \ = string.upper(dot_string_end_letter)\n    local dot_string_start_letter_lower\
    \ = string.lower(dot_string_", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name > 3 then\n      return nil\n   end\n   if file_name\
    \ ~= file_name:sub(1, #file_name) then\n      return nil\n   end\n   if file_name:sub(1,\
    \ #file_name) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, #file_name:sub(1,\
    \ #file_name)) ~= 'a' then\n      return nil\n   end\n   if file_name:sub(1, #file_name:sub(1,\
    \ #file_name)) ~= 'z' then\n      return nil\n   end\n   return 'Yes'\nend", " \
    \   local num_digits = string.len(file_name) - string.len(string.sub(file_name,1,1))\n\
    \    if num_digits > 3 then\n        return 'No'\n    end\n    local dot_index\
    \ = string.find(file_name,'.')\n    if dot_index == nil then\n        return 'No'\n\
    \    end\n    local first_letter = string.sub(file_name,1,1)\n    local second_letter\
    \ = string.sub(file_name,dot_index+1,1)\n    if first_letter ~= 'a' and first_letter\
    \ ~= 'A' then\n        return 'No'\n    end\n    if second_letter ~= 'txt' and\
    \ second_letter ~= 'exe' and second_letter ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1,\
    \ 1) ~= '.' then\n         return 'No'\n      end\n   end\n   -- Check that the\
    \ substring before the dot is not empty, and it starts with a letter \n   -- from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n         if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n           \
    \ return 'No'\n         end\n      end\n   end\n   -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n   if file_name ~= nil\
    \ and file_name ~= '' then\n      if file_name:sub(1, 2) ~= 'exe' and file_name:sub(1,\
    \ 2) ~= 'dll' and file_name:sub(1, 2) ~= 'txt' then\n         return 'No'\n  \
    \    end\n   end\n   return 'Yes'\nend", "   if #file_name > 3 then\n      return\
    \ 'No'\n   end\n   if #file_name == 0 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' or file_name:sub(1, 1) ~= '0'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' or file_name:sub(1,\
    \ 1) ~= '0' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-'\
    \ or file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' or file_name:sub(1, 1) ~= '0'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' or file_name:sub(1,\
    \ 1) ~= '0' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-'\
    \ or file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' or file_name:sub(1, 1) ~= '0'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-' or file_name:sub(1,\
    \ 1) ~= '0' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-'\
    \ or file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= '-' or file_name:sub(1, 1) ~= '0' then\n      return\
    \ 'No'\n   end\n   if file_name:sub", "    local file_name = file_name:lower()\n\
    \    local dot_index = file_name:find('.')\n    if dot_index == nil then\n   \
    \     return 'No'\n    end\n    local first_letter = file_name:sub(1, 1)\n   \
    \ local last_letter = file_name:sub(dot_index + 1, 1)\n    if first_letter ~=\
    \ 'a' and first_letter ~= 'A' then\n        return 'No'\n    end\n    if last_letter\
    \ ~= 'z' and last_letter ~= 'Z' then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ 3) == '000' then\n        return 'No'\n    end\n    return 'Yes'\nend", "  \
    \ if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"%\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"/\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"\\\\\") then\n  \
    \    return \"No\"\n   end\n   if string.find(file_name, \":\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"<\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \">\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"|\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"?\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"*\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"[\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"]\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"{\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"}\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"(\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \")\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"?\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"<\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \">\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"*\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"[\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"]\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"{\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"}\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"(\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return \"No\"", "    local file_name = file_name:lower()\n\
    \    local dot_index = file_name:find('.')\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local first_letter = file_name:sub(1, 1)\n    local valid_letters\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    local valid_letters = valid_letters .. 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    local valid_letters = valid_letters .. '0123456789'\n    local valid_letters\
    \ = valid_letters .. '._-'\n    local valid_letters = valid_letters .. '-_'\n\
    \    local valid_letters = valid_letters .. '/'\n    local valid_letters = valid_letters\
    \ .. '\\\\'\n    local valid_letters = valid_letters .. '-'\n    local valid_letters\
    \ = valid_letters .. '_'\n    local valid_letters = valid_letters .. '~'\n   \
    \ local valid_letters = valid_letters .. '?'\n    local valid_letters = valid_letters\
    \ .. '#'\n    local valid_letters = valid_letters .. '$'\n    local valid_letters\
    \ = valid_letters .. '\"'\n    local valid_letters = valid_letters .. '\\''\n\
    \    local valid_letters = valid_letters .. '+'\n    local valid_letters = valid_letters\
    \ .. '<'\n    local valid_letters = valid_letters .. '>'\n    local valid_letters\
    \ = valid_letters .. '{'\n    local valid_letters = valid_letters .. '}'\n   \
    \ local valid_letters = valid_letters .. '|'\n    local valid_letters = valid_letters\
    \ .. '~'\n    local valid_letters = valid_letters .. '?'\n    local valid_letters\
    \ = valid_letters .. '#'\n    local valid_letters = valid_letters .. '$'\n   \
    \ local valid_letters = valid_letters .. '\"'\n    local valid_letters = valid_letters\
    \ .. '\\''\n    local valid_letters = valid_letters .. '+'\n    local valid_letters\
    \ = valid_letters .. '<'\n    local valid_letters = valid_letters .. '>'\n   \
    \ local valid_letters = valid_letters .. '{'\n    local valid_letters = valid_letters\
    \ .. '}'\n    local valid_letters = valid_letters .. '|'\n    local valid_letters\
    \ = valid_letters .. '~'\n    local valid_letters = valid_letters .. '?'\n   \
    \ local valid_letters = valid_letters .. '#'\n    local valid_letters = valid_letters\
    \ .. '", "   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'z' then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,1) ~= 'A' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= 'Z' then\n      return nil\n\
    \   end\n   return 'Yes'\nend", "    local file_extension = string.sub(file_name,\
    \ string.find(file_name, '.') + 1)\n    local file_extension_lower = string.lower(file_extension)\n\
    \    local file_extension_lower = string.gsub(file_extension_lower, '[^a-z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^a-z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^A-Z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^A-Z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^.]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^.]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^a-z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^a-z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^A-Z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^A-Z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^.]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^.]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^0-9]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^a-z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '^[^a-z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_extension_lower, '[^A-Z]',\
    \ '')\n    local file_extension_lower = string.gsub(file_", "    local file_extension\
    \ = string.match(file_name, \"%.[^.]*$\")\n    local file_extension_length = string.len(file_extension)\n\
    \    local file_extension_without_dots = string.sub(file_extension, 1, file_extension_length-1)\n\
    \    local file_extension_without_dots_length = string.len(file_extension_without_dots)\n\
    \    local file_extension_without_dots_start_with_letter = string.sub(file_extension_without_dots,\
    \ 1, 1)\n    local file_extension_without_dots_end_with_letter = string.sub(file_extension_without_dots,\
    \ 1, 1)\n    local file_extension_without_dots_start_with_letter_length = string.len(file_extension_without_dots_start_with_letter)\n\
    \    local file_extension_without_dots_end_with_letter_length = string.len(file_extension_without_dots_end_with_letter)\n\
    \    local file_extension_without_dots_start_with_letter_not_empty = string.len(file_extension_without_dots_start_with_letter)\
    \ > 0\n    local file_extension_without_dots_end_with_letter_not_empty = string.len(file_extension_without_dots_end_with_letter)\
    \ > 0\n    local file_extension_without_dots_start_with_letter_not_valid_letter\
    \ = string.sub(file_extension_without_dots_start_with_letter, 1, 1) ~= 'a'\n \
    \   local file_extension_without_dots_end_with_letter_not_valid_letter = string.sub(file_extension_without_dots_end_with_letter,\
    \ 1, 1) ~= 'a'\n    local file_extension_without_dots_start_with_letter_not_valid_letter_length\
    \ = string.len(file_extension_without_dots_start_with_letter_not_valid_letter)\n\
    \    local file_extension_without_dots_end_with_letter_not_valid_letter_length\
    \ = string.len(file_extension_without_dots_end_with_letter_not_valid_letter)\n\
    \    local file_extension_without_dots_start_with_letter_not_valid_letter_not_empty\
    \ = string.len(file_extension_without_dots_start_with_letter_not_valid_letter)\
    \ > 0\n    local file_extension_without_dots_end_with_letter_not_valid_letter_not_empty\
    \ = string.len(file_extension_without_dots_end_with_letter_not_valid_letter) >\
    \ 0\n    local file_extension_without_dots_start_with_letter_not_valid_letter_not_valid_letter\
    \ = string.sub(file_extension_without_dots_start_with_letter_not_valid_letter,\
    \ 1, 1) ~= 'a'\n    local file_extension_without_dots_end_with_letter_not_valid_letter_not_valid_letter\
    \ = string.sub(file_extension_without_dots_end_with_letter_not_valid_letter, 1,\
    \ 1) ~= 'a'\n    local file_extension_without_dots_start_with_letter_not_valid_letter_not_valid_letter_length\
    \ = string.len(file_extension_without_dots_", "    local file_name = file_name:gsub('[^0-9.]',\
    \ '')\n    local file_name = file_name:sub(1, 3)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub",
  "    local file_name = file_name:lower()\n    local dot_index = file_name:find('.')\n\
    \    local dot_string = file_name:sub(1, dot_index)\n    local dot_string_length\
    \ = dot_string:len()\n    local dot_string_start_letter = string.sub(dot_string,\
    \ 1, 1)\n    local dot_string_end_letter = string.sub(dot_string, dot_string_length\
    \ + 1, dot_string_length)\n    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_lower = string.lower(dot_string_start_letter)\n\
    \    local dot_string_end_letter_lower = string.lower(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.lower(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.lower(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_start_letter_upper = string.upper(dot_string_start_letter)\n\
    \    local dot_string_end_letter_upper = string.upper(dot_string_end_letter)\n\
    \    local dot_string_", "    local file_name = file_name:gsub('.*/','')\n   \
    \ local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%[^0-9a-zA-Z]','')\n\
    \    local file_name = file_name:gsub('%^%','')\n    local file_name = file_name:gsub('%$%','')\n\
    \    local file_name = file_name:gsub('%+%','')\n    local file_name = file_name:gsub('%-','')\n\
    \    local file_name = file_name:gsub('%_','')\n    local file_name = file_name:gsub('%*%','')\n\
    \    local file_name = file_name:gsub('%?%','')\n    local file_name = file_name:gsub('%!%','')\n\
    \    local file_name = file_name:gsub('%#%','')\n    local file_name = file_name:gsub('%$','')\n\
    \    local file_name = file_name:gsub('%&%','')\n    local file_name = file_name:gsub('%,%','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','')\n    local file_name = file_name:gsub('%,','')\n\
    \    local file_name = file_name:gsub('%,','", "   -- Check that the file name\
    \ contains exactly one dot '.'\n   if file_name ~= nil and file_name ~= '' then\n\
    \      -- Check that the substring before the dot is not empty, and it starts\
    \ with a letter \n      -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n   \
    \   if file_name ~= '' then\n         if file_name:sub(1, 1) ~= '-' then\n   \
    \         if file_name:sub(1, 1) ~= '0' then\n               if file_name:sub(1,\
    \ 1) ~= '9' then\n                  if file_name:sub(1, 1) ~= 'a' then\n     \
    \                if file_name:sub(1, 1) ~= 'z' then\n                        if\
    \ file_name:sub(1, 1) ~= 'A' then\n                           if file_name:sub(1,\
    \ 1) ~= 'Z' then\n                              -- Check that the substring after\
    \ the dot is one of these:\n                              -- ['txt', 'exe', 'dll']\n\
    \                              if file_name:sub(2, 3) ~= 'txt' then\n        \
    \                         if file_name:sub(2, 3) ~= 'exe' then\n             \
    \                        if file_name:sub(2, 3) ~= 'dll' then\n              \
    \                          -- Return Yes if the file's name is valid\n       \
    \                                 return 'Yes'\n                             \
    \          else\n                                        -- Return No if the file's\
    \ name is invalid\n                                        return 'No'\n     \
    \                                  end\n                                    else\n\
    \                                        -- Return No if the file's name is invalid\n\
    \                                        return 'No'\n                       \
    \             end\n                                 else\n                   \
    \                 -- Return No if the file's name is invalid\n               \
    \                     return 'No'\n                                 end\n    \
    \                          else\n                                 -- Return No\
    \ if the file's name is invalid\n                                 return 'No'\n\
    \                              end\n                           else\n        \
    \                      -- Return No if the file's name is invalid\n          \
    \                    return 'No'\n                           end\n           \
    \             else:\n                           -- Return No if the file's name\
    \ is invalid\n                           return 'No'\n                     end\n\
    \                  else\n                     -- Return No if the file's name\
    \ is invalid\n                     return 'No'\n                  end\n      \
    \         else\n                  -- Return No if the file's name is invalid\n\
    \                  return 'No'\n               end\n            else\n       \
    \        -- Return No if the file's name is invalid\n               return 'No'\n\
    \            end\n         else\n            -- Return No if the file's name is\
    \ invalid\n            return 'No'\n         end\n      else\n         -- Return\
    \ No if the file's name is invalid\n         return 'No'\n      end\n   else\n\
    \      -- Return No if the file's name is invalid\n      return 'No'\n   end\n\
    end", "   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ < 3 then\n      return nil\n   end\n   if string.find(file_name, '.') ~= nil\
    \ then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.find(file_name, '.') ~=\
    \ nil then\n      if string.find(file_name, '.') ~= 1 then\n         return nil\n\
    \      end\n      if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \         return nil\n      end\n   end\n   if string.", "    local file_name\
    \ = file_name:gsub('%.', '')\n    local file_name = file_name:gsub('.%', '')\n\
    \    local file_name = file_name:gsub('^%[', ''):gsub('%]$', '')\n    local file_name\
    \ = file_name:gsub('^%a', ''):gsub('%z', ''):gsub('%A', '')\n    local file_name\
    \ = file_name:gsub('^%A', '')\n    local file_name = file_name:gsub('^%z', '')\n\
    \    local file_name = file_name:gsub('^%a', '')\n    local file_name = file_name:gsub('^%z',\
    \ '')\n    local file_name = file_name:gsub('^%A', '')\n    local file_name =\
    \ file_name:gsub('^%z', '')\n    local file_name = file_name:gsub('^%a', '')\n\
    \    local file_name = file_name:gsub('^%z', '')\n    local file_name = file_name:gsub('^%A',\
    \ '')\n    local file_name = file_name:gsub('^%z', '')\n    local file_name =\
    \ file_name:gsub('^%a', '')\n    local file_name = file_name:gsub('^%z', '')\n\
    \    local file_name = file_name:gsub('^%A', '')\n    local file_name = file_name:gsub('^%z',\
    \ '')\n    local file_name = file_name:gsub('^%a', '')\n    local file_name =\
    \ file_name:gsub('^%z', '')\n    local file_name = file_name:gsub('^%A', '')\n\
    \    local file_name = file_name:gsub('^%z', '')\n    local file_name = file_name:gsub('^%a',\
    \ '')\n    local file_name = file_name:gsub('^%z', '')\n    local file_name =\
    \ file_name:gsub('^%A', '')\n    local file_name = file_name:gsub('^%z', '')\n\
    \    local file_name = file_name:gsub('^%a', '')\n    local file_name = file_name:gsub('^%z',\
    \ '')\n    local file_name = file_name:gsub('^%A', '')\n    local file_name =\
    \ file_name:gsub('^%z', '')\n    local file_name = file_name:gsub('^%a', '')\n\
    \    local file_name = file_name:gsub('^%z', '')\n    local file_name = file_name:gsub('^%A',\
    \ '')\n    local file_name = file_name:gsub('^%z', '')\n    local file_name =\
    \ file_name:gsub('^%a', '')\n    local file_name = file_name:gsub('^%z', '')\n\
    \    local file_name = file_name:gsub('^%A', '')\n    local file_name = file_name:gsub('^%z',\
    \ '')", "   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name\
    \ == 0 then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '.' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'Z' then\n      return 'No'\n   end\n   if file_name:sub(1, 2) ~= '.'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 2) ~= 'txt' then\n \
    \     return 'No'\n   end\n   if file_name:sub(1, 2) ~= 'exe' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 2) ~= 'dll' then\n      return 'No'\n \
    \  end\n   return 'Yes'\nend", "   if #file_name > 3 then\n      return nil\n\
    \   end\n   if #file_name < 1 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\
    \\' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ", "   -- Get the substring before the dot\n   local\
    \ file_extension = file_name:sub(1, file_name:find('.')-1)\n   -- Get the substring\
    \ after the dot\n   local file_extension_check = file_name:sub((file_name:find('.')+1))\n\
    \   -- Check if the substring after the dot is one of the allowed extensions\n\
    \   if file_extension_check == 'txt' or file_extension_check == 'exe' or file_extension_check\
    \ == 'dll' then\n      return 'Yes'\n   else\n      return 'No'\n   end\nend",
  "   if #file_name > 3 then\n      return 'No'\n   elseif #file_name == 0 then\n\
    \      return 'No'\n   elseif #file_name ~= 1 then\n      return 'No'\n   elseif\
    \ file_name:sub(1, 1) ~= '-' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 1) ~= 'a' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'z' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 1) ~= 'Z' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 2) ~= '.' then\n      return 'No'\n   elseif file_name:sub(1, 3) ~= '.' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 4) ~= '.' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 5) ~= '.' then\n      return 'No'\n   elseif file_name:sub(1,\
    \ 6) ~= '.' then\n      return 'No'\n   elseif file_name:sub(1, 7) ~= '.' then\n\
    \      return 'No'\n   elseif file_name:sub(1, 8) ~= '.' then\n      return 'No'\n\
    \   elseif file_name:sub(1, 9) ~= '.' then\n      return 'No'\n   else\n     \
    \ return 'Yes'\n   end\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil then\n      -- Get the substring before\
    \ the dot '.'\n      local file_name = string.sub(file_name, 1, string.find(file_name,\
    \ \".\"))\n      -- Check that it starts with a letter from the latin alphabet\
    \ ('a'-'z' and 'A'-'Z')\n      if string.find(file_name, \"^[a-Z]\") then\n  \
    \       return \"Yes\"\n      else\n         return \"No\"\n      end\n   else\n\
    \      return \"No\"\n   end\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ ~= 1 then\n      return nil\n   end\n   -- Check that the substring before the\
    \ dot is not empty\n   if file_name:sub(1, 1) ~= '' then\n      return nil\n \
    \  end\n   -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n   if {'txt', 'exe', 'dll'}:find(file_name:sub(2)) ~= nil then\n\
    \      return nil\n   end\n   -- Check that the substring after the dot starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n   if file_name:sub(2,\
    \ 1) ~= string.upper(file_name:sub(2, 1)) then\n      return nil\n   end\n   --\
    \ Check that the substring after the dot contains exactly three digits ('0'-'9')\n\
    \   if string.len(file_name:sub(2)) ~= 3 then\n      return nil\n   end\n   return\
    \ 'Yes'\nend", "   if file_name == nil then\n      return 'No'\n   end\n   if\
    \ #file_name < 3 then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~=\
    \ '0' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '9' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 2) ~= '.' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 3) ~= '' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 3) ~= '_' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 4) ~= '_' then\n      return 'No'\n   end\n   if file_name:sub(1, 5) ~= '_'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 6) ~= '_' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 7) ~= '_' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 8) ~= '_' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 9) ~= '_' then\n      return 'No'\n   end\n   return 'Yes'\n\
    end", "    local file_name = file_name:gsub('%.', '')\n    local file_name = file_name:gsub('.%',\
    \ '')\n    local file_name = file_name:gsub('%[^a-zA-Z]', '')\n    local file_name\
    \ = file_name:gsub('%^[a-zA-Z]', '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9]',\
    \ '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9]', '')\n    local file_name\
    \ = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name = file_name:gsub('%[^a-zA-Z0-9.]',\
    \ '')\n    local file_name = file_name:gsub('%^[a-zA-Z0-9.]', '')\n    local file_name\
    \ = file_name:gsub('%[^a-zA-Z0-9.]', '')\n    ", "    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.', '')\n\
    \    local file_name = file_name:gsub('%w+', '')\n    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.', '')\n\
    \    local file_name = file_name:gsub('%w+', '')\n    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.', '')\n\
    \    local file_name = file_name:gsub('%w+', '')\n    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.', '')\n\
    \    local file_name = file_name:gsub('%w+', '')\n    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.', '')\n\
    \    local file_name = file_name:gsub('%w+', '')\n    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.', '')\n\
    \    local file_name = file_name:gsub('%w+', '')\n    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    local file_name = file_name:gsub('%.', '')\n\
    \    local file_name = file_name:gsub('%w+', '')\n    local file_name = file_name:gsub('%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%.', '')\n    local file_name\
    \ = file_name:gsub('%.%.', '')\n    ", "   if file_name == nil then\n      return\
    \ nil\n   end\n   if #file_name < 3 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\' or file_name:sub(1, 1) ~= '_' then\n      return nil\n   end\n  \
    \ if file_name:sub(2, 2) ~= '.' or file_name:sub(2, 2) ~= '\\' or file_name:sub(2,\
    \ 2) ~= '_' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 2), 1, 1)) then\n      return nil\n   end\n   if string.find(file_name:sub(2,\
    \ 2), {'txt', 'exe', 'dll'}) == nil then\n      return nil\n   end\n   return\
    \ 'Yes'\nend", "    local file_name = file_name:gsub('[^0-9.]', '')\n    local\
    \ file_name = file_name:gsub('.+', '')\n    local file_name = file_name:gsub('^[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]$', '')\n    local file_name = file_name:gsub('[^a-z]$',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:", "   if file_name == nil then\n      return nil\n   end\n   if\
    \ string.len(file_name) > 3 then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ '.') then\n      return 'No'\n   end\n   if string.find(file_name, '^[a-z_]')\
    \ then\n      return 'No'\n   end\n   if string.find(file_name, '^[A-z]') then\n\
    \      return 'No'\n   end\n   return 'Yes'\nend", "   if file_name == nil then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= nil then\n \
    \     if string.find(file_name, \".\") ~= 1 then\n         return nil\n      end\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= nil then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n   end\n\
    \   ", "   if #file_name > 3 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 2) ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 3) ~= 'txt' then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'exe'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 3) ~= 'dll' then\n \
    \     return 'No'\n   end\n   return 'Yes'\nend", "   if file_name == nil then\n\
    \      return nil\n   end\n   if #file_name > 3 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\") then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= string.sub(file_name,1,1) then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'a' then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'z'\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'A' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'Z' then\n     \
    \ return nil\n   end\n   return 'Yes'\nend", "   if #file_name > 3 then\n    \
    \  return 'No'\n   end\n   if #file_name == 0 then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '-'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '_' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'b' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'c' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'd' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'e'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'f' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'g' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'h' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'i' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'j' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'k'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'l' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'm' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 'n' then\n      return 'No'\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'o' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'p' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'q'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'r' then\n   \
    \   return 'No'\n   end\n   if file_name:sub(1, 1) ~= 's' then\n      return 'No'\n\
    \   end\n   if file_name:sub(1, 1) ~= 't' then\n      return 'No'\n   end\n  \
    \ if file_name", "  -- Check that the file name contains exactly one dot '.'\n\
    \  if file_name ~= nil and file_name ~= '' then\n    if file_name:sub(1, 1) ~=\
    \ '.' then\n      return 'No'\n    end\n    -- Check that the substring before\
    \ the dot is not empty, and it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n    if file_name:sub(1, 1) ~= '' then\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ 'No'\n      end\n    end\n    -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(1, #file_name),\
    \ '.') ~= nil then\n      if string.find(file_name:sub(1, #file_name), '.') ~=\
    \ 1 then\n        return 'No'\n      end\n    end\n  end\n  return 'Yes'\nend",
  "    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    %.\", \"\")\n    local file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%S\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"^%h\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
