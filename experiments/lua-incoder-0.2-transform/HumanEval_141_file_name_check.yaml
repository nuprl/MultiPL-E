name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
  -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   -- Check that the file name contains exactly one dot '.'\n   if\
    \ string.find(file_name, \".\") ~= nil then\n      -- Check that the file's name\
    \ contains exactly one digit ('0'-'9')\n      if string.find(file_name, \".\"\
    ) ~= nil then\n         if string.find(file_name, \".\") ~= nil then\n       \
    \     -- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n            if\
    \ string.find(file_name, \".\") ~= nil then\n               if string.find(file_name,\
    \ \".\") ~= nil then\n                  if string.find(file_name, \".\") ~= nil\
    \ then\n                     -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n                    if string.find(file_name,\
    \ \".\") ~= nil then\n                        -- Return Yes if the file's name\
    \ is valid\n                        return 'Yes'\n                    else\n \
    \                       -- Return No if the file's name is invalid\n         \
    \               return 'No'\n                     end\n                  else\n\
    \                     -- Return No if the file's name is invalid\n           \
    \             return 'No'\n                  end\n               else\n      \
    \            -- Return No if the file's name is invalid\n                  return\
    \ 'No'\n               end\n            else\n               -- Return No if the\
    \ file's name is invalid\n               return 'No'\n            end\n      \
    \   else\n            -- Return No if the file's name is invalid\n           \
    \ return 'No'\n         end\n      else\n         -- Return No if the file's name\
    \ is invalid\n         return 'No'\n      end\n   else\n      -- Return No if\
    \ the file's name is invalid\n      return 'No'\n   end\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name < 3 then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '^' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'a' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'z' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return\
    \ nil\n   end\n   if file_name:sub(2, 3) ~= 'txt' then\n      return nil\n   end\n\
    \   if file_name:sub(2, 3) ~= 'exe' then\n      return nil\n   end\n   if file_name:sub(2,\
    \ 3) ~= 'dll' then\n      return nil\n   end\n   return 'Yes'\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name > 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"^[a-zA-Z]\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"^[0-9]\") then\n      return nil\n   end\n\
    \   return 'Yes'\nend", "    local file_ext = string.match(file_name, \"%.[^.]*$\"\
    )\n    local file_ext = string.match(file_ext, \"%[a-z_]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z]\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext,\
    \ \"%[A-z0-9]+\")\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\"\
    )\n    local file_ext = string.match(file_ext, \"%[A-z0-9]+\")\n    local file_ext\
    \ = string.match(file_ext", "   if file_name == nil then\n      return nil\n \
    \  end\n   if #file_name < 3 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '0' and\
    \ file_name:sub(1, 1) ~= '9' then\n      return nil\n   end\n   if file_name:sub(2,\
    \ 1) ~= 'a' and file_name:sub(2, 1) ~= 'z' then\n      return nil\n   end\n  \
    \ if file_name:sub(3, 1) ~= 'A' and file_name:sub(3, 1) ~= 'Z' then\n      return\
    \ nil\n   end\n   return 'Yes'\nend", "    local file_name = file_name:gsub('.*/','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('%.%.','')\n\
    \    local file_name = file_name:gsub('^%[a-z_]','')\n    local file_name = file_name:gsub('%[a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_]','')\n    local file_name\
    \ = file_name:gsub('%[a-z_][a-z_]$','')\n    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_]$','')\n    local file_name\
    \ = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_]','')\n    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]','')\n\
    \    local file_name = file_name:gsub('%[a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_][a-z_]$','')\n\
    \    local file_name = file_name:gsub('^%[a-z_][a-z_][a-z_][a-z_][a-", "    local\
    \ file_name = file_name:gsub('.*/','')\n    local file_name = file_name:gsub('[^0-9]','')\n\
    \    local file_name = file_name:gsub('%.','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:gsub('^%l','')\n\
    \    local file_name = file_name:gsub('%l$','')\n    local file_name = file_name:g",
  "   if #file_name > 3 then\n      return 'No'\n   end\n   if #file_name == 0 then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return 'No'\n   end\n\
    \   if file_name:sub(1, 1) ~= 'z' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'A' then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= 'Z'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(2, 1) ~= 'txt' then\n \
    \     return 'No'\n   end\n   if file_name:sub(2, 1) ~= 'exe' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(2, 1) ~= 'dll' then\n      return 'No'\n \
    \  end\n   return 'Yes'\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name < 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ '.') ~= nil then\n      if string.find(file_name, '.') ~= 1 then\n         return\
    \ nil\n      end\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.', 1, ", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if #file_name < 3 then\n      return nil\n\
    \   end\n   if string.find(file_name, '.') ~= 1 then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'a' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,1) ~= 'z' then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'A' then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'Z'\
    \ then\n      return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n     \
    \ return nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, '.') ~= 1 then\n      return nil\n\
    \   end\n   return 'Yes'\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if string.len(file_name) > 3 then\n      return 'No'\n   end\n   if\
    \ string.find(file_name, '.') then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ '^[a-z][a-z]') then\n      return 'No'\n   end\n   if string.find(file_name,\
    \ '^[0-9][a-z][a-z]') then\n      return 'No'\n   end\n   return 'Yes'\nend",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= '' then\n    local dot_index = string.find(file_name, '.')\n\
    \    if dot_index == nil then\n      return 'No'\n    end\n    -- Check that the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n    -- the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= '' then\n      if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n        return 'No'\n      end\n    end\n    -- Check that the\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if\
    \ string.sub(file_name,dot_index+1,3) ~= 'txt' and string.sub(file_name,dot_index+1,3)\
    \ ~= 'exe' and string.sub(file_name,dot_index+1,3) ~= 'dll' then\n      return\
    \ 'No'\n    end\n  end\n  return 'Yes'\nend", "   if string.find(file_name, \"\
    .\") ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \".\")-1)\n      local sub_string2 = string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name))\n      \n      if string.find(sub_string, \".\"\
    ) ~= nil then\n         if string.find(sub_string, \".\") ~= nil then\n      \
    \      if string.find(sub_string, \".\") ~= nil then\n               if string.find(sub_string,\
    \ \".\") ~= nil then\n                  if string.find(sub_string, \".\") ~= nil\
    \ then\n                     if string.find(sub_string, \".\") ~= nil then\n \
    \                       if string.find(sub_string, \".\") ~= nil then\n      \
    \                     if string.find(sub_string, \".\") ~= nil then\n        \
    \                      if string.find(sub_string, \".\") ~= nil then\n       \
    \                          if string.find(sub_string, \".\") ~= nil then\n   \
    \                                 if string.find(sub_string, \".\") ~= nil then\n\
    \                                       if string.find(sub_string, \".\") ~= nil\
    \ then\n                                          if string.find(sub_string, \"\
    .\") ~= nil then\n                                             if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                   if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                      if\
    \ string.find(sub_string, \".\") ~= nil then\n                               \
    \                          if string.find(sub_string, \".\") ~= nil then\n   \
    \                                                          if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \          if string.find(sub_string, \".\") ~= nil then\n                   \
    \                                                 if string.find(sub_string, \"\
    .\") ~= nil then\n                                                           \
    \              if string.find(sub_string, \".\") ~= nil then\n               \
    \                                                             if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                        if string.find(sub_string, \".\") ~= nil then\n     \
    \                                                                            \
    \ if string.find(sub_string, \".\") ~= nil then\n                            \
    \                                                         if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                                 if string.find(sub_string, \".\") ~= nil then\n\
    \                                                                            \
    \               if string.find(sub_string, \".\") ~= nil then\n              \
    \                                                                            \
    \    if string.find(sub_string, \".\") ~= nil then\n                         \
    \                                                                        if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                                            if string.", "  -- Check that the\
    \ file name contains exactly one dot '.'\n  if #file_name ~= 1 then\n    return\
    \ 'No'\n  end\n  -- Check that the substring before the dot is not empty\n  if\
    \ file_name[1] ~= '' then\n    return 'No'\n  end\n  -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the substring before the\
    \ dot starts with a letter from the latin alphabet\n  if string.find(file_name,\
    \ '^[a-Z]') then\n    return 'No'\n  end\n  -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n  if string.find(file_name,\
    \ '[txt,exe,dll]') then\n    return 'No'\n  end\n  -- Check that the file's name\
    \ contains exactly three digits ('0'-'9')\n  if string.find(file_name, '^[0-9]')\
    \ then\n    return 'No'\n  end\n  -- Check that the file's name contains exactly\
    \ one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n  end\n\
    \  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n\
    \  end\n  -- Check that the file's name contains exactly one dot '.'\n  if string.find(file_name,\
    \ '.') then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ exactly one dot '.'\n  if string.find(file_name, '.') then\n    return 'No'\n",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n      return\
    \ 'No'\n    end\n    -- Check that the substring before the dot should not be\
    \ empty, and it starts with a letter \n    -- from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n    if file_name:sub(1, 1) ~= '' then\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ 'No'\n      end\n    end\n    -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(1,\
    \ #file_name), {'txt', 'exe', 'dll'}) == nil then\n      return 'No'\n    end\n\
    \  end\n  return 'Yes'\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil and file_name ~= '' then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with \n\
    \      -- a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name\
    \ ~= '' then\n         if file_name:sub(1, 1) ~= '-' then\n            if file_name:sub(1,\
    \ 1) ~= '0' then\n               if file_name:sub(1, 1) ~= '1' then\n        \
    \          if file_name:sub(1, 1) ~= '2' then\n                     if file_name:sub(1,\
    \ 1) ~= '3' then\n                        if file_name:sub(1, 1) ~= '4' then\n\
    \                           if file_name:sub(1, 1) ~= '5' then\n             \
    \                 if file_name:sub(1, 1) ~= '6' then\n                       \
    \          if file_name:sub(1, 1) ~= '7' then\n                              \
    \      if file_name:sub(1, 1) ~= '8' then\n                                  \
    \     if file_name:sub(1, 1) ~= '9' then\n                                   \
    \       if file_name:sub(1, 1) ~= 'A' then\n                                 \
    \            if file_name:sub(1, 1) ~= 'B' then\n                            \
    \                    if file_name:sub(1, 1) ~= 'C' then\n                    \
    \                               if file_name:sub(1, 1) ~= 'D' then\n         \
    \                                             if file_name:sub(1, 1) ~= 'E' then\n\
    \                                                         if file_name:sub(1,\
    \ 1) ~= 'F' then\n                                                           \
    \  if file_name:sub(1, 1) ~= 'G' then\n                                      \
    \                           if file_name:sub(1, 1) ~= 'H' then\n             \
    \                                                        if file_name:sub(1, 1)\
    \ ~= 'I' then\n                                                              \
    \         if file_name:sub(1, 1) ~= 'J' then\n                               \
    \                                           if file_name:sub(1, 1) ~= 'K' then\n\
    \                                                                            if\
    \ file_name:sub(1, 1) ~= 'L' then\n                                          \
    \                                     if file_name:sub(1, 1) ~= 'M' then\n   \
    \                                                                            \
    \   if file_name:sub(1, 1) ~= 'N' then\n                                     \
    \                                                if file_name:sub(1, 1) ~= 'O'\
    \ then\n                                                                     \
    \                  if file_name:sub(1, 1) ~= 'P' then\n                      \
    \                                                                    if file_name:sub(1,\
    \ 1) ~= 'Q' then\n                                                           \
    \                                 if file_name:sub(1, 1) ~= 'R' then\n       \
    \                                                                            \
    \            if file_name:sub(1, 1) ~= 'S' then\n                            \
    \                                                                      if file_name:sub(1,\
    \ 1) ~= 'T' then\n                                                           \
    \                                          if file_name:sub(1, 1) ~= 'U' then\n\
    \                                                                            \
    \                           if file_name:sub(1, 1) ~= 'V' then\n             \
    \                                                                            \
    \                if file_name", "   if #file_name > 3 then\n      return 'No'\n\
    \   end\n   if #file_name == 0 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n      return 'No'\n   end\n   if file_name:sub(2, 2) ~= '.'\
    \ then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n      return 'No'\n   end\n   if string.find(file_name:sub(1,\
    \ #file_name), '.') ~= 1 then\n      return 'No'\n   end\n   return 'Yes'\nend",
  "    local file_name = file_name:lower()\n    local file_name = file_name:gsub('.',\
    \ '')\n    local file_name = file_name:gsub('%w', '')\n    local file_name = file_name:gsub('%d',\
    \ '')\n    local file_name = file_name:gsub('%f', '')\n    local file_name = file_name:gsub('%h',\
    \ '')\n    local file_name = file_name:gsub('%u', '')\n    local file_name = file_name:gsub('%t',\
    \ '')\n    local file_name = file_name:gsub('%x', '')\n    local file_name = file_name:gsub('%o',\
    \ '')\n    local file_name = file_name:gsub('%n', '')\n    local file_name = file_name:gsub('%p',\
    \ '')\n    local file_name = file_name:gsub('%b', '')\n    local file_name = file_name:gsub('%e',\
    \ '')\n    local file_name = file_name:gsub('%v', '')\n    local file_name = file_name:gsub('%x',\
    \ '')\n    local file_name = file_name:gsub('%o', '')\n    local file_name = file_name:gsub('%n',\
    \ '')\n    local file_name = file_name:gsub('%p', '')\n    local file_name = file_name:gsub('%b',\
    \ '')\n    local file_name = file_name:gsub('%e', '')\n    local file_name = file_name:gsub('%v',\
    \ '')\n    local file_name = file_name:gsub('%x', '')\n    local file_name = file_name:gsub('%o',\
    \ '')\n    local file_name = file_name:gsub('%n', '')\n    local file_name = file_name:gsub('%p',\
    \ '')\n    local file_name = file_name:gsub('%b', '')\n    local file_name = file_name:gsub('%e',\
    \ '')\n    local file_name = file_name:gsub('%v', '')\n    local file_name = file_name:gsub('%x',\
    \ '')\n    local file_name = file_name:gsub('%o', '')\n    local file_name = file_name:gsub('%n',\
    \ '')\n    local file_name = file_name:gsub('%p', '')\n    local file_name = file_name:gsub('%b',\
    \ '')\n    local file_name = file_name:gsub('%e', '')\n    local file_name = file_name:gsub('%v',\
    \ '')\n    local file_name = file_name:gsub('%x', '')\n    local file_name = file_name:gsub('%o',\
    \ '')\n    local file_name = file_name:gsub('%n', '')\n    local file_name = file_name:gsub('%p',\
    \ '')\n    ", "   -- Check that the file name contains exactly one dot '.'\n \
    \  if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1)\
    \ ~= '.' then\n         return 'No'\n      end\n   end\n   -- Check that the file's\
    \ name contains only digits and one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n         if file_name:sub(2,\
    \ 2) ~= '0' and file_name:sub(2, 2) ~= '9' then\n            return 'No'\n   \
    \      end\n      end\n   end\n   -- Check that the file's name starts with a\
    \ letter from the latin alphabet ('a' \n   -- to 'z' and 'A' to 'Z')\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n\
    \         if file_name:sub(1, 1) ~= 'a' and file_name:sub(1, 1) ~= 'A' then\n\
    \            return 'No'\n         end\n      end\n   end\n   -- Check that the\
    \ file's name contains only these extensions: ['txt', 'exe', 'dll']\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      if file_name:sub(1, 4) ~= '.' then\n\
    \         if file_name:sub(1, 4) ~= 'txt' and file_name:sub(1, 4) ~= 'exe' and\
    \ file_name:sub(1, 4) ~= 'dll' then\n            return 'No'\n         end\n \
    \     end\n   end\n   return 'Yes'\nend", "    local file_name = file_name:lower()\n\
    \    local dot_index = file_name:find('.')\n    local dot_string = file_name:sub(1,\
    \ dot_index)\n    local dot_string_length = dot_string:len()\n    local dot_string_letter\
    \ = string.sub(dot_string, 1, 1)\n    local dot_string_letter_index = string.find(string.lower(dot_string),\
    \ 'a')\n    local dot_string_letter_index = dot_string_letter_index - 1\n    local\
    \ dot_string_letter = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index\
    \ + 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_string_letter_index +\
    \ 1)\n    local dot_string_letter = string.lower(dot_string_letter)\n    local\
    \ dot_string_letter_index = string.find(string.lower(dot_string), 'a')\n    local\
    \ dot_string_letter_index = dot_string_letter_index - 1\n    local dot_string_letter\
    \ = string.sub(dot_string, dot_string_letter_index, dot_"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
