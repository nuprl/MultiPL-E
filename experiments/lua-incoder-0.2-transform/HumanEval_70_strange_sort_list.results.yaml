language: lua
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value\
    \ then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i] > max_value\
    \ then\n      max_value = sorted_list[i]\n    end\n  end\n  for i = 1, #sorted_list\
    \ do\n    if sorted_list[i] < min_value then\n      table.insert(sorted_list,\
    \ min_value, i)\n      table.insert(sorted_list, i, max_value)\n      break\n\
    \    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo7hgi9m.lua:36:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpvo7hgi9m.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local minimum = #lst\n  for _, value in ipairs(lst) do\n\
    \    minimum = math.min(minimum, value)\n  end\n  for _, value in ipairs(lst)\
    \ do\n    minimum = math.min(minimum, value)\n    result[minimum] = true\n  end\n\
    \  for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n  \
    \  result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result[minimum] = true\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result[minimum]\
    \ = true\n  end\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum,\
    \ value)\n    result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n\
    \    minimum = math.min(minimum, value)\n    result[minimum] = true\n  end\n \
    \ for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n   \
    \ result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result[minimum] = true\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result[minimum]\
    \ = true\n  end\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum,\
    \ value)\n    result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n\
    \    minimum = math.min(minimum, value)\n    result[minimum] = true\n  end\n \
    \ for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n   \
    \ result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result[minimum] = true\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result[minimum]\
    \ = true\n  end\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum,\
    \ value)\n    result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n\
    \    minimum = math.min(minimum, value)\n    result[minimum] = true\n  end\n \
    \ for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n   \
    \ result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw5a9ymtg.lua:88: ''='' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  -- Swap the minimum and maximum values\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya3265lf.lua:28:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 1, 4}\nstack traceback:\n\t/tmp/tmpya3265lf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value\
    \ then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i] > max_value\
    \ then\n      max_value = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list]\
    \ = max_value\n  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqoma5eh.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 1}\nstack traceback:\n\t/tmp/tmphqoma5eh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    local value = lst[i]\n    if value < min_value then\n\
    \      min_value = value\n    elseif value > max_value then\n      max_value =\
    \ value\n    end\n    table.insert(sorted_lst, value)\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return a < b end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuutnnyxn.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmpuutnnyxn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n\
    \    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n    sorted_list[i]\
    \ = maximum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1aefr46.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpz1aefr46.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value\
    \ then\n      min_value = sorted_list[i]\n    elseif sorted_list[i] > max_value\
    \ then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap min and max\
    \ values\n  sorted_list[#sorted_list] = max_value\n  sorted_list[#sorted_list\
    \ + 1] = min_value\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv3frk4.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 1}\nstack traceback:\n\t/tmp/tmpvhv3frk4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeovk0j8g.lua:23:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpeovk0j8g.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n\
    \    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n    sorted_list[i]\
    \ = maximum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1aefr46.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpz1aefr46.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local lst = lst or {}\n  local min = lst[1]\n  local max = lst[1]\n  for i\
    \ = 2, #lst do\n    if lst[i] < min then\n      min = lst[i]\n    end\n    if\
    \ lst[i] > max then\n      max = lst[i]\n    end\n  end\n  lst[1] = min\n  lst[#lst]\
    \ = max\n  local tmp = {}\n  for i = 1, #lst do\n    table.insert(tmp, lst[i])\n\
    \  end\n  return tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp636bin9k.lua:35:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp636bin9k.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return a < b end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcxusaw6.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpvcxusaw6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkq80e6d.lua:27:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmphkq80e6d.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and minimum or sorted_list[i]\n    maximum = maximum < sorted_list[i] and maximum\
    \ or sorted_list[i]\n  end\n  for i = 1, #sorted_list do\n    sorted_list[i] =\
    \ minimum\n    minimum = maximum\n    maximum = minimum\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjzpns2v.lua:30:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpdjzpns2v.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  for i = 1, #strange_lst do\n    strange_lst[i] =\
    \ strange_lst[i]\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fq0p3nu.lua:38:\
    \ expected: {1, 4, 2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp3fq0p3nu.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  for i = 1, #strange_lst do\n    table.insert(strange_lst,\n\
    \      min_value + (max_value - min_value) * (i / #strange_lst))\n  end\n  return\
    \ strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnslpn_o.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmprnslpn_o.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value\
    \ then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i] > max_value\
    \ then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap min_value\
    \ and max_value\n  sorted_list[#sorted_list] = max_value\n  sorted_list[#sorted_list\
    \ + 1] = min_value\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7n8po7x.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 1}\nstack traceback:\n\t/tmp/tmpj7n8po7x.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  for _, v in ipairs(lst) do\n    table.insert(result, v)\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaofjnqgi.lua:23:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpaofjnqgi.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = {}\n  local minimum = nil\n  local maximum = nil\n  for\
    \ _, v in ipairs(lst) do\n    if minimum == nil then\n      minimum = v\n    \
    \  maximum = v\n    else\n      if v < minimum then\n        minimum = v\n   \
    \   elseif v > maximum then\n        maximum = v\n      end\n    end\n  end\n\
    \  for _, v in ipairs(lst) do\n    table.insert(sorted_lst, minimum)\n    table.insert(sorted_lst,\
    \ maximum)\n    table.insert(sorted_lst, v)\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkg1qqyk.lua:38:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 1, 4, 2, 1, 4, 3, 1, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpzkg1qqyk.lua:38: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkq80e6d.lua:27:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmphkq80e6d.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  for _, v in ipairs(lst) do\n    table.insert(result, v)\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaofjnqgi.lua:23:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpaofjnqgi.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750444
