language: lua
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 1 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 3 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if month == 5 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    if month == 7 then\n    \
    \    if day > 31 then\n            return false\n        end\n    end\n    if\
    \ month == 8 then\n        if day > 31 then\n            return false\n      \
    \  end\n    end\n    if month == 10 then\n        if day > 31 then\n         \
    \   return false\n        end\n    end\n    if month == 12 then\n        if day\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwp_72vup.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpwp_72vup.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpwp_72vup.lua:82: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 1 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 3 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if month == 5 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    if month == 7 then\n    \
    \    if day > 31 then\n            return false\n        end\n    end\n    if\
    \ month == 8 then\n        if day > 31 then\n            return false\n      \
    \  end\n    end\n    if month == 10 then\n        if day > 31 then\n         \
    \   return false\n        end\n    end\n    if month == 12 then\n        if day\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvlt6uot7.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpvlt6uot7.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpvlt6uot7.lua:85: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local days_months = {\n    [1] = 1,\n    [3] = 1\n  }\n  local days_months_2\
    \ = {\n    [4] = 1\n  }\n  local days_months_3 = {\n    [6] = 1\n  }\n  local\
    \ days_months_4 = {\n    [9] = 1\n  }\n  local days_months_5 = {\n    [11] = 1\n\
    \  }\n  local days_months_6 = {\n    [12] = 1\n  }\n  local days_months_7 = {\n\
    \    [1, 3, 5] = 1\n  }\n  local days_months_8 = {\n    [4, 6, 9] = 1\n  }\n \
    \ local days_months_9 = {\n    [1, 3, 5] = 1\n  }\n  local days_months_10 = {\n\
    \    [4, 6, 9] = 1\n  }\n  local days_months_11 = {\n    [1, 3, 5] = 1\n  }\n\
    \  local days_months_12 = {\n    [4, 6, 9] = 1\n  }\n  local days_months_13 =\
    \ {\n    [1, 3, 5] = 1\n  }\n  local days_months_14 = {\n    [4, 6, 9] = 1\n \
    \ }\n  local days_months_15 = {\n    [1, 3, 5] = 1\n  }\n  local days_months_16\
    \ = {\n    [4, 6, 9] = 1\n  }\n  local days_months_17 = {\n    [1, 3, 5] = 1\n\
    \  }\n  local days_months_18 = {\n    [4, 6, 9] = 1\n  }\n  local days_months_19\
    \ = {\n    [1, 3, 5] = 1\n  }\n  local days_months_20 = {\n    [4, 6, 9] = 1\n\
    \  }\n  local days_months_21 = {\n    [1, 3, 5] = 1\n  }\n  local days_months_22\
    \ = {\n    [4, 6, 9] = 1\n  }\n  local days_months_23 = {\n    [1, 3, 5] = 1\n\
    \  }\n  local days_months_24 = {\n    [4, 6, 9] = 1\n  }\n  local days_months_25\
    \ = {\n    [1, 3, 5] = 1\n  }\n  local days_months_26 = {\n    [4, 6, 9] = 1\n\
    \  }\n  local days_months_27 = {\n    [1, 3, 5] = 1\n  }\n  local days_months_28\
    \ = {\n    [4, 6, 9] = 1\n  }\n  local days_months_29 = {\n    [1, 3, 5\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj93bz7zz.lua:43: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month == 2 and day < 29 then\n\
    \    return false\n  end\n  if month == 2 and day > 28 then\n    return false\n\
    \  end\n  if month == 2 and day < 28 then\n    return false\n  end\n  if month\
    \ == 2 and day > 27 then\n    return false\n  end\n  if month == 2 and day < 27\
    \ then\n    return false\n  end\n  if month == 2 and day > 26 then\n    return\
    \ false\n  end\n  if month == 2 and day < 26 then\n    return false\n  end\n \
    \ if month == 2 and day > 25 then\n    return false\n  end\n  if month == 2 and\
    \ day < 25 then\n    return false\n  end\n  if month == 2 and day > 24 then\n\
    \    return false\n  end\n  if month == 2 and day < 24 then\n    return false\n\
    \  end\n  if month == 2 and day > 23 then\n    return false\n  end\n  if month\
    \ == 2 and day < 23 then\n    return false\n  end\n  if month == 2 and day > 22\
    \ then\n    return false\n  end\n  if month == 2 and day < 22 then\n    return\
    \ false\n  end\n  if month == 2 and day > 21 then\n    return false\n  end\n \
    \ if month == 2 and day < 21 then\n    return false\n  end\n  if month == 2 and\
    \ day > 20 then\n    return false\n  end\n  if month == 2 and day < 20 then\n\
    \    return false\n  end\n  if month == 2 and day > 19 then\n    return false\n\
    \  end\n  if month == 2 and day < 19 then\n    return false\n  end\n  if month\
    \ == 2 and day > 18 then\n    return false\n  end\n  if month == 2 and day < 18\
    \ then\n    return false\n  end\n  if month == 2 and day > 17 then\n    return\
    \ false\n  end\n  if month == 2 and day < 17 then\n    return false\n  end\n \
    \ if month == 2 and day > 16 then\n    return false\n  end\n  if month == 2 and\
    \ day < 16 then\n    return false\n  end\n  if month == 2 and day > 15 then\n\
    \    return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8utmbw9f.lua:121: ''end'' expected (to close ''if'' at line
    119) near ''=''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n       \
    \ [7] = '29',\n        [8] = '28',\n        [10] = '31',\n        [12] = '30'\n\
    \    }\n    local years = {\n        [1] = '00',\n        [3] = '20',\n      \
    \  [5] = '19',\n        [7] = '18',\n        [8] = '17',\n        [10] = '16',\n\
    \        [12] = '15'\n    }\n    local months_length = #months\n    local days_length\
    \ = #days\n    local years_length = #years\n    local date_length = #date\n  \
    \  local month = 1\n    local day = 1\n    local year = 1\n    local month_index\
    \ = 1\n    local day_index = 1\n    local year_index = 1\n    local month_string\
    \ = date:sub(1,months_length)\n    local day_string = date:sub(months_length+months_length+days_length,days_length)\n\
    \    local year_string = date:sub(months_length+months_length+days_length+days_length+years_length,years_length)\n\
    \    local month_string = month_string:sub(1,months_length)\n    local day_string\
    \ = day_string:sub(1,days_length)\n    local year_string = year_string:sub(1,years_length)\n\
    \    local month_index = 1\n    local day_index = 1\n    local year_index = 1\n\
    \    local month_string = month_string:sub(1,months_length)\n    local day_string\
    \ = day_string:sub(1,days_length)\n    local year_string = year_string:sub(1,years_length)\n\
    \    local month = 1\n    local day = 1\n    local year = 1\n    local month_index\
    \ = 1\n    local day_index = 1\n    local year_index = 1\n    local month_string\
    \ = month_string:sub(1,months_length)\n    local day_string = day_string:sub(1,days_length)\n\
    \    local year_string = year_string:sub(1,years_length)\n    local month = 1\n\
    \    local day = 1\n    local year = 1\n    local month_index = 1\n    local day_index\
    \ = 1\n    local year_index = 1\n    local month_string = month_string:sub(1,months_length)\n\
    \    local day_string = day_string:sub(1,days_length)\n    local year_string\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpznx30uoq.lua:108: ''end'' expected (to close ''function''
    at line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if day > 30 then\n\
    \        return false\n    end\n    if month == 2 and day > 28 then\n        return\
    \ false\n    end\n    if month == 2 and day < 28 then\n        return false\n\
    \    end\n    if day > 31 then\n        return false\n    end\n    if month ==\
    \ 1 and day > 30 then\n        return false\n    end\n    if month == 1 and day\
    \ < 30 then\n        return false\n    end\n    if day > 31 then\n        return\
    \ false\n    end\n    if month == 3 and day > 31 then\n        return false\n\
    \    end\n    if month == 3 and day < 31 then\n        return false\n    end\n\
    \    if day > 30 then\n        return false\n    end\n    return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgovzbzpn.lua:74:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgovzbzpn.lua:74:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750580
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = 1,\n    [3] = 1,\n   \
    \ [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [4] = 0,\n    [6] = 0,\n    [9] = 0,\n    [11] = 0,\n  }\n  local\
    \ months_count = months[month]\n  if months_count < 1 or months_count > 12 then\n\
    \    return false\n  end\n  local days_count = days[months_count]\n  if days_count\
    \ < 1 or days_count > 31 then\n    return false\n  end\n  local year_count = year\
    \ - 1900\n  if year_count < 1 or year_count > 30 then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpopmynawb.lua:36:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpopmynawb.lua:36:\
    \ in function 'candidate'\n\t/tmp/tmpopmynawb.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if date_parts == nil then\n        return false\n\
    \    end\n    local months = {\n        [1] = 1,\n        [3] = 1\n    }\n   \
    \ local days = {\n        [5] = 1\n    }\n    local years = {\n        [7] = 1\n\
    \    }\n    local months_count = months[1] + months[3]\n    local days_count =\
    \ days[5] + days[7]\n    local years_count = years[7] + years[8]\n    if date_parts[1]\
    \ < 1 or date_parts[1] > months_count then\n        return false\n    end\n  \
    \  if date_parts[2] < 1 or date_parts[2] > days_count then\n        return false\n\
    \    end\n    if date_parts[2] < 1 or date_parts[2] > 30 then\n        return\
    \ false\n    end\n    if date_parts[2] < 1 or date_parts[2] > 29 then\n      \
    \  return false\n    end\n    if date_parts[2] < 1 or date_parts[2] > 31 then\n\
    \        return false\n    end\n    if date_parts[2] < 1 or date_parts[2] > 31\
    \ then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[2] < 1 or date_parts[2]\
    \ > 12 then\n        return false\n    end\n    if date_parts[\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5tg_8k40.lua:97: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if year < 1 or year > 9999 then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7nqijobb.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp7nqijobb.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp7nqijobb.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ 1,\n        [3] = 1\n    }\n    local days = {\n        [1..31] = 1\n    }\n\
    \    local months_30 = {\n        [4..12] = 1\n    }\n    local months_29 = {\n\
    \        [2..12] = 1\n    }\n    local months_31 = {\n        [1..31] = 1\n  \
    \  }\n    local months_30_29 = {\n        [4..12] = 1\n    }\n    local months_31_30\
    \ = {\n        [1..31] = 1\n    }\n    local months_30_31\n    local months_31_30\n\
    \    local months_30_29_31\n    local months_31_30_31\n    local months_30_29_31\n\
    \    local months_31_30_31\n    local months_30_29_31\n    local months_31_30_31\n\
    \    local months_30_29_31\n    local months_31_30_31\n    local months_30_29_31\n\
    \    local months_31_30_31\n    local months_30_29_31\n    local months_31_30_31\n\
    \    local months_30_29_31\n    local months_31_30_31\n    local months_30_29_31\n\
    \    local months_31_30_31\n    local months_30_29_31\n    local months_31_30_31\n\
    \    local months_30_29_31\n    local months_31_30_31\n    local months_30_29_31\n\
    \    local months_31_30_31\n    local months_30_29_31\n    local months_31_30_31\n\
    \    local months_30_29_31\n    local months_31_30_31\n    local months_30_29_31\n\
    \    local months_31_30_31\n    local months_30_29_31\n    local months_31_30_31\n\
    \    local months_30_29_31\n    local months_31_30_31\n    local months_30_29_31\n\
    \    local months_31_30_31\n    local months_30_29_31\n    local months_31_30_31\n\
    \    local months_30_29_31\n    local months_31_30_31\n    local months_30\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuilr85mh.lua:24: malformed number near ''1..31''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8miqj3jk.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp8miqj3jk.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp8miqj3jk.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day == 29 then\n        return false\n    end\n    if month == 2 and day ==\
    \ 30 then\n        return false\n    end\n    if month == 2 and day == 31 then\n\
    \        return false\n    end\n    if month == 3 and day > 31 then\n        return\
    \ false\n    end\n    if month == 3 and day < 31 then\n        return false\n\
    \    end\n    if month == 3 and day == 31 then\n        return false\n    end\n\
    \    if month == 3 and day == 30 then\n        return false\n    end\n    if month\
    \ == 3 and day == 29 then\n        return false\n    end\n    if month == 3 and\
    \ day == 28 then\n        return false\n    end\n    if month == 3 and day ==\
    \ 27 then\n        return false\n    end\n    if month == 3 and day == 26 then\n\
    \        return false\n    end\n    if month == 3 and day == 25 then\n       \
    \ return false\n    end\n    if month == 3 and day == 24 then\n        return\
    \ false\n    end\n    if month == 3 and day == 23 then\n        return false\n\
    \    end\n    if month == 3 and day == 22 then\n        return false\n    end\n\
    \    if month == 3 and day == 21 then\n        return false\n    end\n    if month\
    \ == 3 and day == 20 then\n        return false\n    end\n    if month == 3 and\
    \ day == 19 then\n        return false\n    end\n    if month == 3 and day ==\
    \ 18 then\n        return false\n    end\n    if month == 3 and day == 17 then\n\
    \        return false\n    end\n    if month == 3 and day == 16 then\n       \
    \ return false\n    end\n    if month == 3 and day == 15 then\n        return\
    \ false\n    end\n    if month == 3 and day == 14 then\n        return false\n\
    \    end\n    if month == 3 and day == 13 then\n        return false\n    end\n\
    \    if month == 3 and day == 12 then\n        return false\n    end\n    if month\
    \ == 3 and day == 11 then\n        return false\n    end\n    if month == 3 and\
    \ day == 10 then\n        return false\n    end\n    if month == 3 and day ==\
    \ 9 then\n        return false\n    end\n    if month == 3 and day == 8 then\n\
    \        return false\n    end\n    if month == 3 and day == 7 then\n        return\
    \ false\n    end\n    if month == 3 and day == 6 then\n        return false\n\
    \    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7ic45506.lua:126: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    if month == 12 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n       \
    \ [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] = '12',\n\
    \        [14] = '14',\n        [16] = '16',\n        [18] = '18',\n        [20]\
    \ = '20',\n        [30] = '30',\n        [36] = '36',\n        [42] = '42',\n\
    \        [48] = '48',\n        [54] = '54',\n        [60] = '60',\n        [66]\
    \ = '66',\n        [72] = '72',\n        [78] = '78',\n        [84] = '84',\n\
    \        [90] = '90',\n        [96] = '96',\n        [102] = '102',\n        [108]\
    \ = '108',\n        [114] = '114',\n        [120] = '120',\n        [126] = '126',\n\
    \        [132] = '132',\n        [138] = '138',\n        [144] = '144',\n    \
    \    [150] = '150',\n        [156] = '156',\n        [162] = '162',\n        [168]\
    \ = '168',\n        [174] = '174',\n        [180] = '180',\n        [186] = '186',\n\
    \        [192] = '192',\n        [198] = '198',\n        [204] = '204',\n    \
    \    [210] = '210',\n        [216] = '216',\n        [222] = '222',\n        [228]\
    \ = '228',\n        [234] = '234',\n        [240] = '240',\n        [246] = '246',\n\
    \        [252] = '252',\n        [258] = '258',\n        [264] = '264',\n    \
    \    [270] = '270',\n        [276] = '276',\n        [282] = '282',\n        [288]\
    \ = '288',\n        [294] = '294',\n        [300] = '300',\n        [306] = '306',\n\
    \        [312] = '312',\n        [318] = '318',\n        [324] = '324',\n    \
    \    [330] = '330',\n        [336] = '336',\n        [342] = '342',\n        [348]\
    \ = '348',\n        [354] = '354',\n        [360] = '360',\n        [366] = '366',\n\
    \        [372] = '372',\n        [378] = '378',\n        [384] = '384',\n    \
    \    [390] = '390',\n        [396] = '396',\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc4w2cbs8.lua:104: ''}'' expected (to close ''{'' at line 28)
    near ''function''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    local months = {\n        [1] = 1,\n        [3] =\
    \ 1\n    }\n    local days = {\n        [5] = 1\n    }\n    local months_days\
    \ = {\n        [1,3,5,7,8,10,12] = 1\n    }\n    local months_days_months = {\n\
    \        [4,6,9,11] = 1\n    }\n    local months_days_months_days = {\n      \
    \  [2,4,6,8,10,12] = 1\n    }\n    local months_days_months_days_months = {\n\
    \        [1,2,3,4,5,6,7,8,9,10,11,12] = 1\n    }\n    local months_days_months_days_months_days\
    \ = {\n        [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\
    \ = 1\n    }\n    local months_days_months_days_months_days_months = {\n     \
    \   [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpve0e00zu.lua:28: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    if month == 12 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuepdm0ob.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpuepdm0ob.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpuepdm0ob.lua:71: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750580
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 4 and day > 30 then\n        return false\n    end\n    if month == 6 and\
    \ day > 30 then\n        return false\n    end\n    if month == 9 and day > 30\
    \ then\n        return false\n    end\n    if month == 11 and day > 30 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750580
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  else\n    if day\
    \ > 30 then\n      return false\n    end\n  end\n  if year < 1000 or year > 9999\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750580
