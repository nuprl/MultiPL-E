name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3, 2,\
  \ 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local rolling_max = numbers.shift()\n  local rolling_max_index =\
    \ numbers.shift()\n  local rolling_max_value = numbers.shift()", "  local rolling_max\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  for i = 1,\
    \ #numbers do\n    if numbers[i] < rolling_max then\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_element then\n    \
    \    max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_element)\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = rolling_max_index + 1, #numbers do\n    rolling_max:insert(numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.shift()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = rolling_max\n  for i = 1, #numbers do\n    if numbers[i] < rolling_max then\n\
    \      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = rolling_max\n    end\n  end\n  local rolling_max_index = rolling_max_index\
    \ + 1\n  while rolling_max_index <= #numbers do\n    rolling_max = numbers[rolling_max_index]\n\
    \    for i = rolling_max_index + 1, #numbers do\n      if numbers[i] < rolling_max\
    \ then\n        rolling_max = numbers[i]\n        rolling_max_index = i\n    \
    \    rolling_max_value = rolling_max\n      end\n    end\n    rolling_max_index\
    \ = rolling_max_index + 1\n  end\n  return rolling_max_value\nend", "  local rolling_max\
    \ = numbers.newlist()\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.shift()\n  local rolling_max_index\
    \ = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i] > rolling_max\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max =\
    \ numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local rolling_max_index = numbers.shift()\n  local rolling_max_value\
    \ = numbers.shift()\n  local roll", "  local rolling_max = numbers.new()\n  local\
    \ rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n      end\n    end\n    if rolling_max_index\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n    if rolling_max_index ~= nil then\n      rolling_max = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.shift()\n\
    \  for i = 1, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ i = 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n\
    \    for j = 1, i do\n      rolling_max_element = rolling_max_element > numbers[j]\
    \ and rolling_max_element or numbers[j]\n    end\n    rolling_max = rolling_max\
    \ and rolling_max or rolling_max_element\n  end\n  return rolling_max\nend", " \
    \ local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.shift()\n  local rolling_max_index\
    \ = 1\n  local rolling_max_value = rolling_max\n  for i = 1, #numbers do\n   \
    \ if numbers[i] < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_value,\
    \ rolling_max_index\nend", "  local rolling_max = numbers.shift()\n  local max_index\
    \ = nil\n  for i = 1, #numbers do\n    if numbers[i] >= rolling_max then\n   \
    \   rolling_max = numbers[i]\n      max_index = i\n    end\n  end\n  return rolling_max,\
    \ max_index\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
