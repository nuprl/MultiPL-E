name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>> rounded_avg(7,\
  \ 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20, 33)\n\
  -- '0b11010'\nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n > m then\n    return -1\n  end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ \"0b\" .. tostring(sum / count)\nend", "  if m > n then\n    return -1\n  end\n\
    \  local sum = 0\n  for i = n, m + 1 do\n    sum = sum + i\n  end\n  return tostring(sum\
    \ / 2)\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  for i\
    \ = n, m do\n    sum = sum + i\n  end\n  return \"0b\" .. tostring(sum / 2)\n\
    end", "  local nn = math.floor(n/2) + 1\n  local mm = math.floor(m/2) + 1\n  if\
    \ nn > m then\n    return -1\n  end\n  return string.format('0b%b', nn * 2 - mm)\n\
    end", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ \"0b\" .. tostring(sum / count)\nend", "  if m == 0 then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n  \
    \  count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum /\
    \ count)\nend", "  local nn = math.max(n, m)\n  local mm = math.min(m, n)\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, mm do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if m\
    \ > n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i\
    \ = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  local avg = sum\
    \ / count\n  local bin = bit.bor(bit.lshift(bit.rshift(avg, 8), 8), bit.rshift(avg,\
    \ 8))\n  return bin\nend", "  if m > n then\n    return -1\n  end\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return tostring(sum / count)\nend", "  local nm = math.min(n,\
    \ m)\n  local sum = 0\n  local count = 0\n  while nm do\n    sum = sum + nm\n\
    \    count = count + 1\n    nm = math.floor(nm/2)\n  end\n  if count == 0 then\n\
    \    return -1\n  end\n  return \"0b\" .. tostring(sum/count)\nend", "  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return string.format(\"\
    0b%b\", sum / count)\nend", "  if m > n then\n    return -1\n  end\n  local sum\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\" .. tostring(sum\
    \ / 2)\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  return tostring(sum / count)\nend", "  local nm = math.floor(n/m)\n  if nm\
    \ == 0 then\n    return -1\n  else\n    return string.format('0b%b', math.floor(nm*m))\n\
    \  end\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  for i\
    \ = n, m do\n    sum = sum + i\n  end\n  return tostring(sum / 2)\nend", "  if\
    \ m > n then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m\
    \ do\n    sum = sum + i\n    count = count + 1\n  end\n  return tostring(sum /\
    \ count)\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  return tostring(sum / count)\nend", "  if m > n then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n  \
    \  count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", " \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  if count > 0 then\n    return tostring(sum / count)\n\
    \  else\n    return -1\n  end\nend", "  if m > n then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n  \
    \  n = n + 1\n    count = count + 1\n  end\n  local avg = sum / count\n  local\
    \ bin = bit.bor(bit.lshift(bit.rshift(avg, 8), 8), bit.rshift(avg, 8))\n  return\
    \ bin\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
