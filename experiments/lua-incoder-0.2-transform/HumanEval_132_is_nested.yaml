name: HumanEval_132_is_nested
language: lua
prompt: "-- Create a function that takes a string as input which contains only square\
  \ brackets.\n-- The function should return True if and only if there is a valid\
  \ subsequence of brackets \n-- where at least one bracket in the subsequence is\
  \ nested.\n-- >>> is_nested('[[]]')\n-- true\n-- >>> is_nested('[]]]]]]][[[[[]')\n\
  -- false\n-- >>> is_nested('[][]')\n-- false\n-- >>> is_nested('[]')\n-- false\n\
  -- >>> is_nested('[[][]]')\n-- true\n-- >>> is_nested('[[]][[')\n-- true\nlocal\
  \ function is_nested(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
  \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
  \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
  \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
  \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
  \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
  \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
  \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal open_brackets = string.gsub(string, '[', '', 1)\n\tlocal close_brackets\
    \ = string.gsub(string, ']', '', 1)\n\tlocal open_brackets = open_brackets:gsub('[',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets = close_brackets:gsub('}',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('(', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub(')', '', 1)\n\tlocal open_brackets = open_brackets:gsub('[',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets = close_brackets:gsub('}',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('(', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub(')', '', 1)\n\tlocal open_brackets = open_brackets:gsub('[',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets = close_brackets:gsub('}',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('(', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub(')', '', 1)\n\tlocal open_brackets = open_brackets:gsub('[',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets = close_brackets:gsub('}',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('(', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub(')', '', 1)\n\tlocal open_brackets = open_brackets:gsub('[',\
    \ '', 1)\n\tlocal close_brackets = close_bra", "\tlocal open_brackets = string.gsub(string,\
    \ '[', '') -- remove all brackets\n\tlocal close_brackets = string.gsub(string,\
    \ ']', '') -- remove all brackets\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- count the number of brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- count the number of brackets\n\tlocal open_brackets_count = string.len(open_brackets_count)\
    \ -- count the number of brackets\n\tlocal close_brackets_count = string.len(close_brackets_count)\
    \ -- count the number of brackets\n\tlocal open_brackets_count = open_brackets_count\
    \ - close_brackets_count -- count the number of brackets\n\tlocal close_brackets_count\
    \ = close_brackets_count - open_brackets_count -- count the number of brackets\n\
    \tlocal open_brackets_count = open_brackets_count + 1 -- add 1 to the number of\
    \ brackets\n\tlocal close_brackets_count = close_brackets_count + 1 -- add 1 to\
    \ the number of brackets\n\tlocal open_brackets_count = open_brackets_count -\
    \ 1 -- remove 1 from the number of brackets\n\tlocal close_brackets_count = close_brackets_count\
    \ - 1 -- remove 1 from the number of brackets\n\tlocal open_brackets_count = open_brackets_count\
    \ + 1 -- add 1 to the number of brackets\n\tlocal close_brackets_count = close_brackets_count\
    \ + 1 -- add 1 to the number of brackets\n\tlocal open_brackets_count = open_brackets_count\
    \ - 1 -- remove 1 from the number of brackets\n\tlocal close_brackets_count =\
    \ close_brackets_count - 1 -- remove 1 from the number of brackets\n\tlocal open_brackets_count\
    \ = open_brackets_count + 1 -- add 1 to the number of brackets\n\tlocal close_brackets_count\
    \ = close_brackets_count + 1 -- add 1 to the number of brackets\n\tlocal open_brackets_count\
    \ = open_brackets_count - 1 -- remove 1 from the number of brackets\n\tlocal close_brackets_count\
    \ = close_brackets_count - 1 -- remove 1 from the number of brackets\n\tlocal\
    \ open_brackets_count = open_brackets_count + 1 -- add 1 to the number of brackets\n\
    \tlocal close_brackets_count = close_brackets_count + 1 ", "\tlocal brackets =\
    \ string.gsub(string, '[', '\\0')\n\tlocal brackets_count = string.len(brackets)\n\
    \tlocal open_brackets = string.gsub(string, '\\0', '[')\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close_brackets = string.gsub(string, '\\\
    0', ']')\n\tlocal close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open", "\tlocal open_brackets\
    \ = string.gsub(string, '[', '') -- remove all brackets\n\tlocal close_brackets\
    \ = string.gsub(string, ']', '') -- remove all brackets\n\tlocal open_brackets_count\
    \ = string.gsub(open_brackets, '[', '') -- count the number of brackets\n\tlocal\
    \ close_brackets_count = string.gsub(close_brackets, ']', '') -- count the number\
    \ of brackets\n\tlocal open_brackets_count = open_brackets_count-1 -- subtract\
    \ 1 because we removed the brackets\n\tlocal close_brackets_count = close_brackets_count-1\
    \ -- subtract 1 because we removed the brackets\n\tlocal open_brackets_count =\
    \ open_brackets_count+1 -- add 1 because we added the brackets\n\tlocal close_brackets_count\
    \ = close_brackets_count+1 -- add 1 because we added the brackets\n\tlocal open_brackets_count\
    \ = open_brackets_count-1 -- subtract 1 because we removed the brackets\n\tlocal\
    \ close_brackets_count = close_brackets_count-1 -- subtract 1 because we removed\
    \ the brackets\n\tlocal open_brackets_count = open_brackets_count+1 -- add 1 because\
    \ we added the brackets\n\tlocal close_brackets_count = close_brackets_count+1\
    \ -- add 1 because we added the brackets\n\tlocal open_brackets_count = open_brackets_count-1\
    \ -- subtract 1 because we removed the brackets\n\tlocal close_brackets_count\
    \ = close_brackets_count-1 -- subtract 1 because we removed the brackets\n\tlocal\
    \ open_brackets_count = open_brackets_count+1 -- add 1 because we added the brackets\n\
    \tlocal close_brackets_count = close_brackets_count+1 -- add 1 because we added\
    \ the brackets\n\tlocal open_brackets_count = open_brackets_count-1 -- subtract\
    \ 1 because we removed the brackets\n\tlocal close_brackets_count = close_brackets_count-1\
    \ -- subtract 1 because we removed the brackets\n\tlocal open_brackets_count =\
    \ open_brackets_count+1 -- add 1 because we added the brackets\n\tlocal close_brackets_count\
    \ = close_brackets_count+1 -- add 1 because we added the brackets\n\tlocal open_brackets_count\
    \ = open_brackets_count-1 -- subtract 1 because we ", "\tlocal brackets = string.gsub(string,\
    \ '[', '\\0')\n\tlocal brackets_count = string.len(brackets)\n\tlocal open_brackets\
    \ = string.gsub(string, '\\0', '[')\n\tlocal close_brackets = string.gsub(string,\
    \ '\\0', ']')\n\tlocal open_brackets_count = string.len(open_brackets)\n\tlocal\
    \ close_brackets_count = string.len(close_brackets)\n\t\n\treturn brackets_count\
    \ == open_brackets_count and brackets_count == close_brackets_count\nend", "\t\
    -- Create a stack to keep track of brackets.\n\tlocal stack = {}\n\t-- Iterate\
    \ through the string and add each character to the stack.\n\tfor char in string:gmatch(\"\
    [%a]+\") do\n\t\t-- If the character is a left bracket, push it to the stack.\n\
    \t\tif char == \"[\" then\n\t\t\ttable.insert(stack, char)\n\t\t-- If the character\
    \ is a right bracket, pop the stack and return true if there are \n\t\t-- brackets\
    \ left on the stack.\n\t\telseif char == \"]\" then\n\t\t\tif #stack > 0 then\n\
    \t\t\t\treturn true\n\t\t\tend\n\t\t-- If the character is a left bracket and\
    \ there are brackets left on the stack,\n\t\t-- then return false.\n\t\telseif\
    \ char == \"[\" and #stack > 0 then\n\t\t\treturn false\n\t\t-- If the character\
    \ is a right bracket and there are brackets left on the stack,\n\t\t-- then pop\
    \ the stack and return false.\n\t\telseif char == \"]\" and #stack > 0 then\n\t\
    \t\tstack = stack:sub(1, #stack)\n\t\t-- If the character is a left bracket and\
    \ there are no brackets left on the stack,\n\t\t-- then pop the stack and return\
    \ false.\n\t\telseif char == \"[\" and #stack == 0 then\n\t\t\tstack = stack:sub(1,\
    \ #stack)\n\t\tend\n\tend\n\treturn false\nend", "\t-- Create a stack of brackets\n\
    \tlocal stack = {}\n\t-- Iterate over the string and push each character onto\
    \ the stack\n\tfor char in string:gmatch'[[]'do\n\t\ttable.insert(stack, char)\n\
    \tend\n\t-- If the stack is empty then there is no valid subsequence of brackets\n\
    \tif #stack == 0 then\n\t\treturn false\n\tend\n\t-- Pop each bracket from the\
    \ stack\n\tfor i = #stack, 1, -1 do\n\t\tstack[i] = stack[#stack]\n\tend\n\t--\
    \ If the stack is empty then there is no valid subsequence of brackets\n\tif #stack\
    \ == 0 then\n\t\treturn false\n\tend\n\t-- Pop each bracket from the stack\n\t\
    for i = #stack, 1, -1 do\n\t\t-- If the stack is empty then there is no valid\
    \ subsequence of brackets\n\t\tif #stack == 0 then\n\t\t\treturn false\n\t\tend\n\
    \t\t-- If the current bracket is equal to the last bracket then there is a valid\
    \ subsequence of brackets\n\t\tif stack[i] == stack[#stack] then\n\t\t\treturn\
    \ true\n\t\tend\n\tend\n\treturn false\nend", "\t-- We only care about square\
    \ brackets\n\tstring = string.gsub('[]', '') -- Remove all brackets\n\t-- We only\
    \ care about nesting brackets\n\tstring = string.gsub('[', '') -- Remove all opening\
    \ brackets\n\tstring = string.gsub(']', '') -- Remove all closing brackets\n\t\
    -- We only care about nesting brackets\n\tstring = string.gsub(']', '') -- Remove\
    \ all closing brackets\n\t-- We only care about nesting brackets\n\tstring = string.gsub(']',\
    \ '') -- Remove all closing brackets\n\t-- We only care about nesting brackets\n\
    \tstring = string.gsub(']', '') -- Remove all closing brackets\n\t-- We only care\
    \ about nesting brackets\n\tstring = string.gsub(']', '') -- Remove all closing\
    \ brackets\n\t-- We only care about nesting brackets\n\tstring = string.gsub(']',\
    \ '') -- Remove all closing brackets\n\t-- We only care about nesting brackets\n\
    \tstring = string.gsub(']', '') -- Remove all closing brackets\n\t-- We only care\
    \ about nesting brackets\n\tstring = string.gsub(']', '') -- Remove all closing\
    \ brackets\n\t-- We only care about nesting brackets\n\tstring = string.gsub(']',\
    \ '') -- Remove all closing brackets\n\t-- We only care about nesting brackets\n\
    \tstring = string.gsub(']', '') -- Remove all closing brackets\n\t-- We only care\
    \ about nesting brackets\n\tstring = string.gsub(']', '') -- Remove all closing\
    \ brackets\n\t-- We only care about nesting brackets\n\tstring = string.gsub(']',\
    \ '') -- Remove all closing brackets\n\t-- We only care about nesting brackets\n\
    \tstring = string.gsub(']', '') -- Remove all closing brackets\n\t-- We only care\
    \ about nesting brackets\n\tstring = string.gsub(']', '') -- Remove all closing\
    \ brackets\n\t-- We only care about nesting brackets\n\tstring = string.gsub(']',\
    \ '') -- Remove all closing brackets\n\t-- We only care about nesting brackets\n\
    \tstring = string.gsub(']', '') -- Remove all closing brackets\n\t-- We only care\
    \ about nesting brackets\n\tstring = string.gsub(']', '') -- Remove all closing\
    \ brackets\n\t-- We only care about nesting brackets\n\tstring = ", "\tlocal brackets\
    \ = string.gsub(string, '[', '\\0')\n\tlocal brackets_count = string.len(brackets)\n\
    \tlocal open_brackets = string.gsub(string, '\\0', '[')\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close_brackets = string.gsub(string, '\\\
    0', ']')\n\tlocal close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = open_brackets_count - close_brackets_count\n\tlocal close_brackets_count =\
    \ close_brackets_count - open_brackets_count\n\treturn brackets_count == open_brackets_count\
    \ and close_brackets_count == open_brackets_count\nend", "\tlocal brackets = string.gsub(string,\
    \ '[', '').gsub(string, ']', '')\n\tlocal open_brackets = string.gsub(string,\
    \ '{', '').gsub(string, '}', '')\n\tlocal close_brackets = string.gsub(string,\
    \ '(', '').gsub(string, ')', '')\n\tlocal open_brackets_count = string.gsub(string,\
    \ '{', '').gsub(string, '}', ''):gsub('}', ''):gsub('{', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']', ''):gsub(']',\
    \ ''):gsub(']', ''):", "\tlocal brackets = string.gsub(string, '[', '\\012')\n\
    \tlocal brackets = string.gsub(brackets, '\\012', '[]')\n\tlocal brackets = string.gsub(brackets,\
    \ '[]', '\\012')\n\tlocal brackets = string.gsub(brackets, '\\012', '[]')\n\t\
    local brackets = string.gsub(brackets, '[]', '\\012')\n\tlocal brackets = string.gsub(brackets,\
    \ '\\012', '[]')\n\tlocal brackets = string.gsub(brackets, '[]', '\\012')\n\t\
    local brackets = string.gsub(brackets, '\\012', '[]')\n\tlocal brackets = string.gsub(brackets,\
    \ '[]', '\\012')\n\tlocal brackets = string.gsub(brackets, '\\012', '[]')\n\t\
    local brackets = string.gsub(brackets, '[]', '\\012')\n\tlocal brackets = string.gsub(brackets,\
    \ '\\012', '[]')\n\tlocal brackets = string.gsub(brackets, '[]', '\\012')\n\t\
    local brackets = string.gsub(brackets, '\\012', '[]')\n\tlocal brackets = string.gsub(brackets,\
    \ '[]', '\\012')\n\tlocal brackets = string.gsub(brackets, '\\012', '[]')\n\t\
    local brackets = string.gsub(brackets, '[]', '\\012')\n\tlocal brackets = string.gsub(brackets,\
    \ '\\012', '[]')\n\tlocal brackets = string.gsub(brackets, '[]', '\\012')\n\t\
    local brackets = string.gsub(brackets, '\\012', '[]')\n\tlocal brackets = string.gsub(brackets,\
    \ '[]', '\\012')\n\tlocal brackets = string.gsub(brackets, '\\012', '[]')\n\t\
    local brackets = string.gsub(brackets, '[]', '\\012')\n\tlocal brackets = string.gsub(brackets,\
    \ '\\012', '[]')\n\tlocal brackets = string.gsub(brackets, '[]', '\\012')\n\t\
    local brackets = string.gsub(brackets, '\\012', '[]')\n\tlocal brackets = string.gsub(brackets,\
    \ '[]', '\\012')\n\tlocal brackets = string.gsub(brackets, '\\012', '[]')\n\t\
    local brackets = string.gsub(brackets, '[]', '\\012')\n\tlocal brackets = string.gsub(brackets,\
    \ '\\012', '[]')\n\tlocal brackets = ", "\tlocal open_brackets = string.gsub(string,\
    \ '[', '', 1)\n\tlocal close_brackets = string.gsub(string, ']', '', 1)\n\tlocal\
    \ open_brackets = open_brackets:gsub('[', '', 1)\n\tlocal close_brackets = close_brackets:gsub(']',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub('}', '', 1)\n\tlocal open_brackets = open_brackets:gsub('[',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets = close_brackets:gsub('}',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('[', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets = open_brackets:gsub('{',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub('}', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('[', '', 1)\n\tlocal close_brackets = close_brackets:gsub(']',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub('}', '', 1)\n\tlocal open_brackets = open_brackets:gsub('[',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('{', '', 1)\n\tlocal close_brackets = close_brackets:gsub('}',\
    \ '', 1)\n\tlocal open_brackets = open_brackets:gsub('[', '', 1)\n\tlocal close_brackets\
    \ = close_brackets:gsub(']', '', 1)\n\tlocal open_brackets = open_brackets:gsub('{',\
    \ '', 1)\n\tlocal close_brackets = close_brackets:gsub('}', '', 1)\n\tlocal open_brackets\
    \ = open_brackets:gsub('[', '', 1)\n\tlocal close_brackets = close_brackets:",
  "\tlocal brackets = string.gsub(string, '[', '') -- remove all brackets\n\tlocal\
    \ brackets_count = string.len(brackets)\n\tif brackets_count > 1 then\n\t\tlocal\
    \ open_brackets = string.gsub(brackets, '[', '') -- remove all open brackets\n\
    \t\tlocal close_brackets = string.gsub(open_brackets, ']', '') -- remove all close\
    \ brackets\n\t\tlocal open_brackets_count = string.len(open_brackets)\n\t\tlocal\
    \ close_brackets_count = string.len(close_brackets)\n\t\tif open_brackets_count\
    \ > close_brackets_count then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\treturn false\n\tend\nend", "\tlocal brackets = string.gsub(string,\
    \ '[', '') -- remove all brackets\n\tlocal brackets_count = string.len(brackets)\n\
    \tlocal open_brackets = string.gsub(brackets, '{', '') -- remove all open brackets\n\
    \tlocal open_brackets_count = string.len(open_brackets)\n\tlocal close_brackets\
    \ = string.gsub(open_brackets, '}', '') -- remove all close brackets\n\tlocal\
    \ close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close_brackets_count = string.len(close_brackets)\n\
    \tlocal open_brackets_count = string.len(open_brackets)\n\tlocal close_brackets_count\
    \ = string.len(close_brackets)\n\tlocal open_brackets_count = string.len(open_brackets)\n\
    \tlocal close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close_brackets_count = string.len(close_brackets)\n\
    \tlocal open_brackets_count = string.len(open_brackets)\n\tlocal close_brackets_count\
    \ = string.len(close_brackets)\n\tlocal open_brackets_count = string.len(open_brackets)\n\
    \tlocal close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close_brackets_count = string.len(close_brackets)\n\
    \tlocal open_brackets_count = string.len(open_brackets)\n\tlocal close_brackets_count\
    \ = string.len(close_brackets)\n\tlocal open_brackets_count = string.len(open_brackets)\n\
    \tlocal close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close_brackets_count = string.len(close_brackets)\n\
    \tlocal open_brackets_count = string.len(open_brackets)\n\tlocal close_brackets_count\
    \ = string.len(close_brackets)\n\tlocal open_brackets_count = string.len(open_brackets)\n\
    \tlocal close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close", "\tlocal open_brackets = string.gsub(string,\
    \ '[', '') -- Remove all brackets\n\tlocal close_brackets = string.gsub(string,\
    \ ']', '') -- Remove all brackets\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Count number of brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Count number of brackets\n\tlocal open_brackets_count = open_brackets_count\
    \ - close_brackets_count -- Remove all brackets\n\treturn open_brackets_count\
    \ == 0 -- If all brackets are closed, then there is no nested brackets\nend",
  "\tlocal brackets = string.gsub(string, '[', '') -- remove all brackets\n\tlocal\
    \ brackets_count = string.len(brackets)\n\tlocal open_brackets = string.gsub(brackets,\
    \ '{', '') -- remove all open brackets\n\tlocal open_brackets_count = string.len(open_brackets)\n\
    \tlocal close_brackets = string.gsub(brackets, '}', '') -- remove all close brackets\n\
    \tlocal close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_brackets_count\n\t\
    local close_brackets_count = close_brackets_count\n\tlocal open_brackets_count\
    \ = open_brackets_count\n\tlocal close_brackets_count = close_brackets_count\n\
    \tlocal open_brackets_count = open_brackets_count\n\tlocal close_brackets_count\
    \ = close_brackets_count\n\tlocal open_brackets_count = open_bracket", "\tlocal\
    \ brackets = string.gsub(string, '[', '\\0')\n\tlocal brackets_count = string.len(brackets)\n\
    \tlocal open_brackets = string.gsub(brackets, '\\0', '[')\n\tlocal open_brackets_count\
    \ = string.len(open_brackets)\n\tlocal close_brackets = string.gsub(open_brackets,\
    \ '[', '\\0')\n\tlocal close_brackets_count = string.len(close_brackets)\n\t\n\
    \treturn brackets_count == open_brackets_count and close_brackets_count == open_brackets_count\n\
    end", "\tlocal open_brackets = string.gsub(string, '[', '').\n\t\tgsub(string,\
    \ ']', '').\n\t\tgsub(string, '{', '').\n\t\tgsub(string, '}', '')\n\tlocal close_brackets\
    \ = string.gsub(string, ']', '').\n\t\tgsub(string, '}', '').\n\t\tgsub(string,\
    \ '{', '').\n\t\tgsub(string, '[', '')\n\treturn open_brackets ~= close_brackets\n\
    end", "\tlocal brackets = string.gsub(string, '[', '') -- Remove all brackets\n\
    \tlocal open_brackets = string.gsub(brackets, '[', '') -- Remove all open brackets\n\
    \tlocal close_brackets = string.gsub(open_brackets, '[]', '') -- Remove all close\
    \ brackets\n\tlocal open_brackets_count = string.gsub(open_brackets, '[', '')\
    \ -- Count open brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ '[]', '') -- Count close brackets\n\treturn (open_brackets_count > close_brackets_count)\
    \ -- Return true if and only if there is a valid subsequence of brackets \nend",
  "\tlocal brackets = string.gsub(string, '[', '') -- remove all brackets\n\tlocal\
    \ open_brackets = string.gsub(brackets, '{', '') -- remove all open brackets\n\
    \tlocal close_brackets = string.gsub(brackets, '}', '') -- remove all close brackets\n\
    \tlocal open_brackets_count = string.gsub(open_brackets, '[', '') -- count open\
    \ brackets\n\tlocal close_brackets_count = string.gsub(close_brackets, '[', '')\
    \ -- count close brackets\n\tlocal open_brackets_count_min = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_brackets_count_min = string.gsub(close_brackets,\
    \ '{', '') -- count close brackets\n\tlocal open_brackets_count_max = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_brackets_count_max = string.gsub(close_brackets,\
    \ '{', '') -- count close brackets\n\tlocal open_brackets_count_max = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_brackets_count_max = string.gsub(close_brackets,\
    \ '{', '') -- count close brackets\n\tlocal open_brackets_count_max = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_brackets_count_max = string.gsub(close_brackets,\
    \ '{', '') -- count close brackets\n\tlocal open_brackets_count_max = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_brackets_count_max = string.gsub(close_brackets,\
    \ '{', '') -- count close brackets\n\tlocal open_brackets_count_max = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_brackets_count_max = string.gsub(close_brackets,\
    \ '{', '') -- count close brackets\n\tlocal open_brackets_count_max = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_brackets_count_max = string.gsub(close_brackets,\
    \ '{', '') -- count close brackets\n\tlocal open_brackets_count_max = string.gsub(open_brackets,\
    \ '{', '') -- count open brackets\n\tlocal close_bracket"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
