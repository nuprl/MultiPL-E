language: lua
name: HumanEval_47_median
results:
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy17rble.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpuy17rble.lua:7:\
    \ in function </tmp/tmpuy17rble.lua:6>\n\t(tail call): ?\n\t/tmp/tmpuy17rble.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgb2ejm6.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwgb2ejm6.lua:7:\
    \ in function </tmp/tmpwgb2ejm6.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwgb2ejm6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  end\n  local mid = math.floor(n / 2)\n  local lower\
    \ = median(l, 1, mid)\n  local upper = median(l, mid+1, n)\n  return lower + ((upper\
    \ - lower) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_qcdftv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpw_qcdftv.lua:13: in function 'median'\n\
    \t/tmp/tmpw_qcdftv.lua:14: in function 'median'\n\t/tmp/tmpw_qcdftv.lua:14: in\
    \ function 'median'\n\t/tmp/tmpw_qcdftv.lua:14: in function 'median'\n\t/tmp/tmpw_qcdftv.lua:14:\
    \ in function 'median'\n\t/tmp/tmpw_qcdftv.lua:14: in function 'median'\n\t/tmp/tmpw_qcdftv.lua:14:\
    \ in function 'median'\n\t/tmp/tmpw_qcdftv.lua:14: in function 'median'\n\t/tmp/tmpw_qcdftv.lua:14:\
    \ in function 'median'\n\t/tmp/tmpw_qcdftv.lua:14: in function 'median'\n\t...\n\
    \nRan 1 tests in 0.390 seconds, 0 successes, 1 error\n"
  timestamp: 1659750181
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg68c4efj.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpg68c4efj.lua:7:\
    \ in function </tmp/tmpg68c4efj.lua:6>\n\t(tail call): ?\n\t/tmp/tmpg68c4efj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy17rble.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpuy17rble.lua:7:\
    \ in function </tmp/tmpuy17rble.lua:6>\n\t(tail call): ?\n\t/tmp/tmpuy17rble.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgb2ejm6.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwgb2ejm6.lua:7:\
    \ in function </tmp/tmpwgb2ejm6.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwgb2ejm6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcpqnet_.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmphcpqnet_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i0km5ea.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp9i0km5ea.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor((#l)\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v9od_em.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2v9od_em.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8awkfag.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpm8awkfag.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half-1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxqgron7.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgxqgron7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy17rble.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpuy17rble.lua:7:\
    \ in function </tmp/tmpuy17rble.lua:6>\n\t(tail call): ?\n\t/tmp/tmpuy17rble.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half-1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxqgron7.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgxqgron7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy17rble.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpuy17rble.lua:7:\
    \ in function </tmp/tmpuy17rble.lua:6>\n\t(tail call): ?\n\t/tmp/tmpuy17rble.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcpqnet_.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmphcpqnet_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcpqnet_.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmphcpqnet_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8awkfag.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpm8awkfag.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor((#l)\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v9od_em.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2v9od_em.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor((#l)\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v9od_em.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2v9od_em.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750180
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor((#l)\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnfzvrk4d.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpnfzvrk4d.lua:7:\
    \ in function </tmp/tmpnfzvrk4d.lua:6>\n\t(tail call): ?\n\t/tmp/tmpnfzvrk4d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750180
