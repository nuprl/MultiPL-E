name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested lists,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the list,\n-- and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n-- each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6},\
  \ {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\n-- >>> get_row({},\
  \ 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)\n-- {{2, 2}}\nlocal function\
  \ get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row_sorted = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted, {x = x, y = v})\n  end\n  table.sort(row_sorted,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(row_sorted, function(a, b)\
    \ return a.y < b.y end)\n  return row_sorted\nend", "    local row = {}\n    for\
    \ _, row in ipairs(lst) do\n        if row[x] ~= nil then\n            break\n\
    \        end\n    end\n    return row\nend", "  local row = {}\n  for _, v in\
    \ ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x > b.x end)\n  local coords = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(coords, {x = v.x, y = v.y})\n  end\n  table.sort(coords,\
    \ function(a, b) return a.x > b.x end)\n  local results = {}\n  for _, v in ipairs(coords)\
    \ do\n    table.insert(results, {x = v.x, y = v.y})\n  end\n  return results\n\
    end", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n  \
    \    table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found\
    \ = false\n    for _, v2 in ipairs(row) do\n      if v == v2 and v > x then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a > b end)\n  table.sort(row, function(a, b) return a < b end)\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "    local row = {}\n    for i = 1, #lst do\n        local\
    \ row = lst[i]\n        for j = 1, #row do\n            if row[j] == x then\n\
    \                return {i, j}\n            end\n        end\n    end\nend", " \
    \ if x == 0 then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i][x]\n    local row_y = lst[i][#lst]\n    if row_x > row_y\
    \ then\n      table.insert(row, { i, row_y })\n    else\n      table.insert(row,\
    \ { i, row_x })\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b[1] - a[1] end)\n  return row\nend", "  local row = {}\n  for _,\
    \ v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row) do\n\
    \      if v == v2 then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row,\
    \ function(a, b) return b[1] < a[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] < b[2] end)\n  table.sort(row, function(a, b) return b[2] < a[2] end)\n\
    \  table.sort(row, function(a, b) return a[3] < b[3] end)\n  table.sort(row, function(a,\
    \ b) return b[3] < a[3] end)\n  table.sort(row, function(a, b) return a[4] < b[4]\
    \ end)\n  table.sort(row, function(a, b) return b[4] < a[4] end)\n  table.sort(row,\
    \ function(a, b) return a[5] < b[5] end)\n  table.sort(row, function(a, b) return\
    \ b[5] < a[5] end)\n  table.sort(row, function(a, b) return a[6] < b[6] end)\n\
    \  table.sort(row, function(a, b) return b[6] < a[6] end)\n  table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1]\
    \ end)\n  table.sort(row, function(a, b) return a[2] < b[2] end)\n  table.sort(row,\
    \ function(a, b) return b[2] < a[2] end)\n  table.sort(row, function(a, b) return\
    \ a[3] < b[3] end)\n  table.sort(row, function(a, b) return b[3] < a[3] end)\n\
    \  table.sort(row, function(a, b) return a[4] < b[4] end)\n  table.sort(row, function(a,\
    \ b) return b[4] < a[4] end)\n  table.sort(row, function(a, b) return a[5] < b[5]\
    \ end)\n  table.sort(row, function(a, b) return b[5] < a[5] end)\n  table.sort(row,\
    \ function(a, b) return a[6] < b[6] end)\n  table.sort(row, function(a, b) return\
    \ b[6] < a[6] end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n\
    \  table.sort(row, function(a, b) return b[1] < a[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] < b[2] end)\n  table.sort(row, function(a, b) return b[2] < a[2]\
    \ end)\n  table.sort(row, function(a, b) return a[3] < b[3] end)\n  table.sort(row,\
    \ function(a, b) return b", "  local row = {}\n  for _, v in pairs(lst) do\n \
    \   table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b > a end)\n  local rows = {}\n  for _, v in pairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  local results = {}\n  for _, v in pairs(rows) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ _, row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, x)\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row)\
    \ do\n      if v == v2 then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(row, v)\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  table.sort(rows, function(a, b) return b.x > a.x end)\n  return\
    \ rows\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n \
    \ end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[#rows]})\n\
    \  end\n  table.sort(rows, function(a, b) return a.x > b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x > a.x end)\n  local ret = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(ret, v)\n  end\n  return ret\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_index = 1\n  local col_index = 1\n  local coordinates\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(coordinates, {row_index,\
    \ col_index})\n    table.insert(coordinates, {row_index, col_index + v})\n   \
    \ col_index = col_index + v\n  end\n  table.sort(coordinates, function(a, b) return\
    \ a[1] < b[1] end)\n  return coordinates\nend", "  local row = {}\n  for _, v\
    \ in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[#row] < b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] == b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] == b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] == b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] == b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  return\
    \ row\nend", "  local row = {}\n  for _, row in ipairs(lst) do\n    local row_x\
    \ = row[x]\n    local row_y = row[x+1]\n    local row_z = row[x+2]\n    if row_x\
    \ ~= nil then\n      table.insert(row, { x = row_x, y = row_y })\n    end\n  \
    \  if row_z ~= nil then\n      table.insert(row, { x = row_x, y = row_z })\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a.x > b.x end)\n  table.sort(row,\
    \ function(a, b) return a.y > b.y end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_index = {}\n  for _, v in ipairs(row) do\n    table.insert(row_index,\
    \ v)\n  end\n  table.sort(row_index, function(a, b) return a < b end)\n  table.sort(row_index,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row_index)\
    \ do\n    table.insert(rows, {x = v, y = row[v]})\n  end\n  table.sort(rows, function(a,\
    \ b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return a.y < b.y\
    \ end)\n  local results = {}\n  for _, v in ipairs(rows) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if\
    \ row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n    end\n\
    \  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
