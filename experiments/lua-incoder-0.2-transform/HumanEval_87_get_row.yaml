name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested lists,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the list,\n-- and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n-- each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6},\
  \ {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\n-- >>> get_row({},\
  \ 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)\n-- {{2, 2}}\nlocal function\
  \ get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row_sorted = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted, {x = x, y = v})\n  end\n  table.sort(row_sorted,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(row_sorted, function(a, b)\
    \ return a.y < b.y end)\n  return row_sorted\nend", "    local row = {}\n    for\
    \ _, row in ipairs(lst) do\n        if row[x] ~= nil then\n            break\n\
    \        end\n    end\n    return row\nend", "  local row = {}\n  for _, v in\
    \ ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x > b.x end)\n  local coords = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(coords, {x = v.x, y = v.y})\n  end\n  table.sort(coords,\
    \ function(a, b) return a.x > b.x end)\n  local results = {}\n  for _, v in ipairs(coords)\
    \ do\n    table.insert(results, {x = v.x, y = v.y})\n  end\n  return results\n\
    end", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n  \
    \    table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found\
    \ = false\n    for _, v2 in ipairs(row) do\n      if v == v2 and v > x then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a > b end)\n  table.sort(row, function(a, b) return a < b end)\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "    local row = {}\n    for i = 1, #lst do\n        local\
    \ row = lst[i]\n        for j = 1, #row do\n            if row[j] == x then\n\
    \                return {i, j}\n            end\n        end\n    end\nend", " \
    \ if x == 0 then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i][x]\n    local row_y = lst[i][#lst]\n    if row_x > row_y\
    \ then\n      table.insert(row, { i, row_y })\n    else\n      table.insert(row,\
    \ { i, row_x })\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b[1] - a[1] end)\n  return row\nend", "  local row = {}\n  for _,\
    \ v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row) do\n\
    \      if v == v2 then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row,\
    \ function(a, b) return b[1] < a[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] < b[2] end)\n  table.sort(row, function(a, b) return b[2] < a[2] end)\n\
    \  table.sort(row, function(a, b) return a[3] < b[3] end)\n  table.sort(row, function(a,\
    \ b) return b[3] < a[3] end)\n  table.sort(row, function(a, b) return a[4] < b[4]\
    \ end)\n  table.sort(row, function(a, b) return b[4] < a[4] end)\n  table.sort(row,\
    \ function(a, b) return a[5] < b[5] end)\n  table.sort(row, function(a, b) return\
    \ b[5] < a[5] end)\n  table.sort(row, function(a, b) return a[6] < b[6] end)\n\
    \  table.sort(row, function(a, b) return b[6] < a[6] end)\n  table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1]\
    \ end)\n  table.sort(row, function(a, b) return a[2] < b[2] end)\n  table.sort(row,\
    \ function(a, b) return b[2] < a[2] end)\n  table.sort(row, function(a, b) return\
    \ a[3] < b[3] end)\n  table.sort(row, function(a, b) return b[3] < a[3] end)\n\
    \  table.sort(row, function(a, b) return a[4] < b[4] end)\n  table.sort(row, function(a,\
    \ b) return b[4] < a[4] end)\n  table.sort(row, function(a, b) return a[5] < b[5]\
    \ end)\n  table.sort(row, function(a, b) return b[5] < a[5] end)\n  table.sort(row,\
    \ function(a, b) return a[6] < b[6] end)\n  table.sort(row, function(a, b) return\
    \ b[6] < a[6] end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n\
    \  table.sort(row, function(a, b) return b[1] < a[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] < b[2] end)\n  table.sort(row, function(a, b) return b[2] < a[2]\
    \ end)\n  table.sort(row, function(a, b) return a[3] < b[3] end)\n  table.sort(row,\
    \ function(a, b) return b", "  local row = {}\n  for _, v in pairs(lst) do\n \
    \   table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b > a end)\n  local rows = {}\n  for _, v in pairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  local results = {}\n  for _, v in pairs(rows) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ _, row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, x)\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row)\
    \ do\n      if v == v2 then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(row, v)\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  table.sort(rows, function(a, b) return b.x > a.x end)\n  return\
    \ rows\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n \
    \ end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[#rows]})\n\
    \  end\n  table.sort(rows, function(a, b) return a.x > b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x > a.x end)\n  local ret = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(ret, v)\n  end\n  return ret\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_index = 1\n  local col_index = 1\n  local coordinates\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(coordinates, {row_index,\
    \ col_index})\n    table.insert(coordinates, {row_index, col_index + v})\n   \
    \ col_index = col_index + v\n  end\n  table.sort(coordinates, function(a, b) return\
    \ a[1] < b[1] end)\n  return coordinates\nend", "  local row = {}\n  for _, v\
    \ in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[#row] < b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] == b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] == b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] == b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] == b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  return\
    \ row\nend", "  local row = {}\n  for _, row in ipairs(lst) do\n    local row_x\
    \ = row[x]\n    local row_y = row[x+1]\n    local row_z = row[x+2]\n    if row_x\
    \ ~= nil then\n      table.insert(row, { x = row_x, y = row_y })\n    end\n  \
    \  if row_z ~= nil then\n      table.insert(row, { x = row_x, y = row_z })\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a.x > b.x end)\n  table.sort(row,\
    \ function(a, b) return a.y > b.y end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_index = {}\n  for _, v in ipairs(row) do\n    table.insert(row_index,\
    \ v)\n  end\n  table.sort(row_index, function(a, b) return a < b end)\n  table.sort(row_index,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row_index)\
    \ do\n    table.insert(rows, {x = v, y = row[v]})\n  end\n  table.sort(rows, function(a,\
    \ b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return a.y < b.y\
    \ end)\n  local results = {}\n  for _, v in ipairs(rows) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if\
    \ row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n    end\n\
    \  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "    local row =\
    \ {}\n    for _, v in ipairs(lst) do\n        row[#row + 1] = v\n    end\n   \
    \ table.sort(row, function(a, b) return a[1] < b[1] end)\n    table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n    local row_index = 1\n    local row_coords\
    \ = {}\n    for _, v in ipairs(row) do\n        row_coords[#row_coords + 1] =\
    \ row_index\n        row_index = row_index + 1\n    end\n    table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n    local row_coords_list\
    \ = {}\n    for _, v in ipairs(row_coords) do\n        row_coords_list[#row_coords_list\
    \ + 1] = v\n    end\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coords_list = row_coords_list\n    local row_coords_list\
    \ = row_coords_list\n    local row_coord", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local rows = {}\n    for _, v2 in ipairs(v) do\n      if v == x then\n\
    \        rows[#rows + 1] = {v, v2}\n      end\n    end\n    table.sort(rows, function(a,\
    \ b)\n      return a[2] > b[2]\n    end)\n    table.sort(rows, function(a, b)\n\
    \      return a[1] > b[1]\n    end)\n    for _, v2 in ipairs(rows) do\n      table.insert(row,\
    \ v2)\n    end\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[v].y\
    \ + 1})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x < a.x end)\n  local results = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(results, {x = v.x, y = v.y})\n  end\n  return results\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local rows = {}\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(rows, {i,\
    \ j})\n      end\n    end\n    table.sort(rows)\n    table.sort(rows)\n    table.insert(row,\
    \ rows[1])\n  end\n  return row\nend", "  local row = {}\n  for _, v in pairs(lst)\
    \ do\n    local found = false\n    for _, v2 in pairs(row) do\n      if v == v2\
    \ then\n        found = true\n        break\n      end\n    end\n    if not found\
    \ then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local coords = {}\n  for _, v in pairs(row) do\n    table.insert(coords, {v,\
    \ #row})\n  end\n  table.sort(coords, function(a, b) return a[1] < b[1] end)\n\
    \  table.sort(coords, function(a, b) return b[1] < a[1] end)\n  local coord =\
    \ nil\n  for _, v in pairs(coords) do\n    if v[1] == x then\n      coord = v\n\
    \      break\n    end\n  end\n  if coord == nil then\n    return {}\n  end\n \
    \ local coords = {}\n  for _, v in pairs(coord) do\n    table.insert(coords, {v[1],\
    \ v[2]})\n  end\n  table.sort(coords, function(a, b) return a[2] > b[2] end)\n\
    \  table.sort(coords, function(a, b) return b[2] > a[2] end)\n  local coord =\
    \ nil\n  for _, v in pairs(coords) do\n    if v[2] == x then\n      coord = v\n\
    \      break\n    end\n  end\n  if coord == nil then\n    return {}\n  end\n \
    \ local coords = {}\n  for _, v in pairs(coord) do\n    table.insert(coords, {v[1],\
    \ v[2]})\n  end\n  table.sort(coords, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(coords, function(a, b) return b[1] > a[1] end)\n  local coord =\
    \ nil\n  for _, v in pairs(coords) do\n    if v[1] == x then\n      coord = v\n\
    \      break\n    end\n  end\n  if coord == nil then\n    return {}\n  end\n \
    \ local coords = {}\n  for _, v in pairs(coord) do\n    table.insert(coords, {v[1],\
    \ v[2]})\n  end\n  table.sort(coords, function(a, b) return a[2] < b[2] end)\n\
    \  table.sort(coords, function(a, b) return b[2] < a[2] end)\n  local coord =\
    \ nil\n  for _, v in pairs(coords) do\n    if v[2] == x then\n      coord = v\n\
    \      break\n    end\n  end\n  if coord == nil then\n    return {}\n  end\n \
    \ local coords = {}\n  for _, v in pairs(coord) do\n    table.insert(coords, {v[1],\
    \ v[2]})\n  end\n  table.sort(coords, ", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] == x then\n      break\n    end\n  end\n  return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[v].y})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  table.sort(rows, function(a, b) return a.x < b.x end)\n  local\
    \ coords = {}\n  for _, v in ipairs(rows) do\n    table.insert(coords, {x = v.x,\
    \ y = v.y})\n  end\n  table.sort(coords, function(a, b) return a.x < b.x end)\n\
    \  table.sort(coords, function(a, b) return a.x > b.x end)\n  local ret = {}\n\
    \  for _, v in ipairs(coords) do\n    table.insert(ret, v)\n  end\n  return ret\n\
    end", "    local row = {}\n    for _, v in ipairs(lst) do\n        if v == x then\n\
    \            table.insert(row, 0)\n        else\n            table.insert(row,\
    \ v)\n        end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j]\
    \ == x then\n        table.insert(row, { i, j })\n      end\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b)\n   \
    \   return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.", "  local row = {}\n  for _, v\
    \ in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local row2 = {}\n  for _, v in ipairs(row) do\n    table.insert(row2, v)\n \
    \ end\n  table.sort(row2, function(a, b) return a < b end)\n  table.sort(row2,\
    \ function(a, b) return b < a end)\n  local row3 = {}\n  for _, v in ipairs(row2)\
    \ do\n    table.insert(row3, v)\n  end\n  table.sort(row3, function(a, b) return\
    \ a < b end)\n  table.sort(row3, function(a, b) return b < a end)\n  local row4\
    \ = {}\n  for _, v in ipairs(row3) do\n    table.insert(row4, v)\n  end\n  table.sort(row4,\
    \ function(a, b) return a < b end)\n  table.sort(row4, function(a, b) return b\
    \ < a end)\n  local row5 = {}\n  for _, v in ipairs(row4) do\n    table.insert(row5,\
    \ v)\n  end\n  table.sort(row5, function(a, b) return a < b end)\n  table.sort(row5,\
    \ function(a, b) return b < a end)\n  local row6 = {}\n  for _, v in ipairs(row5)\
    \ do\n    table.insert(row6, v)\n  end\n  table.sort(row6, function(a, b) return\
    \ a < b end)\n  table.sort(row6, function(a, b) return b < a end)\n  local row7\
    \ = {}\n  for _, v in ipairs(row6) do\n    table.insert(row7, v)\n  end\n  table.sort(row7,\
    \ function(a, b) return a < b end)\n  table.sort(row7, function(a, b) return b\
    \ < a end)\n  local row8 = {}\n  for _, v in ipairs(row7) do\n    table.insert(row8,\
    \ v)\n  end\n  table.sort(row8, function(a, b) return a < b end)\n  table.sort(row8,\
    \ function(a, b) return b < a end)\n  local row9 = {}\n  for _, v in ipairs(row8)\
    \ do\n    table.insert(row9, v)\n  end\n  table.sort(row9, function(a, b) return\
    \ a < b end)\n  table.sort(row9, function(a, b) return b < a end)\n  local row10\
    \ = {}\n  for _, v in ipairs(row9) do\n    table.insert(row10, v)\n  end\n  table.sort(row10,\
    \ function(a, b) return a < b end)\n  table.sort(row10, function(a, b) return\
    \ b < a end)\n  local row11 = {}", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b < a end)\n  local rows = {}\n  for\
    \ _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[#rows]})\n \
    \ end\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ row[j] = i\n        break\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, 0)\n\
    \    table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a]\
    \ < row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(",
  "  local row = {}\n  for _, v in pairs(lst) do\n    local found = false\n    for\
    \ _, v2 in pairs(row) do\n      if v == v2 then\n        found = true\n      \
    \  break\n      end\n    end\n    if not found then\n      table.insert(row, v)\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\n    if a\
    \ < b then\n      return -1\n    elseif a > b then\n      return 1\n    else\n\
    \      return 0\n    end\n  end)\n  table.sort(row, function(a, b)\n    if a >\
    \ b then\n      return -1\n    elseif a < b then\n      return 1\n    else\n \
    \     return 0\n    end\n  end)\n  local coords = {}\n  for _, v in pairs(row)\
    \ do\n    table.insert(coords, {v, #row})\n  end\n  table.sort(coords, function(a,\
    \ b)\n    if a[1] < b[1] then\n      return -1\n    elseif a > b[1] then\n   \
    \   return 1\n    else\n      return 0\n    end\n  end)\n  table.sort(coords,\
    \ function(a, b)\n    if a[1] > b[1] then\n      return -1\n    elseif a < b[1]\
    \ then\n      return 1\n    else\n      return 0\n    end\n  end)\n  return coords\n\
    end", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n\
    \  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(a, b) return a[x\
    \ + 1] > b[x + 1] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b > a end)\n  local row_index = 1\n  local row_coords = {}\n  for\
    \ _, v in ipairs(row) do\n    table.insert(row_coords, row_index)\n    row_index\
    \ = row_index + 1\n  end\n  table.sort(row_coords, function(a, b) return b > a\
    \ end)\n  local row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return a < b end)\n  local\
    \ row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return a > b end)\n  local\
    \ row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return a < b end)\n  local\
    \ row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return a > b end)\n  local\
    \ row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return a < b end)\n  local\
    \ row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return a > b end)\n  local\
    \ row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x\
    \ then\n      table.insert(row, 0)\n    else\n      table.insert(row, v)\n   \
    \ end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a\
    \ end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row = {}\n\
    \  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ b[1] < a[1] end)\n  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a[2] < b[2] end)\n  table.sort(row,\
    \ function(a, b) return b[2] < a[2] end)\n  local row = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a[3] < b[3] end)\n  table.sort(row, function(a, b) return b[3] < a[3] end)\n\
    \  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a[4] < b[4] end)\n  table.sort(row, function(a,\
    \ b) return b[4] < a[4] end)\n  local row = {}\n  for _, v in ipairs(row) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a[5]\
    \ < b[5] end)\n  table.sort(row, function(a, b) return b[5] < a[5] end)\n  local\
    \ row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a[6] < b[6] end)\n  table.sort(row, function(a, b) return\
    \ b[6] < a[6] end)\n  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a[7] < b[7] end)\n  table.sort(row,\
    \ function(a, b) return b[7] < a[7] end)\n  local row = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a[8] < b[8] end)\n  table.sort(row, function(a, b) return b[8] < a[8] end)\n\
    \  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a[9] < b[9] end)\n  table.sort(row, function(a,\
    \ b) return b[9] < ", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local row_x = row[x]\n  table.sort(row,\
    \ function(a, b) return a[b] end)\n  table.sort(row, function(a, b) return b[a]\
    \ end)\n  local row_y = row[x]\n  local row_z = row[x]\n  for _, v in ipairs(row)\
    \ do\n    if v == x then\n      break\n    end\n  end\n  local row_i = row_z -\
    \ row_y\n  local row_j = row_z - row_x\n  local row_k = row_i - row_j\n  local\
    \ row_l = row_i - row_k\n  local row_m = row_j - row_k\n  local row_n = row_k\
    \ - row_l\n  local row_o = row_l - row_m\n  local row_p = row_m - row_n\n  local\
    \ row_q = row_n - row_o\n  local row_r = row_o - row_p\n  local row_s = row_p\
    \ - row_q\n  local row_t = row_q - row_r\n  local row_u = row_r - row_s\n  local\
    \ row_v = row_s - row_t\n  local row_w = row_t - row_u\n  local row_x = row_u\
    \ - row_v\n  local row_y = row_v - row_w\n  local row_z = row_w - row_x\n  local\
    \ row_i = row_z - row_y\n  local row_j = row_z - row_x\n  local row_k = row_i\
    \ - row_j\n  local row_l = row_i - row_k\n  local row_m = row_j - row_k\n  local\
    \ row_n = row_k - row_l\n  local row_o = row_l - row_m\n  local row_p = row_m\
    \ - row_n\n  local row_q = row_n - row_o\n  local row_r = row_o - row_p\n  local\
    \ row_s = row_p - row_q\n  local row_t = row_q - row_r\n  local row_u = row_r\
    \ - row_s\n  local row_v = row_s - row_t\n  local row_w = row_t - row_u\n  local\
    \ row_x = row_u - row_v\n  local row_y = row_v - row_w\n  local row_z = row_w\
    \ - row_x\n  local row_i = row_z - row_y\n  local row_j = row_z - row_x\n  local\
    \ row_k = row_i - row_j\n  local row_l = row_i - row_k\n  local row_m = row_j\
    \ - row_k\n  local row_n = row_", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b > a end)\n  local row_index = 1\n  local column_index = 1\n  local\
    \ coordinates = {}\n  for _, v in ipairs(row) do\n    table.insert(coordinates,\
    \ {row_index, column_index})\n    column_index = column_index + v\n  end\n  table.sort(coordinates,\
    \ function(a, b) return b > a end)\n  table.sort(coordinates, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(coordinates, function(a, b) return a[1] > b[1]\
    \ end)\n  local row_index = 1\n  local column_index = 1\n  local coordinates =\
    \ {}\n  for _, v in ipairs(row) do\n    table.insert(coordinates, {row_index,\
    \ column_index})\n    column_index = column_index + v\n  end\n  table.sort(coordinates,\
    \ function(a, b) return b > a end)\n  table.sort(coordinates, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(coordinates, function(a, b) return a[1] > b[1]\
    \ end)\n  return coordinates\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    local row_x = row[x]\n    for _, row_y in ipairs(row) do\n      if row_x\
    \ == row_y then\n        row_x = nil\n        break\n      end\n    end\n    if\
    \ row_x then\n      table.insert(row, row_x, row_y)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local row = {}\n    for _, c in ipairs(v) do\n      if c == x then\n\
    \        table.insert(row, 0)\n      else\n        table.insert(row, c)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b > a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  local ret = {}\n  for _, v in ipairs(rows) do\n    table.insert(ret,\
    \ v)\n  end\n  return ret\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] ~= nil then\n      return row\n    end\n  end\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b > a end)\n  local coords = {}\n  for\
    \ _, v in ipairs(row) do\n    table.insert(coords, {x = x, y = v})\n  end\n  return\
    \ coords\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n\
    \    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n   \
    \ table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return a\
    \ > b end)\n  local row_index = 1\n  local col_index = 1\n  local results = {}\n\
    \  for _, v in ipairs(row) do\n    if v == x then\n      table.insert(results,\
    \ {row_index, col_index})\n      row_index = row_index + 1\n      col_index =\
    \ col_index + 1\n    else\n      row_index = row_index + 1\n      col_index =\
    \ col_index + 1\n    end\n  end\n  return results\nend", "  local row = {}\n \
    \ for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        break\n      else\n        row = row{lst[i][j]}\n\
    \      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] ==\
    \ x then\n        table.insert(row, i)\n        table.insert(row, j)\n      end\n\
    \    end\n    table.sort(row)\n    table.sort(row, function(a, b) return b - a\
    \ end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return\
    \ a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ > row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] <= row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] == row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] <= row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ == row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] <= row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, ", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b > a\
    \ end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = row[v]})\n  end\n  table.sort(rows, function(a, b) return a.x >\
    \ b.x end)\n  local results = {}\n  for _, v in ipairs(rows) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[x - 1] < b[x - 1] end)\n  table.sort(row,\
    \ function(a, b) return b[x - 1] < a[x - 1] end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i - 1)\n        table.insert(row,\
    \ j - 1)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local row_sorted = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted,\
    \ {x = v, y = row[v]})\n  end\n  table.sort(row_sorted, function(a, b) return\
    \ a.x < b.x end)\n  table.sort(row_sorted, function(a, b) return b.x < a.x end)\n\
    \  local row_sorted_reversed = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted_reversed,\
    \ {x = v, y = row[v]})\n  end\n  table.sort(row_sorted_reversed, function(a, b)\
    \ return a.x < b.x end)\n  table.sort(row_sorted_reversed, function(a, b) return\
    \ b.x < a.x end)\n  local row_sorted_reversed_sorted = {}\n  for _, v in ipairs(row_sorted_reversed)\
    \ do\n    table.insert(row_sorted_reversed_sorted, {x = v.y, y = v.x})\n  end\n\
    \  table.sort(row_sorted_reversed_sorted, function(a, b) return a.x < b.x end)\n\
    \  table.sort(row_sorted_reversed_sorted, function(a, b) return b.x < a.x end)\n\
    \  local row_sorted_reversed_sorted_reversed = {}\n  for _, v in ipairs(row_sorted_reversed_sorted)\
    \ do\n    table.insert(row_sorted_reversed_sorted_reversed, {x = v.y, y = v.x})\n\
    \  end\n  table.sort(row_sorted_reversed_sorted_reversed, function(a, b) return\
    \ a.x < b.x end)\n  table.sort(row_sorted_reversed_sorted_reversed, function(a,\
    \ b) return b.x < a.x end)\n  local row_sorted_reversed_sorted_reversed_sorted\
    \ = {}\n  for _, v in ipairs(row_sorted_reversed_sorted_reversed) do\n    table.insert(row_sorted_reversed_sorted_reversed_sorted,\
    \ {x = v.y, y = v.x})\n  end\n  table.sort(row_sorted_reversed_sorted_reversed_sorted,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(row_sorted_reversed_sorted_reversed_sorted,\
    \ function(a, b) return b.x < a.x end)\n  local row_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = {}\n  for _, v in ipairs(row_sorted_reversed_sorted_reversed_sorted) do\n\
    \    table.insert(row_sorted_reversed_sorted_reversed_sorted_reversed, {x = v.y,\
    \ y = v.x})\n  end\n  table.sort(row_sorted_reversed_sorted_reversed_sorted_reversed,\
    \ function(a, b) return a.x < b.x end)\n  ", "    local row = {}\n    for _, v\
    \ in ipairs(lst) do\n        if v == x then\n            table.insert(row, v)\n\
    \        end\n    end\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, function(a, b) return a > b end)\n    return row\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, ", "  local row = {}\n  for _, v in ipairs(lst) do\n  \
    \  local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[x + 1] > b[x + 1] end)\n  table.sort(row, function(a,\
    \ b) return b[x + 1] > a[x + 1] end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in pairs(lst) do\n    local rowv = {}\n    for _, vv in pairs(v) do\n\
    \      if vv ~= x then\n        rowv[#rowv + 1] = vv -- add coordinate\n     \
    \ end\n    end\n    table.insert(row, rowv)\n  end\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return a[1] > b[1]\
    \ end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[x - 1] < b[x - 1] end)\n  return row\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_x = row[x]\n  table.sort(row, function(a, b) return row_x\
    \ < a end)\n  table.sort(row, function(a, b) return row_x > b end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j =\
    \ 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b", "  local row = {}\n  for _, row in ipairs(lst) do\n    if row[x]\
    \ then\n      table.insert(row, x, row[x])\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[2] < b[2] end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] ~= nil then\n      break\n    end\n  end\n  return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b > a end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y =\
    \ rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x > b.x end)\n\
    \  local results = {}\n  for _, v in ipairs(rows) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v,\
    \ y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x\
    \ end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  local ret =\
    \ {}\n  for _, v in ipairs(rows) do\n    table.insert(ret, v)\n  end\n  return\
    \ ret\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n   \
    \ for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[x] < b[x] end)\n  table.sort(row, function(a, b) return\
    \ b[x] < a[x] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row\n      else\n        row = row + 1\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local row_index = 1\n  local col_index =\
    \ 1\n  local results = {}\n  for _, v in ipairs(row) do\n    if v == x then\n\
    \      table.insert(results, {row_index, col_index})\n      row_index = row_index\
    \ + 1\n      col_index = col_index + 1\n    end\n  end\n  return results\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.insert(row, #row -\
    \ 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, ", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[#row] > b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] < b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] == b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] ~= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ ~= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] ~= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] ~= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] ~= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] ~= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function",
  "    local row = {}\n    for _, v in ipairs(lst) do\n        if v == x then\n  \
    \          table.insert(row, 0)\n        else\n            table.insert(row, v)\n\
    \        end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, 0)\n    else\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row_index\
    \ = 1\n  local column_index = 1\n  local coordinates = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(coordinates, {row_index, column_index})\n    column_index\
    \ = column_index + v\n  end\n  table.sort(coordinates, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(coordinates, function(a, b) return b[1] < a[1] end)\n\
    \  return coordinates\nend", "    local row = {}\n    for i = 1, #lst do\n   \
    \     local row = row\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                row = row or {}\n                row[j] = i\n   \
    \             break\n            end\n        end\n    end\n    return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ 0)\n    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ 0)\n    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x\
    \ do\n      if row_x[j] == x then\n        table.insert(row, { i, j })\n     \
    \ end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\nend",
  "  if lst == nil then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst\
    \ do\n    local y = lst[i]\n    if y == x then\n      table.insert(row, i)\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "    local row = {}\n\
    \    for i = 1, #lst do\n        local row = {}\n        for j = 1, #lst[i] do\n\
    \            if lst[i][j] == x then\n                table.insert(row, i)\n  \
    \              table.insert(row, j)\n            end\n        end\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b - a end)\n        table.insert(row,\
    \ #row)\n        table.sort(row, function(a, b) return a - b end)\n        table.insert(row,\
    \ #row)\n        table.sort(row, function(a, b) return row[a] > row[b] end)\n\
    \        table.insert(row, #row)\n        table.sort(row, function(a, b) return\
    \ row[a] < row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] <= row[b] end)\n       \
    \ table.insert(row, #row)\n        table.sort(row, function(a, b) return row[a]\
    \ >= row[b] end)\n        table.insert(row, #row)\n        table.sort(row, function(a,\
    \ b) return row[a] ~= row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] ~= row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] ~= row[b] end)\n       \
    \ table.insert(row, #row)\n        table.sort(row, function(a, b) return row[a]\
    \ ~= row[b] end)\n        table.insert(row, #row)\n        table.sort(row, function(a,\
    \ b) return row[a] ~= row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] ~= row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] ~= row[b] end)\n       \
    \ table.insert(row, #row)\n        table.sort(row, function(a, b) return row[a]\
    \ ~= row[b] end)\n        table.insert(row, #row)\n        table.sort(row, function(a,\
    \ b) return row[a] ~= row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] ~= row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] ~= row[b] end)\n       \
    \ table.insert(row, #row)\n        table.sort(row, function(a, b) return row[a]\
    \ ~= row[b] end)\n        table.insert(row, #row)\n        table.sort(row, function(a,\
    \ b) return row[a] ~= row[b] end)\n        table.insert(", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, ", "  local row = {}\n  for _, row in ipairs(lst) do\n\
    \    if row[x] then\n      break\n    end\n  end\n  return row\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ 0)\n    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return a > b end)\n  table.sort(row,\
    \ function(a, b) return a[x + 1] > b[x + 1] end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, ", "  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row2\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row2, v)\n  end\n  table.sort(row2,\
    \ function(a, b) return a < b end)\n  table.sort(row2, function(a, b) return b\
    \ < a end)\n  local row3 = {}\n  for _, v in ipairs(row2) do\n    table.insert(row3,\
    \ v)\n  end\n  table.sort(row3, function(a, b) return a < b end)\n  table.sort(row3,\
    \ function(a, b) return b < a end)\n  local row4 = {}\n  for _, v in ipairs(row3)\
    \ do\n    table.insert(row4, v)\n  end\n  table.sort(row4, function(a, b) return\
    \ a < b end)\n  table.sort(row4, function(a, b) return b < a end)\n  local row5\
    \ = {}\n  for _, v in ipairs(row4) do\n    table.insert(row5, v)\n  end\n  table.sort(row5,\
    \ function(a, b) return a < b end)\n  table.sort(row5, function(a, b) return b\
    \ < a end)\n  local row6 = {}\n  for _, v in ipairs(row5) do\n    table.insert(row6,\
    \ v)\n  end\n  table.sort(row6, function(a, b) return a < b end)\n  table.sort(row6,\
    \ function(a, b) return b < a end)\n  local row7 = {}\n  for _, v in ipairs(row6)\
    \ do\n    table.insert(row7, v)\n  end\n  table.sort(row7, function(a, b) return\
    \ a < b end)\n  table.sort(row7, function(a, b) return b < a end)\n  local row8\
    \ = {}\n  for _, v in ipairs(row7) do\n    table.insert(row8, v)\n  end\n  table.sort(row8,\
    \ function(a, b) return a < b end)\n  table.sort(row8, function(a, b) return b\
    \ < a end)\n  local row9 = {}\n  for _, v in ipairs(row8) do\n    table.insert(row9,\
    \ v)\n  end\n  table.sort(row9, function(a, b) return a < b end)\n  table.sort(row9,\
    \ function(a, b) return b < a end)\n  local row10 = {}\n  for _, v in ipairs(row9)\
    \ do\n    table.insert(row10, v)\n  end\n  table.sort(row10, function(a, b) return\
    \ a < b end)\n  table.sort(row10, function(a, b) return b < a end)\n  local row11\
    \ = {}", "    local row = {}\n    for i = 1, #lst do\n        local row_x = lst[i]\n\
    \        local row_y = lst[i - 1]\n        local row_x_len = #row_x\n        local\
    \ row_y_len = #row_y\n        if row_x_len == x then\n            table.insert(row,\
    \ { i, row_y_len - row_x_len })\n        end\n    end\n    table.sort(row)\n \
    \   table.sort(row, function(a, b) return b[1] - a[1] end)\n    return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ 0)\n    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { row = row }\n    for j = 1,\
    \ #lst[i] do\n      if lst[i][j] == x then\n        row[j] = { row = row, column\
    \ = j }\n      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    local rows = {}\n    for _, v2 in ipairs(v) do\n\
    \      if v2 == x then\n        table.insert(rows, {0, v2})\n      else\n    \
    \    table.insert(rows, {v2, 0})\n      end\n    end\n    table.sort(rows)\n \
    \   table.sort(rows)\n    table.insert(row, rows[1])\n  end\n  return row\nend",
  "    local row = {}\n    for i = 1, #lst do\n        local row_x = lst[i]\n    \
    \    for j = 1, #row_x do\n            if row_x[j] == x then\n               \
    \ table.insert(row, { i, j })\n            end\n        end\n    end\n    table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n    table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n    return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row2\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row2, v)\n  end\n  table.sort(row2,\
    \ function(a, b) return a < b end)\n  table.sort(row2, function(a, b) return b\
    \ < a end)\n  local row3 = {}\n  for _, v in ipairs(row2) do\n    table.insert(row3,\
    \ v)\n  end\n  table.sort(row3, function(a, b) return a < b end)\n  table.sort(row3,\
    \ function(a, b) return b < a end)\n  local row4 = {}\n  for _, v in ipairs(row3)\
    \ do\n    table.insert(row4, v)\n  end\n  table.sort(row4, function(a, b) return\
    \ a < b end)\n  table.sort(row4, function(a, b) return b < a end)\n  local row5\
    \ = {}\n  for _, v in ipairs(row4) do\n    table.insert(row5, v)\n  end\n  table.sort(row5,\
    \ function(a, b) return a < b end)\n  table.sort(row5, function(a, b) return b\
    \ < a end)\n  local row6 = {}\n  for _, v in ipairs(row5) do\n    table.insert(row6,\
    \ v)\n  end\n  table.sort(row6, function(a, b) return a < b end)\n  table.sort(row6,\
    \ function(a, b) return b < a end)\n  local row7 = {}\n  for _, v in ipairs(row6)\
    \ do\n    table.insert(row7, v)\n  end\n  table.sort(row7, function(a, b) return\
    \ a < b end)\n  table.sort(row7, function(a, b) return b < a end)\n  local row8\
    \ = {}\n  for _, v in ipairs(row7) do\n    table.insert(row8, v)\n  end\n  table.sort(row8,\
    \ function(a, b) return a < b end)\n  table.sort(row8, function(a, b) return b\
    \ < a end)\n  local row9 = {}\n  for _, v in ipairs(row8) do\n    table.insert(row9,\
    \ v)\n  end\n  table.sort(row9, function(a, b) return a < b end)\n  table.sort(row9,\
    \ function(a, b) return b < a end)\n  local row10 = {}\n  for _, v in ipairs(row9)\
    \ do\n    table.insert(row10, v)\n  end\n  table.sort(row10, function(a, b) return\
    \ a < b end)\n  table.sort(row10, function(a, b) return b < a end)\n  local row11\
    \ = {}", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for\
    \ j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row = row\n      else\n\
    \        row = row + 1\n      end\n    end\n  end\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] <= row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] <=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #", "  if\
    \ lst[x] == nil then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst\
    \ do\n    table.insert(row, i)\n  end\n  table.sort(row, function(a, b) return\
    \ a[a] < b[b] end)\n  table.sort(row, function(a, b) return a[a] > b[b] end)\n\
    \  table.sort(row, function(a, b) return a[a] < b[b] end)\n  table.sort(row, function(a,\
    \ b) return a[a] > b[b] end)\n  table.sort(row, function(a, b) return a[a] < b[b]\
    \ end)\n  table.sort(row, function(a, b) return a[a] > b[b] end)\n  table.sort(row,\
    \ function(a, b) return a[a] < b[b] end)\n  table.sort(row, function(a, b) return\
    \ a[a] > b[b] end)\n  table.sort(row, function(a, b) return a[a] < b[b] end)\n\
    \  table.sort(row, function(a, b) return a[a] > b[b] end)\n  table.sort(row, function(a,\
    \ b) return a[a] < b[b] end)\n  table.sort(row, function(a, b) return a[a] > b[b]\
    \ end)\n  table.sort(row, function(a, b) return a[a] < b[b] end)\n  table.sort(row,\
    \ function(a, b) return a[a] > b[b] end)\n  table.sort(row, function(a, b) return\
    \ a[a] < b[b] end)\n  table.sort(row, function(a, b) return a[a] > b[b] end)\n\
    \  table.sort(row, function(a, b) return a[a] < b[b] end)\n  table.sort(row, function(a,\
    \ b) return a[a] > b[b] end)\n  table.sort(row, function(a, b) return a[a] < b[b]\
    \ end)\n  table.sort(row, function(a, b) return a[a] > b[b] end)\n  table.sort(row,\
    \ function(a, b) return a[a] < b[b] end)\n  table.sort(row, function(a, b) return\
    \ a[a] > b[b] end)\n  table.sort(row, function(a, b) return a[a] < b[b] end)\n\
    \  table.sort(row, function(a, b) return a[a] > b[b] end)\n  table.sort(row, function(a,\
    \ b) return a[a] < b[b] end)\n  table.sort(row, function(a, b) return a[a] > b[b]\
    \ end)\n  table.sort(row, function(a, b) return a[a] < b[b] end)\n  table.sort(row,\
    \ function(a, b) return a[a] > b[b] end)\n  table.sort(row, function(a, b) return\
    \ a[a] < b[b] end)\n  table.sort(row, function(a, b) return a[a] > b[b] end)\n\
    \  table.sort(row, function(a, b) return a[a] < b[b] end)\n  table.sort(row, function(a,\
    \ b) return a[a] > b[b] ", "  if #lst == 0 then return {{}} end\n  local row =\
    \ {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n \
    \     if lst[i][j] == x then\n        row[j] = i\n        break\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[b] <> a[b] end)\n  table.sort(row,\
    \ function(a, b) return b[a] <> b[a] end)\n  return row\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n  \
    \    if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.", "  if x == 0 then\n    return {}\n  else\n    local row = {}\n    for\
    \ i = 1, #lst do\n      local y = lst[i][x]\n      if y ~= nil then\n        table.insert(row,\
    \ i, y)\n      end\n    end\n    table.sort(row, function(a, b) return a[2] >\
    \ b[2] end)\n    table.sort(row, function(a, b) return a[1] > b[1] end)\n    return\
    \ row\n  end\nend", "  local row = {}\n  for _, v in pairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a\
    \ end)\n  local rows = {}\n  for _, v in pairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  local results = {}\n  for _, v in pairs(rows) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a < b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a <= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a >= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a ~= b end)\n    table.insert(row, #row)\n    table.sort(row, ", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    ", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] > a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] == b[#b] end)\n  table.sort(row, function(a, b)\
    \ return b[#b] == a[#a] end)\n  table.sort(row, function(a, b) return a[#a] <=\
    \ b[#b] end)\n  table.sort(row, function(a, b) return b[#b] <= a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] > a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] == b[#b] end)\n  table.sort(row, function(a, b)\
    \ return b[#b] == a[#a] end)\n  table.sort(row, function(a, b) return a[#a] <=\
    \ b[#b] end)\n  table.sort(row, function(a, b) return b[#b] <= a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] > a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] == b[#b] end)\n  table.sort(row, function(a, b)\
    \ return b[#b] == a[#a] end)\n  table.sort(row, function(a, b) return a[#a] <=\
    \ b[#b] end)\n  table.sort(row, function(a, b) return ", "  if x == nil then return\
    \ {} end\n  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if\
    \ row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n    end\n\
    \  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for _, row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, x)\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b\
    \ - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v[1], y\
    \ = v[2]})\n  end\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local rows = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(rows, {i, j})\n      end\n    end\n    table.sort(rows)\n\
    \    table.sort(rows, function(a, b) return b[1] - a[1] end)\n    table.insert(row,\
    \ rows[1])\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = x - 1})\n  end\n  return rows\nend", "  local row = {}\n  for i\
    \ = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        row = { {i, j}, lst[i][j] }\n        break\n      end\n \
    \   end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b[1]\
    \ < a[1] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row2\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row2, v)\n  end\n  table.sort(row2,\
    \ function(a, b) return a < b end)\n  table.sort(row2, function(a, b) return b\
    \ < a end)\n  local row3 = {}\n  for _, v in ipairs(row2) do\n    table.insert(row3,\
    \ v)\n  end\n  table.sort(row3, function(a, b) return a < b end)\n  table.sort(row3,\
    \ function(a, b) return b < a end)\n  local row4 = {}\n  for _, v in ipairs(row3)\
    \ do\n    table.insert(row4, v)\n  end\n  table.sort(row4, function(a, b) return\
    \ a < b end)\n  table.sort(row4, function(a, b) return b < a end)\n  local row5\
    \ = {}\n  for _, v in ipairs(row4) do\n    table.insert(row5, v)\n  end\n  table.sort(row5,\
    \ function(a, b) return a < b end)\n  table.sort(row5, function(a, b) return b\
    \ < a end)\n  local row6 = {}\n  for _, v in ipairs(row5) do\n    table.insert(row6,\
    \ v)\n  end\n  table.sort(row6, function(a, b) return a < b end)\n  table.sort(row6,\
    \ function(a, b) return b < a end)\n  local row7 = {}\n  for _, v in ipairs(row6)\
    \ do\n    table.insert(row7, v)\n  end\n  table.sort(row7, function(a, b) return\
    \ a < b end)\n  table.sort(row7, function(a, b) return b < a end)\n  local row8\
    \ = {}\n  for _, v in ipairs(row7) do\n    table.insert(row8, v)\n  end\n  table.sort(row8,\
    \ function(a, b) return a < b end)\n  table.sort(row8, function(a, b) return b\
    \ < a end)\n  local row9 = {}\n  for _, v in ipairs(row8) do\n    table.insert(row9,\
    \ v)\n  end\n  table.sort(row9, function(a, b) return a < b end)\n  table.sort(row9,\
    \ function(a, b) return b < a end)\n  local row10 = {}\n  for _, v in ipairs(row9)\
    \ do\n    table.insert(row10, v)\n  end\n  table.sort(row10, function(a, b) return\
    \ a < b end)\n  table.sort(row10, function(a, b) return b < a end)\n  local row11\
    \ = {}", "  local row = {}\n  for i = 1, #lst do\n    local row = lst[i]\n   \
    \ if row[x] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[b] <=> a[b] end)\n  table.sort(row, function(a, b) return\
    \ a[b] <=> b[a] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[x + 1] > b[x + 1] end)\n  return row\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  table.sort(row, function(a, b) return a[x + 1] > b[x + 1] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row =\
    \ row\n      else\n        row = row..{lst[i][j], 0}\n      end\n    end\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ 0)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ - row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] - row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ - row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] - row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ - row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] - row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ - row", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return ", "  local row = {}\n \
    \ for _, row in ipairs(lst) do\n    local found = false\n    for _, v in ipairs(row)\
    \ do\n      if v == x then\n        found = true\n        break\n      end\n \
    \   end\n    if not found then\n      table.insert(row, x)\n    end\n  end\n \
    \ table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return a > b end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] < b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] ~= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] ~= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] ~= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] ~= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ ~= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] ~= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] ~= b[#row]\
    \ end)\n  table.sort(row, function", "    local row = {}\n    for i = 1, #lst\
    \ do\n        local row = {}\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(row, i)\n                table.insert(row,\
    \ j)\n            end\n        end\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b - a end)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, #row)\n  \
    \      table.insert(row, #row)\n        table.insert(row, #row)\n        table.insert(row,\
    \ #row)\n        table.insert(row, #row)\n        table.insert(row, ", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ 0)\n    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row = row\n      else\n        row\
    \ = row + 1\n      end\n    end\n  end\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return a\
    \ > b end)\n  local row_index = 1\n  local row_coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_coords, row_index)\n    row_index = row_index + 1\n\
    \  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local\
    \ coords = {}\n  for _, v in ipairs(row) do\n    table.insert(coords, {x = v,\
    \ y = #row})\n  end\n  table.sort(coords, function(a, b) return a.x < b.x end)\n\
    \  table.sort(coords, function(a, b) return b.x < a.x end)\n  table.sort(coords,\
    \ function(a, b) return a.y < b.y end)\n  table.sort(coords, function(a, b) return\
    \ b.y < a.y end)\n  return coords\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    local row_x = row[x]\n    local row_y = row[x+1]\n    if row_x ~= nil\
    \ then\n      table.insert(row, { x = row_x, y = row_y })\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(row, function(a, b) return\
    \ a.y < b.y end)\n  return row\nend", "  if x == 0 then\n    return {}\n  else\n\
    \    local row = {}\n    for i = 1, #lst do\n      local row = row\n      local\
    \ j = i - 1\n      while j > 0 and lst[j] == x do\n        row = { lst[j], lst[j\
    \ - 1] }\n        j = j - 1\n      end\n    end\n    return row\n  end\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  table.sort(rows,\
    \ function(a, b) return a.y < b.y end)\n  table.sort(rows, function(a, b) return\
    \ b.y < a.y end)\n  return rows\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row_x\
    \ = row[x]\n  local row_y = {}\n  for _, v in ipairs(row) do\n    if v == row_x\
    \ then\n      table.insert(row_y, v)\n    end\n  end\n  return row_y\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #", "  local row = {}\n  for _,\
    \ row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, x, row[x])\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n  return row\nend", "    local row =\
    \ {}\n    for _, v in ipairs(lst) do\n        table.insert(row, v)\n    end\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a[x - 1] < b[x\
    \ - 1] end)\n    return row\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] == x then\n      return row\n    end\n  end\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row = row\n      else\n        row\
    \ = row + 1\n      end\n    end\n  end\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n        break\n\
    \      end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1]\
    \ end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\n\
    end", "  if x == 0 then\n    return {}\n  end\n  local row = {}\n  for i = 1,\
    \ #lst do\n    local y = lst[i][x]\n    if y ~= nil then\n      table.insert(row,\
    \ y)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = lst[i]\n    if row[x] then\n      table.insert(row, x)\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n\
    \    for _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n  table.sort(row, function(a, b) return\
    \ b[2] < a[2] end)\n  table.sort(row, function(a, b) return a[3] < b[3] end)\n\
    \  table.sort(row, function(a, b) return b[3] < a[3] end)\n  table.sort(row, function(a,\
    \ b) return a[4] < b[4] end)\n  table.sort(row, function(a, b) return b[4] < a[4]\
    \ end)\n  table.sort(row, function(a, b) return a[5] < b[5] end)\n  table.sort(row,\
    \ function(a, b) return b[5] < a[5] end)\n  table.sort(row, function(a, b) return\
    \ a[6] < b[6] end)\n  table.sort(row, function(a, b) return b[6] < a[6] end)\n\
    \  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a,\
    \ b) return b[1] < a[1] end)\n  table.sort(row, function(a, b) return a[2] < b[2]\
    \ end)\n  table.sort(row, function(a, b) return b[2] < a[2] end)\n  table.sort(row,\
    \ function(a, b) return a[3] < b[3] end)\n  table.sort(row, function(a, b) return\
    \ b[3] < a[3] end)\n  table.sort(row, function(a, b) return a[4] < b[4] end)\n\
    \  table.sort(row, function(a, b) return b[4] < a[4] end)\n  table.sort(row, function(a,\
    \ b) return a[5] < b[5] end)\n  table.sort(row, function(a, b) return b[5] < a[5]\
    \ end)\n  table.sort(row, function(a, b) return a[6] < b[6] end)\n  table.sort(row,\
    \ function(a, b) return b[6] < a[6] end)\n  table.sort(row, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] < b[2] end)\n  table.sort(row, function(a,\
    \ b) return b[2] < a[2] end)\n  table.sort(row, function(a, b) return a[3] < b[3]\
    \ end)\n  table.sort(row, function(a, b) return b", "  local row = {}\n  for _,\
    \ row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, table.unpack(row[x]))\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    local row2 = {}\n    for _, v2 in ipairs(v)\
    \ do\n      if v2 == x then\n        row2 = {row2, v2}\n      else\n        row2\
    \ = {row2, v2}\n      end\n    end\n    table.insert(row, row2)\n  end\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[2] < b[2] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row_sorted\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted, v)\n  end\n\
    \  table.sort(row_sorted, function(a, b) return a < b end)\n  table.sort(row_sorted,\
    \ function(a, b) return b < a end)\n  local row_sorted = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted, v)\n  end\n  table.sort(row_sorted, function(a,\
    \ b) return a < b end)\n  table.sort(row_sorted, function(a, b) return b < a end)\n\
    \  local row_sorted = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted,\
    \ v)\n  end\n  table.sort(row_sorted, function(a, b) return a < b end)\n  table.sort(row_sorted,\
    \ function(a, b) return b < a end)\n  local row_sorted = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted, v)\n  end\n  table.sort(row_sorted, function(a,\
    \ b) return a < b end)\n  table.sort(row_sorted, function(a, b) return b < a end)\n\
    \  local row_sorted = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted,\
    \ v)\n  end\n  table.sort(row_sorted, function(a, b) return a < b end)\n  table.sort(row_sorted,\
    \ function(a, b) return b < a end)\n  local row_sorted = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted, v)\n  end\n  table.sort(row_sorted, function(a,\
    \ b) return a < b end)\n  table.sort(row_sorted, function(a, b) return b < a end)\n\
    \  local row_sorted = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted,\
    \ v)\n  end\n  table.sort(row_sorted, function(a, b) return a < b end)\n  table.sort(row_sorted,\
    \ function(a, b) return b < a end)\n  local row_sorted = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted, v)\n  end\n  table.sort(row_sorted, function(a,\
    \ b) return a < b end)\n  table.sort(row_sorted, function(a, b) return b < a end)\n\
    \  local row_sorted = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted,\
    \ v)\n", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n\
    \    for _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  return rows\nend", "  local row = {}\n \
    \ for i = 1, #lst do\n    local row = lst[i]\n    local row_x = row[x]\n    for\
    \ j = 1, #row do\n      row[j] = row_x\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b[a] <= b[b] end)\n  return row\nend", "  if x == 0 then\n\
    \    return {}\n  end\n  local row = {}\n  for _, v in ipairs(lst) do\n    if\
    \ v == x then\n      table.insert(row, 0)\n    else\n      table.insert(row, v)\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b\
    \ - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n   \
    \ table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, ", "  if x == 0 then\n\
    \    return {}\n  end\n  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ lst[i]\n    if row[x] == x then\n      table.insert(row, i)\n    end\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return a[b] <= a[b] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row_x = row[x]\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ b[1] < a[1] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row\n      else\n        row = row..{lst[i][j]}\n      end\n  \
    \  end\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local row2 = {}\n    for _, v2 in ipairs(v) do\n      if v2 == x then\n\
    \        table.insert(row2, {v, v2})\n      end\n    end\n    table.insert(row,\
    \ row2)\n  end\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        row = row\n      else\n        row = row..{lst[i][j],\
    \ 0}\n      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for\
    \ _, row in ipairs(lst) do\n    local row_x = row[x]\n    if row_x ~= nil then\n\
    \      table.insert(row, row_x, -row_x)\n    end\n  end\n  table.sort(row)\n \
    \ table.sort(row, function(a, b) return b[2] > a[2] end)\n  return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n\
    \  table.sort(row, function(a, b) return b[1] < a[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return b[2] > a[2]\
    \ end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row,\
    \ function(a, b) return b[1] < a[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  table.sort(row, function(a, b) return b[2] > a[2] end)\n\
    \  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a,\
    \ b) return b[1] < a[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  table.sort(row, function(a, b) return b[2] > a[2] end)\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ b[1] < a[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  table.sort(row, function(a, b) return b[2] > a[2] end)\n  table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1]\
    \ end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row,\
    \ function(a, b) return b[2] > a[2] end)\n  table.sort(row, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a,\
    \ b) return b[2] > a[2] end)\n  table.sort(row, function(a, b) return a[1] < b[1]\
    \ end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ b[2] > a[2] end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n\
    \  table.sort(row, function(a, b) return b[1] < a[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return b[2] > a[2]\
    \ end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local row2 = {}\n  for _, v in ipairs(row) do\n    table.insert(row2,\
    \ v)\n  end\n  table.sort(row2, function(a, b) return a < b end)\n  table.sort(row2,\
    \ function(a, b) return b < a end)\n  local row3 = {}\n  for _, v in ipairs(row2)\
    \ do\n    table.insert(row3, v)\n  end\n  table.sort(row3, function(a, b) return\
    \ a < b end)\n  table.sort(row3, function(a, b) return b < a end)\n  local row4\
    \ = {}\n  for _, v in ipairs(row3) do\n    table.insert(row4, v)\n  end\n  table.sort(row4,\
    \ function(a, b) return a < b end)\n  table.sort(row4, function(a, b) return b\
    \ < a end)\n  local row5 = {}\n  for _, v in ipairs(row4) do\n    table.insert(row5,\
    \ v)\n  end\n  table.sort(row5, function(a, b) return a < b end)\n  table.sort(row5,\
    \ function(a, b) return b < a end)\n  local row6 = {}\n  for _, v in ipairs(row5)\
    \ do\n    table.insert(row6, v)\n  end\n  table.sort(row6, function(a, b) return\
    \ a < b end)\n  table.sort(row6, function(a, b) return b < a end)\n  local row7\
    \ = {}\n  for _, v in ipairs(row6) do\n    table.insert(row7, v)\n  end\n  table.sort(row7,\
    \ function(a, b) return a < b end)\n  table.sort(row7, function(a, b) return b\
    \ < a end)\n  local row8 = {}\n  for _, v in ipairs(row7) do\n    table.insert(row8,\
    \ v)\n  end\n  table.sort(row8, function(a, b) return a < b end)\n  table.sort(row8,\
    \ function(a, b) return b < a end)\n  local row9 = {}\n  for _, v in ipairs(row8)\
    \ do\n    table.insert(row9, v)\n  end\n  table.sort(row9, function(a, b) return\
    \ a < b end)\n  table.sort(row9, function(a, b) return b < a end)\n  local row10\
    \ = {}\n  for _, v in ipairs(row9) do\n    table.insert(row10, v)\n  end\n  table.sort(row10,\
    \ function(a, b) return a < b end)\n  table.sort(row10, function(a, b) return\
    \ b < a end)\n  local row11 = {}", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return a > b end)\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v[1], y = v[2]})\n  end\n  return rows\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b)\n   \
    \   return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    ", "  local row = {}\n  for\
    \ _, row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, x)\n \
    \   end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b -\
    \ a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    if v == x then\n      table.insert(row, 0)\n    else\n      local row = row\n\
    \      for i = #row + 1, 1 do\n        table.insert(row, 0)\n      end\n     \
    \ table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j =\
    \ 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    ", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return a\
    \ > b end)\n  table.sort(row, function(a, b) return a[2] < b[2] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[0] < b[0] end)\n  table.sort(row, function(a,\
    \ b) return a[0] > b[0] end)\n  return row\nend", "    local row = {}\n    for\
    \ i = 1, #lst do\n        local row_x = lst[i]\n        for j = 1, #row_x do\n\
    \            if row_x[j] == x then\n                table.insert(row, { i, j })\n\
    \            end\n        end\n    end\n    table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n    table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \    return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  table.sort(row, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  local coords = {}\n  for _, v in ipairs(row) do\n    table.insert(coords,\
    \ {v[1], v[2]})\n  end\n  table.sort(coords, function(a, b) return a[1] < b[1]\
    \ end)\n  table.sort(coords, function(a, b) return a[1] > b[1] end)\n  table.sort(coords,\
    \ function(a, b) return a[2] < b[2] end)\n  table.sort(coords, function(a, b)\
    \ return a[2] > b[2] end)\n  local coord = {}\n  for _, v in ipairs(coords) do\n\
    \    table.insert(coord, {v[1], v[2]})\n  end\n  table.sort(coord, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(coord, function(a, b) return a[1] >\
    \ b[1] end)\n  table.sort(coord, function(a, b) return a[2] < b[2] end)\n  table.sort(coord,\
    \ function(a, b) return a[2] > b[2] end)\n  local rows = {}\n  for _, v in ipairs(coord)\
    \ do\n    table.insert(rows, v)\n  end\n  return rows\nend", "    local row =\
    \ {}\n    for _, v in ipairs(lst) do\n        table.insert(row, v)\n    end\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a[x - 1] < b[x\
    \ - 1] end)\n    return row\nend", "  local row = {}\n  for i = 1, #lst do\n \
    \   local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b > a end)\n  local rows = {}\n  for\
    \ _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[#rows]})\n \
    \ end\n  return rows\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return a > b end)\n  local row_x =\
    \ row[x]\n  local row_y = {}\n  for _, v in ipairs(row) do\n    if v == row_x\
    \ then\n      table.insert(row_y, v)\n    end\n  end\n  return row_y\nend", " \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return a > b end)\n  table.sort(row, function(a, b) return a[2] < b[2] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  local coords = {}\n\
    \  for _, v in ipairs(row) do\n    table.insert(coords, {v, #row})\n  end\n  table.sort(coords,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(coords, function(a, b)\
    \ return a[1] > b[1] end)\n  table.sort(coords, function(a, b) return a[2] < b[2]\
    \ end)\n  table.sort(coords, function(a, b) return a[2] > b[2] end)\n  local results\
    \ = {}\n  for _, v in ipairs(coords) do\n    table.insert(results, {v[1], v[2]})\n\
    \  end\n  return results\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return a > b end)\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row_x\
    \ = row[x]\n  table.sort(row, function(a, b) return a[b] <= row_x[b] end)\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local row_index = 1\n  local row_coords\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords, row_index)\n\
    \    row_index = row_index + 1\n  end\n  table.sort(row_coords, function(a, b)\
    \ return row_coords[a] < row_coords[b] end)\n  local row_coords = row_coords\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return\
    \ a - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n \
    \   table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row ", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        row[j] = {i, j, 1}\n      end\n    end\n\
    \    if #row > 0 then\n      table.insert(row, #row - 1)\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b)\n      return b[2] > a[2]\n    end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b)\n      return b[1] > a[1]\n  \
    \  end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a, b)\n\
    \      return b[2] > a[2]\n    end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b)\n      return b[1] > a[1]\n    end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b)\n      return b[2] > a[2]\n    end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b)\n      return\
    \ b[1] > a[1]\n    end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b)\n      return b[2] > a[2]\n    end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b)\n      return b[1] > a[1]\n    end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b)\n      return\
    \ b[2] > a[2]\n    end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b)\n      return b[1] > a[1]\n    end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b)\n      return b[2] > a[2]\n    end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b)\n      return\
    \ b[1] > a[1]\n    end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b)\n      return b[2] > a[2]\n    end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b)\n      return b[1] > a[1]\n    end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b)\n      return\
    \ b[2] > a[2]\n    end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b)\n      return b[1] > a[1]\n    end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b)\n      return b[2] > a[2]\n    end)\n\
    \    table.insert(row, #row - 1)\n    table.", "  local row = {}\n  for _, v in\
    \ ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return a > b end)\n \
    \ table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  local coords = {}\n  for _, v in ipairs(row) do\n\
    \    table.insert(coords, {x = v[1], y = v[2]})\n  end\n  table.sort(coords, function(a,\
    \ b) return a.x < b.x end)\n  table.sort(coords, function(a, b) return a.x > b.x\
    \ end)\n  table.sort(coords, function(a, b) return a.y < b.y end)\n  table.sort(coords,\
    \ function(a, b) return a.y > b.y end)\n  local ret = {}\n  for _, v in ipairs(coords)\
    \ do\n    table.insert(ret, v)\n  end\n  return ret\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_index = 1\n  local row_coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_coords, row_index)\n    row_index = row_index + 1\n\
    \  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ row = row\n      else\n        row = row + 1\n      end\n    end\n  end\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n   \
    \ for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n   \
    \ table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, ", "    local row = {}\n\
    \    for _, v in ipairs(lst) do\n        table.insert(row, v)\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return a[2] > b[2] end)\n    table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n    local coords = {}\n    for _, v\
    \ in ipairs(row) do\n        table.insert(coords, {v[1], v[2]})\n    end\n   \
    \ table.sort(coords, function(a, b) return a[1] < b[1] end)\n    table.sort(coords,\
    \ function(a, b) return a[2] > b[2] end)\n    local ret = {}\n    for _, v in\
    \ ipairs(coords) do\n        table.insert(ret, v)\n    end\n    return ret\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        break\n      else\n        row = row[j]\n\
    \      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for _, v\
    \ in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[x + 1] > b[x + 1] end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j =\
    \ 1, #lst[i] do\n      if lst[i][j] == x then\n        row[#row + 1] = { i, j\
    \ }\n      end\n    end\n    if #row > 0 then\n      table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n      table.sort(row, function(a, b) return a[2]\
    \ > b[2] end)\n      table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \      table.sort(row, function(a, b) return a[1] < b[1] end)\n      table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n      table.sort(row, function(a, b)\
    \ return a[1] > b[1] end)\n      table.sort(row, function(a, b) return a[2] >\
    \ b[2] end)\n      table.sort(row, function(a, b) return a[1] < b[1] end)\n  \
    \    table.sort(row, function(a, b) return a[2] < b[2] end)\n      table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n      table.sort(row, function(a, b)\
    \ return a[2] > b[2] end)\n      table.sort(row, function(a, b) return a[1] <\
    \ b[1] end)\n      table.sort(row, function(a, b) return a[2] < b[2] end)\n  \
    \    table.sort(row, function(a, b) return a[1] > b[1] end)\n      table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n      table.sort(row, function(a, b)\
    \ return a[1] < b[1] end)\n      table.sort(row, function(a, b) return a[2] <\
    \ b[2] end)\n      table.sort(row, function(a, b) return a[1] > b[1] end)\n  \
    \    table.sort(row, function(a, b) return a[2] > b[2] end)\n      table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n      table.sort(row, function(a, b)\
    \ return a[2] < b[2] end)\n      table.sort(row, function(a, b) return a[1] >\
    \ b[1] end)\n      table.sort(row, function(a, b) return a[2] > b[2] end)\n  \
    \    table.sort(row, function(a, b) return a[1] < b[1] end)\n      table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n      table.sort(row, function(a, b)\
    \ return a[1] > b[1] end)\n      table.sort(row, function(a, b) return a[2] >\
    \ b[2] end)\n      table.sort(row, function(a, b) return a[1] < b[1] end)\n  \
    \    table.sort(row, function(a, b) return a[2] < b[2] end)\n      table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n      table.sort(row, function(a, b)\
    \ return a[2] > b[2] end)\n      table.sort(row, function(a, b) return a[1] <\
    \ b[1] end)\n      table.sort(row, function(a, b) return a", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row, v)\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if\
    \ row_x[j] == x then\n        table.insert(row, { i, j })\n        break\n   \
    \   end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return a > b end)\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n\
    \  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] < b[2] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  table.sort(row, function(a, b) return a[3] < b[3] end)\n  table.sort(row,\
    \ function(a, b) return a[3] > b[3] end)\n  table.sort(row, function(a, b) return\
    \ a[4] < b[4] end)\n  table.sort(row, function(a, b) return a[4] > b[4] end)\n\
    \  table.sort(row, function(a, b) return a[5] < b[5] end)\n  table.sort(row, function(a,\
    \ b) return a[5] > b[5] end)\n  table.sort(row, function(a, b) return a[6] < b[6]\
    \ end)\n  table.sort(row, function(a, b) return a[6] > b[6] end)\n  table.sort(row,\
    \ function(a, b) return a[7] < b[7] end)\n  table.sort(row, function(a, b) return\
    \ a[7] > b[7] end)\n  table.sort(row, function(a, b) return a[8] < b[8] end)\n\
    \  table.sort(row, function(a, b) return a[8] > b[8] end)\n  table.sort(row, function(a,\
    \ b) return a[9] < b[9] end)\n  table.sort(row, function(a, b) return a[9] > b[9]\
    \ end)\n  table.sort(row, function(a, b) return a[10] < b[10] end)\n  table.sort(row,\
    \ function(a, b) return a[10] > b[10] end)\n  table.sort(row, function(a, b) return\
    \ a[11] < b[11] end)\n  table.sort(row, function(a, b) return a[11] > b[11] end)\n\
    \  table.sort(row, function(a, b) return a[12] < b[12] end)\n  table.sort(row,\
    \ function(a, b) return a[12] > b[12] end)\n  table.sort(row, function(a, b) return\
    \ a[13] < b[13] end)\n  table.sort(row, function(a, b) return a[13] > b[13] end)\n\
    \  table.sort(row, function(a, b) return a[14] < b[14] end)\n  table.sort(row,\
    \ function(a, b) return a[14] > b[14] end)\n  table.sort(row, function(a, b) return\
    \ a[15] < b[15] end)\n  table.sort(row, function(a, b) return a[15] > b[15] end)\n\
    \  table.sort(row, function(a, b) return a[16] < b[16", "  local row = {}\n  for\
    \ _, v in pairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local row_index = 1\n  local col_index = 1\n  local results = {}\n  for _, v\
    \ in pairs(row) do\n    while col_index <= x do\n      table.insert(results, {row_index,\
    \ col_index})\n      col_index = col_index + 1\n    end\n    row_index = row_index\
    \ + 1\n    col_index = 1\n  end\n  return results\nend", "  if #lst == 0 then\
    \ return {} end\n  local row = {}\n  for i = 1, #lst do\n    local row = lst[i]\n\
    \    if row[x] then\n      table.insert(row, x)\n      table.insert(row, #row\
    \ - 1)\n      table.insert(row, #row + 1)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for _, row in ipairs(lst) do\n    if row[x] then\n      break\n\
    \    end\n  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[j]\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local row_index = 1\n  local row_coords\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords, row_index)\n\
    \    row_index = row_index + 1\n  end\n  table.sort(row_coords, function(a, b)\
    \ return row_coords[a] < row_coords[b] end)\n  local row_coords = row_coords\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] < row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return a\
    \ > b end)\n  local row_index = 1\n  local row_coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_coords, row_index)\n    row_index = row_index + 1\n\
    \  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(row_coords, function(a, b) return row_coords[a] < row_coords[b]\
    \ end)\n  local row_coords = row_coords\n  local row_coords = {}\n  for _, v in\
    \ ipairs(row) do\n    table.insert(row_coords, v)\n  end\n  table.sort(row_coords,\
    \ function(a, b) return row_coords[a] > row_coords[b] end)\n  local row_coords\
    \ = row_coords\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ v)\n  end\n  table.sort(", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows = {}\n\
    \  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[#rows]})\n\
    \  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x < a.x end)\n  local coords = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(coords, {x = v.x, y = v.y})\n  end\n  table.sort(coords,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(coords, function(a, b) return\
    \ b.x < a.x end)\n  local ret = {}\n  for _, v in ipairs(coords) do\n    table.insert(ret,\
    \ v)\n  end\n  return ret\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b > a end)\n  return row\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  table.sort(row, function(a, b) return a[x - 1] < b[x - 1] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b > a\
    \ end)\n  local row_index = 1\n  local row_coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_coords, row_index)\n    row_index = row_index + 1\n\
    \  end\n  table.sort(row_coords, function(a, b) return b > a end)\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_coords\
    \ = row_coords:reverse()\n  local row_coords = row_coords:reverse()\n  local row_",
  "    local row = {}\n    for _, v in ipairs(lst) do\n        row[#row + 1] = v\n\
    \    end\n    table.sort(row, function(a, b) return a < b end)\n    table.sort(row,\
    \ function(a, b) return a > b end)\n    local rows = {}\n    for _, v in ipairs(row)\
    \ do\n        table.insert(rows, {x = v, y = #row})\n    end\n    table.sort(rows,\
    \ function(a, b) return a.x > b.x end)\n    table.sort(rows, function(a, b) return\
    \ a.x < b.x end)\n    local coords = {}\n    for _, v in ipairs(rows) do\n   \
    \     table.insert(coords, {x = v.x, y = v.y})\n    end\n    table.sort(coords,\
    \ function(a, b) return a.y > b.y end)\n    table.sort(coords, function(a, b)\
    \ return a.y < b.y end)\n    local results = {}\n    for _, v in ipairs(coords)\
    \ do\n        table.insert(results, {x = v.x, y = v.y})\n    end\n    return results\n\
    end", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n\
    \  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  table.sort(row, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  local row_x = row[x]\n  local row_y = row[x+1]\n  local\
    \ row_z = row[x+2]\n  local row_w = row[x+3]\n  local row_v = row[x+4]\n  local\
    \ row_u = row[x+5]\n  local row_w = row[x+6]\n  local row_x = row[x+7]\n  local\
    \ row_y = row[x+8]\n  local row_z = row[x+9]\n  local row_v = row[x+10]\n  local\
    \ row_u = row[x+11]\n  local row_w = row[x+12]\n  local row_x = row[x+13]\n  local\
    \ row_y = row[x+14]\n  local row_z = row[x+15]\n  local row_v = row[x+16]\n  local\
    \ row_u = row[x+17]\n  local row_w = row[x+18]\n  local row_x = row[x+19]\n  local\
    \ row_y = row[x+20]\n  local row_z = row[x+21]\n  local row_v = row[x+22]\n  local\
    \ row_u = row[x+23]\n  local row_w = row[x+24]\n  local row_x = row[x+25]\n  local\
    \ row_y = row[x+26]\n  local row_z = row[x+27]\n  local row_v = row[x+28]\n  local\
    \ row_u = row[x+29]\n  local row_w = row[x+30]\n  local row_x = row[x+31]\n  local\
    \ row_y = row[x+32]\n  local row_z = row[x+33]\n  local row_v = row[x+34]\n  local\
    \ row_u = row[x+35]\n  local row_w = row[x+36]\n  local row_x = row[x+37]\n  local\
    \ row_y = row[x+38]\n  local row_z = row[x+39]\n  local row_v = row[x+40]\n  local\
    \ row_u = row[x+41]\n  local row_"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
