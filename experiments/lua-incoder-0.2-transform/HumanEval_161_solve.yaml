name: HumanEval_161_solve
language: lua
prompt: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string\
  \ contains no letters, reverse the string.\n-- The function should return the resulted\
  \ string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n--\
  \ 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
  \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
  \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
  \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
  \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i,v in ipairs(s) do\n        if v:match('^[a-zA-Z]')\
    \ then\n            t[#t+1] = v:lower()\n        else\n            t[#t+1] = v\n\
    \        end\n    end\n    table.sort(t)\n    local s = ''\n    for i,v in ipairs(t)\
    \ do\n        if i ~= #t then\n            s = s .. v\n        else\n        \
    \    s = s .. v\n        end\n    end\n    return s\nend", "    local ret = \"\
    \"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n         \
    \   ret = string.sub(s,i,i)\n        else\n            ret = string.sub(s,i,#s)\n\
    \        end\n    end\n    return ret\nend", "  local result = \"\"\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n      result = string.sub(s,i,i)\n\
    \    else\n      result = string.sub(s,i,#s)\n    end\n  end\n  return result\n\
    end", "  local s = string.lower(s)\n  local len = string.len(s)\n  local i = 0\n\
    \  while i < len do\n    if string.sub(s,i,i) ~= nil then\n      local c = string.sub(s,i,i)\n\
    \      if string.sub(c,1,1) ~= nil then\n        local t = string.sub(c,1,1)\n\
    \        string.sub(c,1,1) = string.sub(c,2,2)\n        string.sub(c,2,2) = t\n\
    \      else\n        string.sub(c,1,1) = string.sub(c,2,2)\n        string.sub(c,2,2)\
    \ = string.sub(c,3,3)\n        string.sub(c,3,3) = string.sub(c,1,1)\n      end\n\
    \    end\n    i = i + 1\n  end\n  return s\nend", "  local result = \"\"\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      if string.sub(s,i,i)\
    \ ~= string.sub(s,i,i) then\n        result = string.sub(s,i,i)..result\n    \
    \  else\n        result = string.sub(s,i,i)..result\n      end\n    else\n   \
    \   result = string.sub(s,i,i)..result\n    end\n  end\n  return result\nend",
  "    local new_s = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil\
    \ then\n            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n         \
    \       new_s = string.sub(s,i,i)\n            else\n                new_s = string.upper(string.sub(s,i,i))\n\
    \            end\n        else\n            new_s = string.sub(s,i,i)\n      \
    \  end\n    end\n    return new_s\nend", "  local result = \"\"\n  for i = 1,\
    \ #s do\n    local c = string.sub(s,i,i)\n    if string.find(string.char(c),\"\
    a\") then\n      c = string.upper(c)\n    elseif string.find(string.char(c),\"\
    A\") then\n      c = string.lower(c)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend", "  local s = string.lower(s)\n  local t = {}\n  for i\
    \ = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      table.insert(t,string.upper(string.sub(s,i,i)))\n\
    \    else\n      table.insert(t,string.lower(string.sub(s,i,i)))\n    end\n  end\n\
    \  return table.concat(t, \"\")\nend", "  s = string.lower(s)\n  local new_s =\
    \ ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      new_s =\
    \ string.sub(s,i,i) + new_s\n    else\n      new_s = string.sub(s,i,i) + new_s\n\
    \    end\n  end\n  return new_s\nend", "    local s = string.lower(s)\n    local\
    \ new_s = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            new_s = new_s .. c\n\
    \        else\n            new_s = new_s .. string.sub(s,i,i)\n        end\n \
    \   end\n    return new_s\nend", "    local result = \"\"\n    for i = 1, #s do\n\
    \        if string.sub(s,i,i) ~= \"\" then\n            local char = string.sub(s,i,i)\n\
    \            if string.sub(char,1,1) ~= \"\" then\n                local lower\
    \ = string.lower(char)\n                local upper = string.upper(char)\n   \
    \             if lower ~= upper then\n                    result = result .. upper\n\
    \                else\n                    result = result .. lower\n        \
    \        end\n            else\n                result = result .. char\n    \
    \        end\n        end\n    end\n    return result\nend", "    local str =\
    \ ''\n    for i=1,#s do\n        if string.sub(s,i,i) ~= nil then\n          \
    \  str = str .. string.sub(s,i,i)\n        else\n            str = str .. string.sub(s,i,#s)\n\
    \        end\n    end\n    return str\nend", "  local result = \"\"\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      result = string.sub(s,i,i)\n\
    \    else\n      result = string.sub(s,i,#s)\n    end\n  end\n  return result\n\
    end", "  local result = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(string.char(c),'a') then\n      result = string.gsub(string.gsub(c,'a','A'),'b','B')\n\
    \    elseif string.find(string.char(c),'b') then\n      result = string.gsub(string.gsub(c,'b','B'),'a','A')\n\
    \    else\n      result = c\n    end\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      result\
    \ = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #s do\n  \
    \  if string.sub(s,i,i) ~= nil then\n      if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n        result = string.sub(s,i,i)\n      else\n        result = string.sub(s,i,i):lower()\
    \ + result\n      end\n    else\n      result = string.sub(s,i,i):lower() + result\n\
    \    end\n  end\n  return result\nend", "    local result = \"\"\n    for i =\
    \ 1, #s do\n        local char = string.sub(s,i,i)\n        if char:match(\"^[%aA]$\"\
    ) then\n            char = string.upper(char)\n        else\n            char\
    \ = string.lower(char)\n        end\n        result = result .. char\n    end\n\
    \    return result\nend", "  local result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= nil then\n      result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend", "  local result = ''\n  for i = 1, #s\
    \ do\n    if string.sub(s,i,i) ~= nil then\n      local char = string.sub(s,i,i)\n\
    \      if string.sub(s,i,i) ~= char then\n        char = string.upper(char)\n\
    \      else\n        char = string.lower(char)\n      end\n      result = result\
    \ .. char\n    end\n  end\n  return result\nend", "  local function helper(s)\n\
    \    local t = {}\n    for i = 1, #s do\n      local c = string.sub(s,i,i)\n \
    \     if string.find(string.chars(),c) then\n        table.insert(t,string.upper(c))\n\
    \      else\n        table.insert(t,c)\n      end\n    end\n    return table.concat(t,\
    \ \"\")\n  end\n  return helper(s)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
