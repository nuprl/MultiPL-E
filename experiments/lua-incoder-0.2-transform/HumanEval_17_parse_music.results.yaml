language: lua
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local music_notes = {}\n  local music_beats = {}\n\
    \  local music_note_count = 0\n  local music_beat_count = 0\n  local music_note_last_beat\
    \ = 0\n  local music_beat_last_note = 0\n  local music_note_last_note = 0\n  local\
    \ music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat\
    \ = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local\
    \ music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note\
    \ = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local\
    \ music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat\
    \ = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local\
    \ music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note\
    \ = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local\
    \ music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat\
    \ = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local\
    \ music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note\
    \ = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local\
    \ music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat\
    \ = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local\
    \ music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note\
    \ = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local\
    \ music_beat_last_beat = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat\
    \ = 0\n  local music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local\
    \ music_note_last_note = 0\n  local music_beat_last_beat = 0\n  local music_note_last_note\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo1tgmuwp.lua:77: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local music_notes = {}\n  local last_note = nil\n\
    \  local last_beat = 0\n  for i = 1, #music_string do\n    local note = music_string[i]\n\
    \    if note == '.' then\n      last_beat = last_beat + 1\n    elseif note ==\
    \ 'o' then\n      music_notes[#music_notes+1] = last_beat\n      last_beat = 0\n\
    \    elseif note == '|' then\n      last_beat = last_beat + 1\n    else\n    \
    \  last_beat = 0\n    end\n    last_note = note\n  end\n  music_notes[#music_notes+1]\
    \ = last_beat\n  return music_notes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig_0pqkf.lua:35:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpig_0pqkf.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    local last_note = nil\n\
    \    local last_beat = 0\n    for c in music_string:gmatch(\"%c\") do\n      \
    \  if c == '.' then\n            notes[#notes+1] = last_beat\n            last_beat\
    \ = 0\n        elseif c == 'o' then\n            last_note = last_note or 1\n\
    \            last_beat = last_beat * last_note\n        elseif c == '|' then\n\
    \            last_note = last_note or 2\n            last_beat = last_beat * last_note\n\
    \        else\n            last_note = nil\n            last_beat = 0\n      \
    \  end\n    end\n    notes[#notes+1] = last_beat\n    return notes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28296h8d.lua:36:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmp28296h8d.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_notes = {}\n    local last_note =\
    \ nil\n    local last_beat = 0\n    local last_duration = 0\n    local last_duration_in_beats\
    \ = 0\n    local last_duration_in_beats_after_last_note = 0\n    local last_duration_in_beats_after_last_note_in_beats\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note_in_beats_after_last_note\
    \ = 0\n    local last_duration\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvrnkze41.lua:46: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  music_string = music_string:gsub('[^o|.|]', '')\n\
    \  local notes = {}\n  for i = 1, #music_string do\n    local note = music_string:sub(i,\
    \ i)\n    if note == 'o' then\n      notes[#notes+1] = 4\n    elseif note == 'o|'\
    \ then\n      notes[#notes+1] = 2\n    elseif note == '.|' then\n      notes[#notes+1]\
    \ = 1\n    end\n  end\n  return notes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5u245n9.lua:31:\
    \ expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpe5u245n9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local notes = {}\n  local note_count = 0\n  local\
    \ current_note = ''\n  local current_beat = 0\n  for i = 1, #music_string do\n\
    \    if music_string[i] == '.' then\n      note_count = note_count + 1\n     \
    \ notes[note_count] = current_beat\n      current_note = ''\n      current_beat\
    \ = 0\n    elseif music_string[i] == 'o' then\n      note_count = note_count +\
    \ 1\n      notes[note_count] = current_beat\n      current_note = music_string[i]\n\
    \      current_beat = 0\n    elseif music_string[i] == '|' then\n      note_count\
    \ = note_count + 1\n      notes[note_count] = current_beat\n      current_note\
    \ = music_string[i]\n      current_beat = 0\n    elseif music_string[i] == 'o|'\
    \ then\n      note_count = note_count + 1\n      notes[note_count] = current_beat\n\
    \      current_note = music_string[i]\n      current_beat = 1\n    else\n    \
    \  current_note = music_string[i]\n      current_beat = current_beat + 1\n   \
    \ end\n  end\n  return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyolvwakm.lua:48:\
    \ expected: {4, 4, 4, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpyolvwakm.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_notes = {}\n    local music_notes_length\
    \ = 0\n    local music_notes_index = 0\n    local music_notes_length_index = 0\n\
    \    local music_notes_length_index2 = 0\n    local music_notes_length_index3\
    \ = 0\n    local music_notes_length_index4 = 0\n    local music_notes_length_index5\
    \ = 0\n    local music_notes_length_index6 = 0\n    local music_notes_length_index7\
    \ = 0\n    local music_notes_length_index8 = 0\n    local music_notes_length_index9\
    \ = 0\n    local music_notes_length_index10 = 0\n    local music_notes_length_index11\
    \ = 0\n    local music_notes_length_index12 = 0\n    local music_notes_length_index13\
    \ = 0\n    local music_notes_length_index14 = 0\n    local music_notes_length_index15\
    \ = 0\n    local music_notes_length_index16 = 0\n    local music_notes_length_index17\
    \ = 0\n    local music_notes_length_index18 = 0\n    local music_notes_length_index19\
    \ = 0\n    local music_notes_length_index20 = 0\n    local music_notes_length_index21\
    \ = 0\n    local music_notes_length_index22 = 0\n    local music_notes_length_index23\
    \ = 0\n    local music_notes_length_index24 = 0\n    local music_notes_length_index25\
    \ = 0\n    local music_notes_length_index26 = 0\n    local music_notes_length_index27\
    \ = 0\n    local music_notes_length_index28 = 0\n    local music_notes_length_index29\
    \ = 0\n    local music_notes_length_index30 = 0\n    local music_notes_length_index31\
    \ = 0\n    local music_notes_length_index32 = 0\n    local music_notes_length_index33\
    \ = 0\n    local music_notes_length_index34 = 0\n    local music_notes_length_index35\
    \ = 0\n    local music_notes_length_index36 = 0\n    local music_notes_length_index37\
    \ = 0\n    local music_notes_length_index38 = 0\n    local music_notes_length_index39\
    \ = 0\n    local music_notes_length_index40 = 0\n    local music_notes_length_index41\
    \ = 0\n    local music_notes_length_index42 = 0\n    local music_notes_length_index43\
    \ = 0\n    local music_notes_length_index44 = 0\n    local music_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjck7gqib.lua:70: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    local last_note = nil\n\
    \    local last_beat = 0\n    for note in music_string:gmatch(\"%w+\") do\n  \
    \      if note == \"o\" then\n            notes[#notes+1] = 4\n            last_beat\
    \ = 0\n        elseif note == \"o|\" then\n            notes[#notes+1] = 2\n \
    \           last_beat = 0\n        elseif note == \".|\" then\n            notes[#notes+1]\
    \ = 1\n            last_beat = 0\n        else\n            local beats = tonumber(note)\n\
    \            if beats > last_beat then\n                notes[#notes+1] = beats\
    \ - last_beat\n            end\n            last_beat = beats\n            last_note\
    \ = note\n        end\n    end\n    return notes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth08q0og.lua:41:\
    \ expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpth08q0og.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  music_string = music_string or 'o o| .| o| o| .|\
    \ .| .| .| o o'\n  local music_notes = {}\n  local note_count = 0\n  local last_note\
    \ = ''\n  for i = 1, #music_string do\n    local music_note = music_string[i]\n\
    \    if music_note == '.' then\n      note_count = note_count + 1\n    elseif\
    \ music_note == 'o' then\n      note_count = note_count + 1\n      music_notes[note_count]\
    \ = note_count\n      note_count = 0\n    elseif music_note == '|' then\n    \
    \  note_count = note_count + 1\n      music_notes[note_count] = note_count\n \
    \     note_count = 0\n    else\n      music_notes[note_count] = music_notes[note_count]\
    \ + 1\n    end\n    if music_note ~= '.' then\n      last_note = music_note\n\
    \    end\n  end\n  return music_notes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5tjk7yce.lua:28:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp5tjk7yce.lua:28: in function 'candidate'\n\t/tmp/tmp5tjk7yce.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    local last_note = ''\n\
    \    local last_beat = 0\n    local last_beats_count = 0\n    for c in music_string\
    \ do\n        if c == '.' then\n            notes[#notes+1] = last_beats_count\n\
    \            last_beats_count = 0\n        elseif c == 'o' then\n            last_note\
    \ = last_note .. '|'\n        elseif c == '|' then\n            last_beat = last_beat\
    \ + 1\n            last_beats_count = last_beats_count+1\n        else\n     \
    \       last_beat = last_beat + 1\n            last_beats_count = last_beats_count+1\n\
    \        end\n    end\n    notes[#notes+1] = last_beats_count\n    return notes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgf2ds719.lua:15:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpgf2ds719.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpgf2ds719.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_notes = {}\n    local last_note =\
    \ ''\n    local last_beat = 0\n    for note in music_string:gmatch('([^|.]+)(%.?$)')\
    \ do\n        if note == '.' then\n            music_notes[#music_notes+1] = 1\n\
    \        elseif note == 'o' then\n            music_notes[#music_notes+1] = 4\n\
    \        elseif note == 'o|' then\n            music_notes[#music_notes+1] = 2\n\
    \        else\n            music_notes[#music_notes+1] = tonumber(note)\n    \
    \    end\n        last_note = note\n        last_beat = #music_notes\n    end\n\
    \    return music_notes, last_beat\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8340ptr_.lua:34:\
    \ expected: {4, 4, 4, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp8340ptr_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local notes = {}\n  local last_note = ''\n  local\
    \ last_beat = 0\n  for i = 1, #music_string do\n    local char = music_string[i]\n\
    \    if char == '.' then\n      notes[#notes+1] = last_beat\n      last_beat =\
    \ 0\n    elseif char == 'o' then\n      notes[#notes+1] = last_beat\n      last_beat\
    \ = 0\n      last_note = char\n    elseif char == '|' then\n      last_beat =\
    \ last_beat + 1\n    else\n      last_beat = 0\n    end\n  end\n  notes[#notes+1]\
    \ = last_beat\n  return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpul21x41y.lua:36:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpul21x41y.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_notes = {}\n    local music_notes_length\
    \ = 0\n    local music_notes_index = 0\n    local music_notes_last_index = 0\n\
    \    local music_notes_last_beat = 0\n    local music_notes_last_note = 0\n  \
    \  local music_notes_last_note_length = 0\n    local music_notes_last_note_length_index\
    \ = 0\n    local music_notes_last_note_length_index2 = 0\n    local music_notes_last_note_length_index3\
    \ = 0\n    local music_notes_last_note_length_index4 = 0\n    local music_notes_last_note_length_index5\
    \ = 0\n    local music_notes_last_note_length_index6 = 0\n    local music_notes_last_note_length_index7\
    \ = 0\n    local music_notes_last_note_length_index8 = 0\n    local music_notes_last_note_length_index9\
    \ = 0\n    local music_notes_last_note_length_index10 = 0\n    local music_notes_last_note_length_index11\
    \ = 0\n    local music_notes_last_note_length_index12 = 0\n    local music_notes_last_note_length_index13\
    \ = 0\n    local music_notes_last_note_length_index14 = 0\n    local music_notes_last_note_length_index15\
    \ = 0\n    local music_notes_last_note_length_index16 = 0\n    local music_notes_last_note_length_index17\
    \ = 0\n    local music_notes_last_note_length_index18 = 0\n    local music_notes_last_note_length_index19\
    \ = 0\n    local music_notes_last_note_length_index20 = 0\n    local music_notes_last_note_length_index21\
    \ = 0\n    local music_notes_last_note_length_index22 = 0\n    local music_notes_last_note_length_index23\
    \ = 0\n    local music_notes_last_note_length_index24 = 0\n    local music_notes_last_note_length_index25\
    \ = 0\n    local music_notes_last_note_length_index26 = 0\n    local music_notes_last_note_length_index27\
    \ = 0\n    local music_notes_last_note_length_index28 = 0\n    local music_notes_last_note_length_index29\
    \ = 0\n    local music_notes_last_note_length_index30 = 0\n    local music_notes_last_note_length_index31\
    \ = 0\n    local music_notes_last_note_length_index32 = 0\n    local music_notes_last_note_length_index33\
    \ = 0\n    local music_notes_last_note_length_index34 = 0\n    local music_note\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp85s3ycg0.lua:64: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    local last_note = ''\n\
    \    local last_beat = 0\n    for c in music_string:gmatch(\"%c\") do\n      \
    \  if c == '.' then\n            notes[#notes+1] = last_beat\n            last_beat\
    \ = 0\n        elseif c == 'o' then\n            last_note = last_note .. c\n\
    \        elseif c == '|' then\n            last_note = last_note .. c\n      \
    \  else\n            last_beat = last_beat + 1\n            last_note = last_note\
    \ .. c\n        end\n    end\n    notes[#notes+1] = last_beat\n    return notes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvznk6zlo.lua:34:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpvznk6zlo.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    music_string = music_string:gsub('\\s', '')\n\
    \    local music_notes = {}\n    local music_notes_length = 0\n    local music_notes_index\
    \ = 0\n    local music_notes_length = 0\n    local music_notes_index = 0\n   \
    \ local music_notes_length = 0\n    local music_notes_index = 0\n    local music_notes_length\
    \ = 0\n    local music_notes_index = 0\n    local music_notes_length = 0\n   \
    \ local music_notes_index = 0\n    local music_notes_length = 0\n    local music_notes_index\
    \ = 0\n    local music_notes_length = 0\n    local music_notes_index = 0\n   \
    \ local music_notes_length = 0\n    local music_notes_index = 0\n    local music_notes_length\
    \ = 0\n    local music_notes_index = 0\n    local music_notes_length = 0\n   \
    \ local music_notes_index = 0\n    local music_notes_length = 0\n    local music_notes_index\
    \ = 0\n    local music_notes_length = 0\n    local music_notes_index = 0\n   \
    \ local music_notes_length = 0\n    local music_notes_index = 0\n    local music_notes_length\
    \ = 0\n    local music_notes_index = 0\n    local music_notes_length = 0\n   \
    \ local music_notes_index = 0\n    local music_notes_length = 0\n    local music_notes_index\
    \ = 0\n    local music_notes_length = 0\n    local music_notes_index = 0\n   \
    \ local music_notes_length = 0\n    local music_notes_index = 0\n    local music_notes_length\
    \ = 0\n    local music_notes_index = 0\n    local music_notes_length = 0\n   \
    \ local music_notes_index = 0\n    local music_notes_length = 0\n    local music_notes_index\
    \ = 0\n    local music_notes_length = 0\n    local music_notes_index = 0\n   \
    \ local music_notes_length = 0\n    local music_notes_index = 0\n    local music_notes_length\
    \ = 0\n    local music_notes_index = 0\n    local music_notes_length = 0\n   \
    \ local music_notes_index = 0\n    local music_notes_length = 0\n    local music_notes_index\
    \ = 0\n    local music_notes_length = 0\n    local music_notes_index = 0\n   \
    \ local music_note\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpje9xho2a.lua:79: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local music_notes = {}\n  local last_note = nil\n\
    \  local last_beat = 0\n  for i = 1, #music_string do\n    local char = music_string[i]\n\
    \    if char == 'o' then\n      music_notes[#music_notes+1] = #music_notes\n \
    \     last_note = #music_notes\n      last_beat = 0\n    elseif char == '|' then\n\
    \      music_notes[#music_notes+1] = #music_notes\n      last_note = #music_notes\n\
    \      last_beat = 0\n    elseif char == '.' then\n      music_notes[#music_notes+1]\
    \ = #music_notes\n      last_note = #music_notes\n      last_beat = 0\n    elseif\
    \ char == ' ' then\n      music_notes[#music_notes+1] = #music_notes\n      last_note\
    \ = #music_notes\n      last_beat = 0\n    elseif char == '.' then\n      music_notes[#music_notes+1]\
    \ = #music_notes\n      last_note = #music_notes\n      last_beat = 0\n    elseif\
    \ char == '.' then\n      music_notes[#music_notes+1] = #music_notes\n      last_note\
    \ = #music_notes\n      last_beat = 0\n    elseif char == '.' then\n      music_notes[#music_notes+1]\
    \ = #music_notes\n      last_note = #music_notes\n      last_beat = 0\n    elseif\
    \ char == '.' then\n      music_notes[#music_notes+1] = #music_notes\n      last_note\
    \ = #music_notes\n      last_beat = 0\n    elseif char == '.' then\n      music_notes[#music_notes+1]\
    \ = #music_notes\n      last_note = #music_notes\n      last_beat = 0\n    elseif\
    \ char == '.' then\n      music_notes[#music_notes+1] = #music_notes\n      last_note\
    \ = #music_notes\n      last_beat = 0\n    elseif char == '.' then\n      music_notes[#music_notes+1]\
    \ = #music_notes\n      last_note = #music_notes\n      last_beat = 0\n    elseif\
    \ char == '.' then\n      music_notes[#music_notes+1] = #music_notes\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_6ebsy71.lua:73: ''end'' expected (to close ''if'' at line
    16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_notes = {}\n    local note_count\
    \ = 0\n    local last_note = nil\n    local last_beat = 0\n    for note in music_string:gmatch(\"\
    %w+\") do\n        -- If note is different from last note, add note to music_notes\n\
    \        if note ~= last_note then\n            music_notes[note_count] = note_count\n\
    \            note_count = note_count + 1\n        end\n        -- If note is the\
    \ same as the last note, add beat to last note\n        if note == last_note then\n\
    \            last_beat = last_beat + 1\n        end\n        last_note = note\n\
    \    end\n    -- Add last note to music_notes\n    music_notes[note_count] = note_count\n\
    \    return music_notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9orwcbsx.lua:35:\
    \ expected: {}\nactual: {0=0}\nstack traceback:\n\t/tmp/tmp9orwcbsx.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    local last_note = nil\n\
    \    local last_beat = 0\n    for note in music_string:gmatch(\"%w+\") do\n  \
    \      if note == \".\" then\n            notes[#notes + 1] = last_beat\n    \
    \        last_beat = 0\n        elseif note == \"o\" then\n            last_note\
    \ = note\n            last_beat = 4\n        elseif note == \"o|\" then\n    \
    \        last_note = note\n            last_beat = 2\n        elseif note == \"\
    .|\" then\n            last_note = note\n            last_beat = 1\n        else\n\
    \            last_beat = last_beat * 12 + tonumber(note)\n        end\n    end\n\
    \    notes[#notes + 1] = last_beat\n    return notes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe71bp4m5.lua:38:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpe71bp4m5.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    local last_note = ''\n\
    \    local last_beat = 0\n    for c in music_string:gmatch('.') do\n        if\
    \ c == 'o' then\n            notes[#notes+1] = last_beat\n            last_beat\
    \ = 0\n        elseif c == 'o|' then\n            notes[#notes+1] = last_beat\n\
    \            last_beat = 0\n            last_note = 'o'\n        elseif c == '.|'\
    \ then\n            notes[#notes+1] = last_beat\n            last_beat = 0\n \
    \           last_note = '.'\n        else\n            last_beat = last_beat +\
    \ 1\n            last_note = c\n        end\n    end\n    notes[#notes+1] = last_beat\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm477lu0u.lua:38:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpm477lu0u.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_notes = {}\n    local note_count\
    \ = 0\n    local last_note = ''\n    local last_beat = 0\n    for note in music_string:gmatch('%w+')\
    \ do\n        if note == '.' then\n            note_count = note_count + 1\n \
    \       elseif note == 'o' then\n            note_count = note_count + 1\n   \
    \         last_note = note\n            last_beat = note_count * 4\n        elseif\
    \ note == 'o|' then\n            note_count = note_count + 1\n            last_note\
    \ = note\n            last_beat = note_count * 2\n        elseif note == '.|'\
    \ then\n            note_count = note_count + 1\n            last_note = note\n\
    \            last_beat = 1\n        else\n            note_count = note_count\
    \ + 1\n        end\n        music_notes[note_count] = last_beat\n    end\n   \
    \ return music_notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru2mvk1h.lua:42:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 8, 12, 16}\nstack traceback:\n\t/tmp/tmpru2mvk1h.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
