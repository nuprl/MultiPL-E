name: HumanEval_110_exchange
language: lua
prompt: "-- In this problem, you will implement a function that takes two lists of\
  \ numbers,\n-- and determines whether it is possible to perform an exchange of elements\n\
  -- between them to make lst1 a list of only even numbers.\n-- There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n-- If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n-- all the elements of\
  \ lst1 to be even, return \"YES\".\n-- Otherwise, return \"NO\".\n-- For example:\n\
  -- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n-- >>> exchange({1, 2, 3,\
  \ 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the input lists will be non-empty.\n\
  local function exchange(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2,\
  \ 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n\
  \    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
  \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
  \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Base case: if the lists are empty, return \"NO\".\n  if lst1 ==\
    \ nil or lst2 == nil then\n    return 'NO'\n  end", "  local even = #lst1 ~= #lst2\
    \ and #lst1 ~= 0\n  if even then\n    for i = 1, #lst1 do\n      local j = 1\n\
    \      while j < #lst2 do\n        if lst1[i] == lst2[j] then\n          lst1[i]\
    \ = lst1[j]\n          lst1[j] = lst2[i]\n          lst2[i] = lst2[j]\n      \
    \    lst2[j] = lst1[i]\n          j = j + 1\n        else\n          j = j + 1\n\
    \        end\n      end\n    end\n  end\n  return even\nend", "  -- Your code\
    \ here\nend", "  -- Base case\n  if lst1 == nil or lst2 == nil then\n    return\
    \ nil\n  end", "  -- Your code here\nend", "  -- Base case: lst1 and lst2 are\
    \ both empty.\n  if lst1 == nil or lst2 == nil then\n    return 'NO'\n  end",
  "  local even = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n    \
    \  table.insert(even, v)\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if\
    \ v not in even then\n      return false\n    end\n  end\n  return true\nend",
  "  -- Base case\n  if lst1 == nil or lst2 == nil then\n    return \"NO\"\n  end",
  "  -- Your code here\n  local even = {}\n  for _, v in ipairs(lst1) do\n    if v\
    \ mod 2 == 0 then\n      table.insert(even, v)\n    end\n  end\n  for _, v in\
    \ ipairs(lst2) do\n    if v mod 2 == 0 then\n      table.insert(even, v)\n   \
    \ end\n  end\n  if #even == #lst1 then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "  local even = lst1\n  local odd = lst2\n  local evenCount\
    \ = 1\n  local oddCount = 1\n  for i = 1, #even do\n    if even[i] % 2 == 0 then\n\
    \      even[evenCount] = even[i]\n      evenCount = evenCount + 1\n    end\n \
    \ end\n  for i = 1, #odd do\n    if odd[i] % 2 == 1 then\n      odd[oddCount]\
    \ = odd[i]\n      oddCount = oddCount + 1\n    end\n  end\n  if evenCount == #even\
    \ and oddCount == #odd then\n    return \"YES\"\n  else\n    return \"NO\"\n \
    \ end\nend", "  -- Base case\n  if lst1 == nil or lst2 == nil then\n    return\
    \ \"NO\"\n  end", "  local even = #lst1\n  local odd  = #lst2\n  local eveneven\
    \ = 0\n  local evenodd = 0\n  local oddodd = 0\n  for i = 1, even do\n    eveneven\
    \ = eveneven + lst1[i]\n  end\n  for i = 1, odd do\n    evenodd = evenodd + lst2[i]\n\
    \  end\n  for i = 1, odd do\n    oddodd = oddodd + lst2[i]\n  end\n  if eveneven\
    \ == evenodd and evenodd == oddodd then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "  -- Base case\n  if lst1 == nil or lst2 == nil then\n\
    \    return 'NO'\n  end", "  -- Base case\n  if #lst1 == 0 then return \"NO\"\
    \ end\n  if #lst2 == 0 then return \"NO\" end\n  -- If lst1 has even number of\
    \ elements, then lst2 can have even number of elements\n  if #lst1 % 2 == 0 then\n\
    \    if #lst2 % 2 == 0 then\n      -- If lst1 and lst2 have same number of elements,\
    \ then we can exchange elements\n      if #lst1 == #lst2 then\n        -- If lst1\
    \ and lst2 have same number of elements, then we can exchange elements\n     \
    \   if lst1[1] == lst2[1] then\n          -- If lst1 and lst2 have same number\
    \ of elements, then we can exchange elements\n          if lst1[2] == lst2[2]\
    \ then\n            -- If lst1 and lst2 have same number of elements, then we\
    \ can exchange elements\n            if lst1[3] == lst2[3] then\n            \
    \  -- If lst1 and lst2 have same number of elements, then we can exchange elements\n\
    \              if lst1[4] == lst2[4] then\n                -- If lst1 and lst2\
    \ have same number of elements, then we can exchange elements\n              \
    \  if lst1[5] == lst2[5] then\n                  -- If lst1 and lst2 have same\
    \ number of elements, then we can exchange elements\n                  if lst1[6]\
    \ == lst2[6] then\n                    -- If lst1 and lst2 have same number of\
    \ elements, then we can exchange elements\n                    if lst1[7] == lst2[7]\
    \ then\n                      -- If lst1 and lst2 have same number of elements,\
    \ then we can exchange elements\n                      if lst1[8] == lst2[8] then\n\
    \                        -- If lst1 and lst2 have same number of elements, then\
    \ we can exchange elements\n                        if lst1[9] == lst2[9] then\n\
    \                          -- If lst1 and lst2 have same number of elements, then\
    \ we can exchange elements\n                          return \"YES\"\n       \
    \                 end\n                      end\n                    end\n  \
    \                end\n                end\n              end\n            end\n\
    \          end\n        end\n      end\n    end\n  end\nend", "  -- Base case\n\
    \  if lst1 == nil or lst2 == nil then\n    return nil\n  end", "  -- Your code\
    \ here\n  local even = #lst1\n  local odd  = #lst2\n  local i = 1\n  while i <=\
    \ even and i <= odd do\n    if lst1[i] % 2 == 0 and lst2[i] % 2 == 0 then\n  \
    \    lst1[i], lst2[i] = lst2[i], lst1[i]\n      even = even - 1\n      odd = odd\
    \ - 1\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if even >\
    \ odd then\n    return \"NO\"\n  else\n    return \"YES\"\n  end\nend", "  --\
    \ Base case\n  if lst1 == nil or lst2 == nil then\n    return \"NO\"\n  end",
  "  -- Base case\n  if lst1 == nil or lst2 == nil then\n    return \"NO\"\n  end",
  "  -- Base case\n  if lst1 == nil or lst2 == nil then\n    return nil\n  end", " \
    \ -- Your code here\n  local even = {}\n  for _, v in ipairs(lst1) do\n    if\
    \ v %2 == 0 then\n      table.insert(even, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v %2 == 0 then\n      table.insert(even, v)\n    end\n  end\n  if\
    \ #even == #lst1 then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
