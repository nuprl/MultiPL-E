language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_sorted, tonumber(number))\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqp9do8p.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpcqp9do8p.lua:8: in function 'candidate'\n\t/tmp/tmpcqp9do8p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo2n3_9u5.lua:29: '')'' expected (to close ''('' at line 28)
    near ''luaunit''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    local numbers_array\
    \ = numbers.split(\" \")\n    for _, number in ipairs(numbers_array) do\n    \
    \    if number == \"zero\" then\n            sorted_numbers = sorted_numbers ..\
    \ \"0\"\n        elseif number == \"one\" then\n            sorted_numbers = sorted_numbers\
    \ .. \"1\"\n        elseif number == \"two\" then\n            sorted_numbers\
    \ = sorted_numbers .. \"2\"\n        elseif number == \"three\" then\n       \
    \     sorted_numbers = sorted_numbers .. \"3\"\n        elseif number == \"four\"\
    \ then\n            sorted_numbers = sorted_numbers .. \"4\"\n        elseif number\
    \ == \"five\" then\n            sorted_numbers = sorted_numbers .. \"5\"\n   \
    \     elseif number == \"six\" then\n            sorted_numbers = sorted_numbers\
    \ .. \"6\"\n        elseif number == \"seven\" then\n            sorted_numbers\
    \ = sorted_numbers .. \"7\"\n        elseif number == \"eight\" then\n       \
    \     sorted_numbers = sorted_numbers .. \"8\"\n        elseif number == \"nine\"\
    \ then\n            sorted_numbers = sorted_numbers .. \"9\"\n        else\n \
    \           sorted_numbers = sorted_numbers .. number\n        end\n    end\n\
    \    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjghpec6j.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpjghpec6j.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpjghpec6j.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_as_strings = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers_as_numbers = numbers_as_strings:gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 ')\n  return numbers_as_numbers:gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4ppov1m.lua:16:\
    \ expected: \"three\"\nactual: \"three  \"\nstack traceback:\n\t/tmp/tmpp4ppov1m.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.+)( |$)',\
    \ function(s)\n    local n = tonumber(s)\n    if n then\n      return (n < 10\
    \ and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^| )(.+)(\
    \ |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return (n\
    \ < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprd45v59p.lua:65: ''end'' expected (to close ''if'' at line
    63) near ''lu''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]\"\
    , \"\")\n  local numbers = table.sort(numbers)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxx6919f.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpsxx6919f.lua:8: in function 'candidate'\n\t/tmp/tmpsxx6919f.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    local numbers_array\
    \ = numbers.split(\" \")\n    for _, number in pairs(numbers_array) do\n     \
    \   sorted_numbers = sorted_numbers + number .. \" \"\n    end\n    return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpja1tzqem.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpja1tzqem.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpja1tzqem.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb8xee6m8.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpydyz2tnz.lua:7: unfinished string near ''''%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo07bn1pk.lua:8: unfinished string near ''''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ouj285w.lua:38: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2\\\\1')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpivbwkegy.lua:38: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpja9f5zqi.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppop19qk2.lua:28: unfinished string near ''''(^''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5zuhd3m.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpq5zuhd3m.lua:8: in function 'candidate'\n\t/tmp/tmpq5zuhd3m.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[- ])(%d+)([^-\
    \ ]|$)', function(_, digits)\n    return tonumber(digits)\n  end)\n  table.sort(numbers)\n\
    \  return table.concat(numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv26issg4.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpv26issg4.lua:10: in function 'candidate'\n\t/tmp/tmpv26issg4.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. \" \"\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0e8pquk.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpe0e8pquk.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpe0e8pquk.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
