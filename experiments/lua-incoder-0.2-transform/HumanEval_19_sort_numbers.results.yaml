language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_sorted, tonumber(number))\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqp9do8p.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpcqp9do8p.lua:8: in function 'candidate'\n\t/tmp/tmpcqp9do8p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo2n3_9u5.lua:29: '')'' expected (to close ''('' at line 28)
    near ''luaunit''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    local numbers_array\
    \ = numbers.split(\" \")\n    for _, number in ipairs(numbers_array) do\n    \
    \    if number == \"zero\" then\n            sorted_numbers = sorted_numbers ..\
    \ \"0\"\n        elseif number == \"one\" then\n            sorted_numbers = sorted_numbers\
    \ .. \"1\"\n        elseif number == \"two\" then\n            sorted_numbers\
    \ = sorted_numbers .. \"2\"\n        elseif number == \"three\" then\n       \
    \     sorted_numbers = sorted_numbers .. \"3\"\n        elseif number == \"four\"\
    \ then\n            sorted_numbers = sorted_numbers .. \"4\"\n        elseif number\
    \ == \"five\" then\n            sorted_numbers = sorted_numbers .. \"5\"\n   \
    \     elseif number == \"six\" then\n            sorted_numbers = sorted_numbers\
    \ .. \"6\"\n        elseif number == \"seven\" then\n            sorted_numbers\
    \ = sorted_numbers .. \"7\"\n        elseif number == \"eight\" then\n       \
    \     sorted_numbers = sorted_numbers .. \"8\"\n        elseif number == \"nine\"\
    \ then\n            sorted_numbers = sorted_numbers .. \"9\"\n        else\n \
    \           sorted_numbers = sorted_numbers .. number\n        end\n    end\n\
    \    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjghpec6j.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpjghpec6j.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpjghpec6j.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_as_strings = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers_as_numbers = numbers_as_strings:gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 ')\n  return numbers_as_numbers:gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4ppov1m.lua:16:\
    \ expected: \"three\"\nactual: \"three  \"\nstack traceback:\n\t/tmp/tmpp4ppov1m.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.+)( |$)',\
    \ function(s)\n    local n = tonumber(s)\n    if n then\n      return (n < 10\
    \ and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^| )(.+)(\
    \ |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return (n\
    \ < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') .. n\n    end\n  end)\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', function(s)\n    local n = tonumber(s)\n    if n then\n      return\
    \ (n < 10 and '0' or '') \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprd45v59p.lua:65: ''end'' expected (to close ''if'' at line
    63) near ''lu''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]\"\
    , \"\")\n  local numbers = table.sort(numbers)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxx6919f.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpsxx6919f.lua:8: in function 'candidate'\n\t/tmp/tmpsxx6919f.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    local numbers_array\
    \ = numbers.split(\" \")\n    for _, number in pairs(numbers_array) do\n     \
    \   sorted_numbers = sorted_numbers + number .. \" \"\n    end\n    return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpja1tzqem.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpja1tzqem.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpja1tzqem.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb8xee6m8.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpydyz2tnz.lua:7: unfinished string near ''''%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo07bn1pk.lua:8: unfinished string near ''''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- remove leading minus \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ouj285w.lua:38: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2\\\\1')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\1\\\\2')\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpivbwkegy.lua:38: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpja9f5zqi.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppop19qk2.lua:28: unfinished string near ''''(^''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5zuhd3m.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpq5zuhd3m.lua:8: in function 'candidate'\n\t/tmp/tmpq5zuhd3m.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[- ])(%d+)([^-\
    \ ]|$)', function(_, digits)\n    return tonumber(digits)\n  end)\n  table.sort(numbers)\n\
    \  return table.concat(numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv26issg4.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpv26issg4.lua:10: in function 'candidate'\n\t/tmp/tmpv26issg4.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. \" \"\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0e8pquk.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpe0e8pquk.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpe0e8pquk.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw7jxctn.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaw7jxctn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaw7jxctn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)',\
    \ '')\n  local numbers = numbers:gsub('(%z+)$', '')\n  local numbers = numbers:gsub('(%z+)%z+',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers = numbers:gsub('(%z+)%z',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers = numbers:gsub('(%z+)%z',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers = numbers:gsub('(%z+)%z',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers = numbers:gsub('(%z+)%z',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers = numbers:gsub('(%z+)%z',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers = numbers:gsub('(%z+)%z',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers = numbers:gsub('(%z+)%z',\
    \ '%%%1')\n  local numbers = numbers:gsub('(%z+)%z', '%%%1')\n  local numbers\
    \ = numbers:gsub('(%z+)%z', '%%\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd92n3dtd.lua:32: unfinished string near ''''%%''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg2nhr87r.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )', '\\\
    \\2')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('(\
    \ )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers\
    \ = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\\
    1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('(\
    \ )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers\
    \ = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\\
    1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('(\
    \ )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers\
    \ = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\\
    1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('(\
    \ )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers\
    \ = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\\
    1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('(\
    \ )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers\
    \ = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\\
    1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers = numbers:gsub('(\
    \ )%w+', '\\1')\n  local numbers = numbers:gsub('( )%w+', '\\1')\n  local numbers\
    \ = numbers:gsub('( )%w+', '\\1')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpael66v2_.lua:48: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mmsmfmi.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_mmsmfmi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%2')\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp87tb9op4.lua:34: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%w+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+%d+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzq691piy.lua:7: unfinished string near ''''%d+%w+%d+%d+%w+%d+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+%w+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnr_txrhk.lua:7: unfinished string near ''''%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_as_strings = numbers.split(\"\
    \ \") -- Split string into array of strings\n    local numbers_as_numbers = numbers_as_strings:map(function(number)\
    \ return tonumber(number) end) -- Convert strings to numbers\n    table.sort(numbers_as_numbers)\
    \ -- Sort array of numbers\n    return table.concat(numbers_as_numbers, \" \"\
    ) -- Return sorted array of numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_mhhr_h1.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp_mhhr_h1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_mhhr_h1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%w+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%d+%w+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqoezbj8l.lua:7: unfinished string near ''''%d+%d+%d+%w+%d+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%d+%w+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|)([0-9]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|)([0-9]+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp714tymkd.lua:32: unfinished string near ''''(^|)([0-9]+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph48zicho.lua:28: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzj3a1qec.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf2477qcu.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ hyphens\n  local numbers = string.gsub(numbers, '0', '') -- Remove zeros\n \
    \ local numbers = string.gsub(numbers, '1', '') -- Remove ones\n  local numbers\
    \ = string.gsub(numbers, '2', '') -- Remove twos\n  local numbers = string.gsub(numbers,\
    \ '3', '') -- Remove threes\n  local numbers = string.gsub(numbers, '4', '') --\
    \ Remove fours\n  local numbers = string.gsub(numbers, '5', '') -- Remove fives\n\
    \  local numbers = string.gsub(numbers, '6', '') -- Remove sixes\n  local numbers\
    \ = string.gsub(numbers, '7', '') -- Remove sevens\n  local numbers = string.gsub(numbers,\
    \ '8', '') -- Remove eights\n  local numbers = string.gsub(numbers, '9', '') --\
    \ Remove nines\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '$', '') -- Remove dollar signs\n  local numbers = string.gsub(numbers,\
    \ '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers, '*', '')\
    \ -- Remove asterisks\n  local numbers = string.gsub(numbers, '!', '') -- Remove\
    \ exclamation marks\n  local numbers = string.gsub(numbers, '@', '') -- Remove\
    \ at signs\n  local numbers = string.gsub(numbers, '(', '') -- Remove parentheses\n\
    \  local numbers = string.gsub(numbers, ')', '') -- Remove parentheses\n  local\
    \ numbers = string.gsub(numbers, '{', '') -- Remove curly braces\n  local numbers\
    \ = string.gsub(numbers, '}', '') -- Remove curly braces\n  local numbers = string.gsub(numbers,\
    \ '<', '') -- Remove less-than signs\n  local numbers = string.gsub(numbers, '>',\
    \ '') -- Remove greater-than signs\n  local numbers = string.gsub(numbers, '/',\
    \ '') -- Remove forward slashes\n  local numbers = string.gsub(numbers, '?', '')\
    \ -- Remove question marks\n  local numbers = string.gsub(numbers, '|', '') --\
    \ Remove pipes\n  local numbers = string.gsub(numbers, '\"', '') -- Remove double\
    \ quote\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpivgt4exq.lua:47: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzj3a1qec.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqu8o_fzc.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpqu8o_fzc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpqu8o_fzc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    table.insert(numbers_sorted,\
    \ tonumber(number))\n  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph52jsjzm.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  sorted_numbers = table.sort(sorted_numbers)\n  for _, number in ipairs(sorted_numbers)\
    \ do\n    sorted_numbers = sorted_numbers + number\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa79_q5zf.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpa79_q5zf.lua:11: in local 'candidate'\n\t/tmp/tmpa79_q5zf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(number))\n \
    \ end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp994hhi18.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp994hhi18.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkj54jnt6.lua:24: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3h6vzn2n.lua:34: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mmsmfmi.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_mmsmfmi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5_zw9br4.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw7jxctn.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaw7jxctn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaw7jxctn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. ' '\n\
    \  end\n  return sorted_numbers:gsub('( +)(%d+)( +)', '\\2 \\1 \\3')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmc6e2mj.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprmc6e2mj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpweiy68st.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvnznc1g.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpgvnznc1g.lua:11: in local 'candidate'\n\t/tmp/tmpgvnznc1g.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_array do\n    local number\
    \ = numbers_array[i]\n    local number_array = string.gsub(number, \"[^0-9]\"\
    , \"\")\n    local number_sorted = table.sort(number_array)\n    sorted_numbers\
    \ = sorted_numbers .. number_sorted\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsf1vkoog.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpsf1vkoog.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsf1vkoog.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0nu0l72q.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3h6vzn2n.lua:34: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%d+',\
    \ '%d'):gsub('%d*', '%d'):gsub('%d-%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0dwngi7u.lua:7: unfinished string near ''''%d-%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)$',\
    \ '\\2\\1 \\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)$', '\\2\\1')\n\
    \  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)$', '\\2\\1 \\\
    3\\4')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)([%z]+)$',\
    \ '\\2\\1 \\3\\4\\5')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)([%z]+)([%z]+)$',\
    \ '\\2\\1 \\3\\4\\5\\6')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)$',\
    \ '\\2\\1 \\3\\4\\5\\6\\7')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)$',\
    \ '\\2\\1 \\3\\4\\5\\6\\7\\8')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)$',\
    \ '\\2\\1 \\3\\4\\5\\6\\7\\8\\9')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)$',\
    \ '\\2\\1 \\3\\4\\5\\6\\7\\8\\9\\10')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)([%z]+)$',\
    \ '\\2\\1 \\3\\4\\5\\6\\7\\8\\9\\10\\11')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_hi_gl1t.lua:29: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers\
    \ .. ' ' .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%w+%d+%w+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0sb7wvpk.lua:7: unfinished string near ''''%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%a', function(digit)\n\
    \      if digit == 'nine' then\n        return 'nine'\n      elseif digit == 'zero'\
    \ then\n        return 'zero'\n      elseif digit == 'one' then\n        return\
    \ 'one'\n      elseif digit == 'two' then\n        return 'two'\n      elseif\
    \ digit == 'three' then\n        return 'three'\n      elseif digit == 'four'\
    \ then\n        return 'four'\n      elseif digit == 'five' then\n        return\
    \ 'five'\n      elseif digit == 'six' then\n        return 'six'\n      elseif\
    \ digit == 'seven' then\n        return 'seven'\n      elseif digit == 'eight'\
    \ then\n        return 'eight'\n      elseif digit == 'nine' then\n        return\
    \ 'nine'\n      else\n        return digit\n      end\n    end)\n  end\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_3dj2d7.lua:44:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpn_3dj2d7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)%w*','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)%w*%w*','%2$1\
    \ %3')\n  local numbers = numbers:gsub('( %w+)(%w+)%w*%w*%w*','%2$1 %3')\n  local\
    \ numbers = numbers:gsub('( %w+)(%w+)%w*%w*%w*%w*','%2$1 %3')\n  local numbers\
    \ = numbers:gsub('( %w+)(%w+)%w*%w*%w*%w*%w*','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)%w*%w*%w*%w*%w*%w*','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)%w*%w*%w*%w*%w*%w*%w*','%2$1\
    \ %3')\n  local numbers = numbers:gsub('( %w+)(%w+)%w*%w*%w*%w*%w*%w*%w*%w*','%2$1\
    \ %3')\n  local numbers = numbers:gsub('( %w+)(%w+)%w*%w*%w*%w*%w*%w*%w*%w*%w*','%2$1\
    \ %3')\n  local numbers = numbers:gsub('( %w+)(%w+)%w*%w*%w*%w*%w*%w*%w*%w*%w*%w*','%2$1\
    \ %3')\n  local numbers = numbers:gsub('( %w+)(%w+)%w*%w*%w*%w*%w*%w*%w*%w*%w*%w*%w*','%2$1\
    \ %3')\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0dxcmteq.lua:32: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)', '\\\\2\\\
    \\1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqxw0q5qj.lua:23: unfinished string near ''''(^|[%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpweiy68st.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldlqjxcv.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpldlqjxcv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpldlqjxcv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, '[^0-9]',\
    \ '')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n  \
    \  local numbers = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local\
    \ numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n    local numbers\
    \ = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local numbers = string.gsub(numbers,\
    \ '(^|-)([0-9]+)', '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)$',\
    \ '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n\
    \    local numbers = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local\
    \ numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n    local numbers\
    \ = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local numbers = string.gsub(numbers,\
    \ '(^|-)([0-9]+)', '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)$',\
    \ '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n\
    \    local numbers = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local\
    \ numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n    local numbers\
    \ = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local numbers = string.gsub(numbers,\
    \ '(^|-)([0-9]+)', '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)$',\
    \ '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n\
    \    local numbers = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local\
    \ numbers = string.gsub(numbers, '(^|-)([0-9]+)', '\\\\2')\n    local numbers\
    \ = string.gsub(numbers, '(^|-)([0-9]+)$', '\\\\2')\n    local numbers = string.gsub(numbers,\
    \ '(^|-)([0-9]+)', '\\\\2')\n    local numbers = string.gsub(numbers, '(^|-)([0-9]+)$',\
    \ '\\\\2')\n    local numbers = string.g\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw03u_mpq.lua:44: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvcn_06gu.lua:7: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx1c_tqr3.lua:7: unfinished string near ''''%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvnznc1g.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpgvnznc1g.lua:11: in local 'candidate'\n\t/tmp/tmpgvnznc1g.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n    local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpno7luoft.lua:28: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number\n  end\n  sorted_numbers = sorted_numbers:gsub('(%a+)',\
    \ '%2')\n  sorted_numbers = sorted_numbers:gsub('(%b+)', '%3')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%c+)', '%4')\n  sorted_numbers = sorted_numbers:gsub('(%d+)',\
    \ '%5')\n  sorted_numbers = sorted_numbers:gsub('(%e+)', '%6')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%f+)', '%7')\n  sorted_numbers = sorted_numbers:gsub('(%g+)',\
    \ '%8')\n  sorted_numbers = sorted_numbers:gsub('(%h+)', '%9')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%i+)', '%a')\n  sorted_numbers = sorted_numbers:gsub('(%j+)',\
    \ '%b')\n  sorted_numbers = sorted_numbers:gsub('(%k+)', '%c')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%l+)', '%d')\n  sorted_numbers = sorted_numbers:gsub('(%m+)',\
    \ '%e')\n  sorted_numbers = sorted_numbers:gsub('(%n+)', '%f')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%o+)', '%g')\n  sorted_numbers = sorted_numbers:gsub('(%p+)',\
    \ '%h')\n  sorted_numbers = sorted_numbers:gsub('(%q+)', '%i')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%r+)', '%j')\n  sorted_numbers = sorted_numbers:gsub('(%s+)',\
    \ '%k')\n  sorted_numbers = sorted_numbers:gsub('(%t+)', '%l')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%u+)', '%m')\n  sorted_numbers = sorted_numbers:gsub('(%v+)',\
    \ '%n')\n  sorted_numbers = sorted_numbers:gsub('(%w+)', '%o')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(%x+)', '%p')\n  sorted_numbers = sorted_numbers:gsub('(%y+)',\
    \ '%q')\n  sorted_numbers = sorted_numbers:gsub('(%z+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqhi6kcvs.lua:37: unfinished string near ''''(%z+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpja9f5zqi.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5swum2_k.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp5swum2_k.lua:11: in local 'candidate'\n\t/tmp/tmp5swum2_k.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf2477qcu.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') -- remove trailing numbers\n  local numbers = numbers:gsub('([0-9]+)$',\
    \ '\\1') \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm44bjqpq.lua:43: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdyc9240h.lua:7: unfinished string near ''''(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    sorted_numbers = sorted_numbers\
    \ + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    sorted_numbers = sorted_numbers\
    \ .. ' ' .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_array do\n    local number\
    \ = tonumber(numbers_array[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + numbers_array[i]\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9z2mbz7z.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp9z2mbz7z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9z2mbz7z.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfmbxm9oj.lua:7: unfinished string near ''''%d*%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z]+)%s*(%z|$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z|$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z]+)%s*(%z\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9o4blt0q.lua:24: unfinished string near ''''(^|[%z]+)%s*(%z''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('(\
    \ )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):gsub('( )','%2'):\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8i7w2c_8.lua:9: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n  local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n  local numbers = string.gsub(numbers, '&', '')\
    \ -- Remove ampersands\n  local numbers = string.gsub(numbers, '%', '') -- Remove\
    \ percents\n  local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \  local numbers = string.gsub(numbers, '%', '') -- Remove percents\n  local numbers\
    \ = string.gsub(numbers, '&', '') -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3vniqran.lua:47: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('( )([0-9]+)','%1 %2')\n\
    \  local numbers = numbers:gsub('( )([0-9]+)( )([0-9]+)','%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('( )([0-9]+)( )([0-9]+)( )([0-9]+)','%1 %3 %4 %2')\n\
    \  local numbers = numbers:gsub('( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)','%1\
    \ %3 %4 %5 %2')\n  local numbers = numbers:gsub('( )([0-9]+)( )([0-9]+)( )([0-9]+)(\
    \ )([0-9]+)( )([0-9]+)','%1 %3 %4 %5 %6 %2')\n  local numbers = numbers:gsub('(\
    \ )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)','%1 %3 %4\
    \ %5 %6 %7 %2')\n  local numbers = numbers:gsub('( )([0-9]+)( )([0-9]+)( )([0-9]+)(\
    \ )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)','%1 %3 %4 %5 %6 %7 %8 %2')\n  local\
    \ numbers = numbers:gsub('( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)(\
    \ )([0-9]+)( )([0-9]+)','%1 %3 %4 %5 %6 %7 %8 %9 %2')\n  local numbers = numbers:gsub('(\
    \ )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)(\
    \ )([0-9]+)','%1 %3 %4 %5 %6 %7 %8 %9 %10 %2')\n  local numbers = numbers:gsub('(\
    \ )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)(\
    \ )([0-9]+)','%1 %3 %4 %5 %6 %7 %8 %9 %10 %11 %2')\n  local numbers = numbers:gsub('(\
    \ )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)(\
    \ )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd3h4lk9k.lua:18: unfinished string near ''''( )([0-9]+)( )([0-9]+)(
    )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )([0-9]+)( )''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('( |$)([0-9]+)','%1 %2')\n\
    \  local numbers = numbers:gsub('( |$)([0-9]+)( |$)','%1 %3 %2')\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahag00bh.lua:19:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpahag00bh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local num_list\
    \ = numbers.split(\" \")\n  for _, num in ipairs(num_list) do\n    sorted_numbers\
    \ = sorted_numbers + num\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2unldet5.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp2unldet5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp2unldet5.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsoy143qp.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number\n  end\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%1d'):gsub('%d*', '%1d')\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3pu29fox.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp3pu29fox.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3pu29fox.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%S', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbc48b4t.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvbc48b4t.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( +)(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgdt35rzo.lua:27: unfinished string near ''''(%w+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%S', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbc48b4t.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvbc48b4t.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mmsmfmi.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_mmsmfmi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzj3a1qec.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.+)( |$)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\\
    1\\2')\n  local numbers = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )(.+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy_iwjmus.lua:27: unfinished string near ''''(^| )(''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )' .. sort_numbers.choices\
    \ .. '( |$)','%2$1 %2$3')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$1')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$3')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$2')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$4')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$5')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$6')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$7')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$8')\n  local numbers = numbers:gsub('( )' .. sort_numbers.choices\
    \ .. '$','%2$9')\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpms5sn3_o.lua:7:\
    \ attempt to index a function value (upvalue 'sort_numbers')\nstack traceback:\n\
    \t/tmp/tmpms5sn3_o.lua:7: in local 'candidate'\n\t/tmp/tmpms5sn3_o.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5nvfdkuh.lua:49: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)( %w+)','%2$1 %3')\n  local numbers = numbers:gsub('( %w+)(%w+)( %w+)(\
    \ %w+)','%2$1 %3 %4')\n  local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)(\
    \ %w+)','%2$1 %3 %4 %5')\n  local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)(\
    \ %w+)( %w+)','%2$1 %3 %4 %5 %6')\n  local numbers = numbers:gsub('( %w+)(%w+)(\
    \ %w+)( %w+)( %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 %7')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 %7 %8')\n \
    \ local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)(\
    \ %w+)','%2$1 %3 %4 %5 %6 %7 %8 %9')\n  local numbers = numbers:gsub('( %w+)(%w+)(\
    \ %w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 %7 %8 %9 %10')\n\
    \  local numbers = numbers:gsub('( %w+)(%w+)( %w+)( %w+)( %w+)( %w+)( %w+)( %w+)(\
    \ %w+)( %w+)( %w+)','%2$1 %3 %4 %5 %6 \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp79kz9spi.lua:17: unfinished string near ''''%2$1 %3 %4 %5
    %6 ''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppxrl885_.lua:83: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    5')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\7')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\9')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\11')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\13')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\15')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\17')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\
    \\19')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\21')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\23')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\25')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\27')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\29')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\31')\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_7pzu8v1.lua:35: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  local numbers_length\
    \ = 0\n  local numbers_string = ''\n  for i = 1, #numbers do\n    local number\
    \ = tonumber(numbers[i])\n    if number ~= nil then\n      table.insert(numbers_table,\
    \ number)\n      numbers_length = numbers_length + 1\n    end\n  end\n  table.sort(numbers_table)\n\
    \  for i = 1, #numbers_table do\n    numbers_string = numbers_string .. numbers_table[i]\n\
    \  end\n  return numbers_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uwx3snz.lua:28:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9uwx3snz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5swum2_k.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp5swum2_k.lua:11: in local 'candidate'\n\t/tmp/tmp5swum2_k.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. \" \"\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0e8pquk.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpe0e8pquk.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpe0e8pquk.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('[^0-9]+', '')\n  local numbers_sorted = {}\n  for i = 1, #numbers\
    \ do\n    table.insert(numbers_sorted, tonumber(numbers[i]))\n  end\n  table.sort(numbers_sorted)\n\
    \  return table.concat(numbers_sorted)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqmm6syc.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwqmm6syc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_as_strings = numbers.split(\"\
    \ \")\n  local numbers_as_ints = numbers_as_strings:map(function(number)\n   \
    \ return tonumber(number)\n  end)\n  table.sort(numbers_as_ints)\n  return table.concat(numbers_as_ints,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppd2k0wap.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmppd2k0wap.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppd2k0wap.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(number))\n \
    \ end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, '') --\
    \ Join back together with spaces.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw3whm3k.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpzw3whm3k.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmsbcpy8z.lua:31: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_sorted, tonumber(number))\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqp9do8p.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpcqp9do8p.lua:8: in function 'candidate'\n\t/tmp/tmpcqp9do8p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1')\n  local numbers = numbers:gsub('(%w+) ', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1')\n  local \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5nvfdkuh.lua:49: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[- ])(%d+)(\
    \ |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n\
    \  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local numbers\
    \ = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[-\
    \ ])(%d+)( |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1\
    \ %3')\n  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local\
    \ numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[-\
    \ ])(%d+)( |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1\
    \ %3')\n  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local\
    \ numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[-\
    \ ])(%d+)( |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1\
    \ %3')\n  local numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local\
    \ numbers = numbers:gsub('(^|[- ])(%d+)( |$)','%2$1 %3')\n  local numbers = numbers:gsub('(^|[-\
    \ ])(%d+)( |$)','%2$1 %3')\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz3an28dt.lua:36: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local num_string\
    \ = ''\n  local num_count = 0\n  for num_string in string.gmatch(numbers, '%d+')\
    \ do\n    num_count = num_count + 1\n    if num_count > 9 then\n      sorted_numbers\
    \ = sorted_numbers + num_string .. ' '\n      num_count = 0\n    end\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp753cumn.lua:24:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp753cumn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_sorted, tonumber(number))\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqp9do8p.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpcqp9do8p.lua:8: in function 'candidate'\n\t/tmp/tmpcqp9do8p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3'):gsub('(^|%s):(%a+)', '\\4'):gsub('(^|%s):(%a+)',\
    \ '\\5'):gsub('(^|%s):(%a+)', '\\6'):gsub('(^|%s):(%a+)', '\\7'):gsub('(^|%s):(%a+)',\
    \ '\\8'):gsub('(^|%s):(%a+)', '\\9'):gsub('(^|%s):(%a+)', '\\10'):gsub('(^|%s):(%a+)',\
    \ '\\11'):gsub('(^|%s):(%a+)', '\\12'):gsub('(^|%s):(%a+)', '\\13'):gsub('(^|%s):(%a+)',\
    \ '\\14'):gsub('(^|%s):(%a+)', '\\15'):gsub('(^|%s):(%a+)', '\\16'):gsub('(^|%s):(%a+)',\
    \ '\\17'):gsub('(^|%s):(%a+)', '\\18'):gsub('(^|%s):(%a+)', '\\19'):gsub('(^|%s):(%a+)',\
    \ '\\20'):gsub('(^|%s):(%a+)', '\\21')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3'):gsub('(^|%s):(%a+)', '\\4'):gsub('(^|%s):(%a+)',\
    \ '\\5'):gsub('(^|%s):(%a+)', '\\6'):gsub('(^|%s):(%a+)', '\\7'):gsub('(^|%s):(%a+)',\
    \ '\\8'):gsub('(^|%s):(%a+)', '\\9'):gsub('(^|%s):(%a+)', '\\10'):gsub('(^|%s):(%a+)',\
    \ '\\11'):gsub('(^|%s):(%a+)', '\\12'):gsub('(^|%s):(%a+)', '\\\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeax_vt7x.lua:9: '')'' expected (to close ''('' at line 8)
    near ''luaunit''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mmsmfmi.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_mmsmfmi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg2nhr87r.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1')\n  local numbers = numbers:gsub('%w+', '%d+')\n  return numbers:gsub('%d+',\
    \ '%0d')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1vm0n_5h.lua:8:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp1vm0n_5h.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1vm0n_5h.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local num_spaces\
    \ = 0\n  for _, number in ipairs(numbers) do\n    if number == \"zero\" then\n\
    \      sorted_numbers = sorted_numbers .. \" 0\"\n    elseif number == \"one\"\
    \ then\n      sorted_numbers = sorted_numbers .. \" 1\"\n    elseif number ==\
    \ \"two\" then\n      sorted_numbers = sorted_numbers .. \" 2\"\n    elseif number\
    \ == \"three\" then\n      sorted_numbers = sorted_numbers .. \" 3\"\n    elseif\
    \ number == \"four\" then\n      sorted_numbers = sorted_numbers .. \" 4\"\n \
    \   elseif number == \"five\" then\n      sorted_numbers = sorted_numbers .. \"\
    \ 5\"\n    elseif number == \"six\" then\n      sorted_numbers = sorted_numbers\
    \ .. \" 6\"\n    elseif number == \"seven\" then\n      sorted_numbers = sorted_numbers\
    \ .. \" 7\"\n    elseif number == \"eight\" then\n      sorted_numbers = sorted_numbers\
    \ .. \" 8\"\n    elseif number == \"nine\" then\n      sorted_numbers = sorted_numbers\
    \ .. \" 9\"\n    else\n      -- TODO: handle other numberals besides zero and\
    \ nine\n      sorted_numbers = sorted_numbers .. number\n    end\n    num_spaces\
    \ = num_spaces + 1\n  end\n  return sorted_numbers:sub(1, num_spaces)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqk4eo3n.lua:43:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbqk4eo3n.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptmc8nncb.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_spaces\
    \ = #numbers - 1\n  local num_digits = #sorted_numbers - 1\n  local num_digits_spaces\
    \ = #sorted_numbers - num_spaces\n  local num_digits_spaces_digits = #sorted_numbers\
    \ - num_spaces - num_digits\n  local num_digits_spaces_digits_spaces = #sorted_numbers\
    \ - num_spaces - num_digits - num_spaces\n  local num_digits_spaces_digits_spaces_digits\
    \ = #sorted_numbers - num_spaces - num_digits - num_spaces - num_digits_spaces\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpykh38qyh.lua:25: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \    local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n    local numbers\
    \ = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbs5dcji6.lua:31: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuw6txtra.lua:7: unfinished string near ''''%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpweiy68st.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9phhlc_r.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- remove leading min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8z4sdfeb.lua:38: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmcgcak0.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmprmcgcak0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprmcgcak0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = numbers_array[i]\n\
    \    local number_array = number.split(\".\")\n    local number_length = #number_array\n\
    \    local number_string = \"\"\n    for j = 1, number_length do\n      number_string\
    \ = number_string .. number_array[j]\n    end\n    sorted_numbers = sorted_numbers\
    \ .. number_string .. \" \"\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1l8fvtaf.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp1l8fvtaf.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1l8fvtaf.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for i = 1,\
    \ #numbers do\n    local number = tonumber(numbers[i])\n    if number ~= nil then\n\
    \      sorted_numbers = sorted_numbers + number\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplayy5i6g.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplayy5i6g.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg2nhr87r.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(string.gmatch(numbers, \"%d+\")) do\n    sorted_numbers = sorted_numbers\
    \ + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptmc8nncb.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg2nhr87r.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(%a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl7lf7p5x.lua:9: unfinished string near ''''(%a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( ''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp30j8u44a.lua:8: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\
    \\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6y68fzvf.lua:22: unfinished string near ''''(^|[%z])(''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxk2dpog8.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptmc8nncb.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzj3a1qec.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %2$3')\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpasyt8yd0.lua:35: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3'):gsub('(^|%s):(%a+)', '\\4'):gsub('(^|%s):(%a+)',\
    \ '\\5'):gsub('(^|%s):(%a+)', '\\6'):gsub('(^|%s):(%a+)', '\\7'):gsub('(^|%s):(%a+)',\
    \ '\\8'):gsub('(^|%s):(%a+)', '\\9'):gsub('(^|%s):(%a+)', '\\10'):gsub('(^|%s):(%a+)',\
    \ '\\11'):gsub('(^|%s):(%a+)', '\\12'):gsub('(^|%s):(%a+)', '\\13'):gsub('(^|%s):(%a+)',\
    \ '\\14'):gsub('(^|%s):(%a+)', '\\15'):gsub('(^|%s):(%a+)', '\\16'):gsub('(^|%s):(%a+)',\
    \ '\\17'):gsub('(^|%s):(%a+)', '\\18'):gsub('(^|%s):(%a+)', '\\19'):gsub('(^|%s):(%a+)',\
    \ '\\20'):gsub('(^|%s):(%a+)', '\\21'):gsub('(^|%s):(%a+)', '\\22'):gsub('(^|%s):(%a+)',\
    \ '\\23'):gsub('(^|%s):(%a+)', '\\24'):gsub('(^|%s):(%a+)', '\\25'):gsub('(^|%s):(%a+)',\
    \ '\\26'):gsub('(^|%s):(%a+)', '\\27'):gsub('(^|%s):(%a+)', '\\30'):gsub('(^|%s):(%a+)',\
    \ '\\31')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2'):gsub('(^|%s):(%a+)',\
    \ '\\3'):gsub('(^|%s):(%a+)', '\\4'):gsub('(^|%s):(%a+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptlsvj6sf.lua:8: unfinished string near ''''(^|%s):(%a+)''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw7jxctn.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaw7jxctn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaw7jxctn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[%z\\- ]', '')\
    \ -- Remove non-numeric characters\n  local numbers = string.gsub(numbers, '%z',\
    \ '') -- Remove leading zeros\n  local numbers = string.gsub(numbers, '%z+', '')\
    \ -- Remove leading spaces\n  local numbers = string.gsub(numbers, '%z+', '')\
    \ -- Remove trailing spaces\n  local numbers = string.gsub(numbers, '%z', '')\
    \ -- Remove trailing zeros\n  local numbers = string.gsub(numbers, '%z', '') --\
    \ Remove trailing spaces\n  local numbers = string.gsub(numbers, '%z', '') --\
    \ Remove trailing zeros\n  local numbers = string.gsub(numbers, '%z', '') -- Remove\
    \ trailing spaces\n  local numbers = string.gsub(numbers, '%z', '') -- Remove\
    \ trailing zeros\n  local numbers = string.gsub(numbers, '%z', '') -- Remove trailing\
    \ spaces\n  local numbers = string.gsub(numbers, '%z', '') -- Remove trailing\
    \ zeros\n  local numbers = string.gsub(numbers, '%z', '') -- Remove trailing spaces\n\
    \  local numbers = string.gsub(numbers, '%z', '') -- Remove trailing zeros\n \
    \ local numbers = string.gsub(numbers, '%z', '') -- Remove trailing spaces\n \
    \ local numbers = string.gsub(numbers, '%z', '') -- Remove trailing zeros\n  local\
    \ numbers = string.gsub(numbers, '%z', '') -- Remove trailing spaces\n  local\
    \ numbers = string.gsub(numbers, '%z', '') -- Remove trailing zeros\n  local numbers\
    \ = string.gsub(numbers, '%z', '') -- Remove trailing spaces\n  local numbers\
    \ = string.gsub(numbers, '%z', '') -- Remove trailing zeros\n  local numbers =\
    \ string.gsub(numbers, '%z', '') -- Remove trailing spaces\n  local numbers =\
    \ string.gsub(numbers, '%z', '') -- Remove trailing zeros\n  local numbers = string.gsub(numbers,\
    \ '%z', '') -- Remove trailing spaces\n  local numbers = string.gsub(numbers,\
    \ '%z', '') -- Remove trailing zeros\n  local numbers = string.gsub(numbers, '%z',\
    \ '') -- Remove trailing spaces\n  local numbers = string.gsub(numbers, '%z',\
    \ '') -- Remove trailing zeros\n  local numbers = string.gsub(numbers, '%z', '')\
    \ -- Remove trailing spaces\n  local numbers = string.gsub(numbers, '%z', '')\
    \ -- Remove trailing zeros\n  local numbers = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_gmsvou0.lua:8: invalid escape sequence near ''''[%z\-''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[%z\\- ]', '')\
    \ -- Remove non-numeric characters\n  local numbers = string.gsub(numbers, '%z',\
    \ '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '%+', '')\
    \ -- Remove leading plus signs\n  local numbers = string.gsub(numbers, '%-', '')\
    \ -- Remove trailing minus signs\n  local numbers = string.gsub(numbers, '%n',\
    \ '') -- Remove leading decimal points\n  local numbers = string.gsub(numbers,\
    \ '%u', '') -- Remove trailing decimal points\n  local numbers = string.gsub(numbers,\
    \ '%S', '') -- Remove leading spaces\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove trailing spaces\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove trailing zeroes\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove leading plus signs\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove trailing plus signs\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove leading decimal points\n  local numbers = string.gsub(numbers,\
    \ '%S', '') -- Remove trailing decimal points\n  local numbers = string.gsub(numbers,\
    \ '%S', '') -- Remove leading spaces\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove trailing spaces\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove trailing zeroes\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove leading plus signs\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove trailing plus signs\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove leading decimal points\n  local numbers = string.gsub(numbers,\
    \ '%S', '') -- Remove trailing decimal points\n  local numbers = string.gsub(numbers,\
    \ '%S', '') -- Remove leading spaces\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove trailing spaces\n  local numbers = string.gsub(numbers, '%S',\
    \ '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove trailing zeroes\n  local numbers = string.gsub(numbers, '%S', '')\
    \ -- Remove leading plus signs\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6m9q4f_c.lua:8: invalid escape sequence near ''''[%z\-''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)(\
    \ |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers\
    \ = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)(\
    \ |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n  local numbers\
    \ = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5hx9y3ie.lua:17: unfinished string near ''''( )(.''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local\
    \ numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\
    \\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local\
    \ numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\
    \\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local\
    \ numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\
    \\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local\
    \ numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\
    \\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local\
    \ numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('(\
    \ %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\
    \\2\\\\1')\n  local numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local\
    \ numbers = numbers:gsub('( %w+)(%w+)', '\\\\2\\\\1')\n  local numbers = \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4nx7io0g.lua:31: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbuhxjk2r.lua:28: unfinished string near ''''(^''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, digits)\n    local digits = tonumber(digits)\n    if digits == nil\
    \ then\n      error('Invalid number: ' .. digits)\n    end\n    return digits\n\
    \  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, digits)\n  \
    \  local digits = tonumber(digits)\n    if digits == nil then\n      error('Invalid\
    \ number: ' .. digits)\n    end\n    return digits\n  end)\n  local numbers =\
    \ numbers:gsub('(%w+)(%d+)', function(_, digits)\n    local digits = tonumber(digits)\n\
    \    if digits == nil then\n      error('Invalid number: ' .. digits)\n    end\n\
    \    return digits\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_,\
    \ digits)\n    local digits = tonumber(digits)\n    if digits == nil then\n  \
    \    error('Invalid number: ' .. digits)\n    end\n    return digits\n  end)\n\
    \  local numbers = numbers:gsub('(%w+)(%d+)', function(_, digits)\n    local digits\
    \ = tonumber(digits)\n    if digits == nil then\n      error('Invalid number:\
    \ ' .. digits)\n    end\n    return digits\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, digits)\n    local digits = tonumber(digits)\n    if digits == nil\
    \ then\n      error('Invalid number: ' .. digits)\n    end\n    return digits\n\
    \  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, digits)\n  \
    \  local digits = tonumber(digits)\n    if digits == nil then\n      error('Invalid\
    \ number: ' .. digits)\n    end\n    return digits\n  end)\n  local numbers =\
    \ numbers:gsub('(%w+)(%d+)', function(_, digits)\n    local digits = tonumber(digits)\n\
    \    if digits == nil then\n      error('Invalid number: ' .. digits)\n    end\n\
    \    return digits\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_,\
    \ digits)\n    local digits = tonumber(digits)\n    if digits == nil then\n  \
    \    error('Invalid number: ' .. digits)\n    end\n    return digits\n  end)\n\
    \  local numbers = numbers:gsub('(%w+)(%d+)', function(_, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5tf6wcbr.lua:71: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuw6txtra.lua:7: unfinished string near ''''%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for i = 1, #numbers\
    \ do\n    local number = tonumber(numbers[i])\n    if number ~= nil then\n   \
    \   sorted_numbers = sorted_numbers + number\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj44dguuw.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpj44dguuw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdyc9240h.lua:7: unfinished string near ''''(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpudtgw1a_.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = numbers_array[i]\n\
    \    if number ~= '' and tonumber(number) ~= nil then\n      sorted_numbers =\
    \ sorted_numbers .. ' ' .. number\n    end\n  end\n  return sorted_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgtxhazgj.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpgtxhazgj.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpgtxhazgj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]+', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(%a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnm4y7bw4.lua:9: unfinished string near ''''(%a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( ''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(string.gmatch(numbers, \"%d+\")) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw7jxctn.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaw7jxctn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaw7jxctn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, value\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(value))\n  end\n\
    \  table.sort(numbers_table)\n  return table.concat(numbers_table, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4ftewkl.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpq4ftewkl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpneg9s8il.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(string.gmatch(numbers, \"%d+\")) do\n    sorted_numbers = sorted_numbers\
    \ + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = ''\n    for _, number\
    \ in ipairs(numbers) do\n        sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzoviaua.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqzoviaua.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph48zicho.lua:28: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppqowvem2.lua:25: unfinished string near ''''%''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)', function(_, first, middle, last)\n    middle = middle:lower()\n    local\
    \ number\n    if middle == 'zero' then\n      number = 0\n    elseif middle ==\
    \ 'one' then\n      number = 1\n    elseif middle == 'two' then\n      number\
    \ = 2\n    elseif middle == 'three' then\n      number = 3\n    elseif middle\
    \ == 'four' then\n      number = 4\n    elseif middle == 'five' then\n      number\
    \ = 5\n    elseif middle == 'six' then\n      number = 6\n    elseif middle ==\
    \ 'seven' then\n      number = 7\n    elseif middle == 'eight' then\n      number\
    \ = 8\n    elseif middle == 'nine' then\n      number = 9\n    else\n      return\
    \ nil\n    end\n    return number\n  end)\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhnmcwd5.lua:44:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmphhnmcwd5.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpweiy68st.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpja9f5zqi.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d%d+', ''):gsub('%d%d%d+', ''):gsub('%d%d%d%d+', ''):gsub('%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpigbr69mb.lua:7: unfinished string near ''''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuw6txtra.lua:7: unfinished string near ''''%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpymxd3mhe.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_sorted, tonumber(number))\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqp9do8p.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpcqp9do8p.lua:8: in function 'candidate'\n\t/tmp/tmpcqp9do8p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n  local numbers = numbers:gsub('(%a+)',\
    \ '') -- remove non-alphanumeric characters\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3gb03bt1.lua:42: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2gin6t7r.lua:7: unfinished string near ''''%d''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(string.gmatch(numbers, \"%d+\")) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoba1z0ve.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpoba1z0ve.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpoba1z0ve.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]\"\
    , \"\")\n  local numbers = string.gsub(numbers, \" \", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+\", \"\"\
    )\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"%w+%w+%w+%w+%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+%w+%w+%w+%w+%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+\",\
    \ \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local numbers = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr074jcq7.lua:28: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n    local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ hyphens\n    local numbers = string.gsub(numbers, ',', '') -- Remove commas\n\
    \    local numbers = string.gsub(numbers, '%', '') -- Remove percents\n    local\
    \ numbers = string.gsub(numbers, '^', '') -- Remove carets\n    local numbers\
    \ = string.gsub(numbers, '&', '') -- Remove ampersands\n    local numbers = string.gsub(numbers,\
    \ '*', '') -- Remove asterisks\n    local numbers = string.gsub(numbers, '(',\
    \ '') -- Remove parentheses\n    local numbers = string.gsub(numbers, ')', '')\
    \ -- Remove parentheses\n    local numbers = string.gsub(numbers, '%', '') --\
    \ Remove percents\n    local numbers = string.gsub(numbers, '^', '') -- Remove\
    \ carets\n    local numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n\
    \    local numbers = string.gsub(numbers, '*', '') -- Remove asterisks\n    local\
    \ numbers = string.gsub(numbers, '(', '') -- Remove parentheses\n    local numbers\
    \ = string.gsub(numbers, ')', '') -- Remove parentheses\n    local numbers = string.gsub(numbers,\
    \ '%', '') -- Remove percents\n    local numbers = string.gsub(numbers, '^', '')\
    \ -- Remove carets\n    local numbers = string.gsub(numbers, '&', '') -- Remove\
    \ ampersands\n    local numbers = string.gsub(numbers, '*', '') -- Remove asterisks\n\
    \    local numbers = string.gsub(numbers, '(', '') -- Remove parentheses\n   \
    \ local numbers = string.gsub(numbers, ')', '') -- Remove parentheses\n    local\
    \ numbers = string.gsub(numbers, '%', '') -- Remove percents\n    local numbers\
    \ = string.gsub(numbers, '^', '') -- Remove carets\n    local numbers = string.gsub(numbers,\
    \ '&', '') -- Remove ampersands\n    local numbers = string.gsub(numbers, '*',\
    \ '') -- Remove asterisks\n    local numbers = string.gsub(numbers, '(', '') --\
    \ Remove parentheses\n    local numbers = string.gsub(numbers, ')', '') -- Remove\
    \ parentheses\n    local numbers = string.gsub(numbers, '%', '') -- Remove percents\n\
    \    local numbers = string.gsub(numbers, '^', '') -- Remove carets\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr191rd3z.lua:48: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', '%1 %2 %3')\n  local numbers = numbers:gsub('%d+', '%1 %2\
    \ %3')\n  local numbers = numbers:gsub('%1 %2 %3', '%d+')\n  local numbers = numbers:gsub('%d+',\
    \ '%d')\n  local numbers = numbers:gsub('%d', '%d')\n  return numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftf_s3mw.lua:9:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpftf_s3mw.lua:9: in local\
    \ 'candidate'\n\t/tmp/tmpftf_s3mw.lua:18: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpydyz2tnz.lua:7: unfinished string near ''''%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. \" \"\
    \n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ltxzp__.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6ltxzp__.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptmc8nncb.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    local num_list\
    \ = numbers.split(\" \")\n    for _, num in ipairs(num_list) do\n        local\
    \ num_as_int = tonumber(num)\n        if num_as_int ~= nil then\n            sorted_numbers\
    \ = sorted_numbers + tostring(num_as_int)\n        end\n    end\n    return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20447fmv.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp20447fmv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp20447fmv.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplkbr6bfh.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmcgcak0.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmprmcgcak0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprmcgcak0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw7jxctn.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaw7jxctn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaw7jxctn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )' .. sort_numbers_choices\
    \ .. '( |$)','\\\\2\\\\1')\n  local numbers = numbers:gsub('( )' .. sort_numbers_choices\
    \ .. '$','\\\\1')\n  local numbers = numbers:gsub('( )' .. sort_numbers_choices\
    \ .. '$','\\\\1')\n  return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprk1a0gi3.lua:7:\
    \ attempt to concatenate a nil value (global 'sort_numbers_choices')\nstack traceback:\n\
    \t/tmp/tmprk1a0gi3.lua:7: in local 'candidate'\n\t/tmp/tmprk1a0gi3.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822190
