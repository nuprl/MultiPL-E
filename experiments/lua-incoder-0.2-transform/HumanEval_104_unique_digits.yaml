name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a list of positive integers x. return a sorted list of all \n--\
  \ elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
  \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
  -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
  \ unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for i = 1, #x do\n    local digit = x[i]\n \
    \   if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n  end\n\
    \  return result\nend", "  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2\
    \ == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend",
  "  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  return ret\nend", "  local ret = {}\n  local i = 1\n\
    \  while i <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n\
    \    end\n    i = i + 1\n  end\n  return ret\nend", "  local ret = {}\n  for i\
    \ = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n\
    \  end\n  return ret\nend", "  local result = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end", "    local ret = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n\
    \            table.insert(ret, x[i])\n        end\n    end\n    return ret\nend",
  "  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n    if digit % 2\
    \ == 0 then\n      table.insert(ret, digit)\n    end\n  end\n  return ret\nend",
  "  local ret = {}\n  local i = 1\n  while i <= #x do\n    local digit = x[i]\n \
    \   if digit == 0 then\n      i = i + 1\n      continue\n    end\n    local found\
    \ = false\n    for j = 1, i do\n      if x[j] == 0 then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(ret,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return ret\nend", "  local ret = {}\n\
    \  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n\
    \    end\n  end\n  return ret\nend", "  local ret = {}\n  for i = 1, #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend", "  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(result, x[i])\n    end\n  end\n  return result\nend", "  \
    \  local ret = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n     \
    \       table.insert(ret, x[i])\n        end\n    end\n    return ret\nend", " \
    \ local result = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  return result\nend", "  local result = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result\
    \ + 1] = digit\n    end\n  end\n  return result\nend", "  local ret = {}\n  for\
    \ i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n   \
    \ end\n  end\n  return ret\nend", "  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend", "  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend", "  local ret\
    \ = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  return ret\nend", "  local seen = {}\n  local ret =\
    \ {}\n  for i = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n   \
    \   -- skip zero elements\n      continue\n    end\n    if seen[digit] then\n\
    \      -- skip duplicate elements\n      continue\n    end\n    seen[digit] =\
    \ true\n    ret[#ret + 1] = digit\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
