name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
  \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n\
    \    result = string.format(\"%s%0*d\", result, shift, digit)\n    x = math.floor((x\
    \ / 10) / 10)\n  end\n  if x > 0 then\n    result = string.format(\"%s%0*d\",\
    \ result, shift, x)\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local digits_len = #digits\n  local digits_reversed = {}\n\
    \  for i = 1, digits_len do\n    digits_reversed[#digits_reversed + 1] = tonumber(digits[i])\n\
    \  end\n  local digits_reversed_len = #digits_reversed\n  local digits_shifted\
    \ = {}\n  for i = 1, digits_len + shift - 1 do\n    digits_shifted[#digits_shifted\
    \ + 1] = digits_reversed[i]\n  end\n  local digits_shifted_len = #digits_shifted\n\
    \  local digits_reversed_shifted = {}\n  for i = 1, digits_reversed_len do\n \
    \   digits_reversed_shifted[#digits_reversed_shifted + 1] = digits_shifted[i]\n\
    \  end\n  return table.concat(digits_reversed_shifted, '.')\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n    result\
    \ = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local shift = shift or 0\n  local result = \"\"\n  for i = 1, digits do\n \
    \   local digit = math.floor((x - math.floor(x)) / (10 ** i))\n    local digits\
    \ = math.floor(math.log10(digit))\n    if digits > shift then\n      result =\
    \ result .. digit:reverse()\n    else\n      result = result .. digit\n    end\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.pow(10, shift) * digits\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    result = result .. digits[i]\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local result = \"\"\n  local carry = 0\n\
    \  local i = digits\n  while i > 0 do\n    local digit = math.floor((x - math.floor(x))\
    \ * (10 ** i) + carry)\n    carry = digit / 10\n    digit = digit % 10\n    result\
    \ = string.sub(result, -i - 1, -i) + digit\n    i = i - 1\n  end\n  if shift >\
    \ digits then\n    return result .. string.sub(result, -shift)\n  else\n    return\
    \ result .. string.sub(result, -shift, -shift + digits)\n  end\nend", "  local\
    \ digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n  local\
    \ digits_reversed = {}\n  local digits_shifted = {}\n  local digits_shifted_len\
    \ = 0\n  local digits_shifted_reversed = {}\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reverse", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    local digitString = tostring(digit)\n    if i == shift\
    \ then\n      result = digitString .. result\n    else\n      result = digitString\
    \ .. result\n    end\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local carry = 0\n  for i = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10 + carry + 0.5)\n    carry = digit - math.floor(digit)\n\
    \    digit = math.floor(digit / 10)\n    carry = carry + (digit - math.floor(digit))\n\
    \    result = result .. tostring(digit)\n    if shift > i then\n      result =\
    \ result .. tostring(carry)\n    end\n  end\n  if shift > digits then\n    result\
    \ = result .. tostring(carry)\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10)\n    result = result\
    \ .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result ..\
    \ tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift_reversed\
    \ = digits_shift > 0 and digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0\
    \ and digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0 and\
    \ -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift_reversed = digits_shift < 0 and -digits_shift or\
    \ 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift_reversed = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n  local digits_shift_reversed\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0\
    \ and -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0 and\
    \ digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift_reversed = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n  local digits_shift_reversed\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0\
    \ and -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0 and\
    \ digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift_reversed = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n  local digits_shift_reversed\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x %\
    \ 10) * math.pow(10, digit))\n    x = x / 10\n    result = result .. tostring(digit)\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit =\
    \ math.floor((x / 10) % 10) * 10\n    x = x // 10\n    result = result .. digit\n\
    \  end\n  if x > 0 then\n    result = result .. x\n  end\n  return result\nend",
  "  local digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n \
    \ local digits_reversed = {}\n  for i = 1, digits_len do\n    digits_reversed[#digits_reversed\
    \ + 1] = digits[i]\n  end\n  local digits_reversed_len = #digits_reversed\n  local\
    \ digits_shifted = {}\n  for i = 1, digits_len + shift - 1 do\n    digits_shifted[#digits_shifted\
    \ + 1] = digits_reversed[i]\n  end\n  local digits_shifted_len = #digits_shifted\n\
    \  local result = {}\n  for i = 1, digits_shifted_len do\n    result[#result +\
    \ 1] = digits_shifted[i]\n  end\n  return table.concat(result, '.')\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  local i = 0\n  while i < digits do\n    local digit = math.floor(x * 10 +\
    \ 0.5)\n    local remainder = x - digit\n    x = digit\n    if remainder > 0 then\n\
    \      result = result .. \"0\" .. tostring(remainder)\n    end\n    i = i + 1\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10)\
    \ % 10\n    local carry = (digit > 0 and 1 or -1) * digit\n    digit = digit +\
    \ carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n\
    \    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry = digit\
    \ > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n\
    \    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or\
    \ -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry\
    \ = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or\
    \ -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry\
    \ = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or\
    \ -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry\
    \ = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit ", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n   \
    \ result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = result .. tostring(digit)\n    x = x - digit\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = tostring(x).\n    split('.')\n  local digits_count = #digits\n\
    \  local digits_reversed = {}\n  for i = 1, digits_count do\n    digits_reversed[#digits_reversed\
    \ + 1] = digits[digits_count - i - 1]\n  end\n  local digits_count = #digits_reversed\n\
    \  local digits_reversed_count = #digits_reversed\n  local digits_shifted = {}\n\
    \  for i = 1, digits_count do\n    digits_shifted[digits_count - i - 1] = digits_reversed[digits_reversed_count\
    \ - i - 1]\n  end\n  local digits_shifted_count = #digits_shifted\n  local digits_reversed_shifted\
    \ = {}\n  for i = 1, digits_shifted_count do\n    digits_reversed_shifted[digits_reversed_count\
    \ - i - 1] = digits_shifted[digits_shifted_count - i - 1]\n  end\n  local digits_reversed_shifted_count\
    \ = #digits_reversed_shifted\n  local digits_reversed_shifted_string = ''\n  for\
    \ i = 1, digits_reversed_shifted_count do\n    digits_reversed_shifted_string\
    \ = digits_reversed_shifted_string .. digits_reversed_shifted[i]\n  end\n  return\
    \ digits_reversed_shifted_string\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
