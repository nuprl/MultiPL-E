name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
  \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n\
    \    result = string.format(\"%s%0*d\", result, shift, digit)\n    x = math.floor((x\
    \ / 10) / 10)\n  end\n  if x > 0 then\n    result = string.format(\"%s%0*d\",\
    \ result, shift, x)\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local digits_len = #digits\n  local digits_reversed = {}\n\
    \  for i = 1, digits_len do\n    digits_reversed[#digits_reversed + 1] = tonumber(digits[i])\n\
    \  end\n  local digits_reversed_len = #digits_reversed\n  local digits_shifted\
    \ = {}\n  for i = 1, digits_len + shift - 1 do\n    digits_shifted[#digits_shifted\
    \ + 1] = digits_reversed[i]\n  end\n  local digits_shifted_len = #digits_shifted\n\
    \  local digits_reversed_shifted = {}\n  for i = 1, digits_reversed_len do\n \
    \   digits_reversed_shifted[#digits_reversed_shifted + 1] = digits_shifted[i]\n\
    \  end\n  return table.concat(digits_reversed_shifted, '.')\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n    result\
    \ = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local shift = shift or 0\n  local result = \"\"\n  for i = 1, digits do\n \
    \   local digit = math.floor((x - math.floor(x)) / (10 ** i))\n    local digits\
    \ = math.floor(math.log10(digit))\n    if digits > shift then\n      result =\
    \ result .. digit:reverse()\n    else\n      result = result .. digit\n    end\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.pow(10, shift) * digits\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    result = result .. digits[i]\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local result = \"\"\n  local carry = 0\n\
    \  local i = digits\n  while i > 0 do\n    local digit = math.floor((x - math.floor(x))\
    \ * (10 ** i) + carry)\n    carry = digit / 10\n    digit = digit % 10\n    result\
    \ = string.sub(result, -i - 1, -i) + digit\n    i = i - 1\n  end\n  if shift >\
    \ digits then\n    return result .. string.sub(result, -shift)\n  else\n    return\
    \ result .. string.sub(result, -shift, -shift + digits)\n  end\nend", "  local\
    \ digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n  local\
    \ digits_reversed = {}\n  local digits_shifted = {}\n  local digits_shifted_len\
    \ = 0\n  local digits_shifted_reversed = {}\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reversed_len = 0\n  local digits_shifted_reversed_len\
    \ = 0\n  local digits_shifted_reverse", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    local digitString = tostring(digit)\n    if i == shift\
    \ then\n      result = digitString .. result\n    else\n      result = digitString\
    \ .. result\n    end\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local carry = 0\n  for i = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10 + carry + 0.5)\n    carry = digit - math.floor(digit)\n\
    \    digit = math.floor(digit / 10)\n    carry = carry + (digit - math.floor(digit))\n\
    \    result = result .. tostring(digit)\n    if shift > i then\n      result =\
    \ result .. tostring(carry)\n    end\n  end\n  if shift > digits then\n    result\
    \ = result .. tostring(carry)\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10)\n    result = result\
    \ .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result ..\
    \ tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift_reversed\
    \ = digits_shift > 0 and digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0\
    \ and digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0 and\
    \ -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift_reversed = digits_shift < 0 and -digits_shift or\
    \ 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift_reversed = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n  local digits_shift_reversed\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0\
    \ and -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0 and\
    \ digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift_reversed = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n  local digits_shift_reversed\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0\
    \ and -digits_shift or 0\n  local digits_shift_reversed = digits_shift > 0 and\
    \ digits_shift or 0\n  local digits_shift_reversed = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift_reversed = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift_reversed = digits_shift > 0 and digits_shift or 0\n  local digits_shift_reversed\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift_reversed = digits_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x %\
    \ 10) * math.pow(10, digit))\n    x = x / 10\n    result = result .. tostring(digit)\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit =\
    \ math.floor((x / 10) % 10) * 10\n    x = x // 10\n    result = result .. digit\n\
    \  end\n  if x > 0 then\n    result = result .. x\n  end\n  return result\nend",
  "  local digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n \
    \ local digits_reversed = {}\n  for i = 1, digits_len do\n    digits_reversed[#digits_reversed\
    \ + 1] = digits[i]\n  end\n  local digits_reversed_len = #digits_reversed\n  local\
    \ digits_shifted = {}\n  for i = 1, digits_len + shift - 1 do\n    digits_shifted[#digits_shifted\
    \ + 1] = digits_reversed[i]\n  end\n  local digits_shifted_len = #digits_shifted\n\
    \  local result = {}\n  for i = 1, digits_shifted_len do\n    result[#result +\
    \ 1] = digits_shifted[i]\n  end\n  return table.concat(result, '.')\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  local i = 0\n  while i < digits do\n    local digit = math.floor(x * 10 +\
    \ 0.5)\n    local remainder = x - digit\n    x = digit\n    if remainder > 0 then\n\
    \      result = result .. \"0\" .. tostring(remainder)\n    end\n    i = i + 1\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10)\
    \ % 10\n    local carry = (digit > 0 and 1 or -1) * digit\n    digit = digit +\
    \ carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n\
    \    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry = digit\
    \ > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n\
    \    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or\
    \ -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry\
    \ = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or\
    \ -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry\
    \ = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit > 0 and 1 or\
    \ -1\n    digit = digit + carry\n    digit = math.floor(digit / 10)\n    carry\
    \ = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit = math.floor(digit\
    \ / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit + carry\n    digit\
    \ = math.floor(digit / 10)\n    carry = digit > 0 and 1 or -1\n    digit = digit\
    \ + carry\n    digit = math.floor(digit / 10)\n    carry = digit ", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n   \
    \ result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = result .. tostring(digit)\n    x = x - digit\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = tostring(x).\n    split('.')\n  local digits_count = #digits\n\
    \  local digits_reversed = {}\n  for i = 1, digits_count do\n    digits_reversed[#digits_reversed\
    \ + 1] = digits[digits_count - i - 1]\n  end\n  local digits_count = #digits_reversed\n\
    \  local digits_reversed_count = #digits_reversed\n  local digits_shifted = {}\n\
    \  for i = 1, digits_count do\n    digits_shifted[digits_count - i - 1] = digits_reversed[digits_reversed_count\
    \ - i - 1]\n  end\n  local digits_shifted_count = #digits_shifted\n  local digits_reversed_shifted\
    \ = {}\n  for i = 1, digits_shifted_count do\n    digits_reversed_shifted[digits_reversed_count\
    \ - i - 1] = digits_shifted[digits_shifted_count - i - 1]\n  end\n  local digits_reversed_shifted_count\
    \ = #digits_reversed_shifted\n  local digits_reversed_shifted_string = ''\n  for\
    \ i = 1, digits_reversed_shifted_count do\n    digits_reversed_shifted_string\
    \ = digits_reversed_shifted_string .. digits_reversed_shifted[i]\n  end\n  return\
    \ digits_reversed_shifted_string\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shifted_shifted_shifted_",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local carry\
    \ = 0\n  for i = 1, digits do\n    local digit = math.floor((x / 10^i) * 10^shift)\n\
    \    local digit = math.floor(digit + carry)\n    carry = digit - math.floor(digit)\n\
    \    result = result .. tostring(digit)\n  end\n  if carry > 0 then\n    result\
    \ = result .. tostring(carry)\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10)\n    local remainder\
    \ = x % 10\n    x = remainder\n    result = result .. tostring(digit) .. tostring(remainder)\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ shift_digits = math.floor(math.log10(digits)) + shift\n  local shift_digits_remainder\
    \ = math.mod(shift_digits, 10)\n  local shift_digits_remainder_str = tostring(shift_digits_remainder)\n\
    \  local shift_digits_str = tostring(shift_digits)\n  local shift_digits_str =\
    \ shift_digits_str:gsub(\"%d+\", shift_digits_remainder_str)\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d*\", shift_digits_str)\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d?\", shift_digits_str)\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"\
    %d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n\
    \  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"\
    %d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n\
    \  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"\
    %d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n\
    \  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"\
    %d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n\
    \  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"\
    %d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n\
    \  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str\
    \ = shift_digits_str:gsub(\"%d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"\
    %d\", \"\")\n  local shift_digits_str = shift_digits_str:gsub(\"%d\", \"\")\n\
    \  local shift_digits_str = shift_digit", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x - math.floor(x)) * (10 ** digit))\n    result\
    \ = string.format(\"%s%s\", result, digit)\n  end\n  if digits > 0 then\n    result\
    \ = string.format(\"%s%s\", result, string.rep(\"0\", digits - 1))\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10)\
    \ % 10\n    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\"\
    , x, result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) + 0.5)\n    x = x / 10\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = result .. circular_shift(x, digits - 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local carry = 0\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10^i) * 10^shift)\n    carry = digit + carry\n    result = string.format(\"\
    %0*d\", digits, carry) + result\n  end\n  if shift > digits then\n    result =\
    \ string.format(\"%0*d\", digits, carry) + result\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n\
    \    result = result .. tostring(digit)\n  end\n  if digits > 0 then\n    result\
    \ = circular_shift(result, digits - 1)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor((x / math.pow(10, i)) % 10)\n    result = string.sub(result,\
    \ 1, i-1) + digit\n  end\n  if shift > digits then\n    return string.sub(result,\
    \ 1, digits+1) + string.sub(result, digits+2)\n  else\n    return string.sub(result,\
    \ 1, digits+shift)\n  end\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local carry = 0\n  for i = 1, digits do\n    local digit\
    \ = math.floor((x - math.floor(x)) * (10 ** i) + math.floor(carry))\n    carry\
    \ = math.floor(digit / 10)\n    digit = math.mod(digit, 10)\n    result = result\
    \ .. digit\n  end\n  if shift > digits then\n    local digits = math.floor(math.log10(math.abs(x)))\n\
    \    for i = 1, digits do\n      result = result .. math.floor((math.floor(x)\
    \ / math.floor(x)) * (10 ** i))\n    end\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n    result = string.format(\"\
    %s%0*d\", result, math.abs(shift), digit)\n    x = math.floor(x * 10) / 10\n \
    \ end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    if x > 0 then\n      result = result ..\
    \ digit\n    end\n  end\n  if x > 0 then\n    result = result .. math.floor(x)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    x = x / 10\n    result = result .. tostring(digit) ..\
    \ tostring(digit)\n  end\n  if digits > 0 then\n    result = result .. tostring(math.floor((x\
    \ % 10) * 10 / 10))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    result = string.format(\"%0*d\", math.max(digits - i, 0), digit) + result\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local digits_shifted = math.floor(math.pow(10, shift)) * math.pow(10, digits\
    \ - shift)\n  local digits_reversed = math.floor(x / digits_shifted)\n  return\
    \ string.format(\"%0*d\", digits_reversed, digits_shifted)\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n    local remainder\
    \ = x - digit * 10\n    if remainder < 0 then\n      remainder = -remainder\n\
    \    end\n    result = result .. string.format(\"%d\", digit) .. string.format(\"\
    %d\", remainder)\n    x = x - remainder\n  end\n  if digits > 0 then\n    result\
    \ = result .. string.format(\"%d\", x)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n    local digit\
    \ = digit % 10\n    result = result .. digit\n    x = x - digit\n  end\n  if x\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result =\
    \ result .. tostring(digit)\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local shift = shift - digits + 1\n  if shift > digits then\n    shift = shift\
    \ - digits\n  end\n  local result = \"\"\n  local i = math.floor(x / 10)\n  while\
    \ i > 0 do\n    result = result .. string.format(\"%d\", math.floor(i))\n    i\
    \ = math.floor(i/10)\n  end\n  result = result .. string.format(\"%d\", x)\n \
    \ result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result, \"\
    \ \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")\n  result = string.gsub(result, \" \", \"\")\n  result = string.gsub(result,\
    \ \" \", \"\")", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  local i = math.ceil(digits / 2)\n  while i > 0 do\n    local\
    \ digit = math.floor((digits % 2) * 10 + (digits % 2) * math.pow(10, digits -\
    \ i - 1))\n    digit = digit + math.floor((digit - 1) / 2) * math.pow(10, digits\
    \ - i - 2)\n    result = digit .. result\n    digits = digits / 2\n    i = math.floor(digits\
    \ / 2)\n  end\n  return result\nend", "  local digits = tostring(x)\n  local result\
    \ = \"\"\n  local shift_digits = math.floor(math.log10(digits))\n  local shift_digits_power\
    \ = math.pow(10, shift_digits)\n  local shift_digits_power_shifted = math.floor(shift_digits_power\
    \ * shift)\n  local shift_digits_power_shifted_reversed = math.floor(shift_digits_power_shifted\
    \ / 10)\n  local shift_digits_power_shifted_reversed_shifted = shift_digits_power_shifted_reversed\
    \ + 10\n  local shift_digits_power_shifted_reversed_shifted_digits = math.floor(shift_digits_power_shifted_reversed_shifted\
    \ / 10)\n  local shift_digits_power_shifted_reversed_shifted_digits_reversed =\
    \ shift_digits_power_shifted_reversed_shifted_digits + 10\n  local shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted\
    \ = shift_digits_power_shifted_reversed_shifted_digits_reversed + 10\n  local\
    \ shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits =\
    \ shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted + 10\n \
    \ local shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed\
    \ = shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits\
    \ + 10\n  local shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted\
    \ = shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed\
    \ + 10\n  local shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted_digits\
    \ = shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed\
    \ + 10\n  local shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted_digits_reversed\
    \ = shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted_digits\
    \ + 10\n  local shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted\
    \ = shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted_digits\
    \ + 10\n  local shift_digits_power_shifted_reversed_shifted_digits_reversed_shifted_digits_reversed_shifted_digits_reversed_shif",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / math.pow(10, i))) %\
    \ 10\n    result = string.format(\"%s%c\", result, digit)\n  end\n  if digits\
    \ > 0 then\n    result = string.format(\"%s%c\", result, math.floor((x / math.pow(10,\
    \ digits))))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.log10(math.pow(10, shift)) + digits)\n\
    \  local digits_shift = digits_shift - digits + 1\n  local digits_shift = digits_shift\
    \ - shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digit", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\
    \n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x -\
    \ math.floor(x)) / (10 ** digit))\n    result = result .. digit\n    x = math.floor((x\
    \ - digit) * (10 ** shift))\n  end\n  if shift > digits then\n    local digit\
    \ = math.floor((x - math.floor(x)) / (10 ** (digits - 1)))\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  if shift > math.floor(x:len() / 2)\
    \ then\n    return x:reverse():gsub('.', function(c) return c:reverse() end)\n\
    \  else\n    return x:gsub('.', function(c) return c:reverse() end)\n  end\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor(x * 10\
    \ / math.pow(10, digit))\n    result = result .. digit\n    x = x - digit\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    if digit < 10 then\n      result = result .. \"0\" .. digit\n    else\n \
    \     result = result .. digit\n    end\n  end\n  if digits > 0 then\n    result\
    \ = result .. \"0\"\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local digits_len = #digits\n  local digits_reversed = {}\n\
    \  for i = 1, digits_len do\n    digits_reversed[#digits_reversed + 1] = tonumber(digits[i])\n\
    \  end\n  local digits_reversed_len = #digits_reversed\n  local digits_shifted\
    \ = {}\n  for i = 1, digits_len do\n    digits_shifted[#digits_shifted + 1] =\
    \ digits_reversed[digits_reversed_len - i - shift]\n  end\n  return table.concat(digits_shifted,\
    \ '.')\nend", "  local digits = math.floor(math.log10(x))\n  local result = \"\
    \"\n  for i = 1, digits do\n    local digit = math.floor((x - math.floor(x)) *\
    \ (10 ** i))\n    local reversed = math.floor(digit / 10) * 10 + digit % 10\n\
    \    if i == shift then\n      result = reversed:reverse()\n    else\n      result\
    \ = reversed:reverse():reverse()\n    end\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.log10(math.pow(10,\
    \ shift + 1)))\n  local digits_shift = digits_shift > digits ? digits_shift :\
    \ digits\n  local digits_shift = digits_shift - digits_shift % 10\n  local digits_shift\
    \ = digits_shift > 0 and digits_shift or 0\n  local digits_shift = digits_shift\
    \ + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift % 10\n\
    \  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local digits_shift = digits_shift + digits_shift % 10\n  local digits_shift\
    \ = digits_shift + digits_shift % 10\n  local digits_shift = digits_shift + digits_shift\
    \ % 10\n  local ", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/10)\
    \ % 10\n    local remainder = x % 10\n    x = remainder\n    result = string.format(\"\
    %s%0*d\", result, digit, shift)\n    digits = digits - 1\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(digits)) + shift\n  local shift_digits_power = math.pow(10,\
    \ shift_digits)\n  local shift_digits_power_2 = math.pow(10, shift_digits - 1)\n\
    \  local shift_digits_power_3 = math.pow(10, shift_digits - 2)\n  local shift_digits_power_4\
    \ = math.pow(10, shift_digits - 3)\n  local shift_digits_power_5 = math.pow(10,\
    \ shift_digits - 4)\n  local shift_digits_power_6 = math.pow(10, shift_digits\
    \ - 5)\n  local shift_digits_power_7 = math.pow(10, shift_digits - 6)\n  local\
    \ shift_digits_power_8 = math.pow(10, shift_digits - 7)\n  local shift_digits_power_9\
    \ = math.pow(10, shift_digits - 8)\n  local shift_digits_power_10 = math.pow(10,\
    \ shift_digits - 9)\n  local shift_digits_power_11 = math.pow(10, shift_digits\
    \ - 10)\n  local shift_digits_power_12 = math.pow(10, shift_digits - 11)\n  local\
    \ shift_digits_power_13 = math.pow(10, shift_digits - 12)\n  local shift_digits_power_14\
    \ = math.pow(10, shift_digits - 13)\n  local shift_digits_power_15 = math.pow(10,\
    \ shift_digits - 14)\n  local shift_digits_power_16 = math.pow(10, shift_digits\
    \ - 15)\n  local shift_digits_power_17 = math.pow(10, shift_digits - 16)\n  local\
    \ shift_digits_power_18 = math.pow(10, shift_digits - 17)\n  local shift_digits_power_19\
    \ = math.pow(10, shift_digits - 18)\n  local shift_digits_power_20 = math.pow(10,\
    \ shift_digits - 19)\n  local shift_digits_power_21 = math.pow(10, shift_digits\
    \ - 20)\n  local shift_digits_power_22 = math.pow(10, shift_digits - 21)\n  local\
    \ shift_digits_power_23 = math.pow(10, shift_digits - 22)\n  local shift_digits_power_24\
    \ = math.pow(10, shift_digits - 23)\n  local shift_digits_power_25 = math.pow(10,\
    \ shift_digits - 24)\n  local shift_digits_power_26 = math.pow(10, shift_digits\
    \ - 25)\n  local shift_digits_power_27 = math.pow(10, shift_digits - 26)\n  local\
    \ shift_digits_power_28 = math.pow(10, shift_digits - 27)\n  local shift_digits_power_29\
    \ = math.pow(10, shift_digits - 28)\n  local shift_digits_power_30 = math.pow(10,\
    \ shift_digits - 29)\n  local shift_digits_power_31 = math.pow(10, ", "  local\
    \ digits = tostring(x)\n  local n = #digits\n  local result = \"\"\n  for i =\
    \ 1, n do\n    local digit = tonumber(digits[i])\n    if digit > 0 then\n    \
    \  result = result .. tostring(digit % 10 + digit / 10 % 10)\n    else\n     \
    \ result = result .. tostring(digit + n % 10)\n    end\n  end\n  if shift > n\
    \ then\n    shift = shift - n\n  end\n  for i = 1, shift do\n    result = result\
    \ .. tostring(n % 10)\n    n = n / 10\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n    result =\
    \ string.sub(result, 1, i - 1) .. digit\n    x = math.floor((x / 10) / 10)\n \
    \ end\n  if digits > 0 then\n    result = string.sub(result, 1, digits)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shifted\
    \ = math.floor((digits + shift) / shift)\n  local digits_shifted_reversed = math.floor((digits\
    \ - digits_shifted) * shift)\n  return string.format('%0*d', digits_shifted_reversed,\
    \ x:sub(1, digits_shifted + 1))\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = result .. digit\n    x = math.floor(x * 100) / 100\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x * math.pow(10,\
    \ -digits))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = result .. digit\n    x = x - digit\n  end\n  if x\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    local remainder\
    \ = x % 10\n    x = remainder\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = result .. tostring(reverse(math.floor((x / 10) * 10)))\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = result .. digit\n    x = x - digit\n  end\n  if x\
    \ > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local shiftDigits\
    \ = math.floor(math.pow(10, shift)) - 1\n  for i = 1, digits do\n    local digit\
    \ = x\n    local carry = 0\n    for j = 1, shiftDigits do\n      digit = digit\
    \ * 10 + carry\n      carry = digit / 10\n      digit = digit % 10\n    end\n\
    \    if carry > 0 then\n      result = result .. \"1\"\n    end\n    result =\
    \ result .. digit\n  end\n  if shift > digits then\n    result = result..\"0\"\
    \n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x\
    \ / 10)\n  end\n  if digits > 0 then\n    result = string.format(\"%s%d\", result,\
    \ x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.sub(result, 1, i - 1) .. digit\n    x = math.floor(x\
    \ / 10)\n  end\n  if digits > 0 then\n    result = string.sub(result, 1, digits)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\"\
    , x, result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) % 10)\n    result = string.format(\"%s%0*d\", result, math.abs(shift),\
    \ digit)\n    x = math.floor((x / 10) / 10)\n  end\n  if x > 0 then\n    result\
    \ = string.format(\"%s%0*d\", result, math.abs(shift), x)\n  end\n  return result\n\
    end", "  local digits = math.floor(x/math.pow(10,shift))\n  local result = \"\"\
    \n  for i = 1, digits do\n    result = result .. math.floor(x/math.pow(10,shift))\n\
    \  end\n  if shift > math.floor(math.log10(x)) then\n    return result .. \"0\"\
    \n  else\n    return result .. math.floor(math.pow(10,shift))\n  end\nend", " \
    \ local digits = math.floor(math.log10(x))\n  local digits_shifted = math.floor(math.log10(math.pow(10,\
    \ shift)) + digits)\n  local digits_shifted_reversed = math.floor(math.log10(math.pow(10,\
    \ shift)) - digits)\n  local digits_shifted_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ shift)) - digits_shifted_reversed)\n  local digits_shifted_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ shift)) - digits_shifted_reversed_reversed_reversed)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed_reversed_reversed)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift)) - digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "  local digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n \
    \ local digits_reversed = {}\n  local digits_reversed_len = 0\n  local digits_reversed_index\
    \ = 0\n  local digits_reversed_string = ''\n  local digits_reversed_string_len\
    \ = 0\n  local digits_reversed_string_index = 0\n  local digits_reversed_string_char\n\
    \  local digits_reversed_string_char_len\n  local digits_reversed_string_char_pos\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local digits_reversed_string_char_pos_index\n\
    \  local digits_reversed_string_char_pos_index\n  local ", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local shiftDigits = math.floor(math.pow(10, shift))\
    \ - 1\n  for i = digits, 1, -1 do\n    local digit = math.floor(x * 10 / shiftDigits)\
    \ % 10\n    local reversed = math.floor(digit / 10) * 10 - digit\n    result =\
    \ result .. tostring(digit) .. tostring(reversed)\n    shiftDigits = shiftDigits\
    \ / 10\n  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10,\
    \ shift))\n  x = x - math.pow(10, shift) * digits\n  local result = \"\"\n  repeat\n\
    \    local digit = math.floor(x/math.pow(10, shift))\n    x = x - math.pow(10,\
    \ shift) * digit\n    result = result .. digit\n  until x == 0\n  return result\n\
    end", "  local digits = math.floor(x/math.pow(10, shift))\n  x = x - digits*math.pow(10,\
    \ shift)\n  return string.format(\"%0*d\", shift, x)\nend", "  local digits =\
    \ math.floor(math.log10(x))\n  local shift = shift or digits\n  local result =\
    \ \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ / 10^digit) * 10^shift)\n    result = string.format(\"%0*d\", digits, digit)\
    \ + result\n    shift = shift - 1\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10)\n    x = x - digit\n\
    \    result = result .. tostring(digit)\n  end\n  if x > 0 then\n    result =\
    \ result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) * 10)\n    result = result .. digit\n \
    \   x = x - digit\n  end\n  if x > 0 then\n    result = result .. tostring(x)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = result .. digit\n    x = x % 10\n  end\n  if\
    \ x > 0 then\n    result = result .. x\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    x = x - digit\n\
    \    result = result .. digit\n  end\n  if x > 0 then\n    result = result ..\
    \ \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x - math.floor(x)) / (10 ** digit))\n    if digit\
    \ > 0 then\n      result = result .. digit\n    end\n  end\n  if digits > 0 then\n\
    \    result = result .. math.floor((x - math.floor(x)) / (10 ** digits))\n  end\n\
    \  return result\nend", "  local digits = tostring(x)\n  local result = \"\"\n\
    \  local shift = shift or 1\n  local shift_digits = math.floor(math.log10(shift))\
    \ + 1\n  local shift_digits_pow = shift_digits + 1\n  local shift_digits_pow2\
    \ = shift_digits_pow * shift_digits_pow\n  local shift_digits_pow3 = shift_digits_pow2\
    \ * shift_digits_pow\n  local shift_digits_pow4 = shift_digits_pow3 * shift_digits_pow\n\
    \  local shift_digits_pow5 = shift_digits_pow4 * shift_digits_pow\n  local shift_digits_pow6\
    \ = shift_digits_pow5 * shift_digits_pow\n  local shift_digits_pow7 = shift_digits_pow6\
    \ * shift_digits_pow\n  local shift_digits_pow8 = shift_digits_pow7 * shift_digits_pow\n\
    \  local shift_digits_pow9 = shift_digits_pow8 * shift_digits_pow\n  local shift_digits_pow10\
    \ = shift_digits_pow9 * shift_digits_pow\n  local shift_digits_pow11 = shift_digits_pow10\
    \ * shift_digits_pow\n  local shift_digits_pow12 = shift_digits_pow11 * shift_digits_pow\n\
    \  local shift_digits_pow13 = shift_digits_pow12 * shift_digits_pow\n  local shift_digits_pow14\
    \ = shift_digits_pow13 * shift_digits_pow\n  local shift_digits_pow15 = shift_digits_pow14\
    \ * shift_digits_pow\n  local shift_digits_pow16 = shift_digits_pow15 * shift_digits_pow\n\
    \  local shift_digits_pow17 = shift_digits_pow16 * shift_digits_pow\n  local shift_digits_pow18\
    \ = shift_digits_pow17 * shift_digits_pow\n  local shift_digits_pow19 = shift_digits_pow18\
    \ * shift_digits_pow\n  local shift_digits_pow20 = shift_digits_pow19 * shift_digits_pow\n\
    \  local shift_digits_pow21 = shift_digits_pow20 * shift_digits_pow\n  local shift_digits_pow22\
    \ = shift_digits_pow21 * shift_digits_pow\n  local shift_digits_pow23 = shift_digits_pow22\
    \ * shift_digits_pow\n  local shift_digits_pow24 = shift_digits_pow23 * shift_digits_pow\n\
    \  local shift_digits_pow25 = shift_digits_pow24 * shift_digits_pow\n  local shift_digits_pow26\
    \ = shift_digits_pow25 * shift_digits_pow\n  local shift_digits_pow27 = shift_digit",
  "  local digits = math.floor(x/math.pow(10, shift))\n  x = x - math.pow(10, shift)\
    \ * digits\n  return string.format(\"%0*d\", shift, x)\nend", "  local digits\
    \ = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\
    \ + shift\n  local shift_digits_power = math.pow(10, shift_digits)\n  local digits_power\
    \ = math.pow(10, digits)\n  local digits_shift_digits = math.floor(digits_power\
    \ / shift_digits_power)\n  local digits_shift_digits_power = math.pow(10, digits_shift_digits)\n\
    \  local digits_shift_digits_power_2 = math.pow(10, digits_shift_digits * 2)\n\
    \  local digits_shift_digits_power_3 = math.pow(10, digits_shift_digits * 3)\n\
    \  local digits_shift_digits_power_4 = math.pow(10, digits_shift_digits * 4)\n\
    \  local digits_shift_digits_power_5 = math.pow(10, digits_shift_digits * 5)\n\
    \  local digits_shift_digits_power_6 = math.pow(10, digits_shift_digits * 6)\n\
    \  local digits_shift_digits_power_7 = math.pow(10, digits_shift_digits * 7)\n\
    \  local digits_shift_digits_power_8 = math.pow(10, digits_shift_digits * 8)\n\
    \  local digits_shift_digits_power_9 = math.pow(10, digits_shift_digits * 9)\n\
    \  local digits_shift_digits_power_10 = math.pow(10, digits_shift_digits * 10)\n\
    \  local digits_shift_digits_power_11 = math.pow(10, digits_shift_digits * 11)\n\
    \  local digits_shift_digits_power_12 = math.pow(10, digits_shift_digits * 12)\n\
    \  local digits_shift_digits_power_13 = math.pow(10, digits_shift_digits * 13)\n\
    \  local digits_shift_digits_power_14 = math.pow(10, digits_shift_digits * 14)\n\
    \  local digits_shift_digits_power_15 = math.pow(10, digits_shift_digits * 15)\n\
    \  local digits_shift_digits_power_16 = math.pow(10, digits_shift_digits * 16)\n\
    \  local digits_shift_digits_power_17 = math.pow(10, digits_shift_digits * 17)\n\
    \  local digits_shift_digits_power_18 = math.pow(10, digits_shift_digits * 18)\n\
    \  local digits_shift_digits_power_19 = math.pow(10, digits_shift_digits * 19)\n\
    \  local digits_shift_digits_power_20 = math.pow(10, digits_shift_digits * 20)\n\
    \  local digits_shift_digits_power_21 = math.pow(10, digits_shift_digits * 21)\n\
    \  local digits_shift_digits_power_22 = math.pow(10, digits_shift_digits * 22)\n\
    \  local digits_shift_digits_power_23 = ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 1\n  while digits > 0 do\n    local\
    \ digit = math.floor(x * 10^i) / 10^i\n    i = i + 1\n    if digit > 0 then\n\
    \      result = result .. digit\n    end\n    digits = digits - 1\n  end\n  if\
    \ digits > 0 then\n    result = result .. math.floor(x * 10^i) / 10^i\n  end\n\
    \  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.pow(10, shift) * digits\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    result = result .. string.format(\"%d\", math.floor(x/math.pow(10, shift)))\n\
    \    x = x - math.pow(10, shift) * math.pow(10, shift)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ i = math.max(0, digits - shift)\n  while i > 0 do\n    local digit = math.floor(x\
    \ * 10^i)\n    result = string.format(\"%0*d\", digits, digit) + result\n    i\
    \ = i - 1\n  end\n  return result\nend", "  local digits = tostring(x).\n    split('.')\n\
    \  local digits_length = #digits\n  local digits_reversed = {}\n  local digits_shifted\
    \ = {}\n  local digits_shifted_length = 0\n  local digits_shifted_reversed = {}\n\
    \  local digits_shifted_reversed_length = 0\n  for i = 1, digits_length do\n \
    \   local digit = tonumber(digits[i])\n    digits_shifted[digits_shifted_length]\
    \ = digit\n    digits_shifted_reversed[digits_shifted_reversed_length] = digit\n\
    \    digits_shifted_length = digits_shifted_length + 1\n    digits_shifted_reversed_length\
    \ = digits_shifted_reversed_length + 1\n  end\n  if shift > digits_length then\n\
    \    shift = digits_length\n  end\n  for i = 1, shift do\n    digits_reversed[digits_reversed_length]\
    \ = digits_shifted[digits_shifted_length]\n    digits_reversed_length = digits_reversed_length\
    \ + 1\n    digits_shifted_length = digits_shifted_length - 1\n    digits_shifted_reversed_length\
    \ = digits_shifted_reversed_length - 1\n  end\n  return table.concat(digits_reversed,\
    \ '.')\nend", "  local digits = tostring(x).\n    split('.')\n  local result =\
    \ digits[1]\n  for i = 2, #digits do\n    result = result .. digits[i] .. digits[i\
    \ - shift]\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed_shift\
    \ = digits_shifted_reversed - digits_shifted + shift\n  local digits_shifted_reversed_shift_digits\
    \ = math.floor(digits_shifted_reversed_shift / digits)\n  local digits_shifted_reversed_shift_digits_shift\
    \ = digits_shifted_reversed_shift % digits\n  local digits_shifted_reversed_shift_digits_shift_reversed\
    \ = math.floor(digits_shifted_reversed_shift_digits / digits)\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift\
    \ = digits_shifted_reversed_shift_digits % digits\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed\
    \ = math.floor(digits_shifted_reversed_shift_digits_shift_reversed / digits)\n\
    \  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift\
    \ = digits_shifted_reversed_shift_digits_shift_reversed % digits\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed\
    \ = math.floor(digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed\
    \ / digits)\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift\
    \ = digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed\
    \ % digits\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift_reversed\
    \ = math.floor(digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed\
    \ / digits)\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift\
    \ = digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift_reversed\
    \ % digits\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed\
    \ = math.floor(digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift_reversed\
    \ / digits)\n  local digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift\
    \ = digits_shifted_reversed_shift_digits_shift_reversed_shift_reversed_shift_reversed_shift_",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift\n  if shift\
    \ > #digits then\n    shift = shift - #digits\n    digits = string.gsub(digits,\
    \ \"..$\", \"\")\n  else\n    digits = string.gsub(digits, \"^..\", \"\")\n  end\n\
    \  for i = #digits, 1, -1 do\n    local digit = tonumber(digits[i])\n    digit\
    \ = digit + math.floor((digit - 1) / shift) * shift\n    digit = math.floor(digit)\n\
    \    if digit < 10 then\n      result = result .. digit\n    else\n      result\
    \ = result .. string.char(digit - 10)\n    end\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local i = 1\n  while digits > 0 do\n    local digit = math.floor(x * 10 + digits)\n\
    \    digits = digits - digit\n    result = result .. digit\n    i = i + 1\n  end\n\
    \  if digits > 0 then\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    if digit < 10 then\n      result = result .. digit\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local digits =\
    \ tostring(x)\n  local result = \"\"\n  local shiftbits = math.floor(math.log(shift,\
    \ 2))\n  local shiftbit = math.pow(10, shiftbits)\n  local digits_length = #digits\n\
    \  local shiftbits_length = #tostring(math.pow(10, shiftbits))\n  local digits_remaining\
    \ = digits_length - shiftbits_length\n  local shiftbits_remaining = shiftbits\
    \ - shiftbits_length\n  while digits_remaining > 0 do\n    local digit = tonumber(digits)\n\
    \    local shift = math.floor(math.log(tonumber(digit), 10))\n    local digit\
    \ = math.floor(math.pow(10, shift))\n    local digit = digit + digit\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ - 1) / 3)\n    digits = digits - (digit * 3)\n    result = result .. string.sub(tostring(x),\
    \ digit, digit + 1) .. string.sub(tostring(x), digit + 1, digit + 2)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    if x > 0 then\n      result = result ..\
    \ digit\n    end\n  end\n  if x > 0 then\n    result = result .. x\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10)\
    \ % 10\n    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%s%d\"\
    , result, x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) % 10)\n    result = string.format(\"%s%0*d\", result, math.abs(shift),\
    \ digit)\n    x = math.floor((x / 10) / 10)\n  end\n  if x > 0 then\n    result\
    \ = string.format(\"%s%0*d\", result, math.abs(shift), x)\n  end\n  return result\n\
    end", "  local digits = math.floor(x/math.pow(10, shift))\n  x = x - math.pow(10,\
    \ shift) * digits\n  local result = \"\"\n  for i = 1, digits do\n    result =\
    \ result .. string.format(\"%0*d\", shift, math.floor(x/math.pow(10, shift)))\n\
    \    x = x - math.pow(10, shift) * math.pow(10, shift)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    result = string.format(\"%0*d\", math.max(digits - i, 0), digit) + result\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%0*d\", digits, result)\
    \ -- Circular shift the digits of the integer x, shift the digits right by shift\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local digits_shifted = math.floor(math.pow(10, shift)) * math.pow(10, digits\
    \ - shift)\n  local digits_reversed = digits_shifted / math.pow(10, shift)\n \
    \ local digits_shifted_reversed = digits_shifted % math.pow(10, shift)\n  local\
    \ result = string.format(\"%0*d\", digits, digits_shifted_reversed)\n  if shift\
    \ > digits then\n    result = string.format(\"%0*d\", digits, digits_reversed)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** (digits - i)))\n    result = result .. digit\n  end\n\
    \  if digits > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i))) % 10\n    result = string.sub(result, 1, i - 1) .. digit\n\
    \  end\n  if digits > 0 then\n    result = string.sub(result, 1, digits)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shift\
    \ = math.floor(math.log10(math.pow(10, shift)) + 1)\n  local digits_shift_right\
    \ = math.floor(digits_shift - digits)\n  local digits_shift_left = digits_shift\
    \ - digits_shift_right\n  local digits_shift_left_reversed = digits_shift_left\
    \ - digits\n  local digits_shift_right_reversed = digits_shift_right - digits_shift_left\n\
    \  local digits_shift_left_reversed_str = string.rep(\"0\", digits_shift_left_reversed)\n\
    \  local digits_shift_right_reversed_str = string.rep(\"0\", digits_shift_right_reversed)\n\
    \  local digits_shift_left_str = string.rep(\"0\", digits_shift_left)\n  local\
    \ digits_shift_right_str = string.rep(\"0\", digits_shift_right)\n  local digits_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_str = string.rep(\"0\"\
    , digits)\n  local digits_reversed_str = string.rep(\"0\", digits)\n  local digits_reversed_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_str = string.rep(\"0\"\
    , digits)\n  local digits_reversed_str = string.rep(\"0\", digits)\n  local digits_reversed_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_str = string.rep(\"0\"\
    , digits)\n  local digits_reversed_str = string.rep(\"0\", digits)\n  local digits_reversed_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_str = string.rep(\"0\"\
    , digits)\n  local digits_reversed_str = string.rep(\"0\", digits)\n  local digits_reversed_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_str = string.rep(\"0\"\
    , digits)\n  local digits_reversed_str = string.rep(\"0\", digits)\n  local digits_reversed_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_str = string.rep(\"0\"\
    , digits)\n  local digits_reversed_str = string.rep(\"0\", digits)\n  local digits_reversed_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_str = string.rep(\"0\"\
    , digits)\n  local digits_reversed_str = string.rep(\"0\", digits)\n  local digits_reversed_str\
    \ = ", "  if shift > math.floor(math.log10(abs(x))) then return x end\n  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / math.pow(10, i)) % 10)\n\
    \    result = string.sub(result, 1, i - 1) .. digit\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ digit\n  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10^digit))\n    result = result .. digit\n    x = x - digit * 10^digit\n\
    \  end\n  if shift > digits then\n    shift = shift - digits\n  end\n  if shift\
    \ > 0 then\n    result = result .. circular_shift(x, shift)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ carry = 0\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) * (10 ** shift))\n    carry = math.floor((digit + carry) /\
    \ 10)\n    digit = math.floor((digit + carry) % 10)\n    result = string.sub(result,\
    \ 1, -1) + digit\n  end\n  if carry > 0 then\n    result = string.sub(result,\
    \ 1, -1) + carry\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) * (10 ** i)) / (10 ** i)\n    if digit > 9 then\n      digit\
    \ = digit - 9\n    end\n    result = result .. tostring(digit)\n  end\n  if digits\
    \ > 0 then\n    result = result .. tostring(math.floor((x - math.floor(x)) * (10\
    \ ** digits)) / (10 ** digits))\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local shift = shift or digits\n  local digits_reversed\
    \ = math.floor((10 - shift + digits) / 2)\n  local digits_shifted = math.floor((10\
    \ - shift + digits) / 2)\n  local digits_reversed_str = string.rep(\"0\", digits_reversed)\n\
    \  local digits_shifted_str = string.rep(\"0\", digits_shifted)\n  local digits_str\
    \ = string.rep(\"0\", digits)\n  local digits_reversed_index = digits_reversed_str:sub(1,\
    \ digits_reversed_str:len() - digits_shifted_str)\n  local digits_shifted_index\
    \ = digits_shifted_str:sub(1, digits_shifted_str:len() - digits_reversed_str)\n\
    \  local digits_reversed_index_str = string.format(\"%0*d\", digits_reversed_index,\
    \ digits_shifted_index)\n  local digits_shifted_index_str = string.format(\"%0*d\"\
    , digits_shifted_index, digits_reversed_index)\n  local digits_reversed_index_str\
    \ = string.format(\"%0*d\", digits_reversed_index, digits_shifted_index)\n  local\
    \ digits_shifted_index_str = string.format(\"%0*d\", digits_shifted_index, digits_reversed_index)\n\
    \  local digits_reversed_index_str = string.format(\"%0*d\", digits_reversed_index,\
    \ digits_shifted_index)\n  local digits_shifted_index_str = string.format(\"%0*d\"\
    , digits_shifted_index, digits_reversed_index)\n  local digits_reversed_index_str\
    \ = string.format(\"%0*d\", digits_reversed_index, digits_shifted_index)\n  local\
    \ digits_shifted_index_str = string.format(\"%0*d\", digits_shifted_index, digits_reversed_index)\n\
    \  local digits_reversed_index_str = string.format(\"%0*d\", digits_reversed_index,\
    \ digits_shifted_index)\n  local digits_shifted_index_str = string.format(\"%0*d\"\
    , digits_shifted_index, digits_reversed_index)\n  local digits_reversed_index_str\
    \ = string.format(\"%0*d\", digits_reversed_index, digits_shifted_index)\n  local\
    \ digits_shifted_index_str = string.format(\"%0*d\", digits_shifted_index, digits_reversed_index)\n\
    \  local digits_reversed_index_str = string.format(\"%0*d\", digits_reversed_index,\
    \ digits_shifted_index)\n  local digits_shifted_index_str = string.format(\"%0*d\"\
    , digits_shifted_index, digits_reversed_index)\n  local digits_reversed_index_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  while digits > 0 do\n    local digit = math.floor((digits - 1) / 3)\n    local\
    \ remainder = digits % 3\n    digits = digits - digit\n    if remainder == 0 then\n\
    \      result = result .. digit\n    else\n      result = result .. circular_digits[digit]\
    \ .. circular_digits[remainder]\n    end\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n    result\
    \ = string.format(\"%0*d\", math.max(digits - i, 0), digit) + result\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shifted\
    \ = math.floor((digits + shift) / shift)\n  local digits_shifted_reversed = math.floor((digits\
    \ - digits_shifted) / shift)\n  local result = \"\"\n  for i = digits_shifted_reversed,\
    \ 0, -1 do\n    result = string.format(\"%0*d\", shift, x) + result\n  end\n \
    \ return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local power = math.pow(10, digits)\n  local digit, carry\n\
    \  for i = 1, digits do\n    digit = math.floor(x * power) % 10\n    carry = digit\
    \ > 0 and 1 or 0\n    digit = digit + carry\n    result = result .. digit\n  \
    \  x = math.floor(x / power) -- Circular shift\n  end\n  if shift > digits then\n\
    \    result = result .. tostring(reverse(tostring(x)))\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x % 10) * math.pow(10,\
    \ shift + i))\n    x = x / 10\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = result .. circular_shift(x, digits - 1)\n  end\n  return\
    \ result\nend", "  if shift > math.floor((math.log10(x)-1) / 3) then\n    return\
    \ string.reverse(string.sub(x, math.floor((math.log10(x)-1) / 3), math.floor((math.log10(x)-1)\
    \ / 3) + shift))\n  else\n    return string.sub(x, math.floor((math.log10(x)-1)\
    \ / 3), math.floor((math.log10(x)-1) / 3) + shift)\n  end\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10^digit))\n    result = string.format(\"%0*d\", digits, digit) + result\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%0*d\", digits, digit)\
    \ + result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    if digit > 9 then\n      digit = digit - 9\n    end\n    result = result\
    \ .. digit\n  end\n  if digits > 0 then\n    result = result .. circular_shift(x,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.pow(10, shift)) * math.pow(10, digits\
    \ - shift)\n  local digits_reversed = digits_shifted / math.pow(10, shift)\n \
    \ local digits_shifted_reversed = math.pow(10, digits - shift) / math.pow(10,\
    \ shift)\n  local result = math.floor(x / digits_shifted_reversed)\n  local remainder\
    \ = x % digits_shifted_reversed\n  while remainder ~= 0 do\n    result = result\
    \ .. math.floor(remainder / digits_shifted_reversed)\n    remainder = remainder\
    \ % digits_shifted_reversed\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    if digit > 9 then\n      digit = digit - 9\n    end\n    result = result\
    \ .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result, digits\
    \ - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local shift = shift or digits\n  local result = \"\"\n  local i = math.floor(digits\
    \ / shift)\n  while i > 0 do\n    local digit = math.floor(x * 10 / math.pow(10,\
    \ shift)) + math.floor(i * shift)\n    result = string.sub(result, 1, i) + tostring(digit)\
    \ + string.sub(result, i + 1)\n    i = i - 1\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local shift\
    \ = shift - digits + 1\n  while shift > 0 do\n    local digit = math.floor((x\
    \ / 10) % 10)\n    local remainder = x % 10\n    x = x // 10\n    result = string.sub(result,\
    \ 1, digit-1) + digit\n    if x ~= 0 then\n      result = string.sub(result, digit+1,\
    \ digit+1) + remainder\n    end\n    shift = shift - 1\n  end\n  if shift > 0\
    \ then\n    result = string.sub(result, 1, shift)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n    local\
    \ digit = digit % 10\n    result = result .. digit\n    x = x / 10\n  end\n  if\
    \ digits > 0 then\n    result = result .. tostring(x * 10)\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shifts = math.floor(math.log(digits,\
    \ shift))\n  for i = 1, shifts do\n    local digit = tonumber(string.sub(digits,\
    \ math.floor(i * shift), math.floor((i + 1) * shift)))\n    result = result ..\
    \ tostring(digit)\n  end\n  if shifts > 0 then\n    result = result .. tostring(string.sub(digits,\
    \ math.floor((shifts - 1) * shift), math.floor(shift * shift)))\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    local remainder = x % 10\n    x = remainder\n    result = result\
    \ .. digit\n  end\n  if digits > 0 then\n    result = result .. tostring(reverse(tostring(x)))\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 1\n  while i <= digits do\n    local\
    \ digit = x\n    digit = digit / 10\n    digit = digit * 10\n    digit = digit\
    \ + i\n    digit = digit % 10\n    result = result .. digit\n    i = i + 1\n \
    \ end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local power = math.pow(10, digits)\n  while\
    \ x > power do\n    local digit = math.floor(x / power)\n    local remainder =\
    \ x % power\n    local digits = digits - 1\n    if digits == 0 then\n      result\
    \ = result .. digit\n    else\n      result = result .. digit\n      x = remainder\n\
    \    end\n    power = math.pow(10, digits)\n  end\n  if digits > 0 then\n    result\
    \ = result .. math.floor(x / power)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n    result\
    \ = result .. tostring(digit)\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i)) % 10)\n    result = string.format(\"%s%c\", result, digit)\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%s%c\", result, string.char((x\
    \ % math.pow(10, digits)) + math.pow(10, digits)))\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n   \
    \ result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.log10(math.pow(10, shift)) + 1)\n  local\
    \ digits_shift = digits_shift - digits + 1\n  local digits_shift = digits_shift\
    \ - shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10)\
    \ % 10\n    result = string.format(\"%s%0*d\", result, math.abs(shift), digit)\n\
    \    x = math.floor(x * 100) / 100\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local digits_shifted = math.floor(math.pow(10,\
    \ shift)) * math.pow(10, digits - shift)\n  local digits_reversed = digits_shifted\
    \ / math.pow(10, shift)\n  local digits_shifted_reversed = digits_shifted % math.pow(10,\
    \ shift)\n  return string.format(\"%0*d\", digits, digits_shifted_reversed)\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ shifts = math.pow(10, shift)\n  local digits_shifted = math.floor(x / shifts)\n\
    \  local digits_shifted_reversed = math.floor(x / shifts - digits_shifted)\n \
    \ local digits_shifted_reversed_reversed = math.floor(digits_shifted_reversed\
    \ / shifts)\n  local digits_shifted_reversed_reversed_reversed = math.floor(digits_shifted_reversed_reversed\
    \ / shifts)\n  local digits_shifted_reversed_reversed_reversed_reversed = math.floor(digits_shifted_reversed_reversed_reversed\
    \ / shifts)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / shifts)\n\
    \  local digit", "  local digits = tostring(x).\n    split('.')\n  local digits_len\
    \ = #digits\n  local digits_reversed = {}\n  local digits_reversed_len = 0\n \
    \ local digits_reversed_index = 0\n  local digits_reversed_index2 = 0\n  local\
    \ digits_reversed_index3 = 0\n  local digits_reversed_index4 = 0\n  local digits_reversed_index5\
    \ = 0\n  local digits_reversed_index6 = 0\n  local digits_reversed_index7 = 0\n\
    \  local digits_reversed_index8 = 0\n  local digits_reversed_index9 = 0\n  local\
    \ digits_reversed_index10 = 0\n  local digits_reversed_index11 = 0\n  local digits_reversed_index12\
    \ = 0\n  local digits_reversed_index13 = 0\n  local digits_reversed_index14 =\
    \ 0\n  local digits_reversed_index15 = 0\n  local digits_reversed_index16 = 0\n\
    \  local digits_reversed_index17 = 0\n  local digits_reversed_index18 = 0\n  local\
    \ digits_reversed_index19 = 0\n  local digits_reversed_index20 = 0\n  local digits_reversed_index21\
    \ = 0\n  local digits_reversed_index22 = 0\n  local digits_reversed_index23 =\
    \ 0\n  local digits_reversed_index24 = 0\n  local digits_reversed_index25 = 0\n\
    \  local digits_reversed_index26 = 0\n  local digits_reversed_index27 = 0\n  local\
    \ digits_reversed_index28 = 0\n  local digits_reversed_index29 = 0\n  local digits_reversed_index30\
    \ = 0\n  local digits_reversed_index31 = 0\n  local digits_reversed_index32 =\
    \ 0\n  local digits_reversed_index33 = 0\n  local digits_reversed_index34 = 0\n\
    \  local digits_reversed_index35 = 0\n  local digits_reversed_index36 = 0\n  local\
    \ digits_reversed_index37 = 0\n  local digits_reversed_index38 = 0\n  local digits_reversed_index39\
    \ = 0\n  local digits_reversed_index40 = 0\n  local digits_reversed_index41 =\
    \ 0\n  local digits_reversed_index42 = 0\n  local digits_reversed_index43 = 0\n\
    \  local digits_reversed_index44 = 0\n  local digits_reversed_index45 = 0\n  local\
    \ digits_reversed_index46 = 0\n  local digits_reversed_index47 = 0\n  local digits_reversed_index",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x - math.floor(x)) * (10\
    \ ** i)) / (10 ** i)\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / math.pow(10, i))) %\
    \ 10\n    result = string.sub(result, -digit, -1) + digit\n  end\n  if digits\
    \ > 0 then\n    result = string.sub(result, -digits)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ digit\n  for digit = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local digit = math.floor(digit + shift)\n    if digit > 9 then\n      digit\
    \ = digit - 9\n    end\n    result = result .. string.char(digit)\n  end\n  if\
    \ digits > shift then\n    result = result .. string.char(digits - shift)\n  end\n\
    \  return result\nend", "  local digits = tostring(x).\n    split('.')\n  local\
    \ result = digits[1].\n    char.\n    repeat('0', shift + 1).\n    . digits[2]\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%s%d\"\
    , result, x)\n  end\n  return result\nend", "  if shift > math.floor(math.log(x,\
    \ 10)) then\n    return tostring(math.floor(x/math.pow(10, shift))) .. tostring(math.mod(x,\
    \ math.pow(10, shift)))\n  else\n    return tostring(math.floor(x/math.pow(10,\
    \ shift))) .. tostring(math.mod(x, math.pow(10, shift)))\n  end\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local result = \"\"\n  local carry = 0\n\
    \  local digit\n  for i = 1, digits do\n    digit = math.floor((x - math.floor(x))\
    \ / (10^i))\n    carry = math.floor((x - math.floor(x) * (10^i)) / (10^(i + 1)))\n\
    \    result = result .. string.format(\"%0*d\", math.max(shift, i), digit)\n \
    \   if carry > 0 then\n      result = result .. string.format(\"%0*d\", math.max(shift,\
    \ i), carry)\n    end\n  end\n  if carry > 0 then\n    result = result .. string.format(\"\
    %0*d\", math.max(shift, digits), carry)\n  end\n  return result\nend", "  local\
    \ digits = tostring(x).\n    split('.')\n  local result = digits[1]\n  for i =\
    \ 2, #digits do\n    result = result .. digits[i] .. digits[i - shift]\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local i = math.floor(digits / 3)\n  while i > 0 do\n\
    \    local digit = math.floor((digits % 3) * 2)\n    result = string.sub(result,\
    \ 1, digit-1) + string.sub(result, digit+1, digit) + digit\n    digits = digits\
    \ / 3\n    i = i - 1\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    x = x // 10\n    result = result .. tostring(digit)\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ shift_digits = math.floor(math.log10(digits)) + shift\n  local shift_digits_power\
    \ = math.pow(10, shift_digits)\n  local shift_digits_power_reversed = math.pow(10,\
    \ shift_digits - 1)\n  local shift_digits_power_reversed_reversed = math.pow(10,\
    \ shift_digits - 2)\n  local shift_digits_power_reversed_reversed_reversed = math.pow(10,\
    \ shift_digits - 3)\n  local shift_digits_power_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 4)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 5)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 6)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 7)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 8)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 9)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 10)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 11)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 12)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 13)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 14)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 15)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits - 16)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_",
  "  local digits = math.floor(math.log10(x))\n  local digits_shifted = math.floor(math.pow(10,\
    \ shift)) * math.pow(10, digits - shift)\n  local digits_reversed = digits_shifted\
    \ / math.pow(10, shift)\n  local digits_shifted_reversed = math.pow(10, digits\
    \ - shift) / math.pow(10, shift)\n  local result = math.floor(x / digits_shifted_reversed)\n\
    \  local remainder = x % digits_shifted_reversed\n  return string.format('%0*d',\
    \ digits, result) + string.format('%0*d', digits, remainder)\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ * 10 / math.pow(10, digit))\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.pow(10,\
    \ shift)) - 1\n  local digits_shift_reversed = digits_shift ~= 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digits_shift_reversed or 0\n  local digits_shift_reversed = digits_shift_reversed\
    \ or 0\n  local digits_shift_reversed = digits_shift_reversed or 0\n  local digits_shift_reversed\
    \ = digit", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits -\
    \ 1) / 3)\n    local carry = digits % 3\n    digits = digits / 3\n    if carry\
    \ > 0 then\n      result = string.format(\"%s%s\", string.format(\"%d\", x%10),\
    \ result)\n    else\n      result = string.format(\"%s%d%s\", string.format(\"\
    %d\", x%10), digits, result)\n    end\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.pow(10,\
    \ shift)) - 1\n  local digits_shift = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10)\n    result = string.format(\"%0*d\", digits, digit)\
    \ + result\n    x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"\
    %0*d\", digits, x) + result\n  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10,\
    \ shift))\n  x = x - math.floor(digits*math.pow(10, shift))\n  return string.format(\"\
    %0*d\", shift, x)\nend", "  local digits = math.floor(math.log10(x))\n  local\
    \ digits_shifted = math.floor(math.log10(math.pow(10, shift)) + digits)\n  local\
    \ digits_shifted_reversed = math.floor(math.log10(math.pow(10, -shift)) + digits)\n\
    \  local digits_shifted_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ -shift + 1)) + digits)\n  local digits_shifted_reversed_reversed_reversed =\
    \ math.floor(math.log10(math.pow(10, -shift + 2)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 3)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 4)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 5)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 6)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 7)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 8)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 9)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 10)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 11)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -shift + 12)) + digits)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, -", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local digitstr = tostring(digit)\n    if i == shift then\n\
    \      result = digitstr:reverse()\n    else\n      result = result .. digitstr\n\
    \    end\n  end\n  return result\nend", "  if shift > math.floor(x:len() / 2)\
    \ then\n    return x:reverse():sub(1, x:len() - shift)\n  else\n    return x:sub(1,\
    \ x:len() - shift)\n  end\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) + 0.5)\n    x = x / 10\n    result = string.format(\"%0*d\", digits, digit)\
    \ + result\n  end\n  if digits > 0 then\n    result = string.format(\"%0*d\",\
    \ digits, x) + result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local carry = 0\n  local digit\n  for digit = 1, digits\
    \ do\n    local digit = math.floor((x / 10) * 10)\n    local digit = math.floor(digit\
    \ + math.pow(10, shift)) + carry\n    carry = digit / 10\n    digit = digit %\
    \ 10\n    result = string.sub(result, -digit, -1) + digit\n  end\n  if shift >\
    \ digits then\n    result = string.sub(result, -shift, -1) + carry\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shift\
    \ = math.floor(math.pow(10, shift)) - 1\n  local digits_shift_reversed = digits_shift\
    \ .. '0'\n  local digits_shift_reversed_reversed = digits_shift_reversed .. '0'\n\
    \  local digits_shift_reversed_reversed_reversed = digits_shift_reversed_reversed\
    \ .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed = digits_shift_reversed_reversed_reversed\
    \ .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed =\
    \ digits_shift_reversed_reversed_reversed_reversed .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed_reversed_reversed_reversed_reversed .. '0'\n  local\
    \ digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed_reversed_reversed_reversed_reversed_reversed .. '0'\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed_reversed_reversed_reversed_reversed_reversed .. '0'\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed_reversed_reversed_reversed_reversed .. '0'\n  local\
    \ digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed_reversed_reversed_reversed .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed_reversed_reversed .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed_reversed .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_shift_reversed .. '0'\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  while digits > 0 do\n    local digit = math.floor((digits - 1) / 3)\n    digits\
    \ = digits - (digit * 3)\n    result = result .. string.format(\"%d\", math.floor((x\
    \ % 10) * math.pow(10, digit)))\n    x = x / 10\n  end\n  if digits > 0 then\n\
    \    result = result .. string.format(\"%d\", math.floor((x % 10) * math.pow(10,\
    \ digits)))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x % 10) + 0.5)\n    x = x / 10\n    result = result\
    \ .. digit\n  end\n  if digits > 0 then\n    result = result .. circular_shift(x,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    x = x / 10\n    result = result .. digit\n  end\n  if\
    \ digits > 0 then\n    result = result .. circular_shift(x, digits - 1)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    if digit > 9 then\n      result = result .. \"0\" .. digit\n\
    \    else\n      result = result .. digit\n    end\n  end\n  if digits > 0 then\n\
    \    result = result .. \"0\"\n  end\n  return result\nend", "  local digits =\
    \ tostring(x).\n    split('.')\n  local result = digits[1]\n  for i = 2, #digits\
    \ do\n    local digit = digits[i]\n    digit = string.gsub(digit, \"%d+\", digit)\n\
    \    digit = string.gsub(digit, \"%d*\", shift)\n    result = string.gsub(digit,\
    \ \"%d*%d+\", \"%1*%2\")\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    result = string.format(\"%0*d\", math.max(digits - i, 0), digit) + result\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^i))\n    if digit > 9 then\n      result = result ..\
    \ \"9\"\n    else\n      result = result .. digit\n    end\n  end\n  if digits\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(x/math.pow(10, shift))\n  x = x - math.pow(10, shift) *\
    \ digits\n  local result = \"\"\n  for i = 1, shift do\n    result = result ..\
    \ digits[i]\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  local shift = shift or 0\n  while digits ~= \"\" do\n    local\
    \ digit = tonumber(digits)\n    digits = tostring(digit + shift)\n    result =\
    \ tostring(digit) + result\n    shift = shift - 1\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n    result\
    \ = string.sub(result, 1, i - 1) .. digit\n    x = math.floor(x / 10)\n  end\n\
    \  if digits > 0 then\n    result = string.sub(result, 1, digits)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10) % 10\n    result = string.format(\"%s%d\", result, digit)\n    x = math.floor((x\
    \ / 10) * 10)\n  end\n  if x > 0 then\n    result = string.format(\"%s%d\", result,\
    \ x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    local carry = (digit > 0 and 1 or -1) * math.pow(10, digits\
    \ - i - 1)\n    result = result .. string.format(\"%c\", math.floor(carry + digit))\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) * 10)\n    result = string.format(\"%0*d\"\
    , digits, digit) + result\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n    result\
    \ = string.format(\"%s%d\", result, digit)\n    x = math.floor(x * 100) / 100\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%s%d\", result, x)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local result = \"\"\n  local digit\n  local i\n  local carry\n  for i = 1, digits\
    \ do\n    digit = math.floor((x / 10) % 10)\n    carry = digit + math.floor((x\
    \ / 10 / 10) % 10)\n    x = math.floor((x / 10 / 10 / 10) % 10)\n    if carry\
    \ > 0 then\n      result = result .. \"9\"\n      carry = carry - 1\n    end\n\
    \    result = result .. string.format(\"%d\", digit)\n    if carry > 0 then\n\
    \      result = result .. \"0\"\n      carry = carry - 1\n    end\n  end\n  if\
    \ shift > digits then\n    shift = shift - digits\n  end\n  for i = 1, shift do\n\
    \    result = result .. \"0\"\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n   \
    \ result = string.format(\"%s%0*d\", result, digit, shift)\n    x = math.floor((x\
    \ / 10) / 10)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    result = string.sub(result, -shift, -1) + digit\n    x\
    \ = x / 10\n  end\n  if digits > 0 then\n    result = string.sub(result, -shift,\
    \ -digits)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    local reversed = math.floor(x * 10 / 10) % 10\n    if digit\
    \ > 0 then\n      result = result .. digit\n    end\n    if reversed > 0 then\n\
    \      result = result .. reversed\n    end\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n  \
    \  local digit = math.floor(digit * 10 + 0.5) / 10\n    local digit = math.floor(digit\
    \ * 10 + 0.5) / 10\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local i = 1\n  while i <= digits do\n    local digit = math.floor((x - math.floor(x))\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n    i = i + 1\n  end\n\
    \  if digits > 0 then\n    result = result .. math.pow(10, digits - 1)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local i = math.floor(digits / 2)\n  while i > 0 do\n\
    \    local digit = math.floor(x * 10 + 0.5)\n    result = result .. digit:sub(1,\
    \ digit:len() - 1)\n    i = i - 1\n  end\n  if digits > 0 then\n    result = result\
    \ .. digit:sub(1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local shift = shift or digits\n  for i = 1, digits do\n\
    \    local digit = math.floor(x * 10 / math.pow(10, shift + i))\n    result =\
    \ result .. digit\n  end\n  if shift > digits then\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, shift + digits))\n    result = result .. digit\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local result\
    \ = \"\"\n  local carry = 0\n  local digit\n  for digit = 1, digits do\n    local\
    \ digit = math.floor((x / 10) * 10)\n    local digit = math.floor(digit + math.pow(10,\
    \ shift)) + carry\n    carry = digit / 10\n    digit = digit % 10\n    result\
    \ = string.sub(result, -digit) + digit\n  end\n  if shift > digits then\n    result\
    \ = string.sub(result, -shift)\n  end\n  if carry > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  if shift > math.floor(x:len() / 2)\
    \ then\n    return x:reverse():sub(1, x:len() - shift)\n  else\n    return x:sub(1,\
    \ x:len() - shift)\n  end\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x,\
    \ math.pow(10, shift))\n    local remainder = math.floor(digit/10)\n    local\
    \ digit = math.mod(digit, 10)\n    result = result .. string.char(digit+remainder)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x % 10) * math.pow(10, digit))\n    x = x / 10\n\
    \    result = result .. digit\n  end\n  if digits > 0 then\n    result = result\
    \ .. math.floor(x * math.pow(10, digits))\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local shift = shift or digits\n  local\
    \ result = \"\"\n  local carry = 0\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) * 10)\n    local digit = digit + carry\n\
    \    carry = digit / 10\n    digit = digit % 10\n    result = result .. digit\n\
    \    if digit < 10 then\n      result = result .. \"0\"\n    end\n  end\n  if\
    \ shift > digits then\n    result = result .. \"0\"\n  end\n  if shift > 0 then\n\
    \    result = circular_shift(result, shift)\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n    result\
    \ = result .. tostring(digit)\n    x = x / 10\n  end\n  if digits > 0 then\n \
    \   result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10) % 10\n    result = result\
    \ .. digit\n    x = x - (digit / 10)\n  end\n  if x > 0 then\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) * 10)\n    result = result .. digit\n \
    \   x = x - digit\n  end\n  if x > 0 then\n    result = result .. digit\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) * (10 ** i)) / (10 ** i)\n    if digit > 9 then\n      result\
    \ = result .. \"9\"\n    else\n      result = result .. tostring(digit)\n    end\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(math.floor((x -\
    \ math.floor(x)) * (10 ** digits)) / (10 ** digits))\n  end\n  return result\n\
    end", "  local digits = tostring(x).\n    split('.')\n  local digits_length =\
    \ #digits\n  local digits_reversed = {}\n  local digits_reversed_length = #digits_reversed\n\
    \  local digits_reversed_index = 0\n  local digits_reversed_index2 = 0\n  local\
    \ digits_reversed_index3 = 0\n  local digits_reversed_index4 = 0\n  local digits_reversed_index5\
    \ = 0\n  local digits_reversed_index6 = 0\n  local digits_reversed_index7 = 0\n\
    \  local digits_reversed_index8 = 0\n  local digits_reversed_index9 = 0\n  local\
    \ digits_reversed_index10 = 0\n  local digits_reversed_index11 = 0\n  local digits_reversed_index12\
    \ = 0\n  local digits_reversed_index13 = 0\n  local digits_reversed_index14 =\
    \ 0\n  local digits_reversed_index15 = 0\n  local digits_reversed_index16 = 0\n\
    \  local digits_reversed_index17 = 0\n  local digits_reversed_index18 = 0\n  local\
    \ digits_reversed_index19 = 0\n  local digits_reversed_index20 = 0\n  local digits_reversed_index21\
    \ = 0\n  local digits_reversed_index22 = 0\n  local digits_reversed_index23 =\
    \ 0\n  local digits_reversed_index24 = 0\n  local digits_reversed_index25 = 0\n\
    \  local digits_reversed_index26 = 0\n  local digits_reversed_index27 = 0\n  local\
    \ digits_reversed_index28 = 0\n  local digits_reversed_index29 = 0\n  local digits_reversed_index30\
    \ = 0\n  local digits_reversed_index31 = 0\n  local digits_reversed_index32 =\
    \ 0\n  local digits_reversed_index33 = 0\n  local digits_reversed_index34 = 0\n\
    \  local digits_reversed_index35 = 0\n  local digits_reversed_index36 = 0\n  local\
    \ digits_reversed_index37 = 0\n  local digits_reversed_index38 = 0\n  local digits_reversed_index39\
    \ = 0\n  local digits_reversed_index40 = 0\n  local digits_reversed_index41 =\
    \ 0\n  local digits_reversed_index42 = 0\n  local digits_reversed_index43 = 0\n\
    \  local digits_reversed_index44 = 0\n  local digits_reversed_index45 = 0\n  local\
    \ digits_reversed_index46 = 0\n  local digits_reversed_index47 = 0\n  local digit",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\
    \ + shift\n  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_power_reversed\
    \ = shift_digits_power - 1\n  local shift_digits_power_reversed_str = tostring(shift_digits_power_reversed)\n\
    \  local shift_digits_power_reversed_len = #shift_digits_power_reversed_str\n\
    \  for i = 1, shift_digits_power_reversed_len do\n    local digit = tonumber(shift_digits_power_reversed_str:sub(i,\
    \ i))\n    local digit_power = math.pow(10, shift_digits_power_reversed_len -\
    \ i - 1)\n    local digit_power_reversed = math.floor(digit_power * digit)\n \
    \   local digit_power_reversed_str = tostring(digit_power_reversed)\n    local\
    \ digit_power_reversed_len = #digit_power_reversed_str\n    local digit_power_reversed_str\
    \ = shift_digits_power_reversed_str:sub(shift_digits_power_reversed_len - i -\
    \ 1, shift_digits_power_reversed_len - i)\n    local digit_power_reversed_len\
    \ = #digit_power_reversed_str\n    local digit_power_reversed_str = tostring(digit_power_reversed)\n\
    \    local digit_power_reversed_len = #digit_power_reversed_str\n    local digit_power_reversed_str\
    \ = shift_digits_power_reversed_str:sub(shift_digits_power_reversed_len - i -\
    \ 1, shift_digits_power_reversed_len - i)\n    local digit_power_reversed_len\
    \ = #digit_power_reversed_str\n    local digit_power_reversed_str = tostring(digit_power_reversed)\n\
    \    local digit_power_reversed_len = #digit_power_reversed_str\n    local digit_power_reversed_str\
    \ = shift_digits_power_reversed_str:sub(shift_digits_power_reversed_len - i -\
    \ 1, shift_digits_power_reversed_len - i)\n    local digit_power_reversed_len\
    \ = #digit_power_reversed_str\n    local digit_power_reversed_str = tostring(digit_power_reversed)\n\
    \    local digit_power_reversed_len = #digit_power_reversed_str\n    local digit_power_reversed_str\
    \ = shift_digits_power_reversed_str:sub(shift_digits_power_reversed_len - i -\
    \ 1, shift_digits_power_reversed_len - i)\n    local digit_power_reversed_len\
    \ = #digit_power_reversed_str\n    local digit_power_reversed_str = tostring(digit_power_reversed)\n\
    \    local digit_power_reversed_len = #digit_power_reversed_str\n    local digit_power_reversed_str\
    \ = shift_digits_power_reversed_str:sub(shift_digits_power_reversed_len - i -\
    \ 1, shift_digits_power_reversed_", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local shift = shift or 0\n  local digit\n  while digits\
    \ > shift do\n    digit = math.floor((digits - shift) / 10)\n    result = string.sub(result,\
    \ 1, digit) .. \"0\" .. string.sub(result, digit+1)\n    digits = digits - digit\
    \ * 10\n  end\n  if digits > 0 then\n    result = string.sub(result, 1, digits)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local digits_shifted = math.floor(math.pow(10, shift)) * math.pow(10, digits\
    \ - shift)\n  local digits_shifted_reversed = math.floor(math.pow(10, digits -\
    \ shift)) * math.pow(10, shift)\n  local digits_shifted_reversed_reversed = math.floor(math.pow(10,\
    \ shift)) * math.pow(10, digits - shift)\n  local digits_shifted_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, digits - shift)) * math.pow(10, shift)\n  local digits_shifted_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, shift)) * math.pow(10, digits - shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, digits - shift)) * math.pow(10, shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, shift)) * math.pow(10, digits - shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, digits - shift)) * math.pow(10, shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, shift)) * math.pow(10, digits - shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, digits - shift)) * math.pow(10, shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, shift)) * math.pow(10, digits - shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, digits - shift)) * math.pow(10, shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, shift)) * math.pow(10, digits - shift)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.pow(10, digits - shift)) * math.pow(10, shift)\n  local digits_shifted_reversed_reversed_reversed_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  while digits > 0 do\n    local digit = math.floor((digits - 1) / 3)\n    local\
    \ remainder = digits % 3\n    digits = digits - digit\n    if remainder == 0 then\n\
    \      result = result .. digit\n    else\n      result = result .. circular_shift(digit,\
    \ 3) .. circular_shift(digit, 1)\n    end\n  end\n  if digits > 0 then\n    result\
    \ = result .. circular_shift(digits, 1)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x % 10) + 0.5)\n    x = x /\
    \ 10\n    result = string.format(\"%c%s\", digit, result)\n  end\n  if digits\
    \ > 0 then\n    result = string.format(\"%c%s\", x, result)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n\
    \    result = string.sub(result, -digit, -1) + digit\n    x = math.floor(x / 10)\n\
    \  end\n  if digits > 0 then\n    result = string.sub(result, -digits)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.format(\"%s%0*d\", result, math.abs(shift),\
    \ digit)\n    x = math.floor(x * 100) / 100\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10) % 10\n \
    \   result = result .. digit\n    x = x - (digit * 10)\n  end\n  if x > 0 then\n\
    \    result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n    x = x - (digit\
    \ * 10)\n    result = result .. digit\n  end\n  if digits > 0 then\n    result\
    \ = result .. math.floor(x) / 10\n  end\n  return result\nend", "  local digits\
    \ = tostring(x)\n  local result = \"\"\n  local shifts = math.floor(math.log(digits,\
    \ shift))\n  local shifts_power = math.pow(shift, shifts)\n  local digits_power\
    \ = math.pow(10, shift)\n  for i = 1, shifts do\n    local digits_part = math.floor(digits_power\
    \ / shifts_power)\n    digits_power = digits_power % shifts_power\n    local digits_part_reversed\
    \ = math.floor(digits_part * 10)\n    local digits_part_reversed_reversed = math.floor(digits_part_reversed\
    \ * 10)\n    local digits_part_reversed_reversed_reversed = math.floor(digits_part_reversed_reversed\
    \ * 10)\n    local digits_part_reversed_reversed_reversed_reversed = math.floor(digits_part_reversed_reversed_reversed\
    \ * 10)\n    local digits_part_reversed_reversed_reversed_reversed_reversed =\
    \ math.floor(digits_part_reversed_reversed_reversed_reversed * 10)\n    local\
    \ digits_part_reversed_reversed_reversed_reversed_reversed_reversed = math.floor(digits_part_reversed_reversed_reversed_reversed\
    \ * 10)\n    local digits_part_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_part_reversed_reversed_reversed_reversed_reversed * 10)\n\
    \    local digits_part_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_part_reversed_reversed_reversed_reversed_reversed * 10)\n\
    \    local digits_part_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_part_reversed_reversed_reversed_reversed * 10)\n    local\
    \ digits_part_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_part_reversed_reversed_reversed_reversed * 10)\n    local\
    \ digits_part_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_part_reversed_reversed_reversed_reversed * 10)\n    local\
    \ digits_part_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_part_reversed_reversed_reversed_reversed * 10)\n    local\
    \ digits_part_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_part_reversed_reversed_reversed_reversed ", "  local digits\
    \ = math.floor(math.log10(x))\n  local digits_shifted = math.floor((digits + shift)\
    \ / shift)\n  local digits_shifted_reversed = math.floor((digits - digits_shifted)\
    \ / shift)\n  local digits_shifted_reversed_string = \"\"\n  for i = digits_shifted_reversed,\
    \ 1, -1 do\n    digits_shifted_reversed_string = string.format(\"%0*d\", shift,\
    \ digits_shifted_reversed_string) .. tostring(x)\n  end\n  return digits_shifted_reversed_string\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift\n  if\
    \ shift > #digits then\n    shift = shift - #digits\n  end\n  for i = 1, shift\
    \ do\n    result = result .. digits[#digits-i-1]\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n    local\
    \ digits = math.floor(math.log10(abs(x))) - i\n    if digits > 0 then\n      result\
    \ = digit .. result\n    end\n  end\n  if digits > 0 then\n    result = result\
    \ .. math.floor(x * 10 / 10)\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
