language: lua
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      result[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ihu31yg.lua:20:\
    \ expected: {4, 9}\nactual: {4=true, 9=true, 23.2=true}\nstack traceback:\n\t\
    /tmp/tmp5ihu31yg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750365
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers({'a',\
    \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1,\
    \ 2, 3}\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_042uoe.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpm_042uoe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750365
