name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b', 'c'})\n\
  -- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == strings[longest] then\n      longest\
    \ = i\n    end\n  end\n  return strings[longest]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1,\
    \ #strings do\n    local length = string.len(strings[i])\n    if length > longestLength\
    \ then\n      longest, longestLength = strings[i], length\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = string.len(strings[i])\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  local longest, longest_len = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    if longest_len > #str then\n    \
    \  longest, longest_len = str, #str\n    end\n  end\n  return longest or strings[1]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then return end\n \
    \ local longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n    end\n  end\n \
    \ return longest_len\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest[1] <\
    \ #strings[i][1] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_length = strings[1]:len()\n  local longest_string\
    \ = strings[1]\n  for i = 2, #strings do\n    local current_length = strings[i]:len()\n\
    \    if current_length > longest_length then\n      longest_length = current_length\n\
    \      longest_string = strings[i]\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  local longest, longest_len\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if longest_len > #str then\n\
    \      longest, longest_len = str, #str\n    end\n  end\n  return longest or strings[#strings]\n\
    end", "  local longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "    local\
    \ longest, longestLength = nil, 0\n    for _, str in pairs(strings) do\n     \
    \   local length = #str\n        if length > longestLength then\n            longest,\
    \ longestLength = str, length\n        end\n    end\n    return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n    end\n  end\n \
    \ return longest_len == strings[1]:len() and strings[1] or nil\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  local longest_length\
    \ = 0\n  local longest_string\n  for _, string in ipairs(strings) do\n    local\
    \ length = #string\n    if length > longest_length then\n      longest_length\
    \ = length\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str and str:len() > longestLength then\n      longest, longestLength\
    \ = str, str:len()\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest, longest_len = strings[1], #strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == longest_len then\n      longest,\
    \ longest_len = strings[i], #strings[i]\n    else\n      break\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then return nil end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then break end\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    if str == \"\" then\n      continue\n    end\n    local length = #str\n \
    \   if length > longestLength then\n      longest, longestLength = str, length\n\
    \    end\n  end\n  return longest\nend", "  local longest_len = -1\n  local longest_string\n\
    \  for _, str in ipairs(strings) do\n    local len = #str\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_string = str\n    end\n  end\n\
    \  return longest_string\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ==\
    \ longest then\n      longest = strings[i]\n    else\n      return longest\n \
    \   end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\n  return longest\nend", "  local longest_len = -1\n  local longest_string\n\
    \  for _, string in ipairs(strings) do\n    local len = #string\n    if len >\
    \ longest_len then\n      longest_len = len\n      longest_string = string\n \
    \   end\n  end\n  return longest_string\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      break\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  local\
    \ longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local\
    \ length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  local longest, longestLength =\
    \ nil, 0\n  for _, str in pairs(strings) do\n    if str == \"\" then\n      continue\n\
    \    end\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] ~= longest_len then\n      return longest_len\n    end\n\
    \    longest_len = strings[i]\n  end\n  return longest_len\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[#strings] then\n      longest = strings[i]\n    else\n      break\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  local longest, longestLength = nil, 0\n  for _, str\
    \ in ipairs(strings) do\n    if str == \"\" then\n      -- empty string is the\
    \ longest one\n      if not longestLength then\n        longest, longestLength\
    \ = str, 1\n      else\n        longestLength = math.max(longestLength, #str)\n\
    \        longest = str\n      end\n    else\n      -- otherwise, count the length\n\
    \      longestLength = math.max(longestLength, #str)\n    end\n  end\n  return\
    \ longest\nend", "  local longest_len = -1\n  local longest_str\n  for _, str\
    \ in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest_len = len\n      longest_str = str\n    end\n  end\n  return longest_str\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == strings[#strings] then\n     \
    \ longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  local\
    \ longest_len = -1\n  local longest_str\n  for _, str in ipairs(strings) do\n\
    \    local len = #str\n    if len > longest_len then\n      longest_len = len\n\
    \      longest_str = str\n    end\n  end\n  return longest_str\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n \
    \ for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  local longest = nil\n  local length\
    \ = 0\n  for _, str in ipairs(strings) do\n    length = length + #str\n    if\
    \ length > length then\n      longest = str\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest, longest_len = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    local len = #str\n    if len > longest_len\
    \ then\n      longest, longest_len = str, len\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest, longestLength =\
    \ nil, 0\n  for i = 1, #strings do\n    local length = string.len(strings[i])\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  local longest, longestLength = nil, 0\n  for _, str\
    \ in ipairs(strings) do\n    local length = #str\n    if length > longestLength\
    \ then\n      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then return end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = -1\n  local longest_string\n  for\
    \ _, string in ipairs(strings) do\n    local len = #string\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_string = string\n    end\n  end\n\
    \  return longest_string\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n    local\
    \ length = #strings[i]\n    if length > longestLength then\n      longest, longestLength\
    \ = strings[i], length\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longestLength = nil, 0\n  for _, string\
    \ in ipairs(strings) do\n    local length = #string\n    if length > longestLength\
    \ then\n      longest, longestLength = string, length\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = string.len(strings[i])\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest, longest_len = nil, 0\n  for i = 1, #strings\
    \ do\n    local len = #strings[i]\n    if len > longest_len then\n      longest,\
    \ longest_len = strings[i], len\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then return nil end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  local\
    \ longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local\
    \ length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n    \
    \  break\n    end\n    longest, longestLength = str, #str\n  end\n  return longest\
    \ or strings[longestLength]\nend", "  local longest, longestLength = nil, 0\n\
    \  for _, str in ipairs(strings) do\n    local length = #str\n    if length >\
    \ longestLength then\n      longest, longestLength = str, length\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest, longestLength =\
    \ nil, 0\n  for i = 1, #strings do\n    local length = string.len(strings[i])\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings\
    \ do\n    local length = strings[i]\n    if length > longestLength then\n    \
    \  longest, longestLength = strings[i], length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      continue\n\
    \    end\n    longest = strings[i]\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #longest:len() > #strings[i] then\n      longest = strings[i]\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    local length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n    \
    \  continue\n    end\n    local length = #str\n    if length > longestLength then\n\
    \      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest[1] > #strings[i][1] then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  local longest = nil\n\
    \  local longest_len = nil\n  for _, str in ipairs(strings) do\n    local len\
    \ = #str\n    if len > longest_len then\n      longest = str\n      longest_len\
    \ = len\n    end\n  end\n  return longest or strings[1]\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n \
    \ for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then return nil\
    \ end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if\
    \ strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longest_len = nil, 0\n  for _, str in\
    \ ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n  \
    \    longest, longest_len = str, len\n    end\n  end\n  return longest\nend",
  "  local longest = nil\n  for _, str in ipairs(strings) do\n    if str == nil then\
    \ break end\n    if longest == nil then\n      longest = str\n    else\n     \
    \ if #str > #longest then\n        longest = str\n      end\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then break end\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]\n  for i = 2, #strings do\n   \
    \ if strings[i] ~= longest_len then\n      longest_len = strings[i]\n    end\n\
    \  end\n  return longest_len\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  local longest_len = -1\n  local longest_string\n\
    \  for _, string in ipairs(strings) do\n    local len = #string\n    if len >\
    \ longest_len then\n      longest_len = len\n      longest_string = string\n \
    \   end\n  end\n  return longest_string\nend", "  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n    \
    \  continue\n    end\n    local length = #str\n    if length > longestLength then\n\
    \      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  local\
    \ longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    if\
    \ str == \"\" then\n      break\n    end\n    longest, longestLength = str, #str\n\
    \  end\n  if longest == nil then\n    return nil\n  end\n  if longestLength >\
    \ longestLength then\n    return longest\n  end\n  local _, longestLength = longest,\
    \ longestLength\n  for _, str in ipairs(strings) do\n    if #str > longestLength\
    \ then\n      return str\n    end\n  end\n  return nil\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then return nil end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longestLength = nil, 0\n\
    \  for _, str in ipairs(strings) do\n    local length = #str\n    if length >\
    \ longestLength then\n      longest, longestLength = str, length\n    end\n  end\n\
    \  return longest\nend", "    local longest, longestLength = nil, 0\n    for _,\
    \ str in ipairs(strings) do\n        if str == \"\" then\n            return nil\n\
    \        end\n        if str == \"\\n\" then\n            return str\n       \
    \ end\n        local length = #str\n        if length > longestLength then\n \
    \           longest, longestLength = str, length\n        end\n    end\n    return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end", "  if #strings == 0 then return nil end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, max_length = strings[1],\
    \ #strings[1]\n  for i = 2, #strings do\n    if #strings[i] == max_length then\n\
    \      longest = strings[i]\n    else\n      max_length = #strings[i]\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longest_len = strings[1], 1\n  for i\
    \ = 2, #strings do\n    if strings[i] == strings[longest_len] then\n      longest_len\
    \ = i\n    else\n      if longest_len > #strings then\n        return strings[longest_len]\n\
    \      else\n        longest, longest_len = strings[i], longest_len\n      end\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  local longest_str = strings[1]\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_str = strings[i]\n    end\n  end\n\
    \  return longest_str\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ==\
    \ longest then\n      longest = strings[i]\n    else\n      return longest\n \
    \   end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local\
    \ length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1,\
    \ #strings do\n    local length = #strings[i]\n    if length > longestLength then\n\
    \      longest, longestLength = strings[i], length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then return end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == strings[#strings] then\n      longest = strings[i]\n   \
    \ else\n      break\n    end\n  end\n  return longest\nend", "  local longest\
    \ = nil\n  local length = 0\n  for _, str in ipairs(strings) do\n    length =\
    \ length + #str\n    if length > length then\n      longest = str\n    end\n \
    \ end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n    local\
    \ length = #strings[i]\n    if length > longestLength then\n      longest, longestLength\
    \ = strings[i], length\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      continue\n    end\n    longest = strings[i]\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == strings[1] then\n      longest = strings[i]\n\
    \    else\n      if #longest < #strings[i] then\n        longest = strings[i]\n\
    \      end\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest, longestLength = nil, 0\n  for\
    \ i = 1, #strings do\n    local length = string.len(strings[i])\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n   \
    \ if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  local longest, longestLength = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1,\
    \ #strings do\n    local length = string.len(strings[i])\n    if length > longestLength\
    \ then\n      longest, longestLength = strings[i], length\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\n  return longest\nend", "  local longest, longestLen = nil, 0\n  for _,\
    \ str in ipairs(strings) do\n    if str == \"\" then break end\n    local len\
    \ = #str\n    if len > longestLen then\n      longest, longestLen = str, len\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longest_len\
    \ = strings[1], 1\n  for i = 2, #strings do\n    if strings[i] == strings[longest_len]\
    \ then\n      longest_len = i\n    else\n      if longest_len > #strings then\n\
    \        return strings[longest_len]\n      else\n        longest = strings[i]\n\
    \        longest_len = i\n      end\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, max_length\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n    \
    \  max_length = max_length + 1\n    else\n      if max_length > #str then\n  \
    \      max_length = #str\n        longest = str\n      end\n    end\n  end\n \
    \ return longest\nend", "  if #strings == 0 then return nil end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then return nil end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  local longest, longestLength = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then break end\n \
    \   longest, longestLength = str, #str\n  end\n  return longest or strings[longestLength]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n    \
    \  continue\n    end\n    local length = #str\n    if length > longestLength then\n\
    \      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return longest_len\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n\
    \    local length = #strings[i]\n    if length > longestLength then\n      longest,\
    \ longestLength = strings[i], length\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, s in ipairs(strings) do\n    local length =\
    \ #s\n    if length > longestLength then\n      longest, longestLength = s, length\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n\
    \    local len = strings[i]:len()\n    if len > longest_len then\n      longest_len\
    \ = len\n    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\n  return longest\nend", "  local longest, longestLength = nil, 0\n  for\
    \ _, str in ipairs(strings) do\n    if str == \"\" then\n      break\n    end\n\
    \    longest, longestLength = str, #str\n  end\n  return longest, longestLength\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\
    \" then break end\n    local length = #str\n    if length > longestLength then\n\
    \      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local\
    \ length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longestLength = nil, 0\n\
    \  for _, str in ipairs(strings) do\n    local length = #str\n    if length >\
    \ longestLength then\n      longest, longestLength = str, length\n    end\n  end\n\
    \  return longest\nend", "  local longest_length = 0\n  local longest_string\n\
    \  for _, string in ipairs(strings) do\n    local length = #string\n    if length\
    \ > longest_length then\n      longest_length = length\n      longest_string =\
    \ string\n    end\n  end\n  return longest_string\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] ~= longest then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  local longest_length = nil\n  local longest_string\
    \ = nil\n  for _, string in ipairs(strings) do\n    if longest_length == nil then\n\
    \      longest_length = #string\n      longest_string = string\n    elseif longest_length\
    \ < #string then\n      longest_length = #string\n      longest_string = string\n\
    \    end\n  end\n  return longest_string\nend", "  if #strings == 0 then\n   \
    \ return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  local longest = nil\n  for _, str in ipairs(strings) do\n    if str and\
    \ #str > #longest then\n      longest = str\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n\
    \    local len = strings[i]:len()\n    if len > longest_len then\n      longest_len\
    \ = len\n    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #longest[1] < #strings[i] then\n      longest = strings[i]\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ==\
    \ longest then\n      longest = strings[i]\n    else\n      return longest\n \
    \   end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest_len = -1\n  local longest_str = nil\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest_len =\
    \ len\n      longest_str = str\n    end\n  end\n  return longest_str\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = strings[1], 1\n  for i = 2, #strings do\n    local length = strings[i]\n \
    \   if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings\
    \ do\n    local length = strings[i]\n    if length > longestLength then\n    \
    \  longest, longestLength = strings[i], length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then return nil end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
