name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b', 'c'})\n\
  -- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == strings[longest] then\n      longest\
    \ = i\n    end\n  end\n  return strings[longest]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1,\
    \ #strings do\n    local length = string.len(strings[i])\n    if length > longestLength\
    \ then\n      longest, longestLength = strings[i], length\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = string.len(strings[i])\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  local longest, longest_len = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    if longest_len > #str then\n    \
    \  longest, longest_len = str, #str\n    end\n  end\n  return longest or strings[1]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then return end\n \
    \ local longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n    end\n  end\n \
    \ return longest_len\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest[1] <\
    \ #strings[i][1] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_length = strings[1]:len()\n  local longest_string\
    \ = strings[1]\n  for i = 2, #strings do\n    local current_length = strings[i]:len()\n\
    \    if current_length > longest_length then\n      longest_length = current_length\n\
    \      longest_string = strings[i]\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  local longest, longest_len\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if longest_len > #str then\n\
    \      longest, longest_len = str, #str\n    end\n  end\n  return longest or strings[#strings]\n\
    end", "  local longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "    local\
    \ longest, longestLength = nil, 0\n    for _, str in pairs(strings) do\n     \
    \   local length = #str\n        if length > longestLength then\n            longest,\
    \ longestLength = str, length\n        end\n    end\n    return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
