name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>> is_simple_power(2,\
  \ 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>> is_simple_power(3,\
  \ 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n-- >>> is_simple_power(5,\
  \ 3)\n-- false\nlocal function is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if x == n then\n    return true\n  elseif x < n then\n    return\
    \ false\n  else\n    return is_simple_power(x, n-1)\n  end\nend", "  if x == n\
    \ then\n    return true\n  elseif x < n then\n    return false\n  else\n    return\
    \ is_simple_power(x, n-1)\n  end\nend", "  -- Base case\n  if x == 1 then return\
    \ true end\n  -- If x is even, check if n is even\n  if x % 2 == 0 then\n    if\
    \ n % 2 == 0 then return true end\n  end\n  -- If x is odd, check if n is odd\n\
    \  if x % 2 ~= 0 then\n    if n % 2 == 1 then return true end\n  end\n  -- If\
    \ x is even, check if n is odd\n  if x % 2 == 0 then\n    if n % 2 == 1 then return\
    \ true end\n  end\n  -- If x is odd, check if n is even\n  if x % 2 ~= 0 then\n\
    \    if n % 2 == 0 then return true end\n  end\n  return false\nend", "  if n\
    \ == 1 then\n    return x == 1\n  else\n    return x == n^int(x)\n  end\nend",
  "  -- Base case\n  if n==1 then\n    return true\n  end\n  -- Recursive case\n \
    \ if x==n then\n    return true\n  end\n  if x%n==0 then\n    return false\n \
    \ end\n  return is_simple_power(x//n, n)\nend", "  if x == 1 then\n    return\
    \ true\n  end\n  if x == 0 then\n    return false\n  end\n  if n == 0 then\n \
    \   return false\n  end\n  if n < 0 then\n    return false\n  end\n  if n == 1\
    \ then\n    return true\n  end\n  if x == n then\n    return true\n  end\n  if\
    \ x ~= n then\n    return false\n  end\n  if n % 2 == 1 then\n    return false\n\
    \  end\n  if n % 3 == 0 then\n    return true\n  end\n  if n % 5 == 0 then\n \
    \   return false\n  end\n  if n % 7 == 0 then\n    return false\n  end\n  if n\
    \ % 11 == 0 then\n    return false\n  end\n  if n % 13 == 0 then\n    return false\n\
    \  end\n  if n % 17 == 0 then\n    return false\n  end\n  if n % 19 == 0 then\n\
    \    return false\n  end\n  if n % 23 == 0 then\n    return false\n  end\n  if\
    \ n % 29 == 0 then\n    return false\n  end\n  if n % 31 == 0 then\n    return\
    \ false\n  end\n  if n % 37 == 0 then\n    return false\n  end\n  if n % 41 ==\
    \ 0 then\n    return false\n  end\n  if n % 47 == 0 then\n    return false\n \
    \ end\n  if n % 53 == 0 then\n    return false\n  end\n  if n % 59 == 0 then\n\
    \    return false\n  end\n  if n % 61 == 0 then\n    return false\n  end\n  if\
    \ n % 67 == 0 then\n    return false\n  end\n  if n % 71 == 0 then\n    return\
    \ false\n  end\n  if n % 73 == 0 then\n    return false\n  end\n  if n % 79 ==\
    \ 0 then\n    return false\n  end\n  if n % 83 == 0 then\n    return false\n \
    \ end\n  if n % 89 == 0 then\n    return false\n  end\n  if n % 97 == 0 then\n\
    \    return false\n  end\n  if n % 101 == 0 then\n    return false\n  end\n  if\
    \ n % 103 == 0 then\n    return false\n  end\n  if n % 107 == 0 then\n    return\
    \ false\n  end\n  if n % 111 == 0 then\n    return false\n  end\n  if n % 117\
    \ == 0 then\n    return false\n  end\n  if n % 121 == 0 then\n    return false\n\
    \  end\n  if n % 127 == 0 then\n    return false\n  end\n  if n % 131 == 0 then\n\
    \    return false\n  end\n  if n % 137 == 0 then\n    return false\n  end\n  if\
    \ n % 141 == 0 then\n    return false\n  end\n  if n % 147 == 0 then\n    return\
    \ false\n  end\n  if n % 151 == 0 then\n    return false\n  end\n  if n % 157\
    \ == 0 then\n    return false\n", "  if n == 1 then return true end\n  if x ==\
    \ 1 then return false end\n  if x == 0 then return false end\n  if n == 0 then\
    \ return false end\n  if x == x then return true end\n  if n % 2 == 0 then return\
    \ is_simple_power(x / 2, n) end\n  return false\nend", "  if x == 1 then return\
    \ true end\n  if n == 0 then return false end\n  if n < 0 then return false end\n\
    \  if n == 1 then return x == n end\n  if x == x then return true end\n  if x\
    \ % n == 0 then return true end\n  return false\nend", "  if n == 1 then\n   \
    \ return x == 1\n  else\n    return x % n == 0 and is_simple_power(x / n, n)\n\
    \  end\nend", "  if n == 0 then return true end\n  if n == 1 then return x ==\
    \ 1 end\n  if n % 2 == 0 then return not is_simple_power(x, n / 2) end\n  if x\
    \ % n == 0 then return true end\n  return false\nend", "  if x == n then\n   \
    \ return true\n  elseif x < n then\n    return false\n  else\n    return is_simple_power(x,\
    \ n-1)\n  end\nend", "  if n == 1 then\n    return true\n  end\n  if x ~= n then\n\
    \    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if x ~=\
    \ n then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n\
    \  if x ~= n then\n    return false\n  end\n  if n == 1 then\n    return true\n\
    \  end\n  if x ~= n then\n    return false\n  end\n  if n == 1 then\n    return\
    \ true\n  end\n  if x ~= n then\n    return false\n  end\n  if n == 1 then\n \
    \   return true\n  end\n  if x ~= n then\n    return false\n  end\n  if n == 1\
    \ then\n    return true\n  end\n  if x ~= n then\n    return false\n  end\n  if\
    \ n == 1 then\n    return true\n  end\n  if x ~= n then\n    return false\n  end\n\
    \  if n == 1 then\n    return true\n  end\n  if x ~= n then\n    return false\n\
    \  end\n  if n == 1 then\n    return true\n  end\n  if x ~= n then\n    return\
    \ false\n  end\n  if n == 1 then\n    return true\n  end\n  if x ~= n then\n \
    \   return false\n  end\n  if n == 1 then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ x ~= n then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n\
    \  if x ~= n then\n    return false\n  end\n  if n == 1 then\n    return true\n\
    \  end\n  if x ~= n then\n    return false\n  end\n  if n == 1 then\n    return\
    \ true\n  end\n  if x ~= n then\n    return false\n  end\n  if n == 1 then\n \
    \   return true\n  end\n  if x ~= n then\n    return false\n  end\n  if n == 1\
    \ then\n    return true\n  end\n  if x ~= n then\n    return false\n  end\n  if\
    \ n == 1 then\n    return true\n  end\n  if x ~= n then\n    return false\n  end\n\
    \  if n == 1 then\n    return true\n  end\n  if x ~= n then\n    return false\n\
    \  end\n  if n == 1 then\n    return true\n  end\n  if x ~= n then\n    return\
    \ false\n  end\n  if n == 1 then\n    return true\n  end\n  if x ~= n then\n \
    \   return false\n  end\n  if n == 1 then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return ", "  if n == 1\
    \ then\n    return x == 1\n  else\n    return x == n*n\n  end\nend", "  -- Base\
    \ case\n  if n==1 then\n    return true\n  end\n  -- Recursive case\n  if x%n==0\
    \ then\n    return true\n  end\n  return false\nend", "  if x == n then\n    return\
    \ true\n  elseif x < n then\n    return false\n  else\n    return is_simple_power(x,\
    \ n-1)\n  end\nend", "  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x == n*n\n  end\nend", "  if x == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == 1 then return x == n end\n  if n % 2 == 0 then return is_simple_power(x\
    \ * x, n / 2) end\n  return is_simple_power(x * x, (n - 1) / 2)\nend", "  if n\
    \ == 0 then return false end\n  if n == 1 then return x == 1 end\n  if n == 2\
    \ then return x == 1 end\n  if n % 2 == 0 then return x == (x * x) or is_simple_power(x,\
    \ n / 2) end\n  return false\nend", "  if n == 1 then return true end\n  if x\
    \ == 1 then return false end\n  if x == n then return true end\n  if x % n ==\
    \ 0 then return true end\n  return false\nend", "  if n == 0 then return false\
    \ end\n  if n == 1 then return x == 1 end\n  if n == 2 then return x == x end\n\
    \  if n % 2 == 0 then\n    return is_simple_power(x, n / 2) and\n           is_simple_power(x,\
    \ n / 2)\n  else\n    return is_simple_power(x, n / 2) and\n           is_simple_power(x,\
    \ (n - 1) / 2)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
