language: lua
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk76wna9r.lua:21:\
    \ expected: {0, 1}\nactual: {0, 2294.41}\nstack traceback:\n\t/tmp/tmpk76wna9r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7co92tbf.lua:20:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmp7co92tbf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtxorfpb.lua:20:\
    \ expected: {0, 1}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpqtxorfpb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = (range\
    \ == 0) and 1 or range / max\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwg6luruo.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpwg6luruo.lua:6: in function 'candidate'\n\t/tmp/tmpwg6luruo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = ((numbers[i] - min)\
    \ / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ka8gw85.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp5ka8gw85.lua:6: in function 'candidate'\n\t/tmp/tmp5ka8gw85.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ (max - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n  \
    \  result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72sc0v8p.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp72sc0v8p.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp72sc0v8p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local scale = (max - min) / (max\
    \ - min)\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = numbers[i] + min * scale\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj14p1j9l.lua:23:\
    \ expected: {0, 1}\nactual: {4, 51.9}\nstack traceback:\n\t/tmp/tmpj14p1j9l.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    local new_number = (number - new_min) / new_range\n    new_numbers[#new_numbers\
    \ + 1] = new_number\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93l6opp2.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp93l6opp2.lua:6: in function 'candidate'\n\t/tmp/tmp93l6opp2.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nft8hk7.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp6nft8hk7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6nft8hk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nlbkahu.lua:18:\
    \ expected: {0, 1}\nactual: {2, 95.8}\nstack traceback:\n\t/tmp/tmp9nlbkahu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[math.floor((number\
    \ - min) / range * new_max)] = math.floor((number - min) / range * new_min)\n\
    \  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0bkon1x.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpz0bkon1x.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpz0bkon1x.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = math.floor(new_min\
    \ + (new_max - new_min) * number / range)\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp618g65eh.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp618g65eh.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp618g65eh.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, num in ipairs(numbers) do\n    new_numbers[num] = num - min +\
    \ scale * 0.5\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeavzf1m6.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpeavzf1m6.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeavzf1m6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
