language: lua
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk76wna9r.lua:21:\
    \ expected: {0, 1}\nactual: {0, 2294.41}\nstack traceback:\n\t/tmp/tmpk76wna9r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7co92tbf.lua:20:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmp7co92tbf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtxorfpb.lua:20:\
    \ expected: {0, 1}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpqtxorfpb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = (range\
    \ == 0) and 1 or range / max\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwg6luruo.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpwg6luruo.lua:6: in function 'candidate'\n\t/tmp/tmpwg6luruo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = ((numbers[i] - min)\
    \ / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ka8gw85.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp5ka8gw85.lua:6: in function 'candidate'\n\t/tmp/tmp5ka8gw85.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ (max - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n  \
    \  result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72sc0v8p.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp72sc0v8p.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp72sc0v8p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local scale = (max - min) / (max\
    \ - min)\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = numbers[i] + min * scale\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj14p1j9l.lua:23:\
    \ expected: {0, 1}\nactual: {4, 51.9}\nstack traceback:\n\t/tmp/tmpj14p1j9l.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    local new_number = (number - new_min) / new_range\n    new_numbers[#new_numbers\
    \ + 1] = new_number\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93l6opp2.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp93l6opp2.lua:6: in function 'candidate'\n\t/tmp/tmp93l6opp2.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nft8hk7.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp6nft8hk7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6nft8hk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nlbkahu.lua:18:\
    \ expected: {0, 1}\nactual: {2, 95.8}\nstack traceback:\n\t/tmp/tmp9nlbkahu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[math.floor((number\
    \ - min) / range * new_max)] = math.floor((number - min) / range * new_min)\n\
    \  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0bkon1x.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpz0bkon1x.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpz0bkon1x.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = math.floor(new_min\
    \ + (new_max - new_min) * number / range)\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp618g65eh.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp618g65eh.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp618g65eh.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, num in ipairs(numbers) do\n    new_numbers[num] = num - min +\
    \ scale * 0.5\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeavzf1m6.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpeavzf1m6.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeavzf1m6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ (range == 0)\n    or (range == 1)\n    or (range == -1)\n    or (range == -2)\n\
    \    or (range == -3)\n    or (range == -4)\n    or (range == -5)\n    or (range\
    \ == -6)\n    or (range == -7)\n    or (range == -8)\n    or (range == -9)\n \
    \   or (range == -10)\n    or (range == -11)\n    or (range == -12)\n    or (range\
    \ == -13)\n    or (range == -14)\n    or (range == -15)\n    or (range == -16)\n\
    \    or (range == -17)\n    or (range == -18)\n    or (range == -19)\n    or (range\
    \ == -20)\n    or (range == -21)\n    or (range == -22)\n    or (range == -23)\n\
    \    or (range == -24)\n    or (range == -25)\n    or (range == -26)\n    or (range\
    \ == -27)\n    or (range == -28)\n    or (range == -29)\n    or (range == -30)\n\
    \    or (range == -31)\n    or (range == -32)\n    or (range == -33)\n    or (range\
    \ == -34)\n    or (range == -35)\n    or (range == -36)\n    or (range == -37)\n\
    \    or (range == -38)\n    or (range == -39)\n    or (range == -40)\n    or (range\
    \ == -41)\n    or (range == -42)\n    or (range == -43)\n    or (range == -44)\n\
    \    or (range == -45)\n    or (range == -46)\n    or (range == -47)\n    or (range\
    \ == -48)\n    or (range == -49)\n    or (range == -50)\n    or (range == -51)\n\
    \    or (range == -52)\n    or (range == -53)\n    or (range == -54)\n    or (range\
    \ == -55)\n    or (range == -56)\n    or (range == -57)\n    or (range == -58)\n\
    \    or (range == -59)\n    or (range == -60)\n    or (range == -61)\n    or (range\
    \ == -60)\n    or (range == -60)\n    or (range == -60)\n    or (range == -\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1wiakkdy.lua:76: '')'' expected (to close ''('' at line 75)
    near ''=''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppipurcp1.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmppipurcp1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn18c_h0.lua:18:\
    \ expected: {0.0, 1.0}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpdn18c_h0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxaqzaub6.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 95.8}\nstack traceback:\n\t/tmp/tmpxaqzaub6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = (range\
    \ == 0 and 1 or range) / 2.0\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    result[#result + 1] = min + (v - min) * scale\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38swv5eg.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp38swv5eg.lua:8: in local 'candidate'\n\t/tmp/tmp38swv5eg.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_htapitf.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp_htapitf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypnqp9lr.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2294.41}\nstack traceback:\n\t/tmp/tmpypnqp9lr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nft8hk7.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp6nft8hk7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6nft8hk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uns721p.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp0uns721p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = 1.0\n  if min > max then\n \
    \   scale = 1.0\n  elseif min == max then\n    scale = 1.0\n  else\n    scale\
    \ = 1.0 / (max - min)\n  end\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = numbers[i] * scale\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurd2j1hi.lua:26:\
    \ expected: {0.0, 1.0}\nactual: {0.041753653444676, 1.0417536534447}\nstack traceback:\n\
    \t/tmp/tmpurd2j1hi.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm2dgmin.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpkm2dgmin.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = (range\
    \ == 0 and 1 or range) / 2.0\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    result[v] = min + (v - min) * scale\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbj54diy.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpvbj54diy.lua:8: in local 'candidate'\n\t/tmp/tmpvbj54diy.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ (range == 0)\n    or (range == 1)\n    or (range == -1)\n    or (range == -2)\n\
    \    or (range == -3)\n    or (range == -4)\n    or (range == -5)\n    or (range\
    \ == -6)\n    or (range == -7)\n    or (range == -8)\n    or (range == -9)\n \
    \   or (range == -10)\n    or (range == -11)\n    or (range == -12)\n    or (range\
    \ == -13)\n    or (range == -14)\n    or (range == -15)\n    or (range == -16)\n\
    \    or (range == -17)\n    or (range == -18)\n    or (range == -19)\n    or (range\
    \ == -20)\n    or (range == -21)\n    or (range == -22)\n    or (range == -23)\n\
    \    or (range == -24)\n    or (range == -25)\n    or (range == -26)\n    or (range\
    \ == -27)\n    or (range == -28)\n    or (range == -29)\n    or (range == -30)\n\
    \    or (range == -31)\n    or (range == -32)\n    or (range == -33)\n    or (range\
    \ == -34)\n    or (range == -35)\n    or (range == -36)\n    or (range == -37)\n\
    \    or (range == -38)\n    or (range == -39)\n    or (range == -40)\n    or (range\
    \ == -41)\n    or (range == -42)\n    or (range == -43)\n    or (range == -44)\n\
    \    or (range == -45)\n    or (range == -46)\n    or (range == -47)\n    or (range\
    \ == -48)\n    or (range == -49)\n    or (range == -50)\n    or (range == -51)\n\
    \    or (range == -52)\n    or (range == -53)\n    or (range == -54)\n    or (range\
    \ == -55)\n    or (range == -56)\n    or (range == -57)\n    or (range == -58)\n\
    \    or (range == -59)\n    or (range == -60)\n    or (range == -61)\n    or (range\
    \ == -62) -- This case is unreachable, but we still need to handle it\n  local\
    \ new_numbers = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,\
    \ 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3o1c0ewn.lua:85: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyu1m1e6.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphyu1m1e6.lua:8: in local 'candidate'\n\t/tmp/tmphyu1m1e6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57s1f_y9.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp57s1f_y9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn18c_h0.lua:18:\
    \ expected: {0.0, 1.0}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpdn18c_h0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm2dgmin.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpkm2dgmin.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nft8hk7.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp6nft8hk7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6nft8hk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_range = new_max - new_min\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    local new_number = numbers[i]\n    new_number = new_number\
    \ - new_min\n    new_number = new_number / new_range\n    new_numbers[i] = new_number\n\
    \  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e0qzs3z.lua:26:\
    \ expected: {0.0, 1.0}\nactual: {0.083333333333333, 0.91666666666667}\nstack traceback:\n\
    \t/tmp/tmp7e0qzs3z.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwzomjno.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphwzomjno.lua:8: in local 'candidate'\n\t/tmp/tmphwzomjno.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local range\
    \ = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers do\n    scaled_numbers[i]\
    \ = min + (numbers[i] - min) * range / max\n  end\n  return scaled_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxroaw56.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 47.980160320641}\nstack traceback:\n\t/tmp/tmpqxroaw56.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = ((number\
    \ - min) / scale) + min\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ryraus8.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp9ryraus8.lua:8: in local 'candidate'\n\t/tmp/tmp9ryraus8.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi48fwe93.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpi48fwe93.lua:8: in local 'candidate'\n\t/tmp/tmpi48fwe93.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57s1f_y9.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp57s1f_y9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyu1m1e6.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphyu1m1e6.lua:8: in local 'candidate'\n\t/tmp/tmphyu1m1e6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57s1f_y9.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp57s1f_y9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local range\
    \ = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers do\n    scaled_numbers[i]\
    \ = min + (numbers[i] - min) / range\n  end\n  return scaled_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnat4utvc.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 3.0}\nstack traceback:\n\t/tmp/tmpnat4utvc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtxorfpb.lua:20:\
    \ expected: {0, 1}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpqtxorfpb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkpqfx21.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {0.0, 2294.41}\nstack traceback:\n\t/tmp/tmpkkpqfx21.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ayc5au8.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp2ayc5au8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7kvmx0q.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp_7kvmx0q.lua:8: in local 'candidate'\n\t/tmp/tmp_7kvmx0q.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypnqp9lr.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2294.41}\nstack traceback:\n\t/tmp/tmpypnqp9lr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    local n = numbers[i]\n    local new_n =\
    \ ((n - min) / (range * 1.0)) * new_max - new_min\n    new_numbers[i] = new_n\n\
    \  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkoc0mh68.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpkoc0mh68.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpkoc0mh68.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyu1m1e6.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphyu1m1e6.lua:8: in local 'candidate'\n\t/tmp/tmphyu1m1e6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * i\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuldn7z6h.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpuldn7z6h.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwzomjno.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphwzomjno.lua:8: in local 'candidate'\n\t/tmp/tmphwzomjno.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtxorfpb.lua:20:\
    \ expected: {0, 1}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpqtxorfpb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ range = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers do\n \
    \   scaled_numbers[i] = min + (numbers[i] - min) / range\n  end\n  return scaled_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwkmkt5k.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmppwkmkt5k.lua:9: in local 'candidate'\n\t/tmp/tmppwkmkt5k.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyu1m1e6.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphyu1m1e6.lua:8: in local 'candidate'\n\t/tmp/tmphyu1m1e6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyu1m1e6.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphyu1m1e6.lua:8: in local 'candidate'\n\t/tmp/tmphyu1m1e6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = math.min(new_max, math.max(new_min, numbers[i]))\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxnchduc.lua:22:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 49.9}\nstack traceback:\n\t/tmp/tmpbxnchduc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwonol7lh.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpwonol7lh.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpwonol7lh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyu1m1e6.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphyu1m1e6.lua:8: in local 'candidate'\n\t/tmp/tmphyu1m1e6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ (max - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n  \
    \  result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72sc0v8p.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp72sc0v8p.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp72sc0v8p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwzomjno.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmphwzomjno.lua:8: in local 'candidate'\n\t/tmp/tmphwzomjno.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = math.floor(new_min\
    \ + (new_max - new_min) * number / range)\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp618g65eh.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp618g65eh.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp618g65eh.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzuvr8obe.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpzuvr8obe.lua:8: in local 'candidate'\n\t/tmp/tmpzuvr8obe.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ayc5au8.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp2ayc5au8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi48fwe93.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpi48fwe93.lua:8: in local 'candidate'\n\t/tmp/tmpi48fwe93.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 0, \"rescale_to_unit expects a list of numbers\")\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqlstvqv.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {0.0, 2294.41}\nstack traceback:\n\t/tmp/tmprqlstvqv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = numbers[i] - min\n \
    \ end\n  for i = 1, #numbers do\n    scaled_numbers[i] = scaled_numbers[i] / range\n\
    \  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirepxeq3.lua:23:\
    \ expected: {1.0, 0.0}\nactual: {-0.0, 1.0}\nstack traceback:\n\t/tmp/tmpirepxeq3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn18c_h0.lua:18:\
    \ expected: {0.0, 1.0}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpdn18c_h0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = new_min + (numbers[i] -\
    \ min) / range * new_max\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81fa51n4.lua:21:\
    \ expected: {0.0, 1.0}\nactual: {-2.79, 51.9}\nstack traceback:\n\t/tmp/tmp81fa51n4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = 1.0\n  if min > max then\n    local tmp = min\n    min = max\n    max = tmp\n\
    \  end\n  for i = 2, #numbers do\n    local n = numbers[i]\n    min = math.min(min,\
    \ n)\n    max = math.max(max, n)\n    scale = math.min(scale, max - min)\n  end\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe934r4s0.lua:31:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 49.9}\nstack traceback:\n\t/tmp/tmpe934r4s0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = (range\
    \ == 0)\n    or (range == 1)\n    or (range == -1)\n    or (range == -2) -- Special\
    \ case for -1 and -2\n    or (range == -3)\n    or (range == -4)\n    or (range\
    \ == -5)\n    or (range == -6)\n    or (range == -7)\n    or (range == -8)\n \
    \   or (range == -9)\n    or (range == -10)\n    or (range == -11)\n    or (range\
    \ == -12)\n    or (range == -13)\n    or (range == -14)\n    or (range == -15)\n\
    \    or (range == -16)\n    or (range == -17)\n    or (range == -18)\n    or (range\
    \ == -19)\n    or (range == -20)\n    or (range == -21)\n    or (range == -22)\n\
    \    or (range == -23)\n    or (range == -24)\n    or (range == -25)\n    or (range\
    \ == -26)\n    or (range == -27)\n    or (range == -28)\n    or (range == -29)\n\
    \    or (range == -30)\n    or (range == -31)\n    or (range == -32)\n    or (range\
    \ == -33)\n    or (range == -34)\n    or (range == -35)\n    or (range == -36)\n\
    \    or (range == -37)\n    or (range == -38)\n    or (range == -39)\n    or (range\
    \ == -40)\n    or (range == -41)\n    or (range == -42)\n    or (range == -43)\n\
    \    or (range == -44)\n    or (range == -45)\n    or (range == -46)\n    or (range\
    \ == -47)\n    or (range == -48)\n    or (range == -49)\n    or (range == -50)\n\
    \    or (range == -51)\n    or (range == -52)\n    or (range == -53)\n    or (range\
    \ == -54)\n    or (range == -55)\n    or (range == -56)\n    or (range == -57)\n\
    \    or (range == -58)\n    or (range == -59)\n    or (range == -60)\n    or (range\
    \ == -61)\n    or (range == -62) -- Special case for -60 and -61\n    or (range\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpck0p2tzm.lua:74: '')'' expected (to close ''('' at line 73)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for _, v in ipairs(numbers) do\n    v = v - min\n    v = v * scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ralmiy5.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp9ralmiy5.lua:8: in local 'candidate'\n\t/tmp/tmp9ralmiy5.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2, \"rescale_to_unit expects a list of at least two elements\")\n  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min\
    \ + scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaoc0c02x.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 95.8}\nstack traceback:\n\t/tmp/tmpaoc0c02x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn18c_h0.lua:18:\
    \ expected: {0.0, 1.0}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpdn18c_h0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale\
    \ * (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcc56pg4.lua:23:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmprcc56pg4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ayc5au8.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp2ayc5au8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7za4ngur.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp7za4ngur.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7za4ngur.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_htapitf.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp_htapitf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i18r8wf.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp5i18r8wf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ (range == 0)\n    or (range == 1)\n    or (min == 0)\n    or (max == 1)\n  \
    \  or (min == max)\n    or (min == (min + max) / 2)\n    or (max == (min + max)\
    \ / 2)\n    or (min == (min + max) / 2 + 1)\n    or (max == (min + max) / 2 +\
    \ 1)\n    or (min == (min + max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n\
    \    or (min == (min + max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n  \
    \  or (min == (min + max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or\
    \ (min == (min + max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min\
    \ == (min + max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min ==\
    \ (min + max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min == (min\
    \ + max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min == (min +\
    \ max) / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min == (min + max)\
    \ / 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min == (min + max) /\
    \ 2 + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min == (min + max) / 2\
    \ + 1)\n    or (max == (min + max) / 2 + 1)\n    or (min == (min + max) / 2 +\
    \ 1)\n    or (max == (min + max) / 2 + 1)\n    or (min == (min + max) / 2 + 1)\n\
    \    or (max == (min + max) / 2 + 1)\n    or (min == (min + max) / 2 + 1)\n  \
    \  or (max == (min + max) / 2 + 1)\n    or (min == (min + max) / 2 + 1)\n    or\
    \ (max == (min + max) / 2 + 1)\n    or (min == (min + max) / 2 + 1)\n    or (max\
    \ == (min + max) / 2 + 1)\n    or (min == (min + max) / 2 + 1)\n    or (max ==\
    \ (min + max) / 2 + 1)\n    or (min == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvg_kfovr.lua:53: '')'' expected (to close ''('' at line 52)
    near ''=''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7kvmx0q.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp_7kvmx0q.lua:8: in local 'candidate'\n\t/tmp/tmp_7kvmx0q.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local length = #numbers\n  local scale = (max\
    \ - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n    result[i]\
    \ = min + scale * numbers[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfg2tbxa.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmppfg2tbxa.lua:9: in local 'candidate'\n\t/tmp/tmppfg2tbxa.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57s1f_y9.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp57s1f_y9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ 1.0 / range\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    new_numbers[number] = min + ((number - min) * scale)\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmxb44u7x.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpmxb44u7x.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmxb44u7x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7co92tbf.lua:20:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmp7co92tbf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uns721p.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp0uns721p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi48fwe93.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpi48fwe93.lua:8: in local 'candidate'\n\t/tmp/tmpi48fwe93.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (1 - min)\n \
    \ local result = {}\n  for _, v in ipairs(numbers) do\n    result[v] = min + (v\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7cl58cf5.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp7cl58cf5.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7cl58cf5.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ 1.0\n  if min == max then\n    return numbers\n  elseif min == 0 then\n    scale\
    \ = 1.0 / length\n  elseif max == 1 then\n    scale = 1.0 / length\n  else\n \
    \   scale = 1.0 / (max - min)\n  end\n  local result = {}\n  for i = 1, length\
    \ do\n    result[i] = numbers[i] * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr2g1hux8.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpr2g1hux8.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpr2g1hux8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nlbkahu.lua:18:\
    \ expected: {0, 1}\nactual: {2, 95.8}\nstack traceback:\n\t/tmp/tmp9nlbkahu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ 1.0 / range\n  local new_numbers = {}\n  for _, v in ipairs(numbers) do\n  \
    \  new_numbers[v] = v * scale\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0s74xkcv.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp0s74xkcv.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0s74xkcv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn18c_h0.lua:18:\
    \ expected: {0.0, 1.0}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpdn18c_h0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ (range == 0 and 1 or range) / 2.0\n  local new_numbers = {}\n  for _, v in ipairs(numbers)\
    \ do\n    new_numbers[v] = v * scale\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr744z9tj.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpr744z9tj.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpr744z9tj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uns721p.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp0uns721p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtxorfpb.lua:20:\
    \ expected: {0, 1}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpqtxorfpb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57s1f_y9.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp57s1f_y9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2, \"rescale_to_unit() expects at least two numbers\")\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej3763dq.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpej3763dq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn18c_h0.lua:18:\
    \ expected: {0.0, 1.0}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpdn18c_h0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range)\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8xtgclf.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpq8xtgclf.lua:8: in local 'candidate'\n\t/tmp/tmpq8xtgclf.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2, \"rescale_to_unit() expects at least two numbers\")\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej3763dq.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmpej3763dq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9zu4smp.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpp9zu4smp.lua:9: in local 'candidate'\n\t/tmp/tmpp9zu4smp.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = min +\
    \ (number - min) * scale\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ym_6o09.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp2ym_6o09.lua:8: in local 'candidate'\n\t/tmp/tmp2ym_6o09.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local length = #numbers\n  local scale = (max\
    \ - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53f3i7i4.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp53f3i7i4.lua:9: in local 'candidate'\n\t/tmp/tmp53f3i7i4.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nft8hk7.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp6nft8hk7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6nft8hk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ (max - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n  \
    \  result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72sc0v8p.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp72sc0v8p.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp72sc0v8p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local scale = (max - min) / (max\
    \ - min)\n  local result = {}\n  for i = 1, #numbers do\n    result[i] = numbers[i]\
    \ + min * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqe4h_xc.lua:23:\
    \ expected: {0.0, 1.0}\nactual: {4.0, 51.9}\nstack traceback:\n\t/tmp/tmpbqe4h_xc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ 1.0 / range\n  local result = {}\n  for _, value in ipairs(numbers) do\n   \
    \ result[value] = value * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_iwu533_.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp_iwu533_.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_iwu533_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn18c_h0.lua:18:\
    \ expected: {0.0, 1.0}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpdn18c_h0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uns721p.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmp0uns721p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsro6rzu.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmsro6rzu.lua:6: in function 'candidate'\n\t/tmp/tmpmsro6rzu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lvd1prt.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6lvd1prt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6lvd1prt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = 1.0\
    \ / range\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n \
    \   new_numbers[number] = min + (number * scale)\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qyi73fw.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp2qyi73fw.lua:8: in local 'candidate'\n\t/tmp/tmp2qyi73fw.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9zu4smp.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpp9zu4smp.lua:9: in local 'candidate'\n\t/tmp/tmpp9zu4smp.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptknsz3lo.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmptknsz3lo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nlbkahu.lua:18:\
    \ expected: {0, 1}\nactual: {2, 95.8}\nstack traceback:\n\t/tmp/tmp9nlbkahu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk04cbl_s.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpk04cbl_s.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk04cbl_s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi48fwe93.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpi48fwe93.lua:8: in local 'candidate'\n\t/tmp/tmpi48fwe93.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppipurcp1.lua:19:\
    \ expected: {0.0, 1.0}\nactual: {2.0, 2296.41}\nstack traceback:\n\t/tmp/tmppipurcp1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nft8hk7.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp6nft8hk7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6nft8hk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7za4ngur.lua:6:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp7za4ngur.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7za4ngur.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] *= scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpocmbkgf5.lua:12: syntax error near ''*''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 0, \"rescale_to_unit() expects at least one number\")\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    table.insert(result, min +\
    \ scale * i)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x1_m9rn.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp4x1_m9rn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6k8w14t.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpo6k8w14t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo6k8w14t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zb94v32.lua:6:\
    \ bad argument #1 to 'min' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6zb94v32.lua:6: in function 'candidate'\n\t/tmp/tmp6zb94v32.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplooxjr5r.lua:18:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmplooxjr5r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ (max - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n  \
    \  result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72sc0v8p.lua:6:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp72sc0v8p.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp72sc0v8p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750462
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2, \"rescale_to_unit expects at least two numbers\")\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    table.insert(result, min +\
    \ scale * i)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7p87418.lua:20:\
    \ expected: {0.0, 1.0}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmps7p87418.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
