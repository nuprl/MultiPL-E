name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m =\
    \ i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i] then return\
    \ false end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local sorted = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sorted = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m <= n do\n\
    \      if l[m] < l[n] then\n        local t = l[m]\n        l[m] = l[n]\n    \
    \    l[n] = t\n      else\n        local t = l[m]\n        l[m] = l[n]\n     \
    \   l[n] = t\n      end\n      m = m + 1\n      n = n + 1\n    end\n    i = i\
    \ + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local j =\
    \ #l + 1\n  while i <= j do\n    if l[i] < l[j] then return false end\n    if\
    \ l[i] > l[j] then return true end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i]\
    \ < l[j] then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v <\
    \ sorted[#sorted] then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend", "  local function is_increasing(v)\n\
    \    return v < l[1]\n  end\n  local function is_decreasing(v)\n    return v >\
    \ l[1]\n  end\n  local function is_monotonic(v)\n    return is_increasing(v) or\
    \ is_decreasing(v)\n  end\n  return l[1] == l[2] or is_monotonic(l[1])\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = n\n     \
    \ else\n        i = m\n      end\n      n = m\n    end\n    if i < j then\n  \
    \    j = i\n    end\n    i = m\n  end\n  return i <= j\nend", "  local i = 1\n\
    \  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return\
    \ false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n   \
    \ while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n       \
    \ l[m] = l[n]\n        l[n] = t\n        m = m + 1\n        n = n + 1\n      elseif\
    \ l[m] > l[n] then\n        local t = l[m]\n        l[m] = l[n]\n        l[n]\
    \ = t\n        n = n - 1\n      else\n        local t = l[m]\n        l[m] = l[n]\n\
    \        l[n] = t\n        i = i + 1\n        n = n - 1\n      end\n    end\n\
    \  end\n  return i == j\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted\
    \ do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then\n     \
    \ j = m\n    end\n  end\n  return i == j\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local function helper(l, i, j)\n\
    \    if i == j then return true end\n    if l[i] > l[j] then return helper(l,\
    \ i, j+1) else return helper(l, i+1, j) end\n  end\n  return helper(l, 1, #l)\n\
    end", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local function is_increasing(v)\n    return v > l[1]\n  end\n  local\
    \ function is_decreasing(v)\n    return v < l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end", "  local sorted = {}\n  for\
    \ _, v in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n\
    \  local k = 1\n  local monotonic = false\n  local max_i = #l\n  local max_j =\
    \ #l\n  local max_k = #l\n  while i <= max_i and j <= max_j and k <= max_k do\n\
    \    if l[i] < l[j] then\n      i = i + 1\n      k = k + 1\n    elseif l[i] >\
    \ l[j] then\n      j = j + 1\n      k = k + 1\n    else\n      monotonic = true\n\
    \      break\n    end\n  end\n  return monotonic\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i - j\n    if l[m] < l[i] then\
    \ return false end\n    if l[m] > l[j] then return true end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return false\nend", "  local function compare(x, y)\n\
    \    if x < y then\n      return -1\n    elseif x > y then\n      return 1\n \
    \   else\n      return 0\n    end\n  end\n  local function is_monotonic(l, i,\
    \ j)\n    if i == j then\n      return true\n    end\n    if i == j - 1 then\n\
    \      return compare(l, l[i + 1]) <= 0\n    end\n    return is_monotonic(l, i,\
    \ j - 1)\n  end\n  local function is_monotonic_helper(l, i, j)\n    if i == j\
    \ then\n      return true\n    end\n    if i == j - 1 then\n      return compare(l,\
    \ l[i + 1]) <= 0\n    end\n    return is_monotonic_helper(l, i, j - 1)\n  end\n\
    \  local function is_monotonic_helper2(l, i, j)\n    if i == j then\n      return\
    \ true\n    end\n    if i == j - 1 then\n      return compare(l, l[i + 1]) <=\
    \ 0\n    end\n    return is_monotonic_helper2(l, i, j - 1)\n  end\n  local function\
    \ is_monotonic_helper3(l, i, j)\n    if i == j then\n      return true\n    end\n\
    \    if i == j - 1 then\n      return compare(l, l[i + 1]) <= 0\n    end\n   \
    \ return is_monotonic_helper3(l, i, j - 1)\n  end\n  local function is_monotonic_helper4(l,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if i == j - 1 then\n\
    \      return compare(l, l[i + 1]) <= 0\n    end\n    return is_monotonic_helper4(l,\
    \ i, j - 1)\n  end\n  local function is_monotonic_helper5(l, i, j)\n    if i ==\
    \ j then\n      return true\n    end\n    if i == j - 1 then\n      return compare(l,\
    \ l[i + 1]) <= 0\n    end\n    return is_monotonic_helper5(l, i, j - 1)\n  end\n\
    \  local function is_monotonic_helper6(l, i, j)\n    if i == j then\n      return\
    \ true\n    end\n    if i == j - 1 then\n      return compare(l, l[i + 1]) <=\
    \ 0\n    end\n    return is_monotonic_helper6(l, i, j - 1)\n  end\n  local function\
    \ is_monotonic_helper7(l, i, j)\n    if i == j then\n      return true\n    end\n\
    \    if i == j - 1 then\n      return compare(l, l[i + 1]) <= 0\n    end\n   \
    \ return is_monotonic_helper7(l, i, j - 1)\n  end\n  local function is_monotonic_helper8(l,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if i == j - 1 then\n\
    \      return compare(l, l[i + 1]) <= 0\n    end\n    return is_monotonic_helper8(",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return true\n    end\n  end\n  return false\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local k = i\n    while k <= j do\n      if\
    \ l[k] < l[k + 1] then\n        return false\n      end\n      k = k + 1\n   \
    \ end\n    i = i + 1\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i\n    i = j\n    j = m\n    if l[i] < l[j]\
    \ then\n      j = m\n    end\n  end\n  return i <= j\nend", "  local function\
    \ is_increasing(v)\n    return v > l[1]\n  end\n  local function is_decreasing(v)\n\
    \    return v < l[1]\n  end\n  local function is_monotonic(v)\n    return is_increasing(v)\
    \ or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n    return\
    \ is_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v > l[2] and v > l[1]\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v < l[2] and v < l[1]\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_monotonic_or_equal(v)\n    return is_strictly_monotonic(v)\
    \ or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n \
    \   return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_equal(v)\n\
    \    return is_strictly_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n\
    \    return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_equal(v)\n\
    \    return is_strictly_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n\
    \    return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_equal(v)\n\
    \    return is_strictly_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n\
    \    return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ k = j\n    while k >= m do\n      if l[m] < l[k] then\n        local t = l[m]\n\
    \        l[m] = l[k]\n        l[k] = t\n      end\n      k = k - 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\nend", "  local last_value\
    \ = nil\n  for _, value in ipairs(l) do\n    if last_value == nil then\n     \
    \ last_value = value\n      continue\n    end\n    if last_value < value then\n\
    \      return false\n    end\n    last_value = value\n  end\n  return true\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    local current = l[i]\n\
    \    if current ~= last then\n      return false\n    end\n    last = current\n\
    \  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local k = i\n    while k < j do\n      if l[k] < l[k + 1] then\n \
    \       local t = l[k]\n        l[k] = l[k + 1]\n        l[k + 1] = t\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i ==\
    \ j\nend", "  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n\
    \  end\n  for _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local monotonic = true\n  local last_monotonic = false\n  local last_monotonic_val\
    \ = nil\n  local last_monotonic_i = nil\n  local last_monotonic_j = nil\n  local\
    \ last_monotonic_k = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = ", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ monotonic = true\n  local last_value = l[1]\n  local last_time = l[1]\n  local\
    \ last_index = l[1]\n  for i = 2, #l do\n    if l[i] ~= last_value then\n    \
    \  if last_time > l[i] then\n        monotonic = false\n      else\n        --\
    \ Increase monotonic index by 1\n        k = k + 1\n        last_value = l[i]\n\
    \        last_time = l[i]\n        last_index = k\n      end\n    end\n  end\n\
    \  return monotonic\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j\
    \ do\n    local m = i\n    local n = j\n    while m <= n do\n      if l[m] < l[n]\
    \ then\n        local t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      else\n\
    \        local t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n  \
    \    m = m + 1\n      n = n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v <\
    \ sorted[#sorted] then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n \
    \       l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n\
    \ - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local sorted = {}\n  local last_value\n  for _, value in ipairs(l) do\n    if\
    \ value == last_value then\n      table.insert(sorted, value)\n    else\n    \
    \  last_value = value\n      table.insert(sorted, value)\n    end\n  end\n  table.sort(sorted)\n\
    \  for _, value in ipairs(sorted) do\n    if value == sorted[#sorted] then\n \
    \     return true\n    end\n  end\n  return false\nend", "  local sorted = table.sort(l)\n\
    \  return sorted[1] == sorted[#sorted] and #sorted > 1\nend", "  local sorted\
    \ = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    if l[i] < l[j] then return false end\n    if l[i]\
    \ > l[j] then return true end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j]\
    \ then\n      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n\
    \      return false\n    end\n  end\n  return true\nend", "  local prev = {}\n\
    \  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l)\
    \ do\n    if not prev[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ j\n    if l[m] < l[i] then return false end\n    if l[m] > l[j] then return\
    \ true end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local\
    \ function is_decreasing(i)\n    return l[i] > l[i + 1]\n  end\n  local function\
    \ is_increasing(i)\n    return l[i] < l[i + 1]\n  end\n  local function is_monotonic(i)\n\
    \    return is_decreasing(i) or is_increasing(i)\n  end\n  local function is_strictly_increasing(i)\n\
    \    return is_increasing(i) and l[i + 1] <= l[i]\n  end\n  local function is_strictly_decreasing(i)\n\
    \    return is_decreasing(i) and l[i + 1] >= l[i]\n  end\n  local function is_strictly_monotonic(i)\n\
    \    return is_monotonic(i) and is_strictly_increasing(i) or is_monotonic(i) and\
    \ is_strictly_decreasing(i)\n  end\n  local function is_strictly_monotonic_strictly_increasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i)\n  end\n  local\
    \ function is_strictly_monotonic_strictly_decreasing(i)\n    return is_strictly_decreasing(i)\
    \ and is_strictly_monotonic(i)\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i) and is_strictly_decreasing(i)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(i)\n\
    \    return is_strictly_decreasing(i) and is_strictly_monotonic(i) and is_strictly_increasing(i)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing_strictly_increasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i) and is_strictly_decreasing(i)\
    \ and is_strictly_increasing(i)\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing_strictly_decreasing(i)\n\
    \    return is_strictly_decreasing(i) and is_strictly_monotonic(i) and is_strictly_increasing(i)\
    \ and is_strictly_decreasing(i)\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing_strictly_increasing_strictly_decreasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i) and is_strictly_decreasing(i)\
    \ and is_strictly_increasing(i) and is_strictly_decreasing(i)\n  end\n  local\
    \ function is_strictly_monot", "  local function is_increasing(v)\n    return\
    \ v > l[1]\n  end\n  local function is_decreasing(v)\n    return v < l[1]\n  end\n\
    \  local function is_monotonic(v)\n    return is_increasing(v) or is_decreasing(v)\n\
    \  end\n  local function is_monotonic_or_equal(v)\n    return is_monotonic(v)\
    \ or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n    return\
    \ is_decreasing(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end", "  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n\
    \  for _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k =\
    \ 1\n  local monotonic = true\n  local max_i = #l\n  local max_j = #l\n  local\
    \ max_k = #l\n  while i <= max_i and j <= max_j and k <= max_k do\n    if l[i]\
    \ < l[j] then\n      i = i + 1\n      k = k + 1\n    elseif l[i] > l[j] then\n\
    \      j = j + 1\n      k = k + 1\n    else\n      monotonic = false\n      break\n\
    \    end\n  end\n  return monotonic\nend", "  local prev = {}\n  for _, v in ipairs(l)\
    \ do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if not prev[v]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local i =\
    \ 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n     \
    \ return false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n =\
    \ j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n        m, n = n, m\n      else\n    \
    \    m, n = n, m\n      end\n    end\n    i = m + 1\n    j = n\n  end\n  return\
    \ i == j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ k = i\n    while k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n \
    \   if k > i then\n      l[i], l[k] = l[k], l[i]\n      i = i + 1\n    end\n \
    \   j = j - 1\n  end\n  return i == j\nend", "  local i = 1\n  local j = 1\n \
    \ local k = 1\n  local monotonic = nil\n  local is_monotonic = false\n  local\
    \ is_decreasing = false\n  local is_increasing = false\n  local is_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing = false\n  local is_non_decreasing = false\n\
    \  local is_non_increasing_or_non_decreasing = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_decreasing_or_non_increasing = false\n  local is_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_de", "  local i = 1\n  local j = #l\
    \ + 1\n  while i <= j do\n    local k = i\n    local m = j\n    while k <= m do\n\
    \      if l[k] < l[m] then\n        j = k\n      elseif l[k] > l[m] then\n   \
    \     i = k\n      else\n        return true\n      end\n      k = k + 1\n   \
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local i =\
    \ 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n =\
    \ j\n    while m <= n do\n      if l[m] < l[i] then return false end\n      if\
    \ l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i = i + 1\n\
    \    j = j - 1\n  end\n  return true\nend", "  local prev = {}\n  for _, v in\
    \ ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if\
    \ not prev[v] then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local sorted\
    \ = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1]\
    \ + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ last_value = nil\n  for _, value in ipairs(l) do\n    if last_value == nil then\n\
    \      last_value = value\n      continue\n    end\n    if last_value < value\
    \ then\n      return false\n    end\n    last_value = value\n  end\n  return true\n\
    end", "  local function is_decreasing(v)\n    return v < l[1]\n  end\n  local\
    \ function is_increasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_decreasing(v) or is_increasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and v > l[2]\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and v < l[2]\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v)\n  end\n  local\
    \ function is_strictly_decreasing_strictly_increasing(v)\n    return v < l[1]\
    \ and v > l[2] and v < l[3]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v > l[1] and v < l[2] and v > l[3]\n  end\n  local function is_strictly_monotonic_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v) and v < l[3]\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n    return\
    \ is_strictly_decreasing(v) or is_strictly_increasing(v) and v > l[3]\n  end\n\
    \  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return v < l[1] and v > l[2] and v < l[3] and v > l[4]\n  end\n  local function\
    \ is_strictly_increasing_strictly_increasing(v)\n    return v > l[1] and v < l[2]\
    \ and v > l[3]\n  end\n  local function is_strictly_decreasing_strictly_decreasing(v)\n\
    \    return v < l[1] and v > l[2] and v < l[3]\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v) and v < l[3]\
    \ and v > l[4]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v) and v > l[3]\
    \ and v < l[4]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increas",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local\
    \ i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n \
    \     return false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local\
    \ i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n \
    \     return false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n    if l[m]\
    \ < l[i] then return false end\n    if l[m] > l[i] then return true end\n    i\
    \ = i + 1\n  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n \
    \ for i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n  \
    \  last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n\
    \  while i <= j do\n    local k = i\n    while k < j do\n      if l[k] < l[k +\
    \ 1] then\n        return false\n      end\n      k = k + 1\n    end\n    i =\
    \ i + 1\n  end\n  return true\nend", "  local sorted = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n  for _, v in\
    \ ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k =\
    \ 1\n  local monotonic = true\n  while i < #l do\n    if l[i] < l[j] then\n  \
    \    k = k + 1\n      if k < #l and l[i] > l[k] then\n        monotonic = false\n\
    \      end\n    elseif l[i] > l[j] then\n      k = k + 1\n      if k < #l and\
    \ l[i] < l[k] then\n        monotonic = false\n      end\n    else\n      k =\
    \ k + 1\n      if k < #l and l[i] == l[k] then\n        monotonic = false\n  \
    \    end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return monotonic\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local m = {}\n  local n = #l\n \
    \ local ok = true\n  while i < n do\n    local x = l[i]\n    local y = l[j]\n\
    \    local w = x - y\n    if w < 0 then\n      ok = false\n      break\n    end\n\
    \    if w > 0 then\n      if k ~= i then\n        m[k] = l[k]\n      end\n   \
    \   k = j\n      j = i\n    else\n      if k ~= j then\n        m[k] = l[j]\n\
    \      end\n      k = i\n      i = j\n    end\n  end\n  if k ~= i then\n    m[k]\
    \ = l[i]\n  end\n  return ok\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i\n    while m <= j and l[m] < l[m] do\n      m = m\
    \ + 1\n    end\n    if m > i then\n      j = m\n    else\n      i = m + 1\n  \
    \  end\n  end\n  return i <= j\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local monotonic = nil\n  local is_decreasing = false\n  local is_increasing\
    \ = false\n  local is_monotonic = false\n  local is_decreasing_or_nondecreasing\
    \ = false\n  local is_increasing_or_nonincreasing = false\n  local is_monotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic = false\n  local is_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing = false\n  local\
    \ is_nonmonotonic_or_nonmonotonic_decreasing = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonoton",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_monotonic = false\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = ", " \
    \ local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n   \
    \ local m = l[j]\n    if m > k then return false end\n    if m ~= k then return\
    \ true end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    i = j\n \
    \   j = k\n    if l[i] < l[j] then\n      local t = l[i]\n      l[i] = l[j]\n\
    \      l[j] = t\n    end\n  end\n  return l[1] < l[#l]\nend", "  local last_value\
    \ = nil\n  for _, value in pairs(l) do\n    if last_value == nil then\n      last_value\
    \ = value\n      continue\n    end\n    if last_value < value then\n      return\
    \ false\n    end\n    last_value = value\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n =\
    \ j\n    while m <= n do\n      if l[m] < l[n] then\n        j = n\n      elseif\
    \ l[m] > l[n] then\n        i = m\n      else\n        return true\n      end\n\
    \      n = m + 1\n    end\n    i = m + 1\n  end\n  return false\nend", "  local\
    \ last_value = nil\n  local last_index = nil\n  for index, value in ipairs(l)\
    \ do\n    if last_value ~= value then\n      last_value = value\n      last_index\
    \ = index\n    end\n  end\n  return last_index == nil or last_index == #l + 1\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    i = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i]\
    \ > l[j] then\n      i = j\n    end\n  end\n  return i == j\nend", "  local i\
    \ = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local k = j\n\
    \    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n    \
    \    l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return i == j\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i\n    while m <= j and l[m] < l[m] do\n\
    \      m = m + 1\n    end\n    if m > i then\n      local k = i\n      while k\
    \ <= m and l[k] > l[k] do\n        k = k + 1\n      end\n      if k >= m then\n\
    \        return false\n      else\n        i = m\n      end\n    else\n      j\
    \ = m\n    end\n  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n\
    \  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n \
    \   last = l[i]\n  end\n  return true\nend", "  local prev = {}\n  for _, v in\
    \ ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if\
    \ not prev[v] then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n \
    \ while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x == y then\n      if w < 0 then\n        j = k\n      else\n        i\
    \ = k\n      end\n    elseif x == w then\n      if w < 0 then\n        j = k\n\
    \      else\n        i = k\n      end\n    elseif y < w then\n      k = j\n  \
    \    j = i\n      i = k\n    else\n      m = i\n      i = j\n      j = m\n   \
    \ end\n    k = k + 1\n  end\n  return i == m\nend", "  local i = 1\n  local j\
    \ = #l + 1\n  while i <= j do\n    local k = i\n    while k < j do\n      if l[k]\
    \ < l[k + 1] then\n        return false\n      end\n      k = k + 1\n    end\n\
    \    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n\
    \  while i <= j do\n    local m = i\n    local n = j\n    while m <= n do\n  \
    \    if l[m] < l[n] then\n        j = m\n      elseif l[m] > l[n] then\n     \
    \   i = m\n      else\n        return true\n      end\n      m = m + 1\n     \
    \ n = n + 1\n    end\n  end\n  return false\nend", "  local i = 1\n  local last\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n \
    \   end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n    j = m\n    if\
    \ l[i] < l[j] then return false end\n    if l[i] > l[j] then i = m end\n  end\n\
    \  return true\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n\
    \    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    if l[i] < l[j] then\n      i = i + 1\n    elseif l[i] > l[j] then\n     \
    \ j = j - 1\n    else\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return\
    \ i == j\nend", "  local function helper(l, low, high)\n    if low > high then\n\
    \      return false\n    end\n    local mid = math.floor((low + high) / 2)\n \
    \   return helper(l, low, mid) or helper(l, mid, high)\n  end\n  return helper(l,\
    \ 1, #l)\nend", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] ~= last then\n      return false\n    end\n    last = l[i]\n  end\n  return\
    \ true\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v <\
    \ sorted[#sorted] then\n      return false\n    end\n  end\n  return true\nend",
  "  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i\n    local k = j\n    while k >= m do\n      if l[m] <\
    \ l[k] then\n        local t = l[m]\n        l[m] = l[k]\n        l[k] = t\n \
    \     end\n      k = k - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ i == j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i\n    local k = j\n    while k >= m do\n      if l[m] < l[k] then\n   \
    \     local t = l[m]\n        l[m] = l[k]\n        l[k] = t\n      end\n     \
    \ k = k - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] == l[#l]\n\
    end", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~=\
    \ last then\n      return false\n    end\n    last = l[i]\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ j\n    if l[m] < l[i] then return false end\n    if l[m] > l[i] then return\
    \ true end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n \
    \   j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] > l[j] then\n\
    \      i = m\n    end\n  end\n  return i == 1\nend", "  local prev = -1\n  for\
    \ _, v in ipairs(l) do\n    if prev < v then\n      return false\n    end\n  \
    \  prev = v\n  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n\
    \  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n \
    \   last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n \
    \ local k = 1\n  local monotonic = true\n  local max_val = l[1]\n  local min_val\
    \ = l[1]\n  local max_i = #l\n  local min_i = #l\n  while i <= max_i and j <=\
    \ min_i do\n    local val = l[i]\n    local val_prev = l[j]\n    if val > val_prev\
    \ then\n      max_val = val\n      max_i = i\n    elseif val < val_prev then\n\
    \      min_val = val\n      min_i = j\n    end\n    i = i + 1\n    j = j + 1\n\
    \    if i == max_i then\n      monotonic = false\n    end\n    if j == min_i then\n\
    \      monotonic = false\n    end\n  end\n  return monotonic\nend", "  local sorted\
    \ = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i]\
    \ ~= last then\n      return false\n    end\n    last = sorted[i]\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i - j\n    if l[m] < l[i] then return false end\n    if l[m] > l[j] then\
    \ return true end\n    i = m + 1\n    j = m + 1\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = 1\n  local k = 1\n  local m = {}\n  local n = #l\n\
    \  local ok = true\n  while i < n do\n    local x = l[i]\n    local y = l[j]\n\
    \    local z = l[k]\n    if x > y then\n      if z > y then\n        ok = false\n\
    \      else\n        table.insert(m, x)\n      end\n    elseif x < y then\n  \
    \    if z < y then\n        ok = false\n      else\n        table.insert(m, y)\n\
    \      end\n    else\n      if z < y then\n        ok = false\n      else\n  \
    \      table.insert(m, z)\n      end\n    end\n    i = i + 1\n    j = j + 1\n\
    \    k = k + 1\n  end\n  return ok\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local monotonic = true\n  local min_value = l[1]\n  local max_value\
    \ = l[1]\n  local min_i = i\n  local max_i = i\n  local min_j = j\n  local max_j\
    \ = j\n  local min_k = k\n  local max_k = k\n  while i < #l do\n    local value\
    \ = l[i]\n    local ii = i + 1\n    local jj = j + 1\n    local kk = k + 1\n \
    \   if value < min_value then\n      min_value = value\n      min_i = ii\n   \
    \   min_j = jj\n      min_k = kk\n    end\n    if value > max_value then\n   \
    \   max_value = value\n      max_i = ii\n      max_j = jj\n      max_k = kk\n\
    \    end\n    if value < min_value or value > max_value then\n      if not monotonic\
    \ then\n        monotonic = false\n      end\n    end\n    if value < min_value\
    \ then\n      i = ii\n      j = jj\n      k = kk\n    else\n      i = ii\n   \
    \   j = jj\n      k = kk\n    end\n  end\n  if min_value == max_value then\n \
    \   return false\n  end\n  if min_value < max_value then\n    return true\n  end\n\
    \  return monotonic\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j\
    \ do\n    local m = i\n    local n = j\n    while m <= n do\n      if l[m] < l[n]\
    \ then\n        j = m\n      elseif l[m] > l[n] then\n        i = m\n      else\n\
    \        return true\n      end\n      m = m + 1\n      n = n + 1\n    end\n \
    \ end\n  return false\nend", "  local sorted = table.sort(l)\n  local last = sorted[1]\n\
    \  for i = 2, #sorted do\n    if sorted[i] ~= last then\n      return false\n\
    \    end\n    last = sorted[i]\n  end\n  return true\nend", "  local last_value\
    \ = l[1]\n  for _, value in ipairs(l) do\n    if last_value < value then\n   \
    \   return false\n    end\n    last_value = value\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n \
    \     k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local\
    \ prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v\
    \ in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v]\
    \ = true\n  end\n  for _, v in ipairs(l) do\n    if not prev[v] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = false\n  local\
    \ last_monotonic = false\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n\
    \  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val\
    \ = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n\
    \  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg\
    \ = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n\
    \  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val\
    \ = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n\
    \  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg\
    \ = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n\
    \  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val\
    \ = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n\
    \  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg\
    \ = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = ", " \
    \ local i = 1\n  local j = 1\n  local k = 1\n  local m = {}\n  local n = #l\n\
    \  while i <= n do\n    local m = {}\n    local k = i\n    while k <= n do\n \
    \     if l[k] < l[k - 1] then\n        m[k] = l[k]\n      else\n        m[k] =\
    \ l[k - 1]\n      end\n      k = k + 1\n    end\n    i = i + 1\n    for j = 1,\
    \ #m do\n      if m[j] > m[j + 1] then\n        local t = m[j]\n        m[j] =\
    \ m[j + 1]\n        m[j + 1] = t\n      end\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n  \
    \  local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n      end\n      if l[n] >\
    \ l[m] then\n        local t = l[n]\n        l[n] = l[m]\n        l[m] = t\n \
    \     end\n      m = m + 1\n      n = n - 1\n    end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return i == j\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local k = i\n    while k <= j do\n      if l[k] < l[k + 1] then\n\
    \        return false\n      end\n      k = k + 1\n    end\n    i = i + 1\n  end\n\
    \  return true\nend", "  local last_value = nil\n  for _, value in ipairs(l) do\n\
    \    if last_value == nil then\n      last_value = value\n    else\n      if last_value\
    \ < value then\n        return false\n      else\n        last_value = value\n\
    \      end\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = #l\
    \ + 1\n  while i <= j do\n    local k = i\n    while k <= j do\n      if l[k]\
    \ < l[k + 1] then\n        return false\n      end\n      k = k + 1\n    end\n\
    \    i = i + 1\n  end\n  return true\nend", "  local prev = {}\n  for _, v in\
    \ ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if\
    \ not prev[v] then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] > l[j]\
    \ then\n      i = m\n    end\n  end\n  return i == 1\nend", "  local i = 1\n \
    \ local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return\
    \ false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n = j\n\
    \    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n    \
    \    l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n     \
    \   l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n - 1\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] == l[#l]\nend", " \
    \ local function is_increasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n\
    \  local k = 1\n  local monotonic = true\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local last_index\
    \ = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local last_value\
    \ = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  ", "  local\
    \ sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i-1]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local prev\
    \ = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l)\
    \ do\n    if prev[v] == nil then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic\
    \ = true\n  while i < #l do\n    if l[i] > l[j] then\n      k = k + 1\n      if\
    \ k < #l then\n        j = i\n      else\n        monotonic = false\n        break\n\
    \      end\n    elseif l[i] < l[j] then\n      k = k - 1\n      if k < 1 then\n\
    \        j = i\n      else\n        monotonic = false\n        break\n      end\n\
    \    end\n    i = i + 1\n  end\n  return monotonic\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local k = i\n    local m = j\n    while k\
    \ <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n        l[k] = l[m]\n\
    \        l[m] = t\n      end\n      k = k + 1\n      m = m + 1\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return i == j\nend", "  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local k = i\n    while k <= j do\n      if\
    \ l[k] < l[k + 1] then\n        return false\n      end\n      k = k + 1\n   \
    \ end\n    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local j =\
    \ #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n      local tmp = l[i]\n\
    \      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n      j = j - 1\n    elseif\
    \ l[i] > l[j] then\n      i = i + 1\n    else\n      j = j - 1\n    end\n  end\n\
    \  return i == j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then return false end\n\
    \    if l[i] > l[j] then j = m end\n    i = i + 1\n  end\n  return true\nend",
  "  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n \
    \   local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then return false end\n\
    \    if l[i] > l[j] then i = j end\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local k = i\n    while k < j do\n\
    \      if l[k] < l[k + 1] then\n        return false\n      end\n      k = k +\
    \ 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local k = i\n    local m = j\n    while k\
    \ <= m do\n      if l[k] < l[m] then\n        i, j = k, m\n      else\n      \
    \  m, k = k, k + 1\n      end\n    end\n    if i < j then\n      l[i], l[j] =\
    \ l[j], l[i]\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i == j\n\
    end", "  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value\
    \ == nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend", "  local function is_increasing(i, j)\n    return l[i] <=\
    \ l[j]\n  end\n  local function is_decreasing(i, j)\n    return l[i] >= l[j]\n\
    \  end\n  local function is_monotonic(i, j)\n    return is_increasing(i, j) or\
    \ is_decreasing(i, j)\n  end\n  local function is_monotonic_pair(i, j)\n    return\
    \ is_increasing(i, j) or is_decreasing(j, i)\n  end\n  local function is_monotonic_triple(i,\
    \ j, k)\n    return is_increasing(i, j, k) or is_decreasing(j, k, i)\n  end\n\
    \  local function is_monotonic_triple_pair(i, j, k)\n    return is_increasing(i,\
    \ j, k) or is_decreasing(k, j, i)\n  end\n  local function is_monotonic_triple_triple(i,\
    \ j, k, l)\n    return is_increasing(i, j, k, l) or is_decreasing(k, l, i, j)\n\
    \  end\n  local function is_monotonic_triple_triple_pair(i, j, k, l)\n    return\
    \ is_increasing(i, j, k, l) or is_decreasing(l, i, k, j)\n  end\n  local function\
    \ is_monotonic_triple_triple_triple(i, j, k, l, m)\n    return is_increasing(i,\
    \ j, k, l, m) or is_decreasing(l, m, i, k, j)\n  end\n  local function is_monotonic_triple_triple_triple_pair(i,\
    \ j, k, l, m)\n    return is_increasing(i, j, k, l, m) or is_decreasing(m, i,\
    \ k, l, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple_pair(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, n, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple_pair(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, n, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple_pair(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, n, j)\n  end\n  local function is_monotonic_", "  local last_value\
    \ = nil\n  for _, value in ipairs(l) do\n    if last_value == nil then\n     \
    \ last_value = value\n      continue\n    end\n    if last_value < value then\n\
    \      return false\n    end\n    last_value = value\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j] then\
    \ i = m end\n  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n\
    \  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n \
    \   last = l[i]\n  end\n  return true\nend", "  local sorted = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local last_value = nil\n  for\
    \ _, value in ipairs(l) do\n    if last_value == nil then\n      last_value =\
    \ value\n      continue\n    end\n    if last_value < value then\n      return\
    \ false\n    end\n    last_value = value\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while k <\
    \ j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n     \
    \ k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local function\
    \ is_increasing(v)\n    return v < l[1]\n  end\n  local function is_decreasing(v)\n\
    \    return v > l[1]\n  end\n  local function is_monotonic(v)\n    return is_increasing(v)\
    \ or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n    return\
    \ is_monotonic(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_monotonic = false\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = ", " \
    \ local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  while\
    \ i <= #l do\n    local v = l[i]\n    local w = l[j]\n    local z = v - w\n  \
    \  if z < 0 then\n      k = k + 1\n      if k < i then\n        j = j + 1\n  \
    \    else\n        i = i + 1\n        monotonic = false\n      end\n    elseif\
    \ z > 0 then\n      k = k - 1\n      if k < i then\n        j = j + 1\n      else\n\
    \        i = i + 1\n        monotonic = false\n      end\n    end\n  end\n  return\
    \ monotonic\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n   \
    \ if l[i] < l[j] then\n      local tmp = l[i]\n      l[i] = l[j]\n      l[j] =\
    \ tmp\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmpi = i\n      i = j\n      j = tmpi\n    else\n      i = i + 1\n\
    \    end\n  end\n  return i == j\nend", "  local sorted = table.sort(l)\n  local\
    \ last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n \
    \     return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n =\
    \ j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n =\
    \ n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\n\
    end", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v <\
    \ sorted[#sorted] then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return false\nend", "  local i = 1\n  local j\
    \ = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <= n do\n    local\
    \ x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if x > y then\n      if\
    \ x < z then\n        -- Increasing monotonic list\n        j = k\n      else\n\
    \        -- Decreasing monotonic list\n        i = k\n      end\n    elseif x\
    \ < z then\n      -- Increasing monotonic list\n      i = k\n    else\n      --\
    \ Decreasing monotonic list\n      j = k\n    end\n    k = j + 1\n    m = m +\
    \ 1\n  end\n  return m == n\nend", "  local function is_increasing(i)\n    return\
    \ l[i] <= l[i+1]\n  end\n  local function is_decreasing(i)\n    return l[i] >=\
    \ l[i+1]\n  end\n  local function is_monotonic(i)\n    return is_increasing(i)\
    \ or is_decreasing(i)\n  end\n  local function is_strictly_increasing(i)\n   \
    \ return is_increasing(i) and is_strictly_decreasing(i+1)\n  end\n  local function\
    \ is_strictly_decreasing(i)\n    return is_decreasing(i) and is_strictly_increasing(i-1)\n\
    \  end\n  local function is_strictly_monotonic(i)\n    return is_monotonic(i)\
    \ and is_strictly_increasing(i) or is_strictly_decreasing(i)\n  end\n  local function\
    \ is_strictly_strictly_increasing(i)\n    return is_strictly_increasing(i) and\
    \ is_strictly_increasing(i+1)\n  end\n  local function is_strictly_strictly_decreasing(i)\n\
    \    return is_strictly_decreasing(i) and is_strictly_decreasing(i-1)\n  end\n\
    \  local function is_strictly_strictly_monotonic(i)\n    return is_strictly_monotonic(i)\
    \ and is_strictly_increasing(i) or is_strictly_decreasing(i)\n  end\n  local function\
    \ is_strictly_strictly_strictly_increasing(i)\n    return is_strictly_strictly_increasing(i)\
    \ and is_strictly_increasing(i+1)\n  end\n  local function is_strictly_strictly_strictly_decreasing(i)\n\
    \    return is_strictly_strictly_decreasing(i) and is_strictly_decreasing(i-1)\n\
    \  end\n  local function is_strictly_strictly_strictly_monotonic(i)\n    return\
    \ is_strictly_strictly_monotonic(i) and is_strictly_increasing(i) or is_strictly_decreasing(i)\n\
    \  end\n  local function is_strictly_strictly_strictly_strictly_increasing(i)\n\
    \    return is_strictly_strictly_strictly_increasing(i) and is_strictly_increasing(i+1)\n\
    \  end\n  local function is_strictly_strictly_strictly_strictly_decreasing(i)\n\
    \    return is_strictly_strictly_strictly_decreasing(i) and is_strictly_decreasing(i-1)\n\
    \  end\n  local function is_strictly_strictly_strictly_strictly_monotonic(i)\n\
    \    return is_strictly_strictly_strictly_monotonic(i) and is_strictly_increasing(i)\
    \ or is_strictly_decreasing(i)\n  end\n  local function is_strictly_strictly_strictly_strictly_strict",
  "  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local last_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if last_value == nil then\n      last_value = value\n      continue\n\
    \    end\n    if last_value < value then\n      return false\n    end\n    last_value\
    \ = value\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local k = i\n    while k < j do\n      if l[k] < l[k + 1] then\n\
    \        local t = l[k]\n        l[k] = l[k + 1]\n        l[k + 1] = t\n     \
    \ end\n      k = k + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ i == j\nend", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] ~= last then\n      return false\n    end\n    last = l[i]\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic\
    \ = true\n  local last_value = nil\n  local last_index = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil\n  local last_index = nil\n  local last_value\
    \ = nil\n  local last_index = nil\n  local last_value = nil\n  local last_index\
    \ = nil\n  local last_value = nil", "  local i = 1\n  local last = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n    last\
    \ = l[i]\n  end\n  return true\nend", "  local prev = {}\n  local curr = {}\n\
    \  local i = 1\n  for _, v in ipairs(l) do\n    prev[i] = v\n    curr[i] = v\n\
    \    i = i + 1\n  end\n  i = i - 1\n  for i = i + 1, #l do\n    if prev[i] > curr[i]\
    \ then\n      return false\n    end\n    prev[i] = curr[i]\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n\
    \    while k <= j do\n      if l[k] < l[k + 1] then\n        return false\n  \
    \    end\n      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    i = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] >\
    \ l[j] then j = m end\n    i = i + 1\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n =\
    \ j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n =\
    \ n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend",
  "  local function is_decreasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_increasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_decreasing(v) or is_increasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and is_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and is_decreasing(v)\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v)\n  end\n  local\
    \ function is_strictly_decreasing_strictly_increasing(v)\n    return v > l[1]\
    \ and is_decreasing(v) and is_increasing(v)\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v < l[1] and is_increasing(v) and is_decreasing(v)\n  end\n  local\
    \ function is_strictly_monotonic_strictly_increasing(v)\n    return is_strictly_decreasing(v)\
    \ and is_increasing(v)\n  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v)\n  end\n  local function\
    \ is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n    return\
    \ is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n  end\n\
    \  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreas",
  "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local prev\
    \ = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l)\
    \ do\n    if not prev[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n\
    \    local m = j\n    while k <= m do\n      if l[k] < l[m] then\n        local\
    \ t = l[k]\n        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n\
    \      m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1]\
    \ < l[#l]\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v <\
    \ sorted[#sorted] then\n      return false\n    end\n  end\n  return true\nend",
  "  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n\
    \    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted)\
    \ do\n    if v < sorted[#sorted] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i]\
    \ < l[j] then\n      local tmpi = i\n      i = j\n      j = tmpi\n    else\n \
    \     i = i + 1\n    end\n  end\n  return i == j\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local monotonic = nil\n  local last_monotonic = nil\n\
    \  local last_monotonic_i = nil\n  local last_monotonic_j = nil\n  local last_monotonic_k\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monoton", "  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local prev = {}\n  local\
    \ curr = {}\n  for _, v in ipairs(l) do\n    prev[#prev + 1] = v\n    curr[#curr\
    \ + 1] = v\n  end\n  local i = 1\n  while i <= #prev do\n    if prev[i] < prev[i-1]\
    \ then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n \
    \       l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n\
    \ + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local\
    \ function is_increasing(i, j)\n    return l[i] <= l[j]\n  end\n  local function\
    \ is_decreasing(i, j)\n    return l[i] >= l[j]\n  end\n  local function is_monotonic(i,\
    \ j)\n    return is_increasing(i, j) or is_decreasing(i, j)\n  end\n  local function\
    \ is_monotonic_pair(i, j)\n    return is_increasing(i, j) or is_decreasing(j,\
    \ i)\n  end\n  local function is_monotonic_triple(i, j, k)\n    return is_increasing(i,\
    \ j) or is_decreasing(j, k) or is_increasing(k, j)\n  end\n  local function is_monotonic_triple_pair(i,\
    \ j, k)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ j)\n  end\n  local function is_monotonic_triple_triple(i, j, k, l)\n    return\
    \ is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k, l) or is_decreasing(l,\
    \ j)\n  end\n  local function is_monotonic_triple_triple_pair(i, j, k, l)\n  \
    \  return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k, l) or\
    \ is_decreasing(l, j)\n  end\n  local function is_monotonic_triple_triple_triple(i,\
    \ j, k, l, m)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, l)\n  end\n  local function is_monotonic_triple_triple_triple_pair(i,\
    \ j, k, l, m)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, l)\n  end\n  local function is_monotonic_triple_triple_triple_triple(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, n) or is_decreasing(n, m)\n  end\n\
    \  local function is_monotonic_triple_triple_triple_triple_pair(i, j, k, l, m,\
    \ n)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, n) or is_decreasing(n, m)\n  end\n\
    \  local function is_monotonic_triple_triple_triple_trip", "  local prev = -1\n\
    \  for _, v in ipairs(l) do\n    if prev < v then\n      return false\n    end\n\
    \    prev = v\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n\
    \  while i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n\
    \      if l[m] < l[i] then\n        local t = l[m]\n        l[m] = l[i]\n    \
    \    l[i] = t\n      end\n      m = m + 1\n      n = n - 1\n    end\n    i = i\
    \ + 1\n    j = j - 1\n  end\n  return i == j\nend", "  local prev = {}\n  for\
    \ _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n\
    \    if not prev[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n\
    \    while k < j do\n      if l[k] < l[k + 1] then\n        return false\n   \
    \   end\n      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then return\
    \ false end\n    if l[i] > l[j] then return true end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i\n    local n = j\n    while m <= n do\n      if l[m]\
    \ < l[n] then\n        local t = l[m]\n        l[m] = l[n]\n        l[n] = t\n\
    \      end\n      m = m + 1\n      n = n + 1\n    end\n    i = i + 1\n    j =\
    \ j - 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local m = 1\n  local n = #l\n  local p = 1\n  local q = 1\n  local r\
    \ = 1\n  local s = l[1]\n  local t = l[1]\n  local u = 1\n  local v = 1\n  local\
    \ w = 1\n  local x = l[1]\n  local y = l[1]\n  local z = 1\n  local A = 1\n  local\
    \ B = 1\n  local C = 1\n  local D = 1\n  local E = 1\n  local F = 1\n  local G\
    \ = 1\n  local H = 1\n  local I = 1\n  local J = 1\n  local K = 1\n  local L =\
    \ 1\n  local M = 1\n  local N = 1\n  local O = 1\n  local P = 1\n  local Q = 1\n\
    \  local R = 1\n  local S = 1\n  local T = 1\n  local U = 1\n  local V = 1\n \
    \ local W = 1\n  local X = 1\n  local Y = 1\n  local Z = 1\n  local a = 1\n  local\
    \ b = 1\n  local c = 1\n  local d = 1\n  local e = 1\n  local f = a\n  local g\
    \ = b\n  local h = c\n  local i = d\n  local j = e\n  local k = f\n  local l =\
    \ g\n  local m = h\n  local n = i\n  local o = j\n  local p = k\n  local q = l\n\
    \  local r = m\n  local s = n\n  local t = o\n  local u = q\n  local v = r\n \
    \ local w = s\n  local x = t\n  local y = u\n  local z = v\n  local A = w\n  local\
    \ B = x\n  local C = y\n  local D = z\n  local E = A\n  local F = B\n  local G\
    \ = C\n  local H = D\n  local I = E\n  local J = F\n  local K = G\n  local L =\
    \ H\n  local M = I\n  local N = J\n  local O = K\n  local P = L\n  local Q = M\n\
    \  local R = N\n  local S = O\n  local T = P\n  local U = Q\n  local V = R\n \
    \ local W = S\n  local X = T\n  local Y = U\n  local Z = V\n  local a = W\n  local\
    \ b = X\n  local c = Y\n  local d = Z\n  local e = A\n  local f = B", "  local\
    \ prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v\
    \ in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local k = i\n    local m = j\n    while k <= m do\n      if l[k] < l[m] then\n\
    \        local t = l[k]\n        l[k] = l[m]\n        l[m] = t\n      end\n  \
    \    k = k + 1\n      m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return i == j\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
