name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m =\
    \ i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i] then return\
    \ false end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local sorted = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sorted = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m <= n do\n\
    \      if l[m] < l[n] then\n        local t = l[m]\n        l[m] = l[n]\n    \
    \    l[n] = t\n      else\n        local t = l[m]\n        l[m] = l[n]\n     \
    \   l[n] = t\n      end\n      m = m + 1\n      n = n + 1\n    end\n    i = i\
    \ + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local j =\
    \ #l + 1\n  while i <= j do\n    if l[i] < l[j] then return false end\n    if\
    \ l[i] > l[j] then return true end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i]\
    \ < l[j] then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v <\
    \ sorted[#sorted] then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend", "  local function is_increasing(v)\n\
    \    return v < l[1]\n  end\n  local function is_decreasing(v)\n    return v >\
    \ l[1]\n  end\n  local function is_monotonic(v)\n    return is_increasing(v) or\
    \ is_decreasing(v)\n  end\n  return l[1] == l[2] or is_monotonic(l[1])\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = n\n     \
    \ else\n        i = m\n      end\n      n = m\n    end\n    if i < j then\n  \
    \    j = i\n    end\n    i = m\n  end\n  return i <= j\nend", "  local i = 1\n\
    \  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return\
    \ false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n   \
    \ while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n       \
    \ l[m] = l[n]\n        l[n] = t\n        m = m + 1\n        n = n + 1\n      elseif\
    \ l[m] > l[n] then\n        local t = l[m]\n        l[m] = l[n]\n        l[n]\
    \ = t\n        n = n - 1\n      else\n        local t = l[m]\n        l[m] = l[n]\n\
    \        l[n] = t\n        i = i + 1\n        n = n - 1\n      end\n    end\n\
    \  end\n  return i == j\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted\
    \ do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then\n     \
    \ j = m\n    end\n  end\n  return i == j\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local function helper(l, i, j)\n\
    \    if i == j then return true end\n    if l[i] > l[j] then return helper(l,\
    \ i, j+1) else return helper(l, i+1, j) end\n  end\n  return helper(l, 1, #l)\n\
    end", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local function is_increasing(v)\n    return v > l[1]\n  end\n  local\
    \ function is_decreasing(v)\n    return v < l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end", "  local sorted = {}\n  for\
    \ _, v in ipairs(l) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n\
    \  local k = 1\n  local monotonic = false\n  local max_i = #l\n  local max_j =\
    \ #l\n  local max_k = #l\n  while i <= max_i and j <= max_j and k <= max_k do\n\
    \    if l[i] < l[j] then\n      i = i + 1\n      k = k + 1\n    elseif l[i] >\
    \ l[j] then\n      j = j + 1\n      k = k + 1\n    else\n      monotonic = true\n\
    \      break\n    end\n  end\n  return monotonic\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
