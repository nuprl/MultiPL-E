name: HumanEval_54_same_chars
language: lua
prompt: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n-- true\n\
  -- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd', 'dddddddabc')\n\
  -- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n-- false\nlocal function same_chars(s0, s1)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
  \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n\
  \    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'),\
  \ false)\n    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false\
    \ end\n  for i = 1, l0 do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false\
    \ end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n \
    \ if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0[i] ~=\
    \ s1[i] then return false end\n  end\n  return true\nend", "  local len0 = #s0\n\
    \  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0\
    \ do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n  end\n  return\
    \ true\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false\
    \ end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i\n  for i=1,\
    \ n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return n0 == n1\n\
    end", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false\
    \ end\n  for i = 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend", "  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then\n    return\
    \ false\n  end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  local\
    \ i\n  for i=1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ l0 == l1\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\
    \ return false end\n  local i = 0\n  while i < len0 do\n    if s0[i] ~= s1[i]\
    \ then return false end\n    i = i + 1\n  end\n  return true\nend", "  -- TODO:\
    \ Optimize by comparing only the first and last character\n  -- instead of comparing\
    \ every single character.\n  for i=1, #s0 do\n    if s0[i] ~= s1[i] then\n   \
    \   return false\n    end\n  end\n  return true\nend", "  local n0 = #s0\n  local\
    \ n1 = #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n  end\n  return true\nend", "  local l0 = #s0\n\
    \  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for i = 1, l0 do\n \
    \   if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local\
    \ n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false end\n  for i = 1,\
    \ n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  local n0 = #s0\n  local n1 = #s1\n  local i\n  for i = 1, n0 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n  end\n  return n0 == n1\nend", "  local len0\
    \ = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\n    return false\n  end\n\
    \  for i = 1, len0 do\n    if s0[i] ~= s1[i] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1\
    \ then\n    return false\n  end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local len0 = #s0\n\
    \  local len1 = #s1\n  if len0 ~= len1 then return false end\n  local i\n  for\
    \ i=1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  -- Check length\n  if #s0 ~= #s1 then\n    return false\n  end\n  --\
    \ Check characters\n  for i=1, #s0 do\n    if s0[i] ~= s1[i] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1\
    \ = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if\
    \ s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local len0\
    \ = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i\
    \ = 1, len0 do\n    if string.sub(s0, i, i) ~= string.sub(s1, i, i) then return\
    \ false end\n  end\n  return true\nend", "  -- Check for empty strings.\n  if\
    \ s0 ~= '' then return s0 ~= s1 end\n  -- Check for nil strings.\n  if s1 == nil\
    \ then return false end\n  -- Check for empty strings.\n  if s1 ~= '' then return\
    \ s0 ~= s1 end\n  -- Check for nil strings.\n  if s0 == nil then return false\
    \ end\n  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~= s1 end\n\
    \  -- Check for nil strings.\n  if s1 == nil then return false end\n  -- Check\
    \ for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for nil\
    \ strings.\n  if s0 == nil then return false end\n  -- Check for empty strings.\n\
    \  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for nil strings.\n  if s1\
    \ == nil then return false end\n  -- Check for empty strings.\n  if s1 ~= '' then\
    \ return s0 ~= s1 end\n  -- Check for nil strings.\n  if s0 == nil then return\
    \ false end\n  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~= s1\
    \ end\n  -- Check for nil strings.\n  if s1 == nil then return false end\n  --\
    \ Check for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n  -- Check\
    \ for nil strings.\n  if s0 == nil then return false end\n  -- Check for empty\
    \ strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for nil strings.\n\
    \  if s1 == nil then return false end\n  -- Check for empty strings.\n  if s1\
    \ ~= '' then return s0 ~= s1 end\n  -- Check for nil strings.\n  if s0 == nil\
    \ then return false end\n  -- Check for empty strings.\n  if s0 ~= '' then return\
    \ s0 ~= s1 end\n  -- Check for nil strings.\n  if s1 == nil then return false\
    \ end\n  -- Check for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n\
    \  -- Check for nil strings.\n  if s0 == nil then return false end\n  -- Check\
    \ for empty strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for nil\
    \ strings.\n  if s1 == nil then return false end\n  -- Check for empty strings.",
  "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  local\
    \ i0 = 0\n  local i1 = 0\n  while i0 < l0 and i1 < l1 do\n    if string.sub(s0,\
    \ i0, i0 + 1) ~= string.sub(s1, i1, i1 + 1) then return false end\n    i0 = i0\
    \ + 1\n    i1 = i1 + 1\n  end\n  return i0 == l0\nend", "  local n0 = #s0\n  local\
    \ n1 = #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n  end\n  return true\nend", "  local n0 = #s0\n\
    \  local n1 = #s1\n  local i = 0\n  while i < n0 and i < n1 do\n    if s0[i] ~=\
    \ s1[i] then return false end\n    i = i + 1\n  end\n  return i == n0 or i ==\
    \ n1\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false\
    \ end\n  local i\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0\
    \ ~= l1 then\n    return false\n  end\n  local i0 = 0\n  local i1 = 0\n  while\
    \ i0 < l0 and i1 < l1 do\n    if s0[i0] ~= s1[i1] then\n      return false\n \
    \   end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0 == l0 and i1 ==\
    \ l1\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i\n  for i = 1, n0 do\n\
    \    if s0[i] ~= s1[i] then return false end\n  end\n  return n0 == n1\nend",
  "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for\
    \ i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false\
    \ end\n  for i = 1, len0 do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false\
    \ end\n  end\n  return true\nend", "  local c0 = {}\n  local c1 = {}\n  for i\
    \ = 1, #s0 do\n    table.insert(c0, string.sub(s0, i, i))\n    table.insert(c1,\
    \ string.sub(s1, i, i))\n  end\n  return #c1 == #c0 and c1 == c0\nend", "  local\
    \ l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  local i0\
    \ = 0\n  local i1 = 0\n  while i0 < l0 and i1 < l1 do\n    if string.sub(s0, i0,\
    \ i0 + 1) ~= string.sub(s1, i1, i1 + 1) then return false end\n    i0 = i0 + 1\n\
    \    i1 = i1 + 1\n  end\n  return i0 == l0\nend", "  local function is_char(c)\n\
    \    return string.sub(s0, c, c) == string.sub(s1, c, c)\n  end\n  local function\
    \ is_word(w)\n    return string.len(w) == string.len(s0) and\n      all(is_char(c)\
    \ for c in w)\n  end\n  local function is_char(w)\n    return string.sub(s0, string.len(w),\
    \ string.len(s0)) == w\n  end\n  return is_word(s0) and is_word(s1)\nend", " \
    \ local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\n    return false\n\
    \  end\n  local i0 = 0\n  local i1 = 0\n  while i0 < len0 and i1 < len1 do\n \
    \   if s0[i0] ~= s1[i1] then\n      return false\n    end\n    i0 = i0 + 1\n \
    \   i1 = i1 + 1\n  end\n  return i0 == len0 and i1 == len1\nend", "  local n0,\
    \ n1 = #s0, #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0 do\n   \
    \ if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local\
    \ len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for\
    \ i = 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false\
    \ end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then\n\
    \    return false\n  end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then\n   \
    \   return false\n    end\n  end\n  return true\nend", "  local n0 = #s0\n  local\
    \ n1 = #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n  end\n  return true\nend", "  local len0 =\
    \ #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i =\
    \ 1, len0 do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n  end\n\
    \  return true\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then\
    \ return false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n \
    \ if len0 ~= len1 then return false end\n  local i\n  for i = 1, len0 do\n   \
    \ if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local\
    \ function is_char(c)\n    return string.sub(s0, c, c) == string.sub(s1, c, c)\n\
    \  end\n  local function is_char_pair(c)\n    return string.sub(s0, c, c + 1)\
    \ == string.sub(s1, c, c + 1)\n  end\n  local function is_char_pair_reversed(c)\n\
    \    return string.sub(s1, c, c + 1) == string.sub(s0, c, c)\n  end\n  local function\
    \ is_char_pair_unordered(c)\n    return string.sub(s0, c, c + 1) ~= string.sub(s1,\
    \ c, c)\n  end\n  local function is_char_pair_unordered(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function is_char_pair_unordered(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function\
    \ is_char_pair_unordered(c)\n    return string.sub(s0, c, c + 1) ~= string.sub(s1,\
    \ c, c)\n  end\n  local function is_char_pair_unordered(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function is_char_pair_unordered(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function\
    \ is_char_pair_unordered(c)\n    return string.sub(s0, c, c + 1) ~= string.sub(s1,\
    \ c, c)\n  end\n  local function is_char_pair_unordered(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function is_char_pair_unordered(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function\
    \ is_char_pair_unordered(c)\n    return string.sub(s0, c, c + 1) ~= string.sub(s1,\
    \ c, c)\n  end\n  local function is_char_pair_unordered(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function is_char_pair_unordered(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function\
    \ is_char_pair_unordered(c)\n    return string.sub(s0, c, c + 1) ~= string.sub(s1,\
    \ c, c)\n  end\n  local function is_char_pair_unordered(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c, c)\n  end\n  local function is_char_pair_unordered(c)\n\
    \    return string.sub", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~=\
    \ len1 then return false end\n  for i = 1, len0 do\n    if s0[i] ~= s1[i] then\
    \ return false end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1\
    \ = #s1\n  if len0 ~= len1 then\n    return false\n  end\n  local i = 0\n  while\
    \ i < len0 do\n    if s0[i] ~= s1[i] then\n      return false\n    end\n    i\
    \ = i + 1\n  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n \
    \ if l0 ~= l1 then return false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i]\
    \ then return false end\n  end\n  return true\nend", "  local l0 = #s0\n  local\
    \ l1 = #s1\n  if l0 ~= l1 then\n    return false\n  end\n  for i = 1, l0 do\n\
    \    if s0[i] ~= s1[i] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n\
    \  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local i0 = 0\n  local i1 = 0\n  local j0 = 0\n  local j1 = 0\n\
    \  local k0 = 0\n  local k1 = 0\n  local l0 = 0\n  local l1 = 0\n  local m0 =\
    \ 0\n  local m1 = 0\n  local n0 = 0\n  local n1 = 0\n  local o0 = 0\n  local o1\
    \ = 0\n  local p0 = 1\n  local p1 = 1\n  local q0 = 1\n  local q1 = 1\n  local\
    \ r0 = 1\n  local r1 = 1\n  local s0 = s0:lower()\n  local s1 = s1:lower()\n \
    \ while i0 < #s0 and i1 < #s1 do\n    local c0 = s0:sub(i0, i0)\n    local c1\
    \ = s1:sub(i1, i1)\n    if c0 ~= c1 then\n      break\n    end\n    i0, i1 = i1\
    \ + 1, p1\n    p0, p1 = p1 + 1, p1\n  end\n  if i0 ~= #s0 or i1 ~= #s1 then\n\
    \    return false\n  end\n  while j0 < #s0 and j1 < #s1 do\n    local c0 = s0:sub(i0,\
    \ j0)\n    local c1 = s1:sub(j1, j1)\n    if c0 ~= c1 then\n      break\n    end\n\
    \    j0, j1 = j1 + 1, p1\n    p0, p1 = p1 + 1, p1\n  end\n  if j0 ~= #s0 or j1\
    \ ~= #s1 then\n    return false\n  end\n  while k0 < #s0 and k1 < #s1 do\n   \
    \ local c0 = s0:sub(i0, k0)\n    local c1 = s1:sub(k1, k1)\n    if c0 ~= c1 then\n\
    \      break\n    end\n    k0, k1 = k1 + 1, p1\n    p0, p1 = p1 + 1, p1\n  end\n\
    \  if k0 ~= #s0 or k1 ~= #s1 then\n    return false\n  end\n  while l0 < #s0 and\
    \ l1 < #s1 do\n    local c0 = s0:sub(i0, l0)\n    local c1 = s1:sub(l1, l1)\n\
    \    if c0 ~= c1 then\n      break\n    end\n    l0, l1 = l1 + 1, p1\n    p0,\
    \ p1 = p1 + 1, p1\n  end\n  if l0 ~= #s0 or l1 ~= #s1 then\n    return false\n\
    \  end\n  while m0 < ", "  local function is_char(c)\n    return string.sub(s0,\
    \ c, c + 1) == string.sub(s1, c, c + 1)\n  end\n  local function is_char_pair(c)\n\
    \    return string.sub(s0, c, c + 2) == string.sub(s1, c, c + 2)\n  end\n  local\
    \ function is_char_pair_pair(c)\n    return string.sub(s0, c, c + 3) == string.sub(s1,\
    \ c, c + 3)\n  end\n  local function is_char_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 4) == string.sub(s1, c, c + 4)\n  end\n  local function is_char_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 5) == string.sub(s1, c, c + 5)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair(c)\n    return string.sub(s0, c, c\
    \ + 6) == string.sub(s1, c, c + 6)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 7) == string.sub(s1, c, c + 7)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 8) == string.sub(s1, c, c + 8)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 9) == string.sub(s1, c, c + 9)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 10) == string.sub(s1, c, c + 10)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 11) == string.sub(s1, c, c + 11)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return\
    \ string.sub(s0, c, c + 12) == string.sub(s1, c, c + 12)\n  end\n  local function\
    \ is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 13) == string.sub(s1, c, c + 13)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 14) == string.sub(s1, c, c + 14)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return\
    \ string.sub(s0, c, c + 15) == string.sub(s1, c, c + 15)\n  end\n  local function\
    \ is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 16) == string.sub(s1, c, c + 16)\n  end\n  local ", "  local len0 = #s0\n\
    \  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0\
    \ do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then\n    return false\n  end\n\
    \  local i0\n  local i1\n  for i0, i1 in ipairs(string.gmatch(s1, '[^'..string.char(97,\
    \ 122, 123)..']')) do\n    if string.sub(s0, i0, i1) ~= string.sub(s1, i0, i1)\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local l0 =\
    \ #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for i = 1, l0\
    \ do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n  end\n  return\
    \ true\nend", "  local function is_char(c)\n    return string.sub(s0, c, c + 1)\
    \ ~= string.sub(s1, c, c + 1)\n  end\n  return #s0 ~= #s1 and all(is_char(c) and\
    \ is_char(c+1) for c in pairs(s0)) == all(is_char(c) and is_char(c+1) for c in\
    \ pairs(s1))\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i0 = 0\n  local\
    \ i1 = 0\n  while i0 < n0 and i1 < n1 do\n    if s0[i0] ~= s1[i1] then return\
    \ false end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0 == n0 and i1\
    \ == n1\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return\
    \ false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0\
    \ ~= len1 then return false end\n  for i = 1, len0 do\n    if s0[i] ~= s1[i] then\
    \ return false end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1\
    \ = #s1\n  if len0 ~= len1 then return false end\n  local i = 0\n  while i < len0\
    \ do\n    if s0[i] ~= s1[i] then return false end\n    i = i + 1\n  end\n  return\
    \ true\nend", "  -- Return true if s0 and s1 have the same characters.\n  -- >>>\
    \ same_chars('abcd', 'abcd')\n  -- true\n  -- >>> same_chars('abcd', 'abccd')\n\
    \  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'abccdd')\n  -- false\n  -- >>> same_chars('abcd', 'abccdd')\n  -- false\n \
    \ -- >>> same_chars('abcd', 'abccdd", "  local len0 = #s0\n  local len1 = #s1\n\
    \  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0[i] ~=\
    \ s1[i] then return false end\n  end\n  return true\nend", "  local l0 = #s0,\
    \ #s1\n  if l0 ~= 0 then\n    for i = 1, l0 do\n      if s0:sub(i, i) ~= s1:sub(i,\
    \ i) then return false end\n    end\n  end\n  return true\nend", "  local c0 =\
    \ {}\n  local c1 = {}\n  for i = 1, #s0, 1 do\n    table.insert(c0, string.sub(s0,\
    \ i, i))\n  end\n  for i = 1, #s1, 1 do\n    table.insert(c1, string.sub(s1, i,\
    \ i))\n  end\n  return #c0 == #c1\nend", "  local n0 = #s0\n  local n1 = #s1\n\
    \  local i\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return n0 == n1\nend", "  local l0 = #s0\n  local l1 = #s1\n  local\
    \ i\n  for i=1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\
    \ return false end\n  local i = 0\n  while i < len0 and i < len1 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n    i = i + 1\n  end\n  return len0 == len1\n\
    end", "  -- Check if two words have the same characters.\n  -- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n  -- true\n  -- >>> same_chars('abcd', 'dddddddabc')\n\
    \  -- true\n  -- >>> same_chars('dddddddabc', 'abcd')\n  -- true\n  -- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n  -- false\n  -- >>> same_chars('abcd', 'dddddddabce')\n  --\
    \ false\n  -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  -- false\n \
    \ local function same_chars(s0, s1)\n    local function chars(s0, s1)\n      local\
    \ function chars(s0, s1)\n        local function chars(s0, s1)\n          local\
    \ function chars(s0, s1)\n            local function chars(s0, s1)\n         \
    \     local function chars(s0, s1)\n                local function chars(s0, s1)\n\
    \                  local function chars(s0, s1)\n                    local function\
    \ chars(s0, s1)\n                      local function chars(s0, s1)\n        \
    \                local function chars(s0, s1)\n                          local\
    \ function chars(s0, s1)\n                            local function chars(s0,\
    \ s1)\n                              local function chars(s0, s1)\n          \
    \                      local function chars(s0, s1)\n                        \
    \          local function chars(s0, s1)\n                                    local\
    \ function chars(s0, s1)\n                                      local function\
    \ chars(s0, s1)\n                                        local function chars(s0,\
    \ s1)\n                                          local function chars(s0, s1)\n\
    \                                            local function chars(s0, s1)\n  \
    \                                            local function chars(s0, s1)\n  \
    \                                              local function chars(s0, s1)\n\
    \                                                  local function chars(s0, s1)\n\
    \                                                    local function chars(s0,\
    \ s1)\n                                                      local function chars(s0,\
    \ s1)\n                                                        local function\
    \ chars(s0, s1)\n                                                          local\
    \ function chars(s0, s1)\n                                                   \
    \         local function chars(s0, s1)\n                                     \
    \                         local function chars(s0, s1)\n                     \
    \                                           local function chars(s0, s1)\n   \
    \                                                               local function\
    \ chars(s0, s1)\n                                                            \
    \        local function chars(s0, s1)\n                                      \
    \                                return s0 ~= s1\n                           \
    \                                     end\n                                  \
    \                            end\n                                           \
    \                 end\n                                                      \
    \    end\n                                                        end\n      \
    \                                                end\n                       \
    \                             end\n                                          \
    \        end\n                                                end\n          \
    \                                    end\n                                   \
    \         end", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return\
    \ false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0\
    \ ~= len1 then\n    return false\n  end\n  for i = 1, len0 do\n    if s0[i] ~=\
    \ s1[i] then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  local i\n\
    \  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then return false end\n\
    \  for i = 1, n0 do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n\
    \  end\n  return true\nend", "  local function is_char(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c, c + 1)\n  end\n  local function is_char_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 1, c + 1)\n  end\n\
    \  local function is_char_pair_pair(c)\n    return string.sub(s0, c, c + 1) ~=\
    \ string.sub(s1, c + 1, c + 2)\n  end\n  local function is_char_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 2)\n  end\n\
    \  local function is_char_pair_pair_pair_pair(c)\n    return string.sub(s0, c,\
    \ c + 1) ~= string.sub(s1, c + 2, c + 3)\n  end\n  local function is_char_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 3, c + 3)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c + 3, c + 4)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 4, c + 4)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return\
    \ string.sub(s0, c, c + 1) ~= string.sub(s1, c + 4, c + 5)\n  end\n  local function\
    \ is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c + 5, c + 5)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 5, c + 6)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 6, c + 6)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 6, c + 7)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 7, c + 7)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= ", "  local len0 = #s0\n  local len1 =\
    \ #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n  end\n  return true\nend", "  local l0 = #s0\n\
    \  local l1 = #s1\n  if l0 ~= l1 then return false end\n  local i\n  for i=1,\
    \ l0 do\n    if string.sub(s0, i, i) ~= string.sub(s1, i, i) then return false\
    \ end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n \
    \ if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0[i] ~=\
    \ s1[i] then return false end\n  end\n  return true\nend", "  local n0, n1 = #s0,\
    \ #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0 do\n    if s0:sub(i,\
    \ i) ~= s1:sub(i, i) then return false end\n  end\n  return true\nend", "  local\
    \ i0 = 0\n  local i1 = 0\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i1\n  local i2\n  local j1\n  local j2\n  local k1\n  local k2\n\
    \  local l1\n  local l2\n  local m1\n  local m2\n  local n1\n  local n2\n  local\
    \ o1\n  local o2\n  local p1\n  local p2\n  local q1\n  local q2\n  local r1\n\
    \  local r2\n  local s1\n  local s2\n  local t1\n  local t2\n  local u1\n  local\
    \ u2\n  local v1\n  local v2\n  local w1\n  local w2\n  local x1\n  local x2\n\
    \  local y1\n  local y2\n  local z1\n  local z2\n  local a1\n  local b1\n  local\
    \ c1\n  local d1\n  local e1\n  local f1\n  local g1\n  local h1\n  local i1\n\
    \  local i2\n  local j1\n  local j2\n  local k1\n  local k2\n  local l1\n  local\
    \ l2\n  local m1\n  local m2\n  local n1\n  local n2\n  local o1\n  local o2\n\
    \  local p1\n  local p2\n  local q1\n  local q2\n  local r1\n  local r2\n  local\
    \ s1\n  local s2\n  local t1\n  local t2\n  local u1\n  local u2\n  local v1\n\
    \  local v2\n  local w1\n  local w2\n  local x1\n  local x2\n  local y1\n  local\
    \ y2\n  local z1\n  local z2\n  local a1\n  local b1\n  local c1\n  local d1\n\
    \  local e1\n  local f1\n  local g1\n  local h1\n  local i1\n  local i2\n  local\
    \ j1\n  local j2\n  ", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1\
    \ then return false end\n  for i = 1, len0 do\n    if s0[i] ~= s1[i] then return\
    \ false end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n\
    \  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0:sub(i,\
    \ i) ~= s1:sub(i, i) then return false end\n  end\n  return true\nend", "  local\
    \ l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for i = 1,\
    \ l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for\
    \ i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false end\n\
    \  local i\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend", "  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then return\
    \ false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i0\n\
    \  local i1\n  for i0 = 1, n0 do\n    for i1 = 1, n1 do\n      if s0[i0] == s1[i1]\
    \ then return true end\n    end\n  end\n  return false\nend", "  local len0 =\
    \ #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i =\
    \ 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n\
    \  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false\
    \ end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend", "  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then return false\
    \ end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then\
    \ return false end\n  local i\n  for i=1, l0 do\n    if s0[i] ~= s1[i] then return\
    \ false end\n  end\n  return true\nend", "  local function is_char(c)\n    return\
    \ string.sub(s0, c, c + 1) ~= string.sub(s1, c, c + 1)\n  end\n  local function\
    \ is_char_pair(c)\n    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 1,\
    \ c + 1)\n  end\n  local function is_char_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c + 1, c + 2)\n  end\n  local function is_char_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 2)\n  end\n\
    \  local function is_char_pair_pair_pair_pair(c)\n    return string.sub(s0, c,\
    \ c + 1) ~= string.sub(s1, c + 2, c + 3)\n  end\n  local function is_char_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 4)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c + 2, c + 5)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 6)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return\
    \ string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 7)\n  end\n  local function\
    \ is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 1) ~= string.sub(s1, c + 2, c + 8)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 9)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 10)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 11)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 1) ~= string.sub(s1, c + 2, c + 12)\n  end\n\
    \  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + ", "  -- Return true if s0 and s1 have the same\
    \ characters.\n  -- >>> same_chars('abcd', 'abcd')\n  -- True\n  -- >>> same_chars('abcd',\
    \ 'abcc')\n  -- False\n  -- >>> same_chars('abcd', 'abcc')\n  -- False\n  -- >>>\
    \ same_chars('abcd', 'abccd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n\
    \  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n\
    \  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n\
    \  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n\
    \  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n\
    \  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n\
    \  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n\
    \  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n\
    \  -- >>> same_chars('abcd', 'abcccdd')\n  -- False\n  -- >>> same_chars('abcd',\
    \ 'abcccdd')\n  -- False\n  -- >>> same_chars('", "  local c0 = {}\n  local c1\
    \ = {}\n  for _, c in ipairs(s0) do\n    c0[c] = true\n  end\n  for _, c in ipairs(s1)\
    \ do\n    c1[c] = true\n  end\n  return #c1 == #c0\nend", "  local l0 = #s0\n\
    \  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for i = 1, l0 do\n \
    \   if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  --\
    \ The characters in s0 are the same as the characters in s1.\n  -- If s1 contains\
    \ more characters than s0, then s1 contains all of\n  -- s0.\n  local s0_c = s0:gsub(\"\
    %c\", \"\")\n  local s1_c = s1:gsub(\"%c\", \"\")\n  if #s0_c == #s1_c then\n\
    \    return true\n  end\n  -- If s1 contains more characters than s0, then s1\
    \ contains all of\n  -- s0.\n  if #s1_c > #s0_c  then\n    return false\n  end\n\
    \  -- If s1 contains fewer characters than s0, then s1 contains all of\n  -- s0.\n\
    \  if #s1_c < #s0_c  then\n    return true\n  end\n  -- If s1 contains exactly\
    \ the same characters as s0, then s1 contains\n  -- all of s0.\n  return s0_c\
    \ == s1_c\nend", "  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then return false end\n\
    \  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\
    \ return false end\n  for i = 1, len0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return true\nend", "  -- The characters in s0 are the same as\
    \ the characters in s1.\n  -- If s1 contains any characters not found in s0, then\
    \ s0 contains the\n  -- characters in s1 that do not match any characters in s0.\n\
    \  -- If s1 contains any characters not found in s0, then s0 contains the\n  --\
    \ characters in s1 that do not match any characters in s0.\n  -- If s1 contains\
    \ any characters not found in s0, then s0 contains the\n  -- characters in s1\
    \ that do not match any characters in s0.\n  -- If s1 contains any characters\
    \ not found in s0, then s0 contains the\n  -- characters in s1 that do not match\
    \ any characters in s0.\n  -- If s1 contains any characters not found in s0, then\
    \ s0 contains the\n  -- characters in s1 that do not match any characters in s0.\n\
    \  -- If s1 contains any characters not found in s0, then s0 contains the\n  --\
    \ characters in s1 that do not match any characters in s0.\n  -- If s1 contains\
    \ any characters not found in s0, then s0 contains the\n  -- characters in s1\
    \ that do not match any characters in s0.\n  -- If s1 contains any characters\
    \ not found in s0, then s0 contains the\n  -- characters in s1 that do not match\
    \ any characters in s0.\n  -- If s1 contains any characters not found in s0, then\
    \ s0 contains the\n  -- characters in s1 that do not match any characters in s0.\n\
    \  -- If s1 contains any characters not found in s0, then s0 contains the\n  --\
    \ characters in s1 that do not match any characters in s0.\n  -- If s1 contains\
    \ any characters not found in s0, then s0 contains the\n  -- characters in s1\
    \ that do not match any characters in s0.\n  -- If s1 contains any characters\
    \ not found in s0, then s0 contains the\n  -- characters in s1 that do not match\
    \ any characters in s0.\n  -- If s1 contains any characters not found in s0, then\
    \ s0 contains the\n  -- characters in s1 that do not match any characters in s0.\n\
    \  -- If s1 contains any characters not found in s0, then s0 contains the\n  --\
    \ characters in s1 that do not match any characters in s0.\n  -- If s1 contains\
    \ any characters not found in s0, then s0 contains the\n  -- characters in s1\
    \ that do not match any characters in s0.\n  -- If ", "  local len0 = #s0\n  local\
    \ len1 = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n\
    \    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local\
    \ l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for i = 1,\
    \ l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n\
    \  for i = 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local ", "  -- Check for empty strings.\n  if s0\
    \ ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= ''\
    \ then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then\
    \ return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return\
    \ s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~=\
    \ s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n\
    \  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check\
    \ for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty\
    \ strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n\
    \  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0\
    \ ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= ''\
    \ then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then\
    \ return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return\
    \ s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~=\
    \ s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n\
    \  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check\
    \ for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty\
    \ strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n\
    \  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0\
    \ ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= ''\
    \ then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then\
    \ return s0 ~= s1 end\n  -- Check for empty strings.\n", "  -- Check for empty\
    \ strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n\
    \  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0\
    \ ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= ''\
    \ then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then\
    \ return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return\
    \ s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~=\
    \ s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n\
    \  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check\
    \ for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty\
    \ strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n\
    \  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0\
    \ ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= ''\
    \ then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then\
    \ return s0 ~= s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return\
    \ s0 ~= s1 end\n  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~=\
    \ s1 end\n  -- Check for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n\
    \  -- Check for empty strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check\
    \ for empty strings.\n  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty\
    \ strings.\n  if s0 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n\
    \  if s1 ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n  if s0\
    \ ~= '' then return s0 ~= s1 end\n  -- Check for empty strings.\n", "  local l0\
    \ = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for i = 1, l0\
    \ do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  -- If the strings are of different lengths, return false.\n  if #s0 ~= #s1 then\
    \ return false end\n  -- If the strings are of different lengths, return false.\n\
    \  if #s0 > #s1 then return false end\n  -- If the strings are of different lengths,\
    \ return false.\n  for i = 1, #s0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  local\
    \ i0 = 0\n  local i1 = 0\n  while i0 < l0 and i1 < l1 do\n    if string.sub(s0,\
    \ i0, i0 + 1) ~= string.sub(s1, i1, i1 + 1) then\n      return false\n    end\n\
    \    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0 == l0 and i1 == l1\nend",
  "  local l0 = #s0\n  local l1 = #s1\n  local i\n  for i = 1, l0 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n  end\n  return l0 == l1\nend", "  local c0\
    \ = {}\n  local c1 = {}\n  for _, c in ipairs(s0) do\n    c0[c] = true\n  end\n\
    \  for _, c in ipairs(s1) do\n    c1[c] = true\n  end\n  return #c0 == #c1\nend",
  "  local function is_char(ch)\n    return string.sub(ch, 1, 1) == 'a'\n  end\n \
    \ local function is_char_pair(ch)\n    return string.sub(ch, 1, 1) == 'a' and\
    \ string.sub(ch, 1, 2) == 'b'\n  end\n  local function is_char_pair_pair(ch)\n\
    \    return string.sub(ch, 1, 1) == 'a' and string.sub(ch, 1, 2) == 'b' and string.sub(ch,\
    \ 1, 3) == 'c'\n  end\n  local function is_char_pair_pair_pair(ch)\n    return\
    \ string.sub(ch, 1, 1) == 'a' and string.sub(ch, 1, 2) == 'b' and string.sub(ch,\
    \ 1, 3) == 'c' and string.sub(ch, 1, 4) == 'd'\n  end\n  local function is_char_pair_pair_pair_pair(ch)\n\
    \    return string.sub(ch, 1, 1) == 'a' and string.sub(ch, 1, 2) == 'b' and string.sub(ch,\
    \ 1, 3) == 'c' and string.sub(ch, 1, 4) == 'd' and string.sub(ch, 1, 5) == 'e'\n\
    \  end\n  local function is_char_pair_pair_pair_pair_pair(ch)\n    return string.sub(ch,\
    \ 1, 1) == 'a' and string.sub(ch, 1, 2) == 'b' and string.sub(ch, 1, 3) == 'c'\
    \ and string.sub(ch, 1, 4) == 'd' and string.sub(ch, 1, 5) == 'e' and string.sub(ch,\
    \ 1, 6) == 'f'\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair(ch)\n\
    \    return string.sub(ch, 1, 1) == 'a' and string.sub(ch, 1, 2) == 'b' and string.sub(ch,\
    \ 1, 3) == 'c' and string.sub(ch, 1, 4) == 'd' and string.sub(ch, 1, 5) == 'e'\
    \ and string.sub(ch, 1, 6) == 'f' and string.sub(ch, 1, 7) == 'g'\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair(ch)\n    return string.sub(ch,\
    \ 1, 1) == 'a' and string.sub(ch, 1, 2) == 'b' and string.sub(ch, 1, 3) == 'c'\
    \ and string.sub(ch, 1, 4) == 'd' and string.sub(ch, 1, 5) == 'e' and string.sub(ch,\
    \ 1, 6) == 'f' and string.sub(ch, 1, 7) == 'g' and string.sub(ch, 1, 8) == 'h'\n\
    \  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair(ch)\n\
    \    return string.sub(ch, 1, 1) == 'a' and string.sub(ch, 1, 2) == 'b' and string.sub(ch,\
    \ 1, 3) == 'c' and string.sub(ch, 1, 4) == 'd' and string.sub(ch, 1, 5) == 'e'\
    \ and string.sub(ch, 1, 6) == 'f' and string.sub(ch, 1, 7) == 'g' and string.sub(ch,\
    \ 1, 8) == 'h' and string.sub(ch, 1, 9) == 'i'\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair",
  "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false end\n  for\
    \ i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n\
    \  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false\
    \ end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend", "  local function is_char(ch)\n    return type(ch) == 'string'\
    \ and #ch == 1 and ch:byte(1) == ch\n  end\n  local function is_chars(s0, s1)\n\
    \    return type(s0) == 'string' and type(s1) == 'string' and #s0 == #s1 and all(function(ch)\n\
    \      return is_char(ch) and is_char(s0[#s0])\n    end)\n  end\n  return is_chars(s0,\
    \ s1) or is_chars(s1, s0)\nend", "  local len0 = #s0\n  local len1 = #s1\n  if\
    \ len0 ~= len1 then return false end\n  local i\n  for i = 1, len0 do\n    if\
    \ s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local n0\
    \ = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0\
    \ do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for\
    \ i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  local i = 0\n  local j = 0\n  local n = #s0 - 1\n  local m = #s1 - 1\n\
    \  while i < n and j < m do\n    if s0[i] == s1[j] then\n      i = i + 1\n   \
    \   j = j + 1\n    elseif s0[i] < s1[j] then\n      n = n + 1\n    else\n    \
    \  m = m + 1\n    end\n  end\n  return i == n and j == m\nend", "  local i0 =\
    \ 0\n  local i1 = 0\n  local i2 = #s0\n  local j0 = 0\n  local j1 = 0\n  local\
    \ j2 = #s1\n  while i0 < i2 do\n    while i1 < j2 do\n      if string.sub(s0,\
    \ i0, i1) == string.sub(s1, j0, j1) then\n        return true\n      end\n   \
    \   i1 = i1 + 1\n    end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return false\n\
    end", "  local i = 0\n  local j = 1\n  local n = #s0 - 1\n  while i < n do\n \
    \   if s0[i] ~= s1[j] then\n      return false\n    end\n    i = i + 1\n    j\
    \ = j + 1\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n\
    \  if len0 ~= len1 then return false end\n  local i\n  for i=1, len0 do\n    if\
    \ s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local function\
    \ is_char(c)\n    return string.sub(s0, c, c) == string.sub(s1, c, c)\n  end\n\
    \  return #s0 == #s1 and all(is_char(c) for c in s0)\nend", "  local len0 = #s0\n\
    \  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0\
    \ do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n  end\n  return\
    \ true\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\
    \ return false end\n  for i = 1, len0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  local\
    \ i = 0\n  while i < l0 do\n    if string.sub(s0, i, i) ~= string.sub(s1, i, i)\
    \ then return false end\n    i = i + 1\n  end\n  return true\nend", "  local n0,\
    \ n1 = #s0, #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0 do\n   \
    \ if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local\
    \ n0, n1 = #s0, #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0 do\n\
    \    if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n  end\n  return true\n\
    end", "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false\
    \ end\n  local i\n  for i=1, len0 do\n    if string.sub(s0, i, i) ~= string.sub(s1,\
    \ i, i) then return false end\n  end\n  return true\nend", "  local function is_char(c)\n\
    \    return string.sub(c, 1, 1) == string.sub(c, 1, 1)\n  end\n  local function\
    \ is_word(w)\n    return string.len(w) == string.len(string.sub(w, 1, 1))\n  end\n\
    \  local function is_char(w)\n    return is_word(w) and is_char(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function is_word(w)\n    return is_char(w) and is_word(string.sub(w))\n\
    \  end\n  local function is_char(w)\n    return is_word(w) and is_char(string.sub(w))\n\
    \  end\n  local function ", "  local l0 = #s0\n  local l1 = #s1\n  local i\n \
    \ for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ l0 == l1\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i0\n  local i1\n\
    \  for i0 = 1, n0 do\n    for i1 = 1, n1 do\n      if s0[i0] == s1[i1] then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  local\
    \ i = 0\n  local j = 0\n  local n = #s0 - 1\n  local m = #s1 - 1\n  while i <\
    \ n and j < m do\n    if s0[i] == s1[j] then\n      i = i + 1\n      j = j + 1\n\
    \    else\n      return false\n    end\n  end\n  return i == n and j == m\nend",
  "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then\n    return false\n  end\n\
    \  local i0\n  local i1\n  for i0, i1 in ipairs(string.gmatch(s1, '(.)') do\n\
    \    if string.sub(s0, i0, i1) ~= string.sub(s1, i0, i1) then\n      return false\n\
    \    end\n  end)\n  return true\nend", "  local n0 = #s0\n  local n1 = #s1\n \
    \ if n0 ~= n1 then return false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i]\
    \ then return false end\n  end\n  return true\nend", "  local n0 = #s0\n  local\
    \ n1 = #s1\n  if n0 ~= n1 then\n    return false\n  end\n  local i = 0\n  while\
    \ i < n0 do\n    if s0[i] ~= s1[i] then\n      return false\n    end\n    i =\
    \ i + 1\n  end\n  return true\nend", "  local n0, n1 = #s0, #s1\n  if n0 ~= n1\
    \ then return false end\n  for i = 1, n0 do\n    if s0:sub(i, i) ~= s1:sub(i,\
    \ i) then return false end\n  end\n  return true\nend", "  local len0 = #s0\n\
    \  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0\
    \ do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n\
    \  for i = 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then\n    return\
    \ false\n  end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if\
    \ l0 ~= l1 then return false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then\
    \ return false end\n  end\n  return true\nend", "  local l0 = #s0\n  local l1\
    \ = #s1\n  local i\n  for i=1, l0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return l0 == l1\nend", "  local function is_char(c)\n    return\
    \ string.sub(c, 1, 1) == string.sub(c, 1, 1)\n  end\n  local function is_char2(c)\n\
    \    return string.sub(c, 1, 2) == string.sub(c, 1, 2)\n  end\n  local function\
    \ is_char3(c)\n    return string.sub(c, 1, 3) == string.sub(c, 1, 3)\n  end\n\
    \  local function is_char4(c)\n    return string.sub(c, 1, 4) == string.sub(c,\
    \ 1, 4)\n  end\n  local function is_char5(c)\n    return string.sub(c, 1, 5) ==\
    \ string.sub(c, 1, 5)\n  end\n  local function is_char6(c)\n    return string.sub(c,\
    \ 1, 6) == string.sub(c, 1, 6)\n  end\n  local function is_char7(c)\n    return\
    \ string.sub(c, 1, 7) == string.sub(c, 1, 7)\n  end\n  local function is_char8(c)\n\
    \    return string.sub(c, 1, 8) == string.sub(c, 1, 8)\n  end\n  local function\
    \ is_char9(c)\n    return string.sub(c, 1, 9) == string.sub(c, 1, 9)\n  end\n\
    \  local function is_char10(c)\n    return string.sub(c, 1, 10) == string.sub(c,\
    \ 1, 10)\n  end\n  local function is_char11(c)\n    return string.sub(c, 1, 11)\
    \ == string.sub(c, 1, 11)\n  end\n  local function is_char12(c)\n    return string.sub(c,\
    \ 1, 12) == string.sub(c, 1, 12)\n  end\n  local function is_char13(c)\n    return\
    \ string.sub(c, 1, 13) == string.sub(c, 1, 13)\n  end\n  local function is_char14(c)\n\
    \    return string.sub(c, 1, 14) == string.sub(c, 1, 14)\n  end\n  local function\
    \ is_char15(c)\n    return string.sub(c, 1, 15) == string.sub(c, 1, 15)\n  end\n\
    \  local function is_char16(c)\n    return string.sub(c, 1, 16) == string.sub(c,\
    \ 1, 16)\n  end\n  local function is_char17(c)\n    return string.sub(c, 1, 17)\
    \ == string.sub(c, 1, 17)\n  end\n  local function is_char18(c)\n    return string.sub(c,\
    \ 1, 18) == string.sub(c, 1, 18)\n  end\n  local function is_char19(c)\n    return\
    \ string.sub(c, 1, 19) == string.sub(c, 1, 19)\n  end\n  local function is_char20(c)\n\
    \    return string.sub(c, 1, 20) == string.sub(c, 1, 20)\n  end\n  local function\
    \ is_char21(c)\n    return string.sub(c, 1, 21) == string.sub(c, 1, 21)\n  end\n\
    \  local function is_char22(c)\n    return string.sub(c, 1, 22) == string.sub(c,\
    \ 1, 22)\n  end\n  local function is_char23", "  local len0 = #s0\n  local len1\
    \ = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if\
    \ s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  -- We don't\
    \ care about the order of the characters in s0 and s1,\n  -- so just sort them\
    \ and compare them.\n  return s0 ~= s1 and s0 ~= string.gsub(s1, '[^' .. s1 ..\
    \ ']', '')\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i0\n  local i1\n\
    \  for i0 = 1, n0 do\n    for i1 = 1, n1 do\n      if s0[i0] == s1[i1] then return\
    \ true end\n    end\n  end\n  return false\nend", "  local l0 = #s0\n  local l1\
    \ = #s1\n  if l0 ~= l1 then return false end\n  for i = 1, l0 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n  end\n  return true\nend", "  local n0 = #s0\n\
    \  local n1 = #s1\n  local i0\n  local i1\n  for i0 = 1, n0 do\n    for i1 = 1,\
    \ n1 do\n      if s0[i0] == s1[i1] then return true end\n    end\n  end\n  return\
    \ false\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return\
    \ false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1\
    \ then return false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return\
    \ false end\n  end\n  return true\nend", "  -- Check if two words have the same\
    \ characters.\n  -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  -- true\n\
    \  -- >>> same_chars('abcd', 'dddddddabc')\n  -- true\n  -- >>> same_chars('dddddddabc',\
    \ 'abcd')\n  -- true\n  -- >>> same_chars('eabcd', 'dddddddabc')\n  -- false\n\
    \  -- >>> same_chars('abcd', 'dddddddabce')\n  -- false\n  -- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n  -- false\n  local s0_len = #s0\n  local s1_len = #s1\n\
    \  if s0_len == 0 or s1_len == 0 then\n    return false\n  end\n  if s0_len >\
    \ s1_len then\n    s0, s1 = s1, s0\n  end\n  local i\n  for i = 1, s1_len do\n\
    \    if s0[i] ~= s1[i] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n\
    \  for i = 1, l0 do\n    if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n\
    \  end\n  return true\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1\
    \ then return false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return\
    \ false end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n\
    \  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0:sub(i,\
    \ i) ~= s1:sub(i, i) then return false end\n  end\n  return true\nend", "  local\
    \ l0 = #s0\n  local l1 = #s1\n  local i = 0\n  while i < l0 and i < l1 do\n  \
    \  if s0[i] ~= s1[i] then return false end\n    i = i + 1\n  end\n  return i ==\
    \ l0 and i == l1\nend", "  -- Check if two words have the same characters.\n \
    \ -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  -- true\n  -- >>> same_chars('abcd',\
    \ 'dddddddabc')\n  -- true\n  -- >>> same_chars('dddddddabc', 'abcd')\n  -- true\n\
    \  -- >>> same_chars('eabcd', 'dddddddabc')\n  -- false\n  -- >>> same_chars('abcd',\
    \ 'dddddddabce')\n  -- false\n  -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \  -- false\n  local function chars(s0, s1)\n    local c0, c1 = {}, {}\n    for\
    \ i = 1, #s0, 1 do\n      table.insert(c0, s0:sub(i, i))\n      table.insert(c1,\
    \ s1:sub(i, i))\n    end\n    local n = #c0 - 1\n    if n ~= #c1 then return false\
    \ end\n    for i = 1, n do\n      if c0[i] ~= c1[i] then return false end\n  \
    \  end\n    return true\n  end\n  return chars(s0, s1)\nend", "  local n0 = #s0\n\
    \  local n1 = #s1\n  local i0 = 0\n  local i1 = 0\n  while i0 < n0 and i1 < n1\
    \ do\n    if string.sub(s0, i0, i0) == string.sub(s1, i1, i1) then return true\
    \ end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return false\nend", "  local\
    \ function is_char(c)\n    return string.sub(s0, c, c) == string.sub(s1, c, c)\n\
    \  end\n  local function is_char_pair(c)\n    return string.sub(s0, c, c + 1)\
    \ == string.sub(s1, c, c + 1)\n  end\n  local function is_char_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 2) == string.sub(s1, c, c + 2)\n  end\n  local\
    \ function is_char_pair_pair_pair(c)\n    return string.sub(s0, c, c + 3) == string.sub(s1,\
    \ c, c + 3)\n  end\n  local function is_char_pair_pair_pair_pair(c)\n    return\
    \ string.sub(s0, c, c + 4) == string.sub(s1, c, c + 4)\n  end\n  local function\
    \ is_char_pair_pair_pair_pair_pair(c)\n    return string.sub(s0, c, c + 5) ==\
    \ string.sub(s1, c, c + 5)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 6) == string.sub(s1, c, c + 6)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 7) == string.sub(s1, c, c + 7)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 8) == string.sub(s1, c, c + 8)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return\
    \ string.sub(s0, c, c + 9) == string.sub(s1, c, c + 9)\n  end\n  local function\
    \ is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n    return string.sub(s0,\
    \ c, c + 10) == string.sub(s1, c, c + 10)\n  end\n  local function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 11) == string.sub(s1, c, c + 11)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 12) == string.sub(s1, c, c + 12)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 13) == string.sub(s1, c, c + 13)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, c, c + 14) == string.sub(s1, c, c + 14)\n  end\n  local\
    \ function is_char_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair_pair(c)\n\
    \    return string.sub(s0, ", "  local function is_char(char)\n    return string.sub(s0,\
    \ #char + 1, #char) == char\n  end\n  local function is_char2(char, s2)\n    return\
    \ string.sub(s2, #char + 1, #char) == char\n  end\n  local function is_char3(char,\
    \ s3, s4)\n    return string.sub(s3, #char + 1, #char) == char and string.sub(s4,\
    \ #char + 1, #char) == char\n  end\n  local function is_char4(char, s5, s6, s7)\n\
    \    return string.sub(s5, #char + 1, #char) == char and string.sub(s6, #char\
    \ + 1, #char) == char and string.sub(s7, #char + 1, #char) == char\n  end\n  local\
    \ function is_char5(char, s8, s9, s10, s11)\n    return string.sub(s8, #char +\
    \ 1, #char) == char and string.sub(s9, #char + 1, #char) == char and string.sub(s10,\
    \ #char + 1, #char) == char and string.sub(s11, #char + 1, #char) == char\n  end\n\
    \  local function is_char6(char, s12, s13, s14, s15)\n    return string.sub(s12,\
    \ #char + 1, #char) == char and string.sub(s13, #char + 1, #char) == char and\
    \ string.sub(s14, #char + 1, #char) == char and string.sub(s15, #char + 1, #char)\
    \ == char\n  end\n  local function is_char7(char, s16, s17, s18, s19, s20)\n \
    \   return string.sub(s16, #char + 1, #char) == char and string.sub(s17, #char\
    \ + 1, #char) == char and string.sub(s18, #char + 1, #char) == char and string.sub(s19,\
    \ #char + 1, #char) == char and string.sub(s20, #char + 1, #char) == char\n  end\n\
    \  local function is_char8(char, s21, s22, s23, s24, s25)\n    return string.sub(s21,\
    \ #char + 1, #char) == char and string.sub(s22, #char + 1, #char) == char and\
    \ string.sub(s23, #char + 1, #char) == char and string.sub(s24, #char + 1, #char)\
    \ == char and string.sub(s25, #char + 1, #char) == char\n  end\n  local function\
    \ is_char9(char, s26, s27, s28, s29, s30)\n    return string.sub(s26, #char +\
    \ 1, #char) == char and string.sub(s27, #char + 1, #char) == char and string.sub(s28,\
    \ #char + 1, #char) == char and string.sub(s29, #char + 1, #char) == char and\
    \ string.", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then\n    return\
    \ false\n  end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n\
    \  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0:sub(i,\
    \ i) ~= s1:sub(i, i) then return false end\n  end\n  return true\nend", "  local\
    \ len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for\
    \ i = 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local l0 = #s0, #s1\n  if l0 ~= 0 then\n    for i = 1, l0 do\n\
    \      if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n    end\n  end\n\
    \  return true\nend", "  local function is_char(c)\n    return string.sub(s0,\
    \ c, c) == string.sub(s1, c, c)\n  end\n  return #s0 == #s1 and all(ichar(is_char),\
    \ s0, s1)\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then\n   \
    \ return false\n  end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1\
    \ = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if\
    \ s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local len0\
    \ = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\n    return false\n  end\n\
    \  for i = 1, len0 do\n    if s0[i] ~= s1[i] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0\
    \ ~= len1 then return false end\n  local i\n  for i=1, len0 do\n    if s0[i] ~=\
    \ s1[i] then return false end\n  end\n  return true\nend", "  local l0 = #s0\n\
    \  local l1 = #s1\n  if l0 ~= l1 then return false end\n  for i = 1, l0 do\n \
    \   if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local\
    \ n0 = #s0\n  local n1 = #s1\n  local i0 = 0\n  local i1 = 0\n  while i0 < n0\
    \ and i1 < n1 do\n    if string.sub(s0, i0, i0) == string.sub(s1, i1, i1) then\
    \ return true end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return false\nend",
  "  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1 then\n    return false\n\
    \  end\n  for i = 1, len0 do\n    if s0:sub(i, i) ~= s1:sub(i, i) then\n     \
    \ return false\n    end\n  end\n  return true\nend", "  local c0 = {}\n  local\
    \ c1 = {}\n  for _, c in ipairs(s0) do\n    c0[c] = true\n  end\n  for _, c in\
    \ ipairs(s1) do\n    c1[c] = true\n  end\n  return #c1 == #c0\nend", "  local\
    \ i0 = 0\n  local i1 = 0\n  local i2 = #s0 - 1\n  local i3 = #s1 - 1\n  while\
    \ i0 < i2 or i1 < i3 do\n    if string.sub(s0, i0, i2) ~= string.sub(s1, i1, i3)\
    \ then\n      return false\n    end\n    i0, i1, i2, i3 = i0, i1, i2, i3 + 1\n\
    \  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0\
    \ ~= len1 then return false end\n  for i = 1, len0 do\n    if s0:sub(i, i) ~=\
    \ s1:sub(i, i) then return false end\n  end\n  return true\nend", "  local len0\
    \ = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i\
    \ = 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false end\n\
    \  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return\
    \ true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return false\
    \ end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then\
    \ return false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return true\nend", "  -- The characters in s0 are the same as\
    \ the characters in s1.\n  -- If s1 contains more characters than s0, then s0\
    \ contains more\n  -- characters than s1.\n  local n0 = #s0\n  local n1 = #s1\n\
    \  local i0\n  local i1\n  -- If s1 contains more characters than s0, then s1\
    \ contains more\n  -- characters than s0.\n  if n1 > n0 then\n    return false\n\
    \  end\n  -- If s1 contains fewer characters than s0, then s1 contains fewer\n\
    \  -- characters than s0.\n  if n1 < n0 then\n    return true\n  end\n  -- If\
    \ s1 contains fewer characters than s0, then s1 contains fewer\n  -- characters\
    \ than s0.\n  if n1 < n0 then\n    return true\n  end\n  -- If s1 contains fewer\
    \ characters than s0, then s1 contains fewer\n  -- characters than s0.\n  if n1\
    \ < n0 then\n    return true\n  end\n  -- If s1 contains fewer characters than\
    \ s0, then s1 contains fewer\n  -- characters than s0.\n  if n1 < n0 then\n  \
    \  return true\n  end\n  -- If s1 contains fewer characters than s0, then s1 contains\
    \ fewer\n  -- characters than s0.\n  if n1 < n0 then\n    return true\n  end\n\
    \  -- If s1 contains fewer characters than s0, then s1 contains fewer\n  -- characters\
    \ than s0.\n  if n1 < n0 then\n    return true\n  end\n  -- If s1 contains fewer\
    \ characters than s0, then s1 contains fewer\n  -- characters than s0.\n  if n1\
    \ < n0 then\n    return true\n  end\n  -- If s1 contains fewer characters than\
    \ s0, then s1 contains fewer\n  -- characters than s0.\n  if n1 < n0 then\n  \
    \  return true\n  end\n  -- If s1 contains fewer characters than s0, then s1 contains\
    \ fewer\n  -- characters than s0.\n  if n1 < n0 then\n    return true\n  end\n\
    \  -- If s1 contains fewer characters than s0, then s1 contains fewer\n  -- characters\
    \ than s0.\n  if n1 < n0 then\n    return true\n  end\n  -- If s1 contains fewer\
    \ characters than s0, then s1 contains fewer\n  -- characters than s0.\n  if n1\
    \ < n0 then\n    return true", "  local i = 0\n  local j = 1\n  local n = #s0\
    \ - 1\n  while i < n do\n    if s0[i] ~= s1[j] then\n      return false\n    end\n\
    \    i = i + 1\n    j = j + 1\n  end\n  return true\nend", "  local i0 = 0\n \
    \ local i1 = 0\n  local i2 = #s0\n  local j2 = #s1\n  while i0 < i2 and j2 < j1\
    \ do\n    if string.sub(s0, i0, i2) ~= string.sub(s1, j1, j2) then\n      return\
    \ false\n    end\n    i0, i1, i2 = i0 + 1, i1 + 1, i2 + 1\n    j1, j2 = j1 + 1,\
    \ j2 + 1\n  end\n  return i0 == i2 and j1 == j2\nend", "  local i0 = 0\n  local\
    \ i1 = 0\n  local i0len = #s0\n  local i1len = #s1\n  while i0 < i0len and i1\
    \ < i1len do\n    if string.sub(s0, i0, i0len) == string.sub(s1, i1, i1len) then\n\
    \      i0 = i0len\n      i1 = i1len\n    else\n      i0len = i0len - 1\n     \
    \ i1len = i1len - 1\n    end\n  end\n  return i0 == i1len\nend", "  local n0 =\
    \ #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false end\n  for i = 1, n0\
    \ do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend",
  "  -- Check if two words have the same characters.\n  -- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n  -- true\n  -- >>> same_chars('abcd', 'dddddddabc')\n\
    \  -- true\n  -- >>> same_chars('dddddddabc', 'abcd')\n  -- true\n  -- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n  -- false\n  -- >>> same_chars('abcd', 'dddddddabce')\n  --\
    \ false\n  -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  -- false\n \
    \ local function same_chars(s0, s1)\n    local function is_char(c)\n      return\
    \ string.sub(s0, c, c) == string.sub(s1, c, c)\n    end\n    local function is_word(s)\n\
    \      return string.len(s) > 0 and string.len(s) ~= string.len(string.sub(s,\
    \ '^'))\n    end\n    local function is_word_char(c)\n      return string.sub(s,\
    \ 1, 1) == c\n    end\n    local function is_word_char(w)\n      return w and\
    \ is_word_char(w[1])\n    end\n    local function is_word_char(w)\n      return\
    \ w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n    \
    \  return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end\n    local function is_word_char(w)\n\
    \      return w and is_word_char(w[1])\n    end", "  local n0 = #s0\n  local n1\
    \ = #s1\n  if n0 ~= n1 then return false end\n  local i\n  for i=1, n0 do\n  \
    \  if s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local\
    \ n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return false end\n  local i0\
    \ = 0\n  local i1 = 0\n  while i0 < n0 and i1 < n1 do\n    if s0[i0] ~= s1[i1]\
    \ then return false end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0\
    \ == n0 or i1 == n1\nend", "  local len0 = #s0\n  local len1 = #s1\n  if len0\
    \ ~= len1 then return false end\n  local i0 = 0\n  local i1 = 0\n  while i0 <\
    \ len0 and i1 < len1 do\n    if s0[i0] ~= s1[i1] then return false end\n    i0\
    \ = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0 == len0 and i1 == len1\nend",
  "  local l0 = #s0\n  local l1 = #s1\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i1\n  local i2\n  local j1\n  local j2\n  local k1\n  local\
    \ k2\n  local l1\n  local l2\n  local m1\n  local m2\n  local n1\n  local n2\n\
    \  local o1\n  local o2\n  local p1\n  local p2\n  local q1\n  local q2\n  local\
    \ r1\n  local r2\n  local s1\n  local s2\n  local t1\n  local t2\n  local u1\n\
    \  local u2\n  local v1\n  local v2\n  local w1\n  local w2\n  local x1\n  local\
    \ x2\n  local y1\n  local y2\n  local z1\n  local z2\n  local a1\n  local b1\n\
    \  local c1\n  local d1\n  local e1\n  local f1\n  local g1\n  local h1\n  local\
    \ i1\n  local i2\n  local j1\n  local j2\n  local k1\n  local k2\n  local l1\n\
    \  local l2\n  local m1\n  local m2\n  local n1\n  local n2\n  local o1\n  local\
    \ o2\n  local p1\n  local p2\n  local q1\n  local q2\n  local r1\n  local r2\n\
    \  local s1\n  local s2\n  local t1\n  local t2\n  local u1\n  local u2\n  local\
    \ v1\n  local v2\n  local w1\n  local w2\n  local x1\n  local x2\n  local y1\n\
    \  local y2\n  local z1\n  local z2\n  local a1\n  local b1\n  local c1\n  local\
    \ d1\n  local e1\n  local f1\n  local g1\n  local h1\n  local i1\n  local i2\n\
    \  local j1\n  local j2", "  local l0 = #s0\n  local l1 = #s1\n  local i0 = 0\n\
    \  local i1 = 0\n  while i0 < l0 and i1 < l1 do\n    if string.sub(s0, i0, i0\
    \ + 1) ~= string.sub(s1, i1, i1 + 1) then\n      return false\n    end\n    i0\
    \ = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0 == l0 and i1 == l1\nend", "  local\
    \ function is_char(char)\n    return string.sub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.",
  "  -- We don't care about case\n  local s0_lower = s0:lower()\n  local s1_lower\
    \ = s1:lower()\n  local s0_upper = s0:upper()\n  local s1_upper = s1:upper()\n\
    \  local s0_lower = s0_lower:gsub('%W+', ' ')\n  local s1_lower = s1_lower:gsub('%W+',\
    \ ' ')\n  local s0_upper = s0_upper:gsub('%W+', ' ')\n  local s1_upper = s1_upper:gsub('%W+',\
    \ ' ')\n  local s0_lower = s0_lower:gsub('%w+', ' ')\n  local s1_lower = s1_lower:gsub('%w+',\
    \ ' ')\n  local s0_upper = s0_upper:gsub('%w+', ' ')\n  local s1_upper = s1_upper:gsub('%w+',\
    \ ' ')\n  local s0_lower = s0_lower:gsub('%w+', ' ')\n  local s1_lower = s1_lower:gsub('%w+',\
    \ ' ')\n  local s0_upper = s0_upper:gsub('%w+', ' ')\n  local s1_upper = s1_upper:gsub('%w+',\
    \ ' ')\n  local s0_lower = s0_lower:gsub('%w+', ' ')\n  local s1_lower = s1_lower:gsub('%w+',\
    \ ' ')\n  local s0_upper = s0_upper:gsub('%w+', ' ')\n  local s1_upper = s1_upper:gsub('%w+',\
    \ ' ')\n  local s0_lower = s0_lower:gsub('%w+', ' ')\n  local s1_lower = s1_lower:gsub('%w+',\
    \ ' ')\n  local s0_upper = s0_upper:gsub('%w+', ' ')\n  local s1_upper = s1_upper:gsub('%w+',\
    \ ' ')\n  local s0_lower = s0_lower:gsub('%w+', ' ')\n  local s1_lower = s1_lower:gsub('%w+',\
    \ ' ')\n  local s0_upper = s0_upper:gsub('%w+', ' ')\n  local s1_upper = s1_upper:gsub('%w+',\
    \ ' ')\n  local s0_lower = s0_lower:gsub('%w+', ' ')\n  local s1_lower = s1_lower:gsub('%w+',\
    \ ' ')\n  local s0_upper = s0_upper:gsub('%w+', ' ')\n  local ", "  local l0 =\
    \ #s0\n  local l1 = #s1\n  local i = 0\n  while i < l0 and i < l1 do\n    if s0[i]\
    \ ~= s1[i] then return false end\n    i = i + 1\n  end\n  return i == l0 and i\
    \ == l1\nend", "  -- Check lengths\n  if #s0 ~= #s1 then return false end\n  --\
    \ Check characters\n  for i = 1, #s0 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n  end\n  return true\nend", "  local l0 = #s0\n  local l1 = #s1\n  if l0\
    \ ~= l1 then return false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then\
    \ return false end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1\
    \ = #s1\n  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if\
    \ s0[i] ~= s1[i] then return false end\n  end\n  return true\nend", "  local len0\
    \ = #s0\n  local len1 = #s1\n  if len0 ~= len1 then return false end\n  for i\
    \ = 1, len0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n  return true\n\
    end", "  local function chars(s0)\n    local i, n = 0, #s0\n    local chars =\
    \ {}\n    while i < n do\n      table.insert(chars, string.sub(s0, i, i))\n  \
    \    i = i + 1\n    end\n    return chars\n  end\n  local chars1 = chars(s1)\n\
    \  local chars0 = chars(s0)\n  for i = 1, #chars0 do\n    if chars0[i] ~= chars1[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local l0 =\
    \ #s0\n  local l1 = #s1\n  if l0 ~= l1 then\n    return false\n  end\n  for i\
    \ = 1, l0 do\n    if s0[i] ~= s1[i] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local n0 = #s0\n  local n1 = #s1\n  local i0 = 0\n  local\
    \ i1 = 0\n  while i0 < n0 and i1 < n1 do\n    if s0[i0] ~= s1[i1] then\n     \
    \ return false\n    end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0\
    \ == n0 and i1 == n1\nend", "  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1\
    \ then return false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return\
    \ false end\n  end\n  return true\nend", "  local len0 = #s0\n  local len1 = #s1\n\
    \  if len0 ~= len1 then return false end\n  for i = 1, len0 do\n    if s0:sub(i,\
    \ i) ~= s1:sub(i, i) then return false end\n  end\n  return true\nend", "  local\
    \ n0, n1 = #s0, #s1\n  if n0 ~= n1 then\n    return false\n  end\n  for i = 1,\
    \ n0 do\n    if s0[i] ~= s1[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- We don't care about trailing spaces, because they don't count\n\
    \  -- -- when comparing characters.\n  s0 = s0:gsub('(^%s+)', '\\0')\n  s1 = s1:gsub('(^%s+)',\
    \ '\\0')\n  local len0 = #s0\n  local len1 = #s1\n  local i = 0\n  while i < len0\
    \ and i < len1 do\n    if s0[i] ~= s1[i] then return false end\n    i = i + 1\n\
    \  end\n  return len0 == len1\nend", "  local l0 = #s0\n  local l1 = #s1\n  local\
    \ i = 0\n  while i < l0 and i < l1 do\n    if s0[i] ~= s1[i] then return false\
    \ end\n    i = i + 1\n  end\n  return i == l0 and i == l1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
