language: lua
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i + 3] ~= s[i + 3] then\n        happy = false\n \
    \       break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovk689_o.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpovk689_o.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 and count == #s then\n    happy\
    \ = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnch0rd_m.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnch0rd_m.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      count = count + 1\n    else\n      count = count + 1\n\
    \    end\n    if count > 3 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x_lgxbn.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3x_lgxbn.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i - 1]\
    \ == s[i] then\n      count = count + 1\n    else\n      count = count\n    end\n\
    \  end\n  return count >= 3 and count == #s and #s % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufjnlq03.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpufjnlq03.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i] ~= s[count +\
    \ 1] then\n        happy = false\n        break\n      end\n      count = count\
    \ + 1\n    else\n      if s[i] ~= s[count + 1] then\n        happy = false\n \
    \       break\n      end\n      count = count + 1\n    end\n  end\n  if happy\
    \ == true then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdpd9rrd.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkdpd9rrd.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count == #s or nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79358j7s.lua:30:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp79358j7s.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+i] ~= s[i+i] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vrtccjl.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9vrtccjl.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n       \
    \     happy = true\n        end\n        count = count + 1\n        if count ==\
    \ 3 then\n            happy = false\n        end\n    end\n    return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm05k0m1r.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm05k0m1r.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for i = 1,\
    \ #s do\n    count = count + 1\n    if count > 3 then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_qrglib.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt_qrglib.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = 1\n  while n <= #s\
    \ do\n    if s[n] == s[n+1] then\n      n = n + 1\n    else\n      happy = true\n\
    \      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyd3gdhmt.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyd3gdhmt.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i+1] then happy = true end\n \
    \ end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w1ul1n0.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2w1ul1n0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      n = n + 1\n    end\n  end\n \
    \ return n >= 3 and string.sub(s, 1, 3) == string.sub(s, 3, #s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf7708kc.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvf7708kc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+1] ~= s[i+2] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y_i6mcw.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4y_i6mcw.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) ~= string.sub(s, i - 1, i) then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count == #s or false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvvcvq8j.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplvvcvq8j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n    end\n\
    \    return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8vsu96z.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn8vsu96z.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 and happy == false then\n    happy\
    \ = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxfpa888.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkxfpa888.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_uqaspw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_uqaspw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then return false end\n  for i = 1, len do\n    if s[i] ~= s[i] then return\
    \ false end\n  end\n  for i = 1, len do\n    if s[i+1] ~= s[i] then return false\
    \ end\n  end\n  for i = 1, len do\n    if s[i+2] ~= s[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7yrp4iy.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps7yrp4iy.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n    if count > 3 then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjr4xobp.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxjr4xobp.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = 1\n  while n <= #s\
    \ do\n    if s[n] == s[n+1] then\n      n = n + 1\n    else\n      happy = true\n\
    \      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyd3gdhmt.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyd3gdhmt.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i, i+1) then\n      happy = true\n      break\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2o9wato.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb2o9wato.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  local letters = {}\n  for i = 1,\
    \ #s do\n    local letter = s[i]\n    if not letters[letter] then\n      letters[letter]\
    \ = true\n      count = count + 1\n    end\n  end\n  return count >= 3 and count\
    \ == #letters and #letters == 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi40r1dqx.lua:23:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpi40r1dqx.lua:23: in local 'candidate'\n\
    \t/tmp/tmpi40r1dqx.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n      count = count\
    \ + 1\n      if count > 3 then\n        happy = true\n        break\n      end\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy93db0vd.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy93db0vd.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n\
    \    if letter ~= letter then\n      happy = false\n      break\n    end\n  end\n\
    \  if happy == false then\n    return happy\n  end\n  local happy = false\n  for\
    \ i = 1, len do\n    local letter = s[i]\n    if letter ~= letter then\n     \
    \ happy = false\n      break\n    end\n  end\n  if happy == false then\n    return\
    \ happy\n  end\n  local happy = false\n  for i = 1, len do\n    local letter =\
    \ s[i]\n    if letter ~= letter then\n      happy = false\n      break\n    end\n\
    \  end\n  if happy == false then\n    return happy\n  end\n  local happy = true\n\
    \  for i = 1, len do\n    local letter = s[i]\n    if letter ~= letter then\n\
    \      happy = false\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdlydavp.lua:71:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmdlydavp.lua:71:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i, i+1) then\n      happy = true\n      break\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2o9wato.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb2o9wato.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n      count = count + 2\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzzdwb91.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptzzdwb91.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] == s[i - 1] then\n      count = count + 1\n    else\n   \
    \   if count >= 3 then\n        happy = true\n      end\n      count = 0\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcckib9d.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphcckib9d.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[count] then\n            happy = true\n \
    \       else\n            count = count + 1\n        end\n    end\n    return\
    \ happy and count >= 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j8qsgqj.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_j8qsgqj.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return false\n  end\n  for i = 1, len do\n    if s[i] ~= s[(i-1)]\
    \ then\n      happy = false\n      break\n    end\n  end\n  if happy == false\
    \ then\n    return false\n  end\n  for i = 1, len do\n    if s[i] ~= s[(i-1)]\
    \ then\n      happy = false\n      break\n    end\n  end\n  if happy == false\
    \ then\n    return false\n  end\n  for i = 1, len do\n    if s[i] ~= s[(i-1)]\
    \ then\n      happy = false\n      break\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxnxtw10.lua:55:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwxnxtw10.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n    end\n\
    \    return count >= 3 and count == #s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6parngai.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6parngai.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s <= 3 then return false end\n \
    \ -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  local\
    \ happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then happy = true\
    \ break end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9uxkhtg.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz9uxkhtg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local n = #s\n    if n < 3 then\n        return false\n\
    \    end\n    local ok = true\n    for i = 1, n do\n        local j = i - 1\n\
    \        local k = i + 1\n        local l = j + 1\n        if s[k] == s[k] then\n\
    \            ok = false\n        elseif s[k] == s[l] then\n            ok = false\n\
    \        elseif s[k] == s[k] then\n            ok = false\n        end\n    end\n\
    \    return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp491jc4yx.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp491jc4yx.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvh7n5d4.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdvh7n5d4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = false\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr93xjsbo.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr93xjsbo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            count = count + 1\n        else\n       \
    \     count = count + 1\n        end\n    end\n    return count >= 3 and count\
    \ == #s or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5u0qpvj.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt5u0qpvj.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then\n    return false\n \
    \ end\n  -- base case\n  if #s == 3 then\n    return true\n  end\n  -- base case\n\
    \  if #s == 2 then\n    return true\n  end\n  -- base case\n  if #s == 1 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 0 then\n    return false\n\
    \  end\n  -- base case\n  if #s == 4 then\n    return true\n  end\n  -- base case\n\
    \  if #s == 5 then\n    return true\n  end\n  -- base case\n  if #s == 6 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 7 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 8 then\n    return true\n  end\n  -- base case\n\
    \  if #s == 9 then\n    return true\n  end\n  -- base case\n  if #s == 10 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 11 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 12 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 13 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 14 then\n    return true\n  end\n  -- base case\n  if #s == 15 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 16 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 17 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 18 then\n    return true\n  end\n  -- base case\n  if #s == 19 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 20 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 21 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 22 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 23 then\n    return true\n  end\n  -- base case\n  if #s == 24 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 25 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 26 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 27 then\n    return true\n  end\n  -- base case\n  if #s == 28 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 29 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 30 then\n    return true\n  end\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpupqzcimt.lua:161: ''end'' expected (to close ''function''
    at line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and\
    \ s[i] ~= s[i - 3] then\n      happy = true\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkf989ez.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdkf989ez.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n            count = count + 1\n \
    \       end\n    end\n    return count >= 3 and count == #s or false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2jpv3i2.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv2jpv3i2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then return false end\n  for i = 1, len do\n    if s[i] ~= s[i] then return\
    \ false end\n  end\n  for i = 1, len do\n    if s[i+i] ~= s[i+i] then return false\
    \ end\n  end\n  for i = 1, len do\n    if s[i+i+i] ~= s[i+i+i] then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekma3uxn.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpekma3uxn.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 and count == #s then\n    for i\
    \ = 1, #s do\n      if s[i] ~= s[count + 1] then\n        happy = false\n    \
    \    break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftwpnq5b.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpftwpnq5b.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s <= 3 then\n    return true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp26voet4y.lua:36: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then\n    return false\n \
    \ end\n  -- base case\n  if #s == 3 then\n    return true\n  end\n  -- recursive\
    \ case\n  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and\
    \ s[i] ~= s[i - 2] then\n      happy = true\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gpevvre.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8gpevvre.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[i - 1] then\n            count = count +\
    \ 1\n        end\n        if count == 3 then\n            happy = true\n     \
    \       count = 0\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnuukn_t.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcnuukn_t.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 and happy == false then\n    happy\
    \ = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxfpa888.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkxfpa888.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n       \
    \     happy = true\n        end\n        count = count + 1\n        if count ==\
    \ 3 then\n            happy = false\n        end\n    end\n    return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm05k0m1r.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm05k0m1r.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n            count = count + 1\n \
    \       end\n    end\n    return count >= 3 and count == #s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshdh6wji.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpshdh6wji.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i\
    \ - 3] then\n            happy = true\n            count = count + 1\n       \
    \ end\n    end\n    if count >= 3 then\n        happy = true\n    end\n    return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf3v6qej.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvf3v6qej.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2] then\n\
    \      count = count + 1\n    elseif count > 3 then\n      happy = true\n    \
    \  break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc87i09j.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplc87i09j.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if count == 3 then\n      happy = true\n      count = 0\n    end\n\
    \    if s[i] ~= s[count] then\n      happy = false\n    end\n    count = count\
    \ + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwetrmxv0.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwetrmxv0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  local happy = false\n  for i = 1, #s\
    \ do\n    if string.sub(s, i, i+1) ~= string.sub(s, i+1, i+2) then\n      n =\
    \ n + 1\n      if n == 3 then\n        happy = true\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7b_3dfw.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_7b_3dfw.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Write your code here\n  local happy = false\n  local\
    \ count = 0\n  for i = 1, #s do\n    if count > 3 then\n      happy = true\n \
    \     break\n    end\n    if s[i] ~= s[i - 1] then\n      happy = false\n    \
    \  break\n    end\n    count = count + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldbfod4x.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpldbfod4x.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  local happy = false\n  for i = 1, #s\
    \ do\n    if string.sub(s, i, i+1) ~= string.sub(s, i, i+1) then\n      n = n\
    \ + 1\n      if n == 3 then\n        happy = true\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20pei6ej.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp20pei6ej.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+1] ~= s[i+2] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y_i6mcw.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4y_i6mcw.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i + 1) ~= string.sub(s, i - 1, i) then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count == #s or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn_wqbt7.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqn_wqbt7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local count = 0\n  for i = 1, #s\
    \ do\n    if i == 1 then\n      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i]\
    \ ~= s[i - 3] then\n        return false\n      end\n    elseif i == 2 then\n\
    \      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n    \
    \    return false\n      end\n    elseif i == 3 then\n      if s[i] ~= s[i - 1]\
    \ or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n        return false\n      end\n\
    \    elseif s[i - 1] == s[i - 2] and s[i - 1] == s[i - 3] then\n      if s[i]\
    \ ~= s[i - 4] then\n        return false\n      end\n    elseif s[i - 1] == s[i\
    \ - 2] and s[i - 2] ~= s[i - 3] then\n      if s[i] ~= s[i - 4] then\n       \
    \ return false\n      end\n    elseif s[i - 1] == s[i - 2] and s[i - 2] ~= s[i\
    \ - 3] then\n      if s[i] ~= s[i - 4] then\n        return false\n      end\n\
    \    elseif s[i - 3] == s[i - 4] and s[i - 3] == s[i - 5] then\n      if s[i]\
    \ ~= s[i - 6] then\n        return false\n      end\n    elseif s[i - 3] == s[i\
    \ - 4] and s[i - 4] ~= s[i - 5] then\n      if s[i] ~= s[i - 6] then\n       \
    \ return false\n      end\n    elseif s[i - 3] == s[i - 4] and s[i - 4] ~= s[i\
    \ - 5] then\n      if s[i] ~= s[i - 6] then\n        return false\n      end\n\
    \    elseif s[i - 5] == s[i - 6] and s[i - 5] == s[i - 7] then\n      if s[i]\
    \ ~= s[i - 8] then\n        return false\n      end\n    elseif s[i - 5] == s[i\
    \ - 6] and s[i - 6] ~= s[i - 7] then\n      if s[i] ~= s[i - 8] then\n       \
    \ return false\n      end\n    elseif s[i - 5] == s[i - 6] and s[i - 6] ~= s[i\
    \ - 7] then\n      if s[i] ~= s[i - 8] then\n        return false\n      end\n\
    \    end\n    count = count + 1\n  end\n  if count < 3 then\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvt1czj8e.lua:84:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvt1czj8e.lua:84:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  while n <= #s do\n    local ok = true\n\
    \    for i = 1, n do\n      if s[i] ~= s[n-i] then\n        ok = false\n     \
    \   break\n      end\n    end\n    if ok then\n      n = n + 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nbspgcx.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4nbspgcx.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0avh1s.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2o0avh1s.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local len = #s\n    if len\
    \ < 3 then\n        return false\n    end\n    local last_letter = nil\n    for\
    \ i = 1, len do\n        local letter = s[i]\n        if last_letter ~= letter\
    \ then\n            happy = true\n        end\n        last_letter = letter\n\
    \    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0du5alb8.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0du5alb8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local len = #s\n    if len\
    \ < 3 then\n        return happy\n    end\n    local i = 0\n    while i < len\
    \ do\n        local letter = s[i]\n        if letter ~= letter then\n        \
    \    happy = false\n            break\n        end\n        i = i + 1\n    end\n\
    \    if len % 3 ~= 0 then\n        happy = false\n    end\n    local j = 1\n \
    \   while j < len do\n        if s[i+j] == s[i+j+1] then\n            j = j +\
    \ 1\n        else\n            happy = false\n            break\n        end\n\
    \    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy9abpip.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwy9abpip.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, count do\n\
    \      if s[i] ~= s[count + 1] then\n        happy = false\n        break\n  \
    \    end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55wd4e7t.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp55wd4e7t.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Write your code here\n  local happy = false\n  local\
    \ count = 0\n  for i = 1, #s do\n    if count == 3 then\n      happy = true\n\
    \      count = 0\n    end\n    if s[i] ~= s[count] then\n      happy = false\n\
    \    end\n    count = count + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bexhyw8.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5bexhyw8.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[i - 1] then\n      happy = true\n      break\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmvnoxiz.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkmvnoxiz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 0\n  for i = 1, #s do\n    local c = s[i]\n\
    \    if n ~= 0 then\n      if c == s[n] then\n        n = n + 1\n      else\n\
    \        return false\n      end\n    else\n      n = 1\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ae3t3of.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3ae3t3of.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    local letter = s[i]\n    -- base case\n   \
    \ if letter ~= letter then return false end\n    -- recursive case\n    if letter\
    \ ~= s[i - 1] then return false end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7yatcr1.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf7yatcr1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i] ~= s[count] then\n\
    \        happy = false\n        break\n      else\n        count = count + 1\n\
    \      end\n    else\n      happy = true\n      count = count + 1\n    end\n \
    \ end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3al41krw.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3al41krw.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if s[i] == s[i] then\n      count = count + 1\n\
    \    else\n      if count >= 3 then\n        happy = true\n        break\n   \
    \   end\n      count = 0\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75evkd2c.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp75evkd2c.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvh7n5d4.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdvh7n5d4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[i - 1] then\n      happy = true\n      break\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmvnoxiz.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkmvnoxiz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  local last = ''\n  for i = 1, #s\
    \ do\n    local c = s[i]\n    if last ~= c and last ~= c and last ~= c then\n\
    \      count = count + 1\n    end\n    last = s[i]\n  end\n  return count >= 3\
    \ and count == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzit9hfw.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmzit9hfw.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i+1] then\n\
    \      happy = true\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lhvv48n.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lhvv48n.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      n = n + 1\n    end\n  end\n \
    \ return n >= 3 and n == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdagr0bv.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvdagr0bv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      happy = true\n      break\n \
    \   end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph915lad1.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph915lad1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  local last_letter = nil\n  for i = 1, len do\n\
    \    local letter = s[i]\n    if last_letter ~= letter then\n      happy = true\n\
    \      break\n    end\n    last_letter = letter\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2t9uv5d.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo2t9uv5d.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] then\n            count = count + 1\n        end\n    end\n\
    \    return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm2hlved.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkm2hlved.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n    if count == 3 then\n      happy = true\n      count\
    \ = 0\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i24e8mk.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5i24e8mk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      count = count + 1\n    end\n  end\n  return count >= 3\
    \ and count == #s and #s % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9az08ny.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv9az08ny.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n\
    \    local count = 0\n    for j = 1, i do\n      if s[j] == letter then\n    \
    \    count = count + 1\n      end\n    end\n    if count % 3 == 0 then\n     \
    \ happy = false\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfyslwkg.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsfyslwkg.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n    if count == 3 then\n      happy = true\n      count\
    \ = 0\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i24e8mk.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5i24e8mk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then return false end\n  for i = 1, len do\n    if s[i] ~= s[i] then return\
    \ false end\n  end\n  for i = 1, len do\n    if s[i - 1] ~= s[i] then return false\
    \ end\n  end\n  for i = 1, len do\n    if s[i - 2] ~= s[i] then return false end\n\
    \  end\n  for i = 1, len do\n    if s[i - 3] ~= s[i] then return false end\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps237bu9j.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps237bu9j.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      happy = false\n\
    \      count = count + 1\n    else\n      count = count + 1\n    end\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count + 1] then\n\
    \        happy = false\n        break\n      end\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk3nradb.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuk3nradb.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] then\n      count = count + 1\n    end\n    if\
    \ count == 3 then\n      happy = true\n      count = 0\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86xp_sn_.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp86xp_sn_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n    if count == 3 then\n      happy = true\n      count\
    \ = 0\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i24e8mk.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5i24e8mk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if s[2]\
    \ ~= s[3] then return false end\n  -- recursive case\n  if s[1] ~= s[2] then return\
    \ false end\n  -- recursive case\n  if s[1] ~= s[3] then return false end\n  --\
    \ recursive case\n  return is_happy(s[4])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8gfcnos.lua:19:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpx8gfcnos.lua:19:\
    \ in function </tmp/tmpx8gfcnos.lua:17>\n\t(...tail calls...)\n\t/tmp/tmpx8gfcnos.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = #s\n  if n >= 3 then\n\
    \    for i = 1, n do\n      if s[i] ~= s[i+1] then\n        happy = true\n   \
    \     break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lu0jtoi.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7lu0jtoi.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then return false end\n  for i = 1, len do\n    if s[i] ~= s[i] then return\
    \ false end\n  end\n  for i = 1, len do\n    if s[i - 1] ~= s[i] then return false\
    \ end\n  end\n  for i = 1, len do\n    if s[i - 1] ~= s[i - 1] then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpriv4t.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgtpriv4t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return false\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = false\n      break\n    end\n  end\n  if len > 3 then\n\
    \    for i = 1, len do\n      if s[i] ~= s[i + 1] then\n        happy = false\n\
    \        break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxgfgu6e.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxxgfgu6e.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i, i+1) then\n      n = n + 1\n    end\n  end\n  return\
    \ n >= 3 and string.sub(s, 1, 3) == string.sub(s, 4, #s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus11etu6.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpus11etu6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i - 1] or s[i] == s[i - 2] or s[i] == s[i - 3] then\n      count = count +\
    \ 1\n    end\n  end\n  return count >= 3 and count ~= #s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2nim976.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy2nim976.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if s[1] == s[2] and s[1] == s[3] then return true end\n  -- recursive\
    \ case\n  return is_happy(s:sub(1, 3)) or is_happy(s:sub(3, 5))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0sg4p7j.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb0sg4p7j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count ~= #s and #s % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3w3dkg7.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_3w3dkg7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and\
    \ s[i] ~= s[i - 3] then\n      happy = true\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkf989ez.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdkf989ez.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i]:lower() == s[i+1]:lower()\
    \ and s[i]:lower() == s[i+2]:lower() then\n        happy = true\n      end\n \
    \     count = 0\n    else\n      count = count + 1\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiudqu9lr.lua:23:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpiudqu9lr.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpiudqu9lr.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ check every 3 consecutive letters are distinct\n  for i = 1, #s, 3 do\n    if\
    \ #(s:sub(i, i + 3)) ~= 3 then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobll2pbq.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobll2pbq.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if s[1] == s[2] and s[1] == s[3] then return true end\n  -- recursive\
    \ case\n  return is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(3))\
    \ or is_happy(s:sub(4))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomw6no14.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpomw6no14.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvh7n5d4.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdvh7n5d4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i] ~= s[count] then\n\
    \        happy = false\n        break\n      end\n      count = 0\n    else\n\
    \      count = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppthqsj3a.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppthqsj3a.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] == s[i] then\n      count = count + 1\n    elseif count ==\
    \ 3 then\n      happy = true\n      count = 0\n    else\n      count = 0\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dc9ed28.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9dc9ed28.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local len = #s\n    if len\
    \ >= 3 then\n        for i = 1, len do\n            if s[i] ~= s[i - 1] then\n\
    \                happy = true\n                break\n            end\n      \
    \  end\n    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplksuaa34.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplksuaa34.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0avh1s.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2o0avh1s.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      count = count + 1\n    end\n  end\n  return count >= 3\
    \ and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp741iff5k.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp741iff5k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_uqaspw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_uqaspw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if #s -\
    \ i >= 3 then\n      happy = not happy\n    end\n    if #s - i == 3 then\n   \
    \   happy = not happy\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxko4088w.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxko4088w.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if #s ==\
    \ 3 then\n    local first = s[1]\n    local second = s[2]\n    local third = s[3]\n\
    \    if first ~= second and first ~= third then return false end\n    if second\
    \ ~= third then return false end\n    return true\n  end\n  -- recursive case\n\
    \  local first = s[1]\n  local second = s[2]\n  local third = s[3]\n  if first\
    \ ~= second and first ~= third then\n    return false\n  end\n  if second ~= third\
    \ then\n    return false\n  end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa5uuw306.lua:19:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpa5uuw306.lua:19:\
    \ in function </tmp/tmpa5uuw306.lua:17>\n\t(...tail calls...)\n\t/tmp/tmpa5uuw306.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[(i + 1) % (#s)] then happy = true\
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i933bnw.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1i933bnw.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i]:lower() == s[i]:lower() then\n            count = count + 1\n        else\n\
    \            count = count - 1\n        end\n        if count < 3 then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7n2x91ul.lua:20:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp7n2x91ul.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp7n2x91ul.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = #s\n  if n >= 3 then\n\
    \    for i = 1, n do\n      if s[i] ~= s[i] then\n        happy = true\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q2hfjc5.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6q2hfjc5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if #s ==\
    \ 2 then\n    return not is_happy(s[2])\n  end\n  -- recursive case\n  if #s ==\
    \ 1 then\n    return not is_happy(s[1]) or not is_happy(s[2])\n  end\n  -- recursive\
    \ case\n  return is_happy(s[1]) or is_happy(s[2]) or is_happy(s[3])\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj6huzj9t.lua:19:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpj6huzj9t.lua:19:\
    \ in upvalue 'is_happy'\n\t/tmp/tmpj6huzj9t.lua:31: in local 'candidate'\n\t/tmp/tmpj6huzj9t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[count]\
    \ == s[count+1] then\n      count = count + 1\n    else\n      count = count\n\
    \    end\n  end\n  return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dews6n_.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3dews6n_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count == #s or nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79358j7s.lua:30:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp79358j7s.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s <= 3 then return true end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk9i_x40c.lua:34: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then return false end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then return\
    \ false end\n  end\n  happy = true\n  for i = 1, len do\n    if s[i] ~= s[i +\
    \ 1] then return false end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3s2h5di.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo3s2h5di.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if s[1] == s[2] and s[1] == s[3] then return true end\n  -- recursive\
    \ case\n  return is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(3))\
    \ or is_happy(s:sub(4))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomw6no14.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpomw6no14.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvh7n5d4.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdvh7n5d4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i]:lower() == s[i]:lower() then\n            count = count + 1\n        end\n\
    \    end\n    return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbmnp_577.lua:20:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpbmnp_577.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpbmnp_577.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0avh1s.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2o0avh1s.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then return false end\n  for i = 1, len do\n    if s[i] ~= s[i] then return\
    \ false end\n  end\n  for i = 1, len do\n    if s[i] != s[i+1] then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6my6gs4u.lua:25: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[i - 1] then\n      happy = true\n      break\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmvnoxiz.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkmvnoxiz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count == #s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn5_qdjj.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphn5_qdjj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_uqaspw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_uqaspw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_uqaspw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_uqaspw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local n = #s\n    if n < 3 then return false end\n\
    \    local ok = true\n    for i = 1, n do\n        local j = i - 1\n        local\
    \ k = i + 1\n        local l = j + 1\n        if s[k] == s[k] then\n         \
    \   if s[k] == s[l] then\n                if s[k] == s[k] then\n             \
    \       if s[k] == s[k] then\n                        ok = false\n           \
    \         end\n                end\n            end\n        end\n    end\n  \
    \  return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmocqufs.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsmocqufs.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) ~= string.sub(s, i, i) then\n      n = n + 1\n    end\n  end\n  return\
    \ n >= 3 and n == #s and #string.gsub(s, \"(.)\\\\1+\", \"%1\") ~= 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1eignmnh.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1eignmnh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  while n < #s do\n    if s[n] == s[n+1]\
    \ then\n      n = n + 1\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zno9x4s.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7zno9x4s.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then\n    return false\n \
    \ end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n    if\
    \ s[i] ~= s[i] then\n      happy = false\n      break\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddyind06.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpddyind06.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj19nwus8.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj19nwus8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  while n <= #s do\n    if string.sub(s,\
    \ n, n + 3) == string.sub(s, n - 1, n) then\n      n = n + 1\n    else\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lp1dml8.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1lp1dml8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = false\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr93xjsbo.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr93xjsbo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  local i = 0\n  while i < len do\n    local\
    \ letter = s[i]\n    if letter ~= letter then\n      happy = false\n      break\n\
    \    end\n    i = i + 1\n  end\n  if i == len then\n    return happy\n  end\n\
    \  local j = 1\n  while j < len do\n    local letter = s[j]\n    if letter ~=\
    \ letter then\n      happy = false\n      break\n    end\n    j = j + 1\n  end\n\
    \  if j == len then\n    return happy\n  end\n  local k = 1\n  while k < len do\n\
    \    local letter = s[k]\n    if letter ~= letter then\n      happy = false\n\
    \      break\n    end\n    k = k + 1\n  end\n  if k == len then\n    return happy\n\
    \  end\n  local l = 1\n  while l < len do\n    local letter = s[l]\n    if letter\
    \ ~= letter then\n      happy = false\n      break\n    end\n    l = l + 1\n \
    \ end\n  if l == len then\n    return happy\n  end\n  local m = 1\n  while m <\
    \ len do\n    local letter = s[m]\n    if letter ~= letter then\n      happy =\
    \ false\n      break\n    end\n    m = m + 1\n  end\n  if m == len then\n    return\
    \ happy\n  end\n  local n = 2\n  while n < len do\n    local letter = s[n]\n \
    \   if letter ~= letter then\n      happy = false\n      break\n    end\n    n\
    \ = n + 1\n  end\n  if n == len then\n    return happy\n  end\n  local o = 3\n\
    \  while o < len do\n    local letter = s[o]\n    if letter ~= letter then\n \
    \     happy = false\n      break\n    end\n    o = o + 1\n  end\n  if o == len\
    \ then\n    return happy\n  end\n  local p = 1\n  while p < len do\n    local\
    \ letter = s[p]\n    if letter ~= letter then\n      happy = false\n      break\n\
    \    end\n    p = p + 1\n  end\n  if p == len then\n    return happy\n  end\n\
    \  local q = 1\n  while q < len do\n    local letter = s[q]\n    if letter ~=\
    \ letter then\n      happy = false\n      break\n    end\n    q = q + 1\n  end\n\
    \  if q == len then\n    return happy\n  end\n  local r = 1\n  while r < len do\n\
    \    local letter = s[r]\n    if letter ~\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8y0609zz.lua:135: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\
    \ happy = true end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3kp2cjo.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz3kp2cjo.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = 1\n  for i = 1, #s\
    \ do\n    if string.sub(s, i, i+3) == string.sub(s, 1, i+3) then\n      n = n\
    \ + 1\n    else\n      if n >= 3 then\n        happy = true\n      end\n     \
    \ n = 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20p_tj9n.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp20p_tj9n.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      count = count + 1\n    end\n  end\n  return count >= 3\
    \ and count == #s and #s % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep35jclx.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpep35jclx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyhsbdq8.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcyhsbdq8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i + 1] then\
    \ happy = true end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncetk8j_.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpncetk8j_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local len = #s\n    if len\
    \ < 3 then\n        return false\n    end\n    for i = 1, len do\n        local\
    \ letter = s[i]\n        for j = i + 1, len do\n            if s[j] == letter\
    \ then\n                happy = false\n                break\n            end\n\
    \        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyruiebk.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqyruiebk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      n = n + 1\n    end\n  end\n \
    \ return n >= 3 and n == #s or false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqw_tehh.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfqw_tehh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = false\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr93xjsbo.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr93xjsbo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n\
    \    if letter ~= letter then\n      happy = false\n      break\n    end\n  end\n\
    \  if len % 3 ~= 0 then\n    return happy\n  end\n  for i = 1, len do\n    local\
    \ letter = s[i]\n    if letter ~= letter then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszpkxbdm.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpszpkxbdm.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Write your code here\n  local happy = false\n  local\
    \ count = 0\n  for i = 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2]\
    \ then\n      count = count + 1\n    elseif count >= 3 then\n      happy = true\n\
    \      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3ilsees.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf3ilsees.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count == 3 then\n      count = count + 1\n    end\n  end\n  return\
    \ count >= 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrk709na.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjrk709na.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n      happy = true\n\
    \      count = count + 1\n    end\n  end\n  return happy and count >= 3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbke4se9.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjbke4se9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == string.sub(s,i,i+1) then\n      count = count + 1\n    end\n  end\n  return\
    \ count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpermljctr.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpermljctr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvh7n5d4.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdvh7n5d4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n\
    \    for j = 1, 3 do\n      if letter == s[j] then\n        return false\n   \
    \   end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbs57ooc.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppbs57ooc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if s[2]\
    \ ~= s[3] then return false end\n  -- recursive case\n  if s[1] ~= s[2] then return\
    \ false end\n  -- recursive case\n  if s[1] ~= s[3] then return false end\n  --\
    \ recursive case\n  return is_happy(s[4])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8gfcnos.lua:19:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpx8gfcnos.lua:19:\
    \ in function </tmp/tmpx8gfcnos.lua:17>\n\t(...tail calls...)\n\t/tmp/tmpx8gfcnos.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n    if count == 3 then\n      happy = true\n      count\
    \ = 0\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i24e8mk.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5i24e8mk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  local happy = false\n  for i = 1, #s\
    \ do\n    if n == 3 then\n      if s[i] ~= s[n-2][#s[n-2]] then\n        happy\
    \ = false\n        break\n      end\n    end\n    if s[i] ~= s[n-2][#s[n-2]] then\n\
    \      happy = false\n      break\n    end\n    n = n + 1\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6_huc9ih.lua:27:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmp6_huc9ih.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp6_huc9ih.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return false\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if happy == false then\n\
    \    return false\n  end\n  for i = 1, len do\n    if s[i+i] ~= s[i+i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if happy == false then\n\
    \    return false\n  end\n  for i = 1, len do\n    if s[i+i+i] ~= s[i+i+i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if happy == false then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r4ugmlz.lua:58:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4r4ugmlz.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local len = #s\n    if len\
    \ < 3 then\n        return happy\n    end\n    for i = 1, len do\n        if s[i]\
    \ ~= s[i - 1] then\n            happy = true\n            break\n        end\n\
    \    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxofrj7s.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsxofrj7s.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n\
    \    for j = 1, 3 do\n      if letter == s[j] then\n        return false\n   \
    \   end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbs57ooc.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppbs57ooc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_uqaspw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_uqaspw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if #s ==\
    \ 2 then\n    if s[1] == s[2] and s[1] == s[3] then return true end\n    return\
    \ false\n  end\n  -- recursive case\n  if #s == 1 then\n    if s[1] == s[1] then\
    \ return true end\n    return false\n  end\n  -- recursive case\n  if s[1] ==\
    \ s[1] and s[2] ~= s[2] and s[3] ~= s[3] then return false end\n  return is_happy(s[3],\
    \ s[4], s[5], s[6])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2mlk9vrh.lua:19:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmp2mlk9vrh.lua:19:\
    \ in function </tmp/tmp2mlk9vrh.lua:17>\n\t(...tail calls...)\n\t/tmp/tmp2mlk9vrh.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0avh1s.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2o0avh1s.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      happy = false\n     \
    \ count = 0\n    end\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n    \
    \  happy = true\n      count = count + 1\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupgim5_y.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupgim5_y.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s <= 3 then return true end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk9i_x40c.lua:34: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = #s\n  if n >= 3 then\n\
    \    for i = 1, n do\n      if s[i] ~= s[i] then\n        happy = true\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q2hfjc5.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6q2hfjc5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 and count == #s and #s % 3 == 0\
    \ then\n    happy = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6t2pi05.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph6t2pi05.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  while n <= #s do\n    local letter =\
    \ s[n]\n    if letter ~= letter then\n      return false\n    end\n    local count\
    \ = 0\n    for i = 1, n do\n      if s[n] == s[i] then\n        count = count\
    \ + 1\n      end\n    end\n    if count ~= 3 then\n      return false\n    end\n\
    \    n = n + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75eeqfdj.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp75eeqfdj.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  for i =\
    \ 1, #s do\n    if string.sub(s, i, i+3) == string.sub(s, i, i+3) then\n     \
    \ happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso_x8hwk.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpso_x8hwk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_uqaspw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_uqaspw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  local happy = false\n  for i = 1, #s\
    \ do\n    if string.sub(s,i,i) == string.sub(s,i,i+1) then\n      n = n + 1\n\
    \    elseif n == 3 then\n      happy = true\n      n = n + 1\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz8r_pa7.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiz8r_pa7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = false\n      break\n    end\n  end\n  if len > 3 then\n\
    \    for i = 1, len do\n      if s[i] ~= s[i + 1] then\n        happy = false\n\
    \        break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf30udpd.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbf30udpd.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  local happy = false\n  for i = 1, #s\
    \ do\n    if n == 1 then\n      happy = not happy\n    elseif s[n] == s[n-1] then\n\
    \      happy = not happy\n    else\n      happy = not happy\n    end\n    n =\
    \ n + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq2f203b.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfq2f203b.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 1\n  while n <= #s do\n    if string.sub(s,\
    \ n, n+3) == string.sub(s, n-1, n-2) then\n      n = n + 1\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeylj7r7.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkeylj7r7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] == s[i - 1] or s[i] == s[i - 2]\n        then\n            count = count\
    \ + 1\n        else\n            if count > 3 then\n                return false\n\
    \            end\n            count = 0\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoybgadde.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoybgadde.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvh7n5d4.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdvh7n5d4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n    end\n\
    \    return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8vsu96z.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn8vsu96z.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = false\n      break\n    end\n  end\n  if len > 3 then\n\
    \    for i = 1, len do\n      if s[i] ~= s[i + 1] then\n        happy = false\n\
    \        break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf30udpd.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbf30udpd.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      count = count + 1\n    end\n  end\n  return count >= 3\
    \ and count == #s and #s % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9az08ny.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv9az08ny.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+1] ~= s[i+2] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y_i6mcw.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4y_i6mcw.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local len = #s\n    if len\
    \ < 3 then\n        return false\n    end\n    for i = 1, len do\n        if s[i]\
    \ ~= s[i - 1] then\n            happy = true\n            break\n        end\n\
    \    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq9qe3bq.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoq9qe3bq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[(i + 1) % #s] then happy = true\
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7shdefvr.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7shdefvr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      count = count + 1\n    end\n  end\n  return count >= 3\
    \ and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp741iff5k.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp741iff5k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      count = count +\
    \ 1\n    end\n    if count == 3 then\n      happy = true\n    end\n    count =\
    \ count - 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvv5bf_b.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsvv5bf_b.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[i - 1] then\n      happy = true\n      break\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmvnoxiz.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkmvnoxiz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      happy = false\n     \
    \ count = 0\n    end\n    if s[i] ~= s[i - 1] then\n      happy = false\n    \
    \  count = count + 1\n    end\n  end\n  if count ~= 3 then\n    happy = false\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm8l3rnx.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfm8l3rnx.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  local letters = {}\n  for i = 1,\
    \ #s do\n    letters[#letters + 1] = s:sub(i,i)\n  end\n  for i = 1, #letters\
    \ do\n    count = count + 1\n    if count == 3 then\n      if letters[i] != letters[i+1]\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu_4u5rx_.lua:26: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ check every 3 consecutive letters are distinct\n  for i = 1, #s - 2, 3 do\n\
    \    if s[i] ~= s[i + 1] then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2du2s4e.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc2du2s4e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvh7n5d4.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdvh7n5d4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = 1\n  while n <= #s\
    \ do\n    local letter = s[n]\n    if letter == letter then\n      n = n + 1\n\
    \    else\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1tl8f6u.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf1tl8f6u.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    local letter = s[i]\n\
    \    for j = 1, 3 do\n      if letter ~= s[j] then\n        return false\n   \
    \   end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg3sa1v1.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwg3sa1v1.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n      happy = true\n\
    \      count = count + 1\n    end\n  end\n  if count >= 3 then\n    for i = 1,\
    \ #s do\n      if s[i] ~= s[i - 3] then\n        happy = false\n        break\n\
    \      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dmk_41g.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8dmk_41g.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+i] ~= s[i+i] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vrtccjl.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9vrtccjl.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  if #s ==\
    \ 2 then\n    local first = s[1]\n    local second = s[2]\n    if first ~= second\
    \ then\n      return false\n    end\n    return is_happy(s[3])\n  end\n  -- recursive\
    \ case\n  if #s == 1 then\n    local first = s[1]\n    if first ~= first then\n\
    \      return false\n    end\n    return is_happy(s[2])\n  end\n  -- recursive\
    \ case\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpydzn5y2f.lua:19:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpydzn5y2f.lua:19:\
    \ in function </tmp/tmpydzn5y2f.lua:17>\n\t(...tail calls...)\n\t/tmp/tmpydzn5y2f.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] == s[i] then\n            count = count + 1\n        else\n           \
    \ if count > 3 then\n                return false\n            end\n         \
    \   count = 0\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9z4vur0.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq9z4vur0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n      \
    \      happy = true\n            count = count + 1\n        end\n    end\n   \
    \ return happy and count >= 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sbv9i_o.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9sbv9i_o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = #s\n  if n < 3 then\
    \ return false end\n  for i = 1, n do\n    if s[i] ~= s[i] then return false end\n\
    \  end\n  happy = true\n  for i = 1, n do\n    if s[i] ~= s[n-i] then return false\
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3djffi5.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy3djffi5.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i] then\n      count = count + 1\n    else\n      count = count\n    end\n\
    \  end\n  return count >= 3 and count == #s or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyrhszd7_.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyrhszd7_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count == #s or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpelx5ex.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpelx5ex.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+i] ~= s[i+i] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vrtccjl.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9vrtccjl.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[count] then\n            happy = true\n \
    \       end\n        count = count + 1\n    end\n    return happy and count >=\
    \ 3 and count == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvicqrna.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjvicqrna.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] == s[i - 1] or s[i] == s[i - 2]\n        then\n            count = count\
    \ + 1\n        else\n            count = count\n        end\n    end\n    return\
    \ count >= 3 and count == #s or false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_yo02jk.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd_yo02jk.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822304
