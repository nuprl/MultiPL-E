language: lua
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i + 3] ~= s[i + 3] then\n        happy = false\n \
    \       break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovk689_o.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpovk689_o.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 and count == #s then\n    happy\
    \ = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnch0rd_m.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnch0rd_m.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      count = count + 1\n    else\n      count = count + 1\n\
    \    end\n    if count > 3 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x_lgxbn.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3x_lgxbn.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i - 1]\
    \ == s[i] then\n      count = count + 1\n    else\n      count = count\n    end\n\
    \  end\n  return count >= 3 and count == #s and #s % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufjnlq03.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpufjnlq03.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- Your code here\n  local happy = false\n  local count\
    \ = 0\n  for i = 1, #s do\n    if count == 3 then\n      if s[i] ~= s[count +\
    \ 1] then\n        happy = false\n        break\n      end\n      count = count\
    \ + 1\n    else\n      if s[i] ~= s[count + 1] then\n        happy = false\n \
    \       break\n      end\n      count = count + 1\n    end\n  end\n  if happy\
    \ == true then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdpd9rrd.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkdpd9rrd.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count == #s or nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79358j7s.lua:30:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp79358j7s.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+i] ~= s[i+i] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vrtccjl.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9vrtccjl.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n       \
    \     happy = true\n        end\n        count = count + 1\n        if count ==\
    \ 3 then\n            happy = false\n        end\n    end\n    return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm05k0m1r.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm05k0m1r.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for i = 1,\
    \ #s do\n    count = count + 1\n    if count > 3 then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_qrglib.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt_qrglib.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local n = 1\n  while n <= #s\
    \ do\n    if s[n] == s[n+1] then\n      n = n + 1\n    else\n      happy = true\n\
    \      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyd3gdhmt.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyd3gdhmt.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i+1] then happy = true end\n \
    \ end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w1ul1n0.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2w1ul1n0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n  \
    \    if s[i] ~= s[count + 1] then\n        happy = false\n        break\n    \
    \  end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_haekm8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_haekm8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+1) ~= string.sub(s, i+1, i+2) then\n      n = n + 1\n    end\n  end\n \
    \ return n >= 3 and string.sub(s, 1, 3) == string.sub(s, 3, #s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf7708kc.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvf7708kc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n\
    \      happy = false\n      break\n    end\n  end\n  if len > 3 then\n    for\
    \ i = 1, len do\n      if s[i+1] ~= s[i+2] then\n        happy = false\n     \
    \   break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y_i6mcw.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4y_i6mcw.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) ~= string.sub(s, i - 1, i) then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count == #s or false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvvcvq8j.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplvvcvq8j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n    end\n\
    \    return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8vsu96z.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn8vsu96z.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[count] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n  end\n  if count >= 3 and happy == false then\n    happy\
    \ = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxfpa888.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkxfpa888.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then\n    return happy\n  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_uqaspw.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_uqaspw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local len = #s\n  if len < 3\
    \ then return false end\n  for i = 1, len do\n    if s[i] ~= s[i] then return\
    \ false end\n  end\n  for i = 1, len do\n    if s[i+1] ~= s[i] then return false\
    \ end\n  end\n  for i = 1, len do\n    if s[i+2] ~= s[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7yrp4iy.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps7yrp4iy.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n    end\n\
    \    count = count + 1\n    if count > 3 then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjr4xobp.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxjr4xobp.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
