name: HumanEval_111_histogram
language: lua
prompt: "-- Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
  \ count.\n-- If several letters have the same occurrence, return all of them.\n\
  -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n--\
  \ >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b c a\
  \ b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b'] = 4}\n\
  -- >>> histogram('')\n-- {}\nlocal function histogram(test)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
  \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
  \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
  \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
  \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b\
  \ b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t']\
  \ = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
  \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local counts = {}\n  for letter in test:gmatch('%a') do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ max = {}\n  for letter, count in pairs(counts) do\n    if count > max[count]\
    \ then\n      max[count] = letter\n    end\n  end\n  return max\nend", "  local\
    \ counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] =\
    \ counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    local count = result[letter] or 0\n    result[letter] = count\
    \ + 1\n  end\n  return result\nend", "  local result = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    local count = result[letter] or 0\n    result[letter] = count\
    \ + 1\n  end\n  return result\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n \
    \   if count > result[letter] then\n      result[letter] = count\n    end\n  end\n\
    \  return result\nend", "  local letters = {}\n  for letter in test:gmatch('%a')\
    \ do\n    table.insert(letters, letter)\n  end\n  local counts = {}\n  for _,\
    \ letter in ipairs(letters) do\n    counts[letter] = counts[letter] or 0\n   \
    \ counts[letter] = counts[letter] + 1\n  end\n  return counts\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n    table.insert(counts,\
    \ letter)\n  end\n  local max = {}\n  for _, letter in ipairs(counts) do\n   \
    \ local count = counts[letter]\n    if max[letter] == nil then\n      max[letter]\
    \ = count\n    else\n      max[letter] = math.max(max[letter], count)\n    end\n\
    \  end\n  return max\nend", "  local counts = {}\n  for letter in test:gmatch('([a-z]+)\
    \ ') do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local result = {}\n  for letter, count in pairs(test) do\n   \
    \ result[letter] = result[letter] or count\n  end\n  return result\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local letters = {}\n  for letter in string.gmatch(test,\
    \ \"[%a]+\") do\n    table.insert(letters, letter)\n  end\n  local counts = {}\n\
    \  for _, letter in ipairs(letters) do\n    counts[letter] = counts[letter] or\
    \ 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend", " \
    \ local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([^\
    \ ]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
