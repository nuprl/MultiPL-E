name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a list of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n-- {1,\
  \ 3, 2, 8}\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n -\
    \ 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n      table.insert(tri_sum,\
    \ tri_sum[1])\n      return\n    end\n    tri_aux(n - 1, tri_aux, tri_sum)\n \
    \   tri_aux(n - 2, tri_aux, tri_sum)\n    tri_aux(n - 3, tri_aux, tri_sum)\n \
    \ end\n  tri_aux(n, {}, {})\n  return tri_sum\nend", "  local function tri_aux(n,\
    \ a, b)\n    if n == 0 then\n      return a\n    elseif n == 1 then\n      return\
    \ b\n    else\n      return tri_aux(n - 1, b, a + b)\n    end\n  end\n  return\
    \ tri_aux(n, 3, 1)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1)\
    \ + tri(n - 2))\n    if n % 2 == 0 then\n      tri_aux = tri_aux + tri(n - 1)\
    \ + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n %\
    \ 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n    end\n  \
    \  return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return {n}\n    end\n    local tri_aux1, tri_aux2 =\
    \ tri_aux(n-1), tri_aux(n-2)\n    tri_aux1.next = tri_aux\n    tri_aux2.next =\
    \ tri_aux\n    return tri_aux1.next + tri_aux2.next\n  end\n  return tri_aux(n)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    else\n      local t = tri_aux(n - 1, acc + n)\n      t[1] = t[1] + n\n  \
    \    t[2] = t[2] + n\n      return t\n    end\n  end\n  return tri_aux(n, {})\n\
    end", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n\
    \  elseif n == 2 then\n    return {{1}, {1, 2}}\n  else\n    local a = tri(n -\
    \ 1)\n    local b = tri(n - 2)\n    local c = tri(n + 1)\n    return a + b + c\n\
    \  end\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n \
    \ while n ~= 0 do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + b + d)", "  local function tri_aux(n, a,\
    \ b, c)\n    if n == 0 then\n      return {a, b, c}\n    end\n    local new_a\
    \ = a\n    local new_b = b\n    local new_c = c\n    if n % 2 == 0 then\n    \
    \  new_a = tri_aux(n - 1, new_a, new_b, new_c + new_a)\n      new_b = tri_aux(n\
    \ - 1, new_b, new_a + new_b, new_c)\n      new_c = tri_aux(n - 1, new_c, new_a\
    \ + new_b, new_c + new_b)\n    else\n      new_a = tri_aux(n - 1, new_a, new_b,\
    \ new_c + new_a)\n      new_b = tri_aux(n - 1, new_b, new_a + new_b, new_c)\n\
    \      new_c = tri_aux(n - 1, new_c, new_a + new_b, new_c + new_b)\n    end\n\
    \    return new_a, new_b, new_c\n  end\n  return tri_aux(n, 0, 0, 1)\nend", " \
    \ if n < 2 then\n    return {}\n  end\n  local a = {}\n  local b = 1\n  local\
    \ c = 3\n  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = d\n    local e\n  \
    \  if n % 2 == 0 then\n      e = b + c\n    else\n      e = b - c\n    end\n \
    \   local f = d + 1\n    b = c\n    c = e\n    d = f\n    n = n / 2\n  end\n \
    \ return a\nend", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ function tri_aux(n)\n    if n == 1 then\n      return {1}\n    elseif n == 2\
    \ then\n      return {1, 2}\n    elseif n % 2 == 0 then\n      local a = tri_aux(n\
    \ - 1)\n      local b = tri_aux(n - 2)\n      local c = tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n + 1)\n      return {a[1], a[2], b[1], c[1]}\n    else\n   \
    \   local a = tri_aux(n - 1)\n      local b = tri_aux(n - 2)\n      local c =\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n + 1)\n      return {a[1], a[2],\
    \ b[1], c[1], c[2]}\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      acc = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    end\n    return acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "    local function f(n)\n        if n == 1 then\n    \
    \        return 3\n        elseif n % 2 == 0 then\n            return 1 + f(n\
    \ - 1) + f(n - 2) + f(n - 3)\n        else\n            return f(n - 1) + f(n\
    \ - 2) + f(n - 3)\n        end\n    end\n    return f(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux_1\
    \ = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n\
    \    local tri_aux_3 = tri_aux(n - 3, acc + tri_aux_1 + tri_aux_2)\n    return\
    \ tri_aux_3\n  end\n  return tri_aux(n, 3)\nend", "    local a = {}\n    local\
    \ b = 1\n    local c = 3\n    for i = 1, n do\n        table.insert(a, b)\n  \
    \      table.insert(a, c)\n        b = c + b\n        c = b + c\n    end\n   \
    \ return a\nend", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    \n    local tri_aux = tri_aux(n - 1, acc + tri(n\
    \ - 1) + tri(n - 2))\n    \n    if n % 2 == 0 then\n      tri_aux = tri_aux +\
    \ tri(n - 1) + tri(n - 2)\n    end\n    \n    return tri_aux\n  end\n  \n  return\
    \ tri_aux(n, 3)\nend", "    local function tri_aux(n, acc)\n        if n == 1\
    \ then\n            table.insert(acc, 1)\n        elseif n % 2 == 0 then\n   \
    \         tri_aux(n - 1, acc)\n            tri_aux(n - 2, acc)\n            table.insert(acc,\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1))\n        else\n            tri_aux(n -\
    \ 1, acc)\n            table.insert(acc, tri(n - 1) + tri(n + 1))\n        end\n\
    \    end\n    tri_aux(n, {})\nend", "  local function tri_aux(n, acc)\n    if\
    \ n == 0 then\n      return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1,\
    \ acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    local tri_aux_3\
    \ = tri_aux(n - 3, acc + tri_aux_1 + tri_aux_2)\n    return tri_aux_3\n  end\n\
    \  return tri_aux(n, 3)\nend", "    local function helper(first, n)\n        if\
    \ n == 0 then\n            return first\n        else\n            return helper(first\
    \ + first + first, n-1)\n        end\n    end\n    return helper(1, n)\nend",
  "  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    end\n\
    \    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function helper(m, n)\n    if n == 0 then\n  \
    \    return {m}\n    elseif n == 1 then\n      return {m, m + n}\n    else\n \
    \     local m = m + n\n      local n1 = helper(m, n - 1)\n      local n2 = helper(m\
    \ + n1, n - 2)\n      local n3 = helper(m + n2, n - 3)\n      local n4 = helper(m\
    \ + n3, n - 4)\n      local n5 = helper(m + n4, n - 5)\n      local n6 = helper(m\
    \ + n5, n - 6)\n      local n7 = helper(m + n6, n - 7)\n      local n8 = helper(m\
    \ + n7, n - 8)\n      local n9 = helper(m + n8, n - 9)\n      local n10 = helper(m\
    \ + n9, n - 10)\n      local n11 = helper(m + n10, n - 11)\n      local n12 =\
    \ helper(m + n11, n - 12)\n      local n13 = helper(m + n12, n - 13)\n      local\
    \ n14 = helper(m + n13, n - 14)\n      local n15 = helper(m + n14, n - 15)\n \
    \     local n16 = helper(m + n15, n - 16)\n      local n17 = helper(m + n16, n\
    \ - 17)\n      local n18 = helper(m + n17, n - 18)\n      local n19 = helper(m\
    \ + n18, n - 19)\n      local n20 = helper(m + n19, n - 20)\n      local n21 =\
    \ helper(m + n20, n - 21)\n      local n22 = helper(m + n21, n - 22)\n      local\
    \ n23 = helper(m + n22, n - 23)\n      local n24 = helper(m + n23, n - 24)\n \
    \     local n25 = helper(m + n24, n - 25)\n      local n26 = helper(m + n25, n\
    \ - 26)\n      local n27 = helper(m + n26, n - 27)\n      local n28 = helper(m\
    \ + n27, n - 28)\n      local n29 = helper(m + n28, n - 29)\n      local n30 =\
    \ helper(m + n29, n - 30)\n      local n31 = helper(m + n30, n - 31)\n      local\
    \ n32 = helper(m + n31, n - 32)\n      local n33 = helper(m + n32, n - 33)\n \
    \     local n34 = helper(m + n33, n - 34)\n      local n35 = helper(m + n34, n\
    \ - 35)\n      local n36 = helper(m + n35, n - 36)\n      local n37 = helper(m\
    \ + n", "  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n    elseif n == 2 then\n      table.insert(acc, 2)\n    else\n      table.insert(acc,\
    \ tri_aux(n - 1, acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n\
    \    return acc\n  end\n  return tri_aux(n, {})\nend", "    local function tri_aux(n)\n\
    \        if n == 1 then\n            return 3\n        elseif n % 2 == 0 then\n\
    \            return tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n        else\n\
    \            return tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \        end\n    end\n    return tri_aux(n)\nend", "  local a = {}\n  local b\
    \ = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = d\n  \
    \  local e = b\n    local f = c\n    b = d\n    c = f + e\n    d = e + b\n   \
    \ n = n - 1\n  end\n  return a\nend", "  local function tri_aux(n)\n    if n ==\
    \ 1 then\n      return {1}\n    elseif n == 2 then\n      return {1, 2}\n    elseif\
    \ n % 2 == 0 then\n      local t1 = tri_aux(n - 1)\n      local t2 = tri_aux(n\
    \ - 2)\n      local t3 = tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n + 1)\n  \
    \    return {t3, t2, t1}\n    else\n      local t1 = tri_aux(n - 1)\n      local\
    \ t2 = tri_aux(n - 2)\n      local t3 = tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ + 1)\n      return {t3, t2, t1}\n    end\n  end\n  return tri_aux(n)\nend",
  "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    if n % 2 == 0 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n -\
    \ 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local function tri_aux(n)\n    if n == 1 then\n      return {n}\n\
    \    elseif n == 2 then\n      return {n, n}\n    elseif n % 2 == 0 then\n   \
    \   return {n, tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)}\n    else\n     \
    \ return {n, tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1), tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri(n + 1)}\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    end\n    local tri_aux\
    \ = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 0 then\n  \
    \    return tri_aux\n    else\n      return tri_aux + tri(n - 1) + tri(n - 2)\n\
    \    end\n  end\n  return tri_aux(n, 3)\nend", "  local result = {1,3,2}\n  for\
    \ i = 4, n+1 do\n    local tmp = result[1]\n    result[1] = result[2] + result[1]\
    \ + result[3]\n    result[2] = tmp\n  end\n  return result\nend", "  local function\
    \ f(n)\n    if n == 0 then\n      return 1\n    end\n    if n == 1 then\n    \
    \  return 3\n    end\n    return f(n - 1) + f(n - 2) + f(n - 3) + f(n - 4)\n \
    \ end\n  return f(n)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n  \
    \  local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2\
    \ + tri_aux(n - 1, tri_aux_2)\n  end\n  return tri_aux(n, 3)\nend", "  local a\
    \ = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while i\
    \ <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local a = {}\n  local b = 1\n  local c = 1\n  local d = 1\n  local\
    \ i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n \
    \   table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a, c + d\
    \ + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + b + c)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + ", "  local function tri_aux(n)\n    if n == 1 then\n\
    \      return 3\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2)\
    \ + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(", "  local function tri_aux(n, acc)\n    if n == 0 then\n  \
    \    return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local\
    \ tri_aux_2 = tri_aux(n - 2, acc + 1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n\
    \ - 1, acc)\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    end\n    local tri_aux_1 = tri_aux(n\
    \ - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + 1)\n    return tri_aux_1\
    \ + tri_aux_2 + tri_aux(n - 1, acc)\n  end\n  return tri_aux(n, 3)\nend", "  if\
    \ n == 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n  elseif n\
    \ == 2 then\n    return {1}\n  elseif n % 2 == 0 then\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n  end\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 1 then\n      return acc\n    end\n    local tri_aux_1 = tri_aux(n\
    \ - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + 1)\n    return tri_aux_1\
    \ + tri_aux_2 + tri_aux(n - 1, acc)\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    end\n  \
    \  local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, acc + 1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n - 1, acc)\n  end\n\
    \  return tri_aux(n, 3)\nend", "  local a = {}\n  local b = 1\n  local c = 1\n\
    \  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n   \
    \ table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    ", "  local a = {}\n  local\
    \ b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = d\n\
    \    local e = b + c\n    local f = e + d\n    b = c\n    c = d\n    d = e\n \
    \   e = f\n  end\n  return a\nend", "  local function tri_aux(n, acc)\n    if\
    \ n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc\
    \ + tri(n - 1) + tri(n - 2))\n    if n % 2 == 0 then\n      tri_aux = tri_aux\
    \ + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux1, tri_aux2\n    tri_aux1 = tri_aux(n - 1, acc\
    \ + 1)\n    tri_aux2 = tri_aux(n - 2, acc + 2)\n    return tri_aux1 + tri_aux2\n\
    \  end\n  return tri_aux(n, 3)\nend", "  local result = {1}\n  local i = 1\n \
    \ while i <= n do\n    local a = result[i]\n    local b = result[i + 1]\n    local\
    \ c = result[i + 2]\n    result[i] = a + b + c\n    i = i + 3\n  end\n  return\
    \ result\nend", "  local function tri_aux(n, a, b, c)\n    if n == 0 then\n  \
    \    return a\n    end\n    if n == 1 then\n      return b\n    end\n    return\
    \ tri_aux(n - 1, b, a + b, c + a)\n  end\n  return tri_aux(n, 0, 0, 1)\nend",
  "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n   \
    \ table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, ", "  local a = {}\n  local b = 1\n  local c = 3\n  local\
    \ d = 1\n  while n ~= 0 do\n    a[#a + 1] = b\n    local t = c\n    c = b + d\n\
    \    b = t\n    d = c + d\n  end\n  return a\nend", "  local function tri_aux(n,\
    \ a, b, c)\n    if n == 0 then\n      return {a, b, c}\n    end\n    local new_a\
    \ = a\n    local new_b = b\n    local new_c = c\n    if n % 2 == 0 then\n    \
    \  new_c = new_a + new_b + new_c\n      new_a = new_b\n      new_b = new_c\n \
    \   end\n    local new_n = n - 1\n    local new_a = tri_aux(new_n, new_a, new_b,\
    \ new_c)\n    local new_b = tri_aux(new_n, new_b, new_a, new_c)\n    local new_c\
    \ = tri_aux(new_n, new_c, new_a, new_b)\n    return new_a, new_b, new_c\n  end\n\
    \  return tri_aux(n, 0, 0, 0)\nend", "  local a = {}\n  local b = 1\n  local c\
    \ = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, c + d + b + c)\n    table.insert(a, c + d +\
    \ b + c + d)\n    table.insert(a, c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d)\n    table.insert(a, c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b + c + d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c)\n\
    \    table.insert(a, c + d + b + c + d + b + c + d + b + c + d + b + c + d + b\
    \ + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c + d + b\
    \ + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a, c + d\
    \ + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b\
    \ + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c + d + b + c\
    \ + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, ", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux1\n\
    \    if n % 2 == 0 then\n      tri_aux1 = tri_aux(n - 1, acc + 1)\n    else\n\
    \      tri_aux1 = tri_aux(n - 2, acc + 2)\n    end\n    return tri_aux1 + tri_aux1\
    \ + tri_aux(n + 1, acc + 3)\n  end\n  return tri_aux(n, 3)\nend", "    local function\
    \ tri_aux(n, a, b, c)\n        if n == 0 then\n            return a\n        end\n\
    \        if n == 1 then\n            return b\n        end\n        return tri_aux(n\
    \ - 1, b, a + b, c + a)\n    end\n    return tri_aux(n, 0, 0, 1)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 1\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    elseif n == 1 then\n      return { acc[1] }\n    else\n      local\
    \ tri_aux = tri_aux(n - 1, { acc[1], acc[n] })\n      local tri_aux = tri_aux(n\
    \ - 2, { acc[1], acc[n], tri_aux(n - 1, acc) })\n      return tri_aux\n    end\n\
    \  end\n  return tri_aux(n, { })\nend", "  local result = {1}\n  for i = 2, n\
    \ do\n    table.insert(result, tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n\
    \  return result\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    elseif n == 1 then\n      return tri_aux(n - 1, acc + 1)\n\
    \    else\n      return tri_aux(n - 1, acc + tri_aux(n - 2, acc))\n    end\n \
    \ end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if\
    \ n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc\
    \ + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux\
    \ + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2\
    \ = tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n\
    \ - 1, acc + tri_aux_1 + tri_aux_2)\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ function tri_aux(n, a, b, c)\n    if n == 0 then\n      return {a, b, c}\n \
    \   elseif n == 1 then\n      return {a, b, c}\n    else\n      local new_a =\
    \ a + b\n      local new_b = b + c\n      local new_c = c + a\n      return {new_a,\
    \ new_b, new_c}\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "    local\
    \ function tri_aux(n, a, b, c)\n        if n == 0 then\n            return a,\
    \ b, c\n        elseif n == 1 then\n            return b, c, a\n        else\n\
    \            local new_a, new_b, new_c = tri_aux(n - 1, b, c, a)\n           \
    \ return new_a, new_b, new_c + new_b\n        end\n    end\n    return tri_aux(n,\
    \ 0, 0, 1)\nend", "  if n == 1 then\n    return [1]\n  elseif n == 2 then\n  \
    \  return [3]\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4)\n  end\nend", "  local function tri_aux(n, acc)\n    if n\
    \ == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc\
    \ + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux\
    \ + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n      return acc\n    end\n    table.insert(acc, tri_aux(n - 1, acc))\n\
    \    table.insert(acc, tri_aux(n - 2, acc))\n    table.insert(acc, tri_aux(n -\
    \ 3, acc))\n    return acc\n  end\n  return tri_aux(n, {})\nend", "    local function\
    \ tri_aux(n, acc)\n        if n == 0 then\n            return acc\n        elseif\
    \ n == 1 then\n            return { acc[1] }\n        else\n            return\
    \ tri_aux(n - 1, { acc[1], acc[n] }) + tri_aux(n - 2, { acc[n], acc[n + 1] })\n\
    \        end\n    end\n    return tri_aux(n, { 1, 1 })\nend", "  local function\
    \ tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    end\n    if n ==\
    \ 1 then\n      return b\n    end\n    return tri_aux(n - 1, a + b + c, b, c)\n\
    \  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local result = {1}\n  local i =\
    \ 1\n  while i <= n do\n    local tmp = result[i]\n    result[i] = result[i-1]\
    \ + result[i-2] + result[i+2]\n    i = i+1\n  end\n  return result\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    elseif n\
    \ == 1 then\n      return {acc[1], acc[2]}\n    else\n      local a = tri_aux(n\
    \ - 1, {acc[1], acc[2]})\n      local b = tri_aux(n - 2, {acc[2], acc[3]})\n \
    \     return {a[1], a[2], b[1], b[2], b[3]}\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend", "  local function helper(start, count)\n    if count == 1 then\n\
    \      return {start}\n    end\n    local a = helper(start + 1, count - 1)\n \
    \   local b = helper(start + 2, count - 1)\n    local c = helper(start + 3, count\
    \ - 1)\n    local sum = start + 3\n    for i = 1, #a do\n      sum = sum + a[i]\
    \ + b[i] + c[i]\n    end\n    return sum\n  end\n  return helper(1, n)\nend",
  "  if n < 3 then\n    return {}\n  elseif n == 3 then\n    return { 1, 1, 1 }\n\
    \  elseif n == 2 then\n    return { 1, 2, 1 }\n  else\n    local a, b, c = tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)\n    return { a, b, c }\n  end\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n   \
    \ a[#a + 1] = d\n    local e = b + c\n    local f = e + d\n    b = c\n    c =\
    \ d\n    d = e\n    e = f\n  end\n  return a\nend", "  local function tri_aux(n,\
    \ a, b)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n   \
    \   return b\n    end\n    return tri_aux(n - 1, b, a + b)\n  end\n  return tri_aux(n,\
    \ 0, 1)\nend", "  if n == 1 then\n    return [3]\n  elseif n == 2 then\n    return\
    \ [1, 3]\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n  end\nend", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ function f(n)\n    if n == 1 then\n      return {n}\n    end\n    local a =\
    \ f(n-1)\n    local b = f(n-2)\n    local c = f(n-3)\n    local d = a[1]\n   \
    \ for _, v in ipairs(a) do\n      d = d + v + b[1] + c[1] + d[1]\n    end\n  \
    \  for _, v in ipairs(b) do\n      d = d + v + c[1] + d[1]\n    end\n    for _,\
    \ v in ipairs(c) do\n      d = d + v + a[1] + d[1]\n    end\n    return d\n  end\n\
    \  return f(n)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local d\
    \ = 1\n  while n ~= 0 do\n    a[#a + 1] = d\n    local t = b\n    b = c\n    c\
    \ = d + t\n    d = t\n    n = n - 1\n  end\n  return a\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    else\n      local\
    \ tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n      return tri_aux\n\
    \    end\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, a,\
    \ b, c)\n    if n == 0 then\n      return {a, b, c}\n    end\n    if n == 1 then\n\
    \      return {a, b, c}\n    end\n    local new_a = a + b\n    local new_b = b\
    \ + c\n    local new_c = c + a\n    return tri_aux(n - 1, new_a, new_b, new_c)\n\
    \  end\n  return tri_aux(n, 0, 0, 1)\nend", "    local function tri_aux(n, acc)\n\
    \        if n == 1 then\n            table.insert(acc, 1)\n        else\n    \
    \        table.insert(acc, tri_aux(n - 1, acc))\n            table.insert(acc,\
    \ tri_aux(n - 2, acc))\n        end\n        return acc\n    end\n    return tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2\
    \ = tri_aux(n - 2, acc + 1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n - 1,\
    \ acc)\n  end\n  return tri_aux(n, 3)\nend", "  local result = {1}\n  local i\
    \ = 1\n  while i <= n do\n    table.insert(result, i)\n    i = i + 2\n  end\n\
    \  return result\nend", "    local a = {}\n    local b = 1\n    local c = 0\n\
    \    local d = 1\n    local i = 1\n    while i <= n do\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.insert(a, d)\n        table.insert(a,\
    \ b)\n        table.insert(a, c)\n        table.", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1,\
    \ acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 0 then\n      acc = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    end\n    return acc\n\
    \  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if\
    \ n == 1 then\n      return acc\n    elseif n == 2 then\n      return tri_aux(n\
    \ - 1, acc)\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, acc)))\n    else\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, tri_aux(n - 2, acc)))))\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    elseif n == 0 then\n      return nil\n    elseif n % 2 == 0 then\n\
    \      return tri_aux(n - 1, tri_aux(n - 1, acc))\n    else\n      return tri_aux(n\
    \ - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n - 2, acc)))))\n    end\n  end\n\
    \  return tri_aux(n, {})\nend", "  if n == 0 then\n    return {}\n  elseif n ==\
    \ 1 then\n    return {1}\n  elseif n == 2 then\n    return {1}\n  elseif n % 2\
    \ == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\nend",
  "  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    end\n\
    \    if n == 1 then\n      return b\n    end\n    return tri_aux(n - 1, a + b,\
    \ a, c)\n  end\n  return tri_aux(n, 0, 0, 0)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1,\
    \ acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      acc = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    end\n    return acc\n\
    \  end\n  return tri_aux(n, 3)\nend", "  local result = {1, n}\n  local i = 1\n\
    \  while i <= n do\n    local tmp = result[1]\n    result[1] = result[2] + result[1]\
    \ + result[3]\n    result[2] = tmp\n    i = i + 1\n  end\n  return result\nend",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return\
    \ acc\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, a, b,\
    \ c)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n      return\
    \ b\n    end\n    return tri_aux(n - 1, b, a + c, c)\n  end\n  return tri_aux(n,\
    \ 0, 0, 1)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n    \
    \  return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local\
    \ tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1 + tri_aux_1)\n    return tri_aux_1\
    \ + tri_aux_2 + tri_aux_2\n  end\n  return tri_aux(n, 3)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    elseif n == 1 then\n\
    \      return { acc[1] }\n    else\n      local t1, t2 = tri_aux(n - 1, { acc[1]\
    \ }), tri_aux(n - 2, { acc[2], acc[1] })\n      return { acc[1], acc[2], acc[1]\
    \ } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] }\
    \ -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } --\
    \ return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return\
    \ { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return {\
    \ acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1],\
    \ acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2],\
    \ acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1]\
    \ } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] }\
    \ -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } --\
    \ return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return\
    \ { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return {\
    \ acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1],\
    \ acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2],\
    \ acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1]\
    \ } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] }\
    \ -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } --\
    \ return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return\
    \ { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return {\
    \ acc[1], acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1],\
    \ acc[2], acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc[1], acc[2],\
    \ acc[1] } -- return { acc[1], acc[2], acc[1] } -- return { acc", "  local a =\
    \ {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, c + d + b)\n    table.insert(a, c + d + b + c)\n   \
    \ table.insert(a, c + d + b + c + d)\n    table.insert(a, c + d + b + c + d +\
    \ b)\n    table.insert(a, c + d + b + c + d + b + c)\n    table.insert(a, c +\
    \ d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b +\
    \ c + d + b + c + d + b + c + d + b)\n    table.insert(a, c + d + b + c + d +\
    \ b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b +\
    \ c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b +\
    \ c + d + b + c + d + b + c + d + b)\n    table.insert(a, c + d + b + c + d +\
    \ b + c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b +\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b)\n   \
    \ table.insert(a, c + d + b + c + d + b + c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c + d +\
    \ b + c + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, ", "   \
    \ local function tri_aux(n, a, b, c)\n        if n == 0 then\n            return\
    \ a\n        end\n        if n == 1 then\n            return b\n        end\n\
    \        return tri_aux(n - 1, b, a + b, c + a)\n    end\n    return tri_aux(n,\
    \ 0, 0, 1)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n    \
    \  return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local\
    \ tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    local tri_aux_3 = tri_aux(n\
    \ - 3, acc + tri_aux_1 + tri_aux_2)\n    return tri_aux_3\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    elseif n == 1 then\n      return { acc[1] }\n    else\n      local\
    \ first, second = tri_aux(n - 1, { acc[1] }), tri_aux(n - 2, { acc[2], acc[1]\
    \ })\n      return { acc[1], acc[2], acc[3], first[2], second[1], second[2], first[1]\
    \ + second[1] }\n    end\n  end\n  return tri_aux(n, { })\nend", "    local function\
    \ tri_aux(n, acc)\n        if n == 0 then\n            return acc\n        elseif\
    \ n == 1 then\n            return tri_aux(n - 1, acc)\n        else\n        \
    \    return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 2)))\n\
    \        end\n    end\n    return tri_aux(n, {})\nend", "  local function tri_aux(n,\
    \ a, b)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n   \
    \   return b\n    end\n    return tri_aux(n - 1, b, a + b)\n  end\n  return tri_aux(n,\
    \ 3, 1)\nend", "    local function tri_aux(n, tri_aux)\n        if n == 0 then\n\
    \            tri_aux[1] = 1\n            tri_aux[2] = 1\n            tri_aux[3]\
    \ = 2\n        elseif n == 1 then\n            tri_aux[1] = 3\n            tri_aux[2]\
    \ = 2\n            tri_aux[3] = 8\n        else\n            tri_aux[1] = tri_aux[2]\
    \ - tri_aux[1] + tri_aux[3]\n            tri_aux[2] = tri_aux[3] + tri_aux[1]\n\
    \            tri_aux[3] = tri_aux[1] + tri_aux[2]\n        end\n        return\
    \ tri_aux\n    end\n    return tri_aux(n, {})\nend", "  local a = {}\n  local\
    \ b = 1\n  local c = 1\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, b + d)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, c + d)\n    table.insert(a,\
    \ d + c)\n    table.insert(a, b + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b)\n    table.insert(a, d + b)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, d + c)\n    table.insert(a, b + d)\n", "    local\
    \ a = {}\n    local b = 1\n    local c = 1\n    local d = 1\n    for i = 1, n\
    \ do\n        local tmp = b\n        local tmp2 = c\n        local tmp3 = d\n\
    \        b = c\n        c = d\n        d = tmp + tmp2 + tmp3\n        a[i] = d\n\
    \    end\n    return a\nend", "  local function tri_aux(n, acc)\n    if n == 1\
    \ then\n      return acc\n    elseif n == 2 then\n      return tri_aux(n - 1,\
    \ acc)\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 2,\
    \ tri_aux(n - 1, acc)))\n    else\n      return tri_aux(n - 1, tri_aux(n - 2,\
    \ tri_aux(n - 1, tri_aux(n - 2, acc)))))\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n)\n    if n == 0 then\n      return {1,1}\n\
    \    elseif n == 1 then\n      return {1,1}\n    elseif n % 2 == 0 then\n    \
    \  return {tri_aux(n - 1) + tri_aux(n - 2) + tri(n - 1), tri_aux(n - 2) + tri(n\
    \ - 1) + tri(n - 2)}\n    else\n      return {tri_aux(n - 1) + tri_aux(n - 2)\
    \ + tri(n - 1), tri_aux(n - 2) + tri(n - 1) + tri(n - 2)}\n    end\n  end\n  return\
    \ tri_aux(n)\nend", "  local a = {}\n  local b = 1\n  local c = 1\n  local d =\
    \ 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, c + d + b + a)\n    table.insert(a, c + d +\
    \ b + a + c)\n    table.insert(a, c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a)\n    table.insert(a, c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n\
    \    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b\
    \ + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d\
    \ + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a\
    \ + c + d + b + a + c + d + b + ", "  if n == 1 then\n    return 3\n  elseif n\
    \ == 2 then\n    return 1\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  else\n    return tri(n - 1) + tri(n - 2)\n  end\nend",
  "  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    end\n\
    \    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n %\
    \ 2 == 0 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n    end\n  \
    \  return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ tri_aux)\n    if n == 0 then\n      return tri_aux\n    end\n    if n == 1 then\n\
    \      return {1, n}\n    end\n    local tri_aux1 = tri_aux(n - 1, tri_aux[n]\
    \ + tri_aux[n + 1])\n    local tri_aux2 = tri_aux(n - 2, tri_aux[n] + tri_aux[n\
    \ + 1] + tri_aux[n + 2])\n    local tri_aux3 = tri_aux(n - 3, tri_aux[n] + tri_aux[n\
    \ + 1] + tri_aux[n + 2] + tri_aux[n + 3])\n    return tri_aux1 + tri_aux2 + tri_aux3\n\
    \  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n, acc)\n   \
    \ if n == 0 then\n      return acc\n    end\n    local tri_aux_1 = tri_aux(n -\
    \ 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + 1)\n    return tri_aux_1\
    \ + tri_aux_2 + tri_aux(n - 1, acc)\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result, i)\n\
    \    i = i + 2\n  end\n  return result\nend", "  local function tri_aux(n, a,\
    \ b)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n      return\
    \ b\n    end\n    return tri_aux(n - 1, b, a + b)\n  end\n  return tri_aux(n,\
    \ 3, 1)\nend", "  if n == 1 then\n    return [1]\n  elseif n == 2 then\n    return\
    \ [3]\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ end\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    elseif n == 1 then\n      return { 1 }\n    else\n      local t1, t2\
    \ = tri_aux(n - 1, { 1 }), tri_aux(n - 2, { 1 })\n      local t3 = t1 + t2\n \
    \     return { t1 , t2 , t3 }\n    end\n  end\n  return tri_aux(n, { 1 })\nend",
  "  if n == 1 then\n    return { 1 }\n  elseif n == 2 then\n    return { 1, 2 }\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  end\nend", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local\
    \ i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n \
    \   table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    ", "  local function tri_aux(n, tri_aux, tri_sum)\n\
    \    if n == 0 then\n      tri_aux[1] = tri_sum\n      return\n    end\n    tri_aux[1]\
    \ = tri_sum + n / 2\n    tri_aux[2] = tri_aux[1]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[2]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\
    \ + tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[3]\n    tri_aux[2] = tri_aux[3]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3] + tri_aux[1]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\
    \ + tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[3]\n    tri_aux[2] = tri_aux[3]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3] + tri_aux[1]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\
    \ + tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[3]\n    tri_aux[2] = tri_aux[3]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3] + tri_aux[1]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\
    \ + tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[3]\n    tri_aux[2] = tri_aux[3]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3] + tri_aux[1]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\
    \ + tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[3]\n    tri_aux[2] = tri_aux[3]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3] + tri_aux[1]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[3]\n", "  local function tri_aux(n, acc)\n    if n == 0 then\n   \
    \   return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local\
    \ tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1 + tri_aux_1)\n    return tri_aux_1\
    \ + tri_aux_2 + tri_aux_2\n  end\n  return tri_aux(n, 3)\nend", "  local function\
    \ tri_aux(n, a, b, c)\n    if n == 0 then\n      return c\n    end\n    if n ==\
    \ 1 then\n      return a\n    end\n    return tri_aux(n - 1, b, a + b, c + a)\n\
    \  end\n  return tri_aux(n, 0, 0, 0)\nend", "  local a = {}\n  local b = 1\n \
    \ local c = 3\n  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = b\n    local\
    \ tmp = b\n    b = c\n    c = d + tmp\n    d = tmp\n    n = n - 1\n  end\n  return\
    \ a\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc +\
    \ acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n\
    \  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ",
  "    local function tri_aux(n, acc)\n        if n == 0 then\n            return\
    \ acc\n        elseif n == 1 then\n            return { acc[1] }\n        else\n\
    \            return tri_aux(n - 1, { acc[1], acc[n] }) + tri_aux(n - 2, { acc[n],\
    \ acc[n + 1] })\n        end\n    end\n    return tri_aux(n, { 1, 1 })\nend",
  "  local function f(n)\n    if n == 1 then\n      return 1\n    elseif n == 2 then\n\
    \      return 3\n    elseif n % 2 == 0 then\n      return f(n - 1) + f(n - 2)\
    \ + f(n - 3)\n    else\n      return f(n - 1) + f(n - 2) + f(n - 3) + f(n - 4)\n\
    \    end\n  end\n  return f(n)\nend", "  local results = {}\n  local i = 1\n \
    \ while i <= n do\n    local a = i\n    local b = i + 1\n    local c = i + 2\n\
    \    local d = a + b + c\n    results[i] = d\n    i = d\n  end\n  return results\n\
    end", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i\
    \ = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n   \
    \ table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    ", "    local function tri_aux(n, acc)\n        if\
    \ n == 0 then\n            return acc\n        elseif n == 1 then\n          \
    \  return { acc[1] }\n        else\n            local a, b, c = tri_aux(n - 1,\
    \ { acc[1] })\n            return tri_aux(n - 2, { acc[2], acc[1], a }) + tri_aux(n\
    \ - 1, { b, c })\n        end\n    end\n    return tri_aux(n, { 1 })\nend", " \
    \ local function tri_aux(n)\n    if n == 1 then\n      return {n}\n    elseif\
    \ n == 2 then\n      return {n, n}\n    elseif n % 2 == 0 then\n      return {tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri(n - 1)}\n    else\n      return {tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri(n - 1) + tri(n - 2)}\n    end\n  end\n  return tri_aux(n)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 =\
    \ tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + acc\n  end\n\
    \  return tri_aux(n, 3)\nend", "  local a = {}\n  local i = 1\n  while i <= n\
    \ do\n    table.insert(a, i)\n    i = i + 2\n  end\n  return a\nend", "  local\
    \ function tri_aux(n)\n    if n == 1 then\n      return {n}\n    elseif n == 2\
    \ then\n      return {n, n}\n    elseif n % 2 == 0 then\n      return {n, tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri(n - 3)}\n    else\n      return {n, tri_aux(n -\
    \ 1) + tri_aux(n - 2) + tri(n - 3)}\n    end\n  end\n  return tri_aux(n)\nend",
  "  local result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ i)\n    i = i + 2\n  end\n  return result\nend", "  local results = {}\n  local\
    \ i = 1\n  while i <= n do\n    local a = i\n    local b = i + 2\n    local c\
    \ = i + 3\n    i = b\n    results[#results + 1] = a\n    results[#results + 1]\
    \ = b\n    results[#results + 1] = c\n  end\n  return results\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    acc = tri_aux(n\
    \ - 3, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ function tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n % 2 ==\
    \ 0 then\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri(n - 1)\n    else\n\
    \      return tri_aux(n - 1) + tri_aux(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3)\n    end\n  end\n  return tri_aux(n)\nend", "  local function tri_aux(n,\
    \ a, b, c)\n    if n == 0 then\n      return {a, b, c}\n    end\n    if n == 1\
    \ then\n      return {a, a + b, a + b + c}\n    end\n    local new_a = a + b\n\
    \    local new_b = a + b + c\n    local new_c = a + b + c + a\n    return tri_aux(n\
    \ - 1, new_a, new_b, new_c)\n  end\n  return tri_aux(n, 0, 0, 0)\nend", "  local\
    \ results = {}\n  local i = 1\n  while i <= n do\n    local a = i\n    local b\
    \ = a + 1\n    local c = b + 1\n    local d = c + a\n    table.insert(results,\
    \ d)\n    i = d\n  end\n  return results\nend", "  local a = {}\n  local b = 1\n\
    \  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n   \
    \ table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n   \
    \ table.insert(a, c + d + b)\n    table.insert(a, c + d + b + a)\n    table.insert(a,\
    \ c + d + b + a + c)\n    table.insert(a, c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a)\n    table.insert(a, c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n\
    \    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b\
    \ + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d\
    \ + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a\
    \ + c + d + b + a + c + d + b + a + c + d + ", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return {n}\n    elseif n == 2 then\n      return {n,\
    \ n}\n    elseif n % 2 == 0 then\n      local a = tri_aux(n - 1)\n      local\
    \ b = tri_aux(n - 2)\n      local c = tri_aux(n - 3)\n      local d = tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n      return {a, b, c, d}\n    else\n\
    \      local a = tri_aux(n - 1)\n      local b = tri_aux(n - 2)\n      local c\
    \ = tri_aux(n - 3)\n      local d = tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 3)\n      return {a, b, c, d}\n    end\n  end\n  return tri_aux(n)\nend",
  "  local result = {1, n}\n  for i = 2, n do\n    table.insert(result, result[i-1]\
    \ + result[i-2])\n  end\n  return result\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, acc))) + tri(n - 2))\n   \
    \ return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local function f(n)\n\
    \    if n == 1 then\n      return 1\n    end\n    if n == 2 then\n      return\
    \ 3\n    end\n    if n % 2 == 0 then\n      return f(n - 1) + f(n - 2) + f(n -\
    \ 3)\n    else\n      return f(n - 1) + f(n - 2) + f(n - 3) + f(n - 4)\n    end\n\
    \  end\n  return f(n)\nend", "    local function tri_aux(n, a, b, c)\n       \
    \ if n == 0 then\n            return a, b, c\n        end\n        local d = tri_aux(n\
    \ - 1, a + b, c, a)\n        return d[1], d[2], d[3] + b\n    end\n    return\
    \ tri_aux(n, 0, 0, 1)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n \
    \ local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    ", "  local a = {}\n  local b = 1\n  local c\
    \ = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    ", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return {n}\n    elseif n ~= 0 then\n      local tri_aux1,\
    \ tri_aux2 = tri_aux(n-1), tri_aux(n-2)\n      return {tri_aux1 + tri_aux2 + tri_aux(n)}\n\
    \    end\n  end\n  return tri_aux(n)\nend", "  if n == 0 then\n    return {}\n\
    \  elseif n == 1 then\n    return {1}\n  elseif n == 2 then\n    return {{1},\
    \ {1, 2}}\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n  end\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local\
    \ d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n    table.insert(a, c)\n \
    \   table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a, b + d)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ b + c + b + d)\n    table.insert(a, c + b + b + d)\n    table.insert(a, b +\
    \ c + b + c + d)\n    table.insert(a, c + b + b + c + b + d)\n    table.insert(a,\
    \ b + c + b + c + b + c + d)\n    table.insert(a, c + b + b + c + b + c + b +\
    \ d)\n    table.insert(a, b + c + b + c + b + c + b + c + d)\n    table.insert(a,\
    \ c + b + b + c + b + c + b + c + b + d)\n    table.insert(a, b + c + b + c +\
    \ b + c + b + c + b + c + d)\n    table.insert(a, c + b + b + c + b + c + b +\
    \ c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + d)\n    table.insert(a, c + b + b + c + b + c + b + c + b +\
    \ c + b + c + b + c + d)\n    table.insert(a, b + c + b + c + b + c + b + c +\
    \ b + c + b + c + b + c + b + d)\n    table.insert(a, c + b + b + c + b + c +\
    \ b + c + b + c + b + c + b + c + b + c + d)\n    table.insert(a, b + c + b +\
    \ c + b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a,\
    \ c + b + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b +\
    \ d)\n    table.insert(a, b + c + b + c + b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + c + b + c + b + d)\n    table.insert(a, c + b + b + c + b +\
    \ c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n\
    \    table.insert(a, b + c + b + c + b + c + ", "  local result = {1}\n  local\
    \ i = 1\n  while i <= n do\n    table.insert(result, i)\n    i = i + 2\n  end\n\
    \  return result\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n\
    \    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n\
    \ - 2)))\n    end\n  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n,\
    \ a, b, c)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n\
    \      return b\n    end\n    return tri_aux(n - 1, b, a + b, c + a)\n  end\n\
    \  return tri_aux(n, 0, 0, 1)\nend", "  local a = {}\n  local b = 1\n  local c\
    \ = 3\n  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = b\n    local e = b +\
    \ c\n    local f = b + d\n    local g = e + f\n    local h = g + e\n    local\
    \ i = h + g\n    a[#a + 1] = i\n    b = e\n    c = f\n    d = g\n    n = n - 1\n\
    \  end\n  return a\nend", "  if n == 1 then\n    return [3]\n  elseif n == 2 then\n\
    \    return [1, 3]\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3)\n  end\nend", "  local result = {1}\n  local i = 1\n  while i <= n do\n\
    \    table.insert(result, i)\n    i = i + 2\n  end\n  return result\nend", " \
    \ local result = {1}\n  local i = 1\n  while i <= n do\n    local tmp = result[1]\n\
    \    result[1] = result[2] + result[1] + result[3]\n    result[2] = tmp\n    i\
    \ = i + 1\n  end\n  return result\nend", "  local function f(n)\n    if n == 1\
    \ then\n      return 3\n    elseif n == 2 then\n      return 1 + n / 2\n    else\n\
    \      return f(n - 1) + f(n - 2) + f(n - 3)\n    end\n  end\n  return f(n)\n\
    end", "  if n < 1 then return nil end\n  if n == 1 then return 3 end\n  if n %\
    \ 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) end\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend", "  local a =\
    \ {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, c + d + b)\n    table.insert(a, c + d + b + c)\n   \
    \ table.insert(a, c + d + b + c + d)\n    table.insert(a, c + d + b + c + d +\
    \ b)\n    table.insert(a, c + d + b + c + d + b + c)\n    table.insert(a, c +\
    \ d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b +\
    \ c + d + b + c + d + b + c + d + b)\n    table.insert(a, c + d + b + c + d +\
    \ b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b +\
    \ c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b +\
    \ c + d + b + c + d + b + c + d + b)\n    table.insert(a, c + d + b + c + d +\
    \ b + c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b +\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b)\n   \
    \ table.insert(a, c + d + b + c + d + b + c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c + d +\
    \ b + c + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, ", "   \
    \ local function tri_aux(n, a, b, c)\n        if n == 0 then\n            return\
    \ a, b, c\n        elseif n == 1 then\n            return b, a, c\n        else\n\
    \            local new_a, new_b, new_c = tri_aux(n - 1, b, c, a + b + c)\n   \
    \         return new_a, new_b, new_c\n        end\n    end\n    return tri_aux(n,\
    \ 0, 0, 1)\nend", "    local function tri_aux(n, a, b)\n        if n == 0 then\n\
    \            return a\n        elseif n == 1 then\n            return b\n    \
    \    else\n            return tri_aux(n - 1, a + b, b)\n        end\n    end\n\
    \    return tri_aux(n, 3, 1)\nend", "  local function tri_aux(n, a, b, c)\n  \
    \  if n == 0 then\n      return c\n    end\n    if n == 1 then\n      return a\n\
    \    end\n    return tri_aux(n - 1, b, a + b, c + a)\n  end\n  return tri_aux(n,\
    \ 0, 0, 0)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n    \
    \  return acc\n    end\n    \n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n\
    \    local tri_aux_2 = tri_aux(n - 2, acc + 1)\n    \n    local tri_aux_3 = tri_aux(n\
    \ - 3, acc + 1)\n    \n    local tri_aux_4 = tri_aux(n - 4, acc + 1)\n    \n \
    \   local tri_aux_5 = tri_aux(n - 5, acc + 1)\n    \n    local tri_aux_6 = tri_aux(n\
    \ - 6, acc + 1)\n    \n    return tri_aux_1 + tri_aux_2 + tri_aux_3 + tri_aux_4\
    \ + tri_aux_5 + tri_aux_6\n  end\n  \n  return tri_aux(n, 3)\nend", "  local a\
    \ = {}\n  local b = 1\n  local c = 3\n  while n ~= 0 do\n    a[#a + 1] = b\n \
    \   local d = b + c\n    b = c\n    c = d\n    n = n - 1\n  end\n  return a\n\
    end", "  local function tri_aux(n, tri_aux)\n    if n == 0 then\n      return\
    \ {}\n    end\n    local tri_aux1 = tri_aux(n - 1, tri_aux1)\n    local tri_aux2\
    \ = tri_aux(n - 2, tri_aux2)\n    local tri_aux3 = tri_aux(n - 3, tri_aux3)\n\
    \    local tri_aux4 = tri_aux(n - 4, tri_aux4)\n    local tri_aux5 = tri_aux(n\
    \ - 5, tri_aux5)\n    local tri_aux6 = tri_aux(n - 6, tri_aux6)\n    local tri_aux7\
    \ = tri_aux(n - 7, tri_aux7)\n    local tri_aux8 = tri_aux(n - 8, tri_aux8)\n\
    \    local tri_aux9 = tri_aux(n - 9, tri_aux9)\n    local tri_aux10 = tri_aux(n\
    \ - 10, tri_aux10)\n    local tri_aux11 = tri_aux(n - 11, tri_aux11)\n    local\
    \ tri_aux12 = tri_aux(n - 12, tri_aux12)\n    local tri_aux13 = tri_aux(n - 13,\
    \ tri_aux13)\n    local tri_aux14 = tri_aux(n - 14, tri_aux14)\n    local tri_aux15\
    \ = tri_aux(n - 15, tri_aux15)\n    local tri_aux16 = tri_aux(n - 16, tri_aux16)\n\
    \    local tri_aux17 = tri_aux(n - 17, tri_aux17)\n    local tri_aux18 = tri_aux(n\
    \ - 18, tri_aux18)\n    local tri_aux19 = tri_aux(n - 19, tri_aux19)\n    local\
    \ tri_aux20 = tri_aux(n - 20, tri_aux20)\n    local tri_aux21 = tri_aux(n - 21,\
    \ tri_aux21)\n    local tri_aux22 = tri_aux(n - 22, tri_aux22)\n    local tri_aux23\
    \ = tri_aux(n - 23, tri_aux23)\n    local tri_aux24 = tri_aux(n - 24, tri_aux24)\n\
    \    local tri_aux25 = tri_aux(n - 25, tri_aux25)\n    local tri_aux26 = tri_aux(n\
    \ - 26, tri_aux26)\n    local tri_aux27 = tri_aux(n - 27, tri_aux27)\n    local\
    \ tri_aux28 = tri_aux(", "  local result = {1}\n  local i = 1\n  while i <= n\
    \ do\n    table.insert(result, i)\n    i = i + 2\n  end\n  return result\nend",
  "  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return c\n    elseif\
    \ n == 1 then\n      return a\n    else\n      return tri_aux(n - 1, b, a + b,\
    \ b + c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux_1\
    \ = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + 1)\n \
    \   return tri_aux_1 + tri_aux_2 + tri_aux(n - 1, acc)\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local\
    \ i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n \
    \   table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a, c + d\
    \ + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + ", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    elseif n == 2 then\n\
    \      return tri_aux(n - 1, acc)\n    else\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, acc) + tri(n - 1)))\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc +\
    \ acc)\n    acc = tri_aux(n - 3, acc + acc)\n    return acc\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, b, a + b)\n  end\n  return tri_aux(n, 3, 1)\nend", "  local function f(n)\n\
    \    if n == 1 then\n      return {1}\n    end\n    local a, b, c = f(n-1), f(n-2),\
    \ f(n-3)\n    local sum = a[1]\n    for i = 1, #a do\n      sum = sum + b[i] +\
    \ c[i]\n    end\n    return sum\n  end\n  return f(n)\nend", "  local function\
    \ tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    elseif n == 1 then\n\
    \      return b\n    else\n      return tri_aux(n - 1, a + b, a + b + b) \n  \
    \  end\n  end\n  return tri_aux(n, 3, 1)\nend", "  if n == 1 then\n    return\
    \ [3]\n  elseif n == 2 then\n    return [1, 3]\n  elseif n % 2 == 0 then\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\nend", "  local a =\
    \ {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while i <=\
    \ n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, c + d)\n    table.insert(a, b + d)\n    table.insert(a, b\
    \ + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a, b + c + b + d)\n\
    \    table.insert(a, c + b + b + d)\n    table.insert(a, b + c + b + c + d)\n\
    \    table.insert(a, c + b + b + c + b + d)\n    table.insert(a, b + c + b + c\
    \ + b + c + d)\n    table.insert(a, c + b + b + c + b + c + b + d)\n    table.insert(a,\
    \ b + c + b + c + b + c + b + c + d)\n    table.insert(a, c + b + b + c + b +\
    \ c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c + b +\
    \ c + d)\n    table.insert(a, c + b + b + c + b + c + b + c + b + c + b + d)\n\
    \    table.insert(a, b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n\
    \    table.insert(a, c + b + b + c + b + c + b + c + b + c + b + c + b + c + b\
    \ + d)\n    table.insert(a, b + c + b + c + b + c + b + c + b + c + b + c + b\
    \ + c + b + c + b + d)\n    table.insert(a, c + b + b + c + b + c + b + c + b\
    \ + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, b + c + b\
    \ + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n\
    \    table.insert(a, c + b + b + c + b + c + b + c + b + c + b + c + b + c + b\
    \ + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, b + c + b\
    \ + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c\
    \ + b + c + b + c + b + c + b + d)\n    table.insert(a, c + b + b + c + b + c\
    \ + b", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while\
    \ n ~= 0 do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, c + d)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ b + d)\n    table.insert(a, c + b + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, c + b + c + d)\n    table.insert(a, b + c + b + d)\n    table.insert(a,\
    \ c + b + b + c)\n    table.insert(a, b + c + b + d)\n    table.insert(a, c +\
    \ b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b +\
    \ b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b +\
    \ c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b + c)\n\
    \    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a,\
    \ b + c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b +\
    \ c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c +\
    \ b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b +\
    \ c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b + c)\n\
    \    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a,\
    \ c + b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c +\
    \ b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b +\
    \ b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b +\
    \ c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b + c)\n\
    \    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a,\
    \ b + c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b +\
    \ c + b + c)\n    table.insert(a, c + b + b", "  local function tri_aux(n, a,\
    \ b, c)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n   \
    \   return b\n    end\n    return tri_aux(n - 1, b, a + b, c + a)\n  end\n  return\
    \ tri_aux(n, 0, 0, 1)\nend", "  local function tri_aux(n)\n    if n == 1 then\n\
    \      return 3\n    elseif n == 2 then\n      return 1 + n / 2\n    else\n  \
    \    return tri_aux(n - 1) + tri_aux(n - 2) + tri(n - 3)\n    end\n  end\n  return\
    \ tri_aux(n)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n  \
    \    return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1)\
    \ + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1)\
    \ + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend",
  "  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return {a, b, c}\n\
    \    end\n    if n == 1 then\n      return {a, b, c}\n    end\n    local new_a\
    \ = a\n    local new_b = b + n / 2\n    local new_c = c + n / 2\n    return tri_aux(n\
    \ - 1, new_a, new_b, new_c)\n  end\n  return tri_aux(n, 0, 0, 0)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux1, tri_aux2 = tri_aux(n - 1, acc + 1), tri_aux(n\
    \ - 2, acc + 2)\n    return tri_aux1 + tri_aux2\n  end\n  return tri_aux(n, 3)\n\
    end", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n\
    \ ~= 0 do\n    a[#a + 1] = d\n    local e\n    if n % 2 == 0 then\n      e = b\
    \ + c\n    else\n      e = b + c + d\n    end\n    b = c\n    c = d\n    d = e\n\
    \    n = n / 2\n  end\n  return a\nend", "  local function tri_aux(n, acc)\n \
    \   if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n\
    \    acc = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    \n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local\
    \ tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    \n    return tri_aux_1 + tri_aux_2\
    \ + acc\n  end\n  \n  return tri_aux(n, 3)\nend", "  local a = {}\n  local b =\
    \ 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, c + d + b + c)\n    table.insert(a,\
    \ c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d)\n    table.insert(a, c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b + c + d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c)\n\
    \    table.insert(a, c + d + b + c + d + b + c + d + b + c + d + b + c + d + b\
    \ + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c + d + b\
    \ + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a, c + d\
    \ + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b\
    \ + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c + d + b + c\
    \ + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, ", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux1,\
    \ tri_aux2, tri_aux3 = tri_aux(n - 1, acc), tri_aux(n - 2, acc + 1), tri_aux(n\
    \ - 3, acc + 2)\n    return tri_aux3, tri_aux2, tri_aux1\n  end\n  return tri_aux(n,\
    \ {})\nend", "  if n == 1 then\n    return 3\n  elseif n == 2 then\n    return\
    \ 1\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\n  end\n\
    end", "  local function tri_aux(n, a, b)\n    if n == 0 then\n      return {a}\n\
    \    elseif n == 1 then\n      return {a, b}\n    else\n      local c = a + b\n\
    \      a = b\n      b = c\n      return tri_aux(n - 1, c, b)\n    end\n  end\n\
    \  return tri_aux(n, 3, 1)\nend", "    local function tri_aux(n, acc)\n      \
    \  if n == 0 then\n            return acc\n        elseif n == 1 then\n      \
    \      acc[1] = 3\n            return acc\n        else\n            acc[1] =\
    \ tri_aux(n - 1, acc)\n            acc[2] = tri_aux(n - 2, acc)\n            acc[3]\
    \ = acc[1] + acc[2]\n            return acc\n        end\n    end\n    return\
    \ tri_aux(n, {})\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    end\n    acc = tri_aux(n - 1, acc + tri_aux(n - 2, acc))\n\
    \    if n % 2 == 1 then\n      acc = tri_aux(n - 1, acc + tri_aux(n - 2, acc))\n\
    \    end\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  if n < 3 then\n\
    \    return nil\n  else\n    local a = 1\n    local b = 2\n    local c = 3\n \
    \   local sum = 0\n    for i = 1, n do\n      sum = a + b + c\n      a = b\n \
    \     b = c\n      c = sum\n    end\n    return c\n  end\nend", "  local function\
    \ tri_aux(n, tri_aux)\n    if n == 1 then\n      table.insert(tri_aux, 1)\n  \
    \  elseif n == 2 then\n      table.insert(tri_aux, 3)\n    else\n      table.insert(tri_aux,\
    \ tri_aux(n - 1, tri_aux) + tri_aux(n - 2, tri_aux) + tri_aux(n - 3, tri_aux))\n\
    \    end\n  end\n  tri_aux(n, {})\nend", "  local a = {}\n  local b = 1\n  local\
    \ c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ", "    local function\
    \ tri_aux(n, acc)\n        if n == 1 then\n            table.insert(acc, 1)\n\
    \        else\n            table.insert(acc, tri_aux(n - 1, acc))\n          \
    \  table.insert(acc, tri_aux(n - 2, acc))\n        end\n        return acc\n \
    \   end\n    return tri_aux(n, {})\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
