name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a list of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n-- {1,\
  \ 3, 2, 8}\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n -\
    \ 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n      table.insert(tri_sum,\
    \ tri_sum[1])\n      return\n    end\n    tri_aux(n - 1, tri_aux, tri_sum)\n \
    \   tri_aux(n - 2, tri_aux, tri_sum)\n    tri_aux(n - 3, tri_aux, tri_sum)\n \
    \ end\n  tri_aux(n, {}, {})\n  return tri_sum\nend", "  local function tri_aux(n,\
    \ a, b)\n    if n == 0 then\n      return a\n    elseif n == 1 then\n      return\
    \ b\n    else\n      return tri_aux(n - 1, b, a + b)\n    end\n  end\n  return\
    \ tri_aux(n, 3, 1)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1)\
    \ + tri(n - 2))\n    if n % 2 == 0 then\n      tri_aux = tri_aux + tri(n - 1)\
    \ + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n %\
    \ 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n    end\n  \
    \  return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return {n}\n    end\n    local tri_aux1, tri_aux2 =\
    \ tri_aux(n-1), tri_aux(n-2)\n    tri_aux1.next = tri_aux\n    tri_aux2.next =\
    \ tri_aux\n    return tri_aux1.next + tri_aux2.next\n  end\n  return tri_aux(n)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    else\n      local t = tri_aux(n - 1, acc + n)\n      t[1] = t[1] + n\n  \
    \    t[2] = t[2] + n\n      return t\n    end\n  end\n  return tri_aux(n, {})\n\
    end", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n\
    \  elseif n == 2 then\n    return {{1}, {1, 2}}\n  else\n    local a = tri(n -\
    \ 1)\n    local b = tri(n - 2)\n    local c = tri(n + 1)\n    return a + b + c\n\
    \  end\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n \
    \ while n ~= 0 do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + b + d)", "  local function tri_aux(n, a,\
    \ b, c)\n    if n == 0 then\n      return {a, b, c}\n    end\n    local new_a\
    \ = a\n    local new_b = b\n    local new_c = c\n    if n % 2 == 0 then\n    \
    \  new_a = tri_aux(n - 1, new_a, new_b, new_c + new_a)\n      new_b = tri_aux(n\
    \ - 1, new_b, new_a + new_b, new_c)\n      new_c = tri_aux(n - 1, new_c, new_a\
    \ + new_b, new_c + new_b)\n    else\n      new_a = tri_aux(n - 1, new_a, new_b,\
    \ new_c + new_a)\n      new_b = tri_aux(n - 1, new_b, new_a + new_b, new_c)\n\
    \      new_c = tri_aux(n - 1, new_c, new_a + new_b, new_c + new_b)\n    end\n\
    \    return new_a, new_b, new_c\n  end\n  return tri_aux(n, 0, 0, 1)\nend", " \
    \ if n < 2 then\n    return {}\n  end\n  local a = {}\n  local b = 1\n  local\
    \ c = 3\n  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = d\n    local e\n  \
    \  if n % 2 == 0 then\n      e = b + c\n    else\n      e = b - c\n    end\n \
    \   local f = d + 1\n    b = c\n    c = e\n    d = f\n    n = n / 2\n  end\n \
    \ return a\nend", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ function tri_aux(n)\n    if n == 1 then\n      return {1}\n    elseif n == 2\
    \ then\n      return {1, 2}\n    elseif n % 2 == 0 then\n      local a = tri_aux(n\
    \ - 1)\n      local b = tri_aux(n - 2)\n      local c = tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n + 1)\n      return {a[1], a[2], b[1], c[1]}\n    else\n   \
    \   local a = tri_aux(n - 1)\n      local b = tri_aux(n - 2)\n      local c =\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n + 1)\n      return {a[1], a[2],\
    \ b[1], c[1], c[2]}\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      acc = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    end\n    return acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "    local function f(n)\n        if n == 1 then\n    \
    \        return 3\n        elseif n % 2 == 0 then\n            return 1 + f(n\
    \ - 1) + f(n - 2) + f(n - 3)\n        else\n            return f(n - 1) + f(n\
    \ - 2) + f(n - 3)\n        end\n    end\n    return f(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux_1\
    \ = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n\
    \    local tri_aux_3 = tri_aux(n - 3, acc + tri_aux_1 + tri_aux_2)\n    return\
    \ tri_aux_3\n  end\n  return tri_aux(n, 3)\nend", "    local a = {}\n    local\
    \ b = 1\n    local c = 3\n    for i = 1, n do\n        table.insert(a, b)\n  \
    \      table.insert(a, c)\n        b = c + b\n        c = b + c\n    end\n   \
    \ return a\nend", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    \n    local tri_aux = tri_aux(n - 1, acc + tri(n\
    \ - 1) + tri(n - 2))\n    \n    if n % 2 == 0 then\n      tri_aux = tri_aux +\
    \ tri(n - 1) + tri(n - 2)\n    end\n    \n    return tri_aux\n  end\n  \n  return\
    \ tri_aux(n, 3)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
