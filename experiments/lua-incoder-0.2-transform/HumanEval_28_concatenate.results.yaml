language: lua
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in ipairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  if #strings == 0 then\n    return ''\n  end\n  local result = strings[1]\n\
    \  for i = 2, #strings do\n    result = result .. strings[i]\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in ipairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in ipairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in ipairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local result = {}\n  for _, str in pairs(strings) do\n    table.insert(result,\
    \ str)\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
- exit_code: 0
  program: "-- Concatenate list of strings into a single string\n-- >>> concatenate({})\n\
    -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n\
    \  local s = ''\n  for _, v in pairs(strings) do\n    s = s .. v\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750439
