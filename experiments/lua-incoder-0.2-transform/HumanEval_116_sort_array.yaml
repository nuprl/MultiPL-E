name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
  \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
  -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function compare(lhs, rhs)\n    local ls = tostring(lhs)\n\
    \    local rs = tostring(rhs)\n    local lc = #ls\n    local rc = #rs\n    if\
    \ lc < rc then\n      return -1\n    elseif lc > rc then\n      return 1\n   \
    \ else\n      local l = 0\n      local r = lc\n      while l < rc do\n       \
    \ if ls[l] ~= rs[r] then\n          return ls[l] ~= rs[r]\n        else\n    \
    \      l = l + 1\n          r = r + 1\n        end\n      end\n      return l\
    \ == rc\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  --\
    \ Base case\n  if #arr == 1 then\n    return arr\n  end", "  -- Write your code\
    \ here\n  local function helper(arr, i, j)\n    if i == j then\n      arr[i],\
    \ arr[j] = arr[j], arr[i]\n    end\n  end\n  local function helper2(arr, i, j)\n\
    \    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n \
    \ local function helper3(arr, i, j)\n    if i == j then\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n    end\n  end\n  local function helper4(arr, i, j)\n    if\
    \ i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local\
    \ function helper5(arr, i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n  end\n  local function helper6(arr, i, j)\n    if i == j then\n\
    \      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local function helper7(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \  end\n  local function helper8(arr, i, j)\n    if i == j then\n      arr[i],\
    \ arr[j] = arr[j], arr[i]\n    end\n  end\n  local function helper9(arr, i, j)\n\
    \    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n \
    \ local function helper10(arr, i, j)\n    if i == j then\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n    end\n  end\n  local function helper11(arr, i, j)\n   \
    \ if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local\
    \ function helper12(arr, i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n  end\n  local function helper13(arr, i, j)\n    if i == j\
    \ then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local function\
    \ helper14(arr, i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n\
    \    end\n  end\n  local function helper15(arr, i, j)\n    if i == j then\n  \
    \    arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local function helper16(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \  end\n  local function helper17(arr, i, j)\n    if i == j then\n      arr[i],\
    \ arr[j] = arr[j], arr[i]\n    end\n  end\n  local function ", "  -- Write your\
    \ code here\n  local function helper(arr, i, j, k)\n    if i == j then\n     \
    \ arr[k] = arr[i]\n      return\n    end\n    if arr[i] > arr[j] then\n      helper(arr,\
    \ i, j, k + 1)\n      helper(arr, i + 1, j, k)\n    else\n      helper(arr, i,\
    \ j, k + 1)\n      helper(arr, i + 1, j + 1, k)\n    end\n  end\n  helper(arr,\
    \ 0, n-1, 0)\n  return arr\nend", "  -- We use an auxiliary array for counting\
    \ number of ones in binary representation.\n  -- This array is sorted in descending\
    \ order and contains number of ones in each element.\n  -- For example, for {1,\
    \ 5, 2, 3, 4} it is\n  -- [4, 3, 2, 5, 1]\n  -- This array is then sorted in ascending\
    \ order and contains decimal values of elements.\n  -- For example, for {-2, -3,\
    \ -4, -5, -6} it is\n  -- [-6, -5, -4, -3, -2]\n  -- Finally, we sort this array\
    \ in ascending order and return the result.\n  -- The result is\n  -- [4, 3, 2,\
    \ 5, 1]\n  -- This array is then converted to a table and returned.\n  local function\
    \ count_ones(arr)\n    local counts = {}\n    for _, x in ipairs(arr) do\n   \
    \   table.insert(counts, 0)\n      for i = 1, 8 do\n        if x % 2 == 1 then\n\
    \          table.insert(counts, counts[#counts+1] + 1)\n        end\n        x\
    \ = x / 2\n      end\n    end\n    table.sort(counts, function(a, b) return b\
    \ - a end)\n    return table.concat(counts, \"\")\n  end\n  -- We use auxiliary\
    \ array for counting number of ones in binary representation.\n  -- This array\
    \ is sorted in descending order and contains number of ones in each element.\n\
    \  -- For example, for {1, 5, 2, 3, 4} it is\n  -- [4, 3, 2, 5, 1]\n  -- This\
    \ array is then sorted in ascending order and contains decimal values of elements.\n\
    \  -- For example, for {-2, -3, -4, -5, -6} it is\n  -- [-6, -5, -4, -3, -2]\n\
    \  -- Finally, we sort this array in ascending order and return the result.\n\
    \  local function sort_array(arr)\n    local counts = {}\n    for _, x in ipairs(arr)\
    \ do\n      table.insert(counts, 0)\n      for i = 1, 8 do\n        if x % 2 ==\
    \ 1 then\n          table.insert(counts, counts[#counts+1] + 1)\n        end\n\
    \        x = x / 2\n      end\n    end\n    table.sort(counts, function(a, b)\
    \ return b - a end)\n    local results = {}\n    for _, x in ipairs(counts) do\n\
    \      table.insert(results, math.floor(x * 2^(#counts-1)))\n    end\n    table.sort(results,\
    \ function(a, b) return b - a end)\n    return table.concat(results, \"\")\n \
    \ end\n  -- We use auxiliary array for counting number of ones in binary representation.\n\
    \  -- This array is sorted in descending order and contains number of ones in\
    \ each element.\n  -- For example, ", "  -- Base case\n  if #arr == 0 then\n \
    \   return arr\n  end", "  -- We use bitwise operator to count number of 1s in\
    \ binary representation\n  -- of the numbers in arr\n  local function count_ones(x)\n\
    \    local count = 0\n    while x > 0 do\n      count = count + (x & 1)\n    \
    \  x = x >> 1\n    end\n    return count\n  end", "  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return rhs\n    end\n    if rhs == 0 then\n\
    \      return lhs\n    end\n    if lhs < rhs then\n      return -1\n    else\n\
    \      return 1\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend",
  "  -- We use binary representation for numbers with only one digit.\n  -- For numbers\
    \ with two digits, we sort them by their decimal value.\n  -- For numbers with\
    \ more than two digits, we sort them by their binary representation.\n  -- We\
    \ sort them by their decimal value if number of ones is equal,\n  -- otherwise\
    \ we sort them by their binary representation.\n  -- For numbers with more than\
    \ two digits, we sort them by their binary representation.\n  -- We sort them\
    \ by their decimal value if number of ones is equal,\n  -- otherwise we sort them\
    \ by their binary representation.\n  -- We sort them by their decimal value if\
    \ number of ones is equal,\n  -- otherwise we sort them by their binary representation.\n\
    \  -- We sort them by their decimal value if number of ones is equal,\n  -- otherwise\
    \ we sort them by their binary representation.\n  -- We sort them by their decimal\
    \ value if number of ones is equal,\n  -- otherwise we sort them by their binary\
    \ representation.\n  -- We sort them by their decimal value if number of ones\
    \ is equal,\n  -- otherwise we sort them by their binary representation.\n  --\
    \ We sort them by their decimal value if number of ones is equal,\n  -- otherwise\
    \ we sort them by their binary representation.\n  -- We sort them by their decimal\
    \ value if number of ones is equal,\n  -- otherwise we sort them by their binary\
    \ representation.\n  -- We sort them by their decimal value if number of ones\
    \ is equal,\n  -- otherwise we sort them by their binary representation.\n  --\
    \ We sort them by their decimal value if number of ones is equal,\n  -- otherwise\
    \ we sort them by their binary representation.\n  -- We sort them by their decimal\
    \ value if number of ones is equal,\n  -- otherwise we sort them by their binary\
    \ representation.\n  -- We sort them by their decimal value if number of ones\
    \ is equal,\n  -- otherwise we sort them by their binary representation.\n  --\
    \ We sort them by their decimal value if number of ones is equal,\n  -- otherwise\
    \ we sort them by their binary representation.\n  -- We sort them by their decimal\
    \ value if number of ones is equal,\n  -- otherwise we sort them by their binary\
    \ representation.\n  -- We sort them by their decimal value if number of ones\
    \ is equal,\n  -- otherwise we sort them by their binary representation.\n  --\
    \ We sort them by their decimal value if number of ones is equal,\n  -- otherwise\
    \ we sort them by their binary representation.\n  -- We sort them by their decimal\
    \ value if number of ones is equal,\n  ", "  local function helper(arr, i, n)\n\
    \    if i == n then\n      table.sort(arr)\n      return\n    end\n    local m\
    \ = math.floor(math.log2(i))\n    local left = i * 2\n    local right = left +\
    \ m\n    local mid = left + m\n    helper(arr, mid, right)\n    helper(arr, left,\
    \ mid)\n    helper(arr, mid + 1, right)\n  end\n  helper(arr, 0, #arr)\n  return\
    \ arr\nend", "  -- Base case\n  if #arr == 1 then\n    return arr\n  end", " \
    \ -- Sort by number of ones\n  local function count_ones(x)\n    local count =\
    \ 0\n    while x ~= 0 do\n      x = x >> 1\n      count = count + 1\n    end\n\
    \    return count\n  end\n  -- Sort by decimal value\n  local function sort_by_dec(x)\n\
    \    local count = 0\n    while x ~= 0 do\n      x = x >> 1\n      count = count\
    \ + 1\n    end\n    return count\n  end\n  -- Sort by number of ones\n  local\
    \ function sort_by_ones(x)\n    local count = 0\n    while x ~= 0 do\n      x\
    \ = x >> 1\n      count = count + 1\n    end\n    return count\n  end\n  -- Sort\
    \ by decimal value\n  local function sort_by_dec(x)\n    local count = 0\n   \
    \ while x ~= 0 do\n      x = x >> 1\n      count = count + 1\n    end\n    return\
    \ count\n  end\n  -- Sort by number of ones\n  local function sort_by_ones(x)\n\
    \    local count = 0\n    while x ~= 0 do\n      x = x >> 1\n      count = count\
    \ + 1\n    end\n    return count\n  end\n  -- Sort by decimal value\n  local function\
    \ sort_by_dec(x)\n    local count = 0\n    while x ~= 0 do\n      x = x >> 1\n\
    \      count = count + 1\n    end\n    return count\n  end\n  -- Sort by number\
    \ of ones\n  local function sort_by_ones(x)\n    local count = 0\n    while x\
    \ ~= 0 do\n      x = x >> 1\n      count = count + 1\n    end\n    return count\n\
    \  end\n  -- Sort by decimal value\n  local function sort_by_dec(x)\n    local\
    \ count = 0\n    while x ~= 0 do\n      x = x >> 1\n      count = count + 1\n\
    \    end\n    return count\n  end\n  -- Sort by number of ones\n  local function\
    \ sort_by_ones(x)\n    local count = 0\n    while x ~= 0 do\n      x = x >> 1\n\
    \      count = count + 1\n    end\n    return count\n  end\n  -- Sort by decimal\
    \ value\n  local function sort_by_dec(x)\n    local count = 0\n    while x ~=\
    \ 0 do\n      x = x >> 1\n      count = count + 1\n    end\n    return count\n\
    \  end\n  -- Sort by number of ones\n  local function sort_by_ones(x)\n    local\
    \ count = 0\n    while x ~= 0 do\n      x = x >> 1\n      count = count + 1\n\
    \    end\n    return count\n  end\n  -- Sort by decimal value", "  -- We sort\
    \ by number of ones in their binary representation\n  -- then by decimal value.\n\
    \  -- This way we get descending order for similar number of ones.\n  -- We also\
    \ get ascending order for numbers with same number of ones.\n  -- We use binary\
    \ representation of numbers as they have less number of ones\n  -- than decimal\
    \ numbers.\n  local function compare(lhs, rhs)\n    local lhs_bin = bit.lshift(lhs,\
    \ 8)\n    local rhs_bin = bit.lshift(rhs, 8)\n    local lhs_ones = bit.rshift(lhs_bin,\
    \ 7)\n    local rhs_ones = bit.rshift(rhs_bin, 7)\n    if lhs_ones > rhs_ones\
    \ then\n      return 1\n    elseif lhs_ones < rhs_ones then\n      return -1\n\
    \    else\n      return lhs_bin < rhs_bin\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  -- Base case\n  if #arr == 1 then\n    return arr\n  end",
  "  -- Write your code here\n  local function helper(arr, i, j)\n    if i == j then\n\
    \      arr[i], arr[j] = arr[j], arr[i]\n    elseif arr[i] == 1 then\n      helper(arr,\
    \ i + 1, j)\n      helper(arr, i, j - 1)\n    elseif arr[j] == 1 then\n      helper(arr,\
    \ i + 1, j)\n    else\n      helper(arr, i + 1, j - 1)\n      helper(arr, i, j)\n\
    \    end\n  end\n  helper(arr, 1, #arr)\n  return arr\nend", "  local function\
    \ helper(arr, i, n)\n    if i == n then\n      table.sort(arr)\n      return\n\
    \    end\n    helper(arr, i + 1, n)\n    local m = math.floor(math.log2(i + 1))\n\
    \    local k = math.floor(math.log2(n - i))\n    local tmp = arr[i]\n    arr[i]\
    \ = arr[k]\n    arr[k] = tmp\n    helper(arr, i + 1, n)\n  end\n  helper(arr,\
    \ 1, #arr)\n  return arr\nend", "  -- Base case\n  if #arr == 0 then\n    return\
    \ arr\n  end", "  -- base case\n  if #arr == 0 then\n    return arr\n  end", " \
    \ local function compare(lhs, rhs)\n    local function bin2dec(n)\n      local\
    \ s = ''\n      while n ~= 0 do\n        s, n = math.modf(math.floor(n/2)), n\
    \ - math.floor(n/2)\n      end\n      return s\n    end\n    local function dec2bin(n)\n\
    \      local s = ''\n      while n ~= 0 do\n        s, n = math.floor(n*2), math.floor(n/2)\n\
    \      end\n      return s\n    end\n    local function bin2dec2(lhs, rhs)\n \
    \     return bin2dec(lhs) < bin2dec(rhs) and 1 or -1\n    end\n    local function\
    \ dec2bin2(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs) and 1 or -1\n \
    \   end\n    local function dec2bin3(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs)\
    \ and -1 or 1\n    end\n    local function dec2bin4(lhs, rhs)\n      return dec2bin(lhs)\
    \ < dec2bin(rhs) and -1 or 1\n    end\n    local function dec2bin5(lhs, rhs)\n\
    \      return dec2bin(lhs) < dec2bin(rhs) and -1 or 1\n    end\n    local function\
    \ dec2bin6(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs) and -1 or 1\n \
    \   end\n    local function dec2bin7(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs)\
    \ and -1 or 1\n    end\n    local function dec2bin8(lhs, rhs)\n      return dec2bin(lhs)\
    \ < dec2bin(rhs) and -1 or 1\n    end\n    local function dec2bin9(lhs, rhs)\n\
    \      return dec2bin(lhs) < dec2bin(rhs) and -1 or 1\n    end\n    local function\
    \ dec2bin10(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs) and -1 or 1\n\
    \    end\n    local function dec2bin11(lhs, rhs)\n      return dec2bin(lhs) <\
    \ dec2bin(rhs) and -1 or 1\n    end\n    local function dec2bin12(lhs, rhs)\n\
    \      return dec2bin(lhs) < dec2bin(rhs) and -1 or 1\n    end\n    local function\
    \ dec2bin13(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs) and -1 or 1\n\
    \    end\n    local function dec2bin14(lhs, rhs)\n      return dec2bin(", "  --\
    \ Sort array in ascending order based on number of ones in binary representation\n\
    \  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3,\
    \ 4})\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in ascending order based on decimal\
    \ value\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>>\
    \ sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3,\
    \ 4})\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in descending order based on number\
    \ of ones in binary representation\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n\
    \  -- {4, 3, 2, 1, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, true)\n  -- {-6,\
    \ -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0, 1, 2,\
    \ 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n  -- {1, 2, 3, 4, 5}\n  --\
    \ >>> sort_array({-2, -3, -4, -5, -6}, true)\n  -- {-6, -5, -4, -3, -2}\n  --\
    \ >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0, 1, 2, 3, 4}\n  -- Sort array\
    \ in descending order based on decimal value\n  -- >>> sort_array({1, 0, 2, 3,\
    \ 4}, true)\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n\
    \  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, true)\n  -- {-6,\
    \ -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0, 1, 2,\
    \ 3, 4}\n  -- Sort array in ascending order based on number of ones in binary\
    \ representation\n  -- >>> sort_array({1, 5, 2, 3, 4}, false)\n  -- {4, 3, 2,\
    \ 1, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, false)\n  -- {-6, -5, -4, -3,\
    \ -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, false)\n  -- {0, 1, 2, 3, 4}\n  --\
    \ >>> sort_array({1, 5, 2, 3, 4}, false)\n  --"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
