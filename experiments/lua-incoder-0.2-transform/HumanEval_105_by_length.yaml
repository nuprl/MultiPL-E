name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2, 1,\
  \ 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
  \ 'One'}\n-- If the array is empty, return an empty array:\n-- >>> by_length({})\n\
  -- {}\n-- If the array has any strange number ignore it:\n-- >>> by_length({1, -1,\
  \ 55})\n-- {'One'}\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n\
    \    if length == 0 then\n      length = nil\n    end\n    if length == nil then\n\
    \      length = i\n    end\n    local digit = math.floor(arr[i] / 10^length)\n\
    \    local name = string.format(\"%g\", arr[i] % 10^length)\n    if digit ~= 0\
    \ then\n      result[digit] = name\n    end\n  end\n  return result\nend", " \
    \ local result = {}\n  local length = #arr\n  for i = 1, length do\n    local\
    \ value = arr[i]\n    if value >= 1 and value <= 9 then\n      table.insert(result,\
    \ value)\n    end\n  end\n  if #result == 0 then\n    return {}\n  end\n  table.sort(result)\n\
    \  for i = 1, length do\n    arr[i] = result[i]\n  end\n  local names = {}\n \
    \ for i = 1, length do\n    local value = arr[i]\n    local name = names[i]\n\
    \    if value == 1 then\n      arr[i] = \"One\"\n      names[i] = \"One\"\n  \
    \  elseif value == 2 then\n      arr[i] = \"Two\"\n      names[i] = \"Two\"\n\
    \    elseif value == 3 then\n      arr[i] = \"Three\"\n      names[i] = \"Three\"\
    \n    elseif value == 4 then\n      arr[i] = \"Four\"\n      names[i] = \"Four\"\
    \n    elseif value == 5 then\n      arr[i] = \"Five\"\n      names[i] = \"Five\"\
    \n    elseif value == 6 then\n      arr[i] = \"Six\"\n      names[i] = \"Six\"\
    \n    elseif value == 7 then\n      arr[i] = \"Seven\"\n      names[i] = \"Seven\"\
    \n    elseif value == 8 then\n      arr[i] = \"Eight\"\n      names[i] = \"Eight\"\
    \n    elseif value == 9 then\n      arr[i] = \"Nine\"\n      names[i] = \"Nine\"\
    \n    end\n  end\n  return arr\nend", "  local result = {}\n  for i = 1, #arr\
    \ do\n    local num = arr[i]\n    if num >= 1 and num <= 9 then\n      result[#result\
    \ + 1] = string.format(\"%g\", num)\n    end\n  end\n  table.sort(result)\n  for\
    \ i = 1, #result do\n    result[i] = by_length(result[i])\n  end\n  return result\n\
    end", "  local result = {}\n  for i = 1, #arr do\n    local value = arr[i]\n \
    \   if value < 1 or value > 9 then\n      table.insert(result, value)\n    else\n\
    \      local index = math.floor((value - 1) * 10)\n      table.insert(result,\
    \ string.rep(\"One\", index)) .. string.rep(\"Two\", index - 1) .. string.rep(\"\
    Three\", index - 2) .. string.rep(\"Four\", index - 3) .. string.rep(\"Five\"\
    , index - 4) .. string.rep(\"Six\", index - 5) .. string.rep(\"Seven\", index\
    \ - 6) .. string.rep(\"Eight\", index - 7) .. string.rep(\"Nine\", index - 8))\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n\
    \    local value = arr[i]\n    if value ~= nil then\n      result[#result + 1]\
    \ = string.format(\"%g\", value)\n    end\n  end\n  table.sort(result)\n  for\
    \ i = 1, #result do\n    result[#result + 1] = string.format(\"%g\", result[i])\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n    local\
    \ value = arr[i]\n    if value then\n      result[value] = arr[i]\n    end\n \
    \ end\n  return result\nend", "  local result = {}\n  for i = 1, #arr do\n   \
    \ local length = arr[i]\n    if length == nil then\n      length = arr[i]\n  \
    \  end\n    if length == 1 or length == 2 or length == 3 or length == 4 or length\
    \ == 5 then\n      result[#result + 1] = arr[i - 1]\n    elseif length == 6 then\n\
    \      result[#result + 1] = arr[i - 1]\n      result[#result + 1] = arr[i - 2]\n\
    \      result[#result + 1] = arr[i - 3]\n      result[#result + 1] = arr[i - 4]\n\
    \      result[#result + 1] = arr[i - 5]\n      result[#result + 1] = arr[i - 6]\n\
    \    elseif length == 7 then\n      result[#result + 1] = arr[i - 1]\n      result[#result\
    \ + 1] = arr[i - 2]\n      result[#result + 1] = arr[i - 3]\n      result[#result\
    \ + 1] = arr[i - 4]\n      result[#result + 1] = arr[i - 5]\n      result[#result\
    \ + 1] = arr[i - 6]\n      result[#result + 1] = arr[i - 7]\n    elseif length\
    \ == 8 then\n      result[#result + 1] = arr[i - 1]\n      result[#result + 1]\
    \ = arr[i - 2]\n      result[#result + 1] = arr[i - 3]\n      result[#result +\
    \ 1] = arr[i - 4]\n      result[#result + 1] = arr[i - 5]\n      result[#result\
    \ + 1] = arr[i - 6]\n      result[#result + 1] = arr[i - 7]\n      result[#result\
    \ + 1] = arr[i - 8]\n    elseif length == 9 then\n      result[#result + 1] =\
    \ arr[i - 1]\n      result[#result + 1] = arr[i - 2]\n      result[#result + 1]\
    \ = arr[i - 3]\n      result[#result + 1] = arr[i - 4]\n      result[#result +\
    \ 1] = arr[i - 5]\n      result[#result + 1] = arr[i - 6]\n      result[#result\
    \ + 1] = arr[i - 7]\n      result[#result + 1] = arr[i - 8]\n      result[#result\
    \ + 1] = arr[i - 9]\n    else\n      result[#result + 1] = arr[i - 1]\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, #arr do\n  \
    \  local value = arr[i]\n    if value < 1 or value > 9 then\n      table.insert(result,\
    \ value)\n    else\n      local index = math.floor((value - 1) * 10)\n      table.insert(result,\
    \ string.rep(\"One\", index), string.rep(\"Two\", index), string.rep(\"Three\"\
    , index), string.rep(\"Four\", index), string.rep(\"Five\", index), string.rep(\"\
    Six\", index), string.rep(\"Seven\", index), string.rep(\"Eight\", index), string.rep(\"\
    Nine\", index))\n    end\n  end\n  return result\nend", "  local result = {}\n\
    \  for i = 1, #arr do\n    local length = arr[i]\n    if length == nil then\n\
    \      length = i\n    end\n    if length < 1 or length > 9 then\n      -- Ignore\
    \ strange numbers\n      result[#result + 1] = arr[i]\n    else\n      local index\
    \ = math.floor((length - 1) / 10)\n      result[#result + 1] = arr[i] .. by_length({arr[i\
    \ + 1], arr[i + 2], arr[i + 3], arr[i + 4], arr[i + 5]})\n      arr[i + index]\
    \ = nil\n    end\n  end\n  return result\nend", "  local result = {}\n  local\
    \ i = 0\n  while i < #arr do\n    local value = arr[i]\n    local length = math.floor(math.log(value,\
    \ 10))\n    if length == 0 then\n      length = 10\n    end\n    local digit =\
    \ math.pow(10, length)\n    local name = string.format(\"%g\", value/digit)\n\
    \    if length < 10 then\n      name = string.format(\"%g\", value)\n    end\n\
    \    result[#result + 1] = name\n    i = i + 1\n  end\n  return result\nend",
  "  local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n    if value\
    \ ~= nil then\n      local name = tonumber(tostring(value))\n      if name ~=\
    \ nil then\n        result[#result + 1] = name\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b) return a < b end)\n  for i = 1, 9 do\n    local value = arr[i]\n\
    \    if value ~= nil then\n      local name = tonumber(tostring(value))\n    \
    \  if name ~= nil then\n        result[#result + 1] = name\n      end\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n    local\
    \ value = arr[i]\n    if value ~= nil then\n      result[#result + 1] = by_length({value})\n\
    \    end\n  end\n  if #arr > 0 then\n    for i = 1, #arr do\n      local value\
    \ = arr[i]\n      if value ~= nil then\n        result[#result + 1] = by_length({value})\n\
    \      end\n    end\n  end\n  return result\nend", "  local result = {}\n  for\
    \ i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    arr[i]\
    \ = result[i]\n  end\n  for i = 1, 9 do\n    arr[i] = \"One\"\n  end\n  return\
    \ arr\nend", "  local result = {}\n  local i = 0\n  while i < #arr do\n    local\
    \ value = arr[i]\n    if value >= 1 and value <= 9 then\n      table.insert(result,\
    \ value)\n    else\n      break\n    end\n    i = i + 1\n  end\n  if #result ==\
    \ 0 then\n    return {}\n  end\n  table.sort(result)\n  for i = #result, 1, -1\
    \ do\n    arr[i] = result[i]\n  end\n  for i = 1, 10 do\n    local value = tostring(i)\n\
    \    arr[#arr + 1] = value\n  end\n  return arr\nend", "  local result = {}\n\
    \  for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n     \
    \ result[#result + 1] = by_length(value) or value\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length <= 9 then\n      result[#result + 1] = by_length[length](arr[i])\n\
    \    else\n      result[#result + 1] = by_length[length]\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for i = 1, #arr do\n    local num = arr[i]\n\
    \    if num < 1 or num > 9 then\n      table.insert(result, num)\n    else\n \
    \     local index = math.floor(math.log(num, 10))\n      table.insert(result,\
    \ tostring(num))\n      table.insert(result, tostring(index))\n    end\n  end\n\
    \  return result\nend", "  local result = {}\n  for i = 1, #arr do\n    local\
    \ length = arr[i]\n    if length > 0 and length <= 9 then\n      result[length]\
    \ = arr[i]\n    end\n  end\n  return result\nend", "  local result = {}\n  for\
    \ i = 1, #arr do\n    local num = arr[i]\n    if num < 1 or num > 9 then\n   \
    \   table.insert(result, num)\n    else\n      local digit = math.floor((num -\
    \ 1) / 10)\n      local name = string.format(\"%c\", num - 10 * digit)\n     \
    \ table.insert(result, name)\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i = 1, 9 do\n    local num = arr[i]\n    if num ~= nil then\n\
    \      result[#result + 1] = by_length_helper(num, i)\n    end\n  end\n  return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
